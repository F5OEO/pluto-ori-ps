
#define VERSION 0x0042 		@: v0.43

#define INFO_STRING			"dvbs2neon0v43 : TS to DVB-S2 encapsulator; GSE, multistream, dummy frames"

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon.S
@:
@:	(C) Brian Jordan, G4EWJ, 2020-2022, g4ewj at yahoo dot com
@:
@:	Transport stream packet to DVB-S2 BB frame and symbols converter for ARM 
@:	Accepts 188 byte packets or GSE data and produces DVB-S2 frames as symbols or BB frame
@:	Uses Neon instructions, so will not run on an RPi Zero / 1
@:	Supports GSE continuous (Global Stream Encapsulation)
@:	Supports DVB-S2 multistream
@:	Supports all Normal frame and Short frame FECs
@:  Supports rolloff 0.35, 0.25, 0.20 (also 0.15, although not in the DVB-S2 spec)
@:	Supports pilot tones
@:
@:	For FEC 3/4 APSK16 symbol output, the approximate Normal frame processing time is 220us on an RPi3 
@:
@:  Output formats are:
@				 		OUTPUT_FORMAT_SYMBOLS (1 per byte)
@:						OUTPUT_FORMAT_BBFRAME
@:
@:	The last BB frame created may be returned separately
@:	A supplied BB frame may be converted to symbols
@:
@:	Parts derived from DATV-Express and RPiDATV
@:	Thanks to G4GUO and F5OEO for their help
@:
@:	This software is provided free for non-commercial amateur radio use.
@:	It has no warranty of fitness for any purpose.
@:	Generation of a DVB-S2 transport stream may require a licence.
@:	Use at your own risk.
@:
@:	If @ is not the comment character for your assembler, search and replace @: with yours.
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Change history
@:
@:	dvbs2neon versions:
@:
@:	2023-02-20	v0.43	Corrected problem where OUTPUT_FORMAT_BBFRAME was ignored
@:	2023-02-19	v0.42	Added GSE
@:						Added dummy frame creation
@:						Changed output metadata format (except for symbol count)
@:	2022-11-23	v0.41	BB frame is now a selectable output format
@:	2022-05-03	v0.40	get last BB frame function
@:						accept BB frame and convert to symbols
@:	2020-12-30	v0.30	added short frames
@:						added frame type, constellation and FEC in output metadata
@:						removed FIR filtering
@:						*** v0.30 is used by some versions of F5OEO's Pluto software
@:  2020-12-14  v0.25   corrected number of pilot blocks for QPSK
@:                      corrected symbol count in output data for QPSK with pilots
@:                      corrected efficiencies for QPSK with pilots
@:	2020-04-03	v0.24	added FIR fast table filtering for QPSK, rolloff 0.35, 16x upsample, 513 taps
@:						removed IQ output format
@:						check for symbol output complete at the start of the inner loop
@:						  to prevent the output buffers overflowing too much 
@:						added upsample values and output format to the meta data before the returned pointer
@:	2020-03-29	v0.22	for symbols output, put the 2 byte symbol count at the start of the output buffer
@:						the pointer returned is still the start of the symbols
@:						so the symbol count is *(uint16*)((uint32)pointer-2)	
@:	2020-03-28	v0.21	returns the correct frame output buffer address for symbol output (base+2)	
@:	2020-03-28	v0.20	first major release - see above for functionality	
@:	2019-10-21	v0.10	first beta test release - not tested live - FECs 1/4, 3/4, 5/6	
@:
@:	dvbs2arm versions:
@:
@:	2019-09-29	v1.32	rounded up efficiency values
@:	2019-09-15	v1.31	added FEC 5/6
@:	2018-04-18	v1.30	corrected rolloff value in BB header
@:	2018-02-22	v1.29	corrected some typos and added more comments
@:	2018-02-12	v1.28	added FEC 1/4, made rolloff selectable, added efficiency calculation
@:	2018-02-02	v1.07	symbol scrambler/splitter speed increased
@:						corrected some typos and added more comments
@:	2018-01-28	v1.01	first release
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	External entry points
@:
@:	Only these external entry points are required 
@:	The calling requirements for other routines are shown for information only
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.global dvbs2neon_control
.global dvbs2neon_packet
.global dvbs2neon_gsedata
	

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon_control 
@:
@:	Calling from C:
@:		int32 dvbs2neon_control (uint32 stream, uint32 command, uint32 param1, uint32 param2) ;
@:
@:	Accepts a stream number, a command and 2 parameters
@:	Returns a status indication; < 0 is an error
@:	All registers except r0 are restored to their original values
@:
@:	command name		stream		command param1					param2			return 
@:						(r0)		(r1)	(r2)					(r3)			(<0 = error)
@:	--------------------------------------------------------------------------------------------
@:	CONTROL_RESET_FULL				0		buffer pool address		buffer size		version		   
@:	CONTROL_RESET_STREAM			1		multistream number		datamode		0		 
@:	CONTROL_SET_PARAMETERS			2		param block address		none			0
@:	CONTROL_SET_OUTPUT_BUFFER		3		buffer address			none			0
@:	CONTROL_GET_EFFICIENCY			4		none					none			decimal value
@:	CONTROL_GET_INFO				5		none					none			info string pointer 
@:	CONTROL_GET_LAST_BBFRAME		6		user buffer pointer		none			pointer to start of BB frame data
@:	CONTROL_CONVERT_BBFRAME			7		input buffer pointer	output . . .	pointer to start of symbols	
@:	CONTROL_GET_DATAFIELD_SIZE		8		none					none			decimal value, bytes
@:	CONTROL_GET_SYMBOLS_PER_FRAME 	9		none					none			decimal value, symbols
@:	CONTROL_GET_DUMMY_FRAME		 	10		user buffer pointer		none			pointer to 3330 symbols
@:
@:	Version 12.34 would be returned as 0x00001234
@:
@:	When resetting a stream, normal frame, FEC 2/3, rolloff 0.35 and pilots off are selected as defaults
@:
@:	The recommended size for the supplied buffer pool is 4 * 36 * 1024 bytes (512 byte alignment recommended)
@:	The recommended size for individual buffers is 36 * 1024 bytes (128 byte alignment recommended)
@:  
@:	The buffer area is used to cycle around 4 output buffers
@:	It is often in non-cached ram used for DMA
@:	Alternatively, output buffers for each stream may be managed manually using the SET_OUTPUT_BUFFER command
@:
@:	Parameters can be changed on the fly without any loss of data
@:
@:	The effiency value is used to determine the required bit rate of the incoming data
@:	Bit rate = symbol_rate * efficiency / 1,000,000
@:	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Metadata returned 
@:
@:	New positions for v43 - item_count is unaffected
@:
@:	uint8[]	filler			start of buffer
@:	uint16	data_mode ;
@:	uint16	roll_off ;
@:	uint16	pilots_active ;
@:	uint16	frame_type ;
@:  uint16	constellation ;
@:	uint16	fec ;
@:	uint16	output_format ;
@:	uint16	item_count ;
@:	uint8[]	data			*** the pointer returned always points to the actual data, which starts here **
@:
@:	metadata in version v41 and earlier
@:
@:	uint8[]	filler			start of buffer
@:	uchar	unused0 ;
@:	uchar	unused1 ;
@:	uchar	unused2 ;
@:  uchar	frame_type ;		// 0, 0x10 ==> NORMAL, SHORT
@:	uchar	constellation ;		// 0 - 3   ==> QPSK, 8PSK, 16APSK, 32APSK
@:	uchar	fec	;				// 0 - 10  ==> 1/4 - 9/10
@:	uchar	unused3 ;
@:	uchar	output_format ;		// OUTPUT_FORMAT_SYMBOLS or OUTPUT_FORMAT_BBFRAME
@:	uint16	item count ;		// the number of symbols (1 per byte) or BB frame bytes
@:	uchar	data[] ;			// *** the pointer returned always points to the actual data here ***
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	 parameters structure (address passed by CONTROL_SET_PARAMETERS)
@:
@: 	this is compatible with the parameter structure of DATV-Express
@:
@: 	the parameter values are also compatible
@:
@:		struct 
@:		{
@:			uint32				frame_type ;
@:			uint32				fec ;
@:			uint32				roll_off ;
@:			uint32				constellation ;
@:			uint32				pilots ;
@:			uint32				output_format ;		// dummy_frame in DATV-Express
@:		} DVB2FrameFormat ;	
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Typical use:
@:
@:	#define STREAM0					0
@:	#define DATAMODE_TS				0
@:	#define DATAMODE_GSECONTINUOUS	1
@:	#define MULTISTREAM_OFF			0
@:
@:		DVB2FrameFormat		fmt ;
@:
@:	// configure parameters
@:
@:		memset (&fmt, 0, sizeof(fmt)) ;
@:
@:		fmt.frame_type		= FRAME_NORMAL
@:		fmt.fec				= CR_3_4 ;
@:		fmt.roll_off		= RO_0_20 ;
@:		fmt.constellation	= M_16APSK ;
@:		fmt.pilots			= PILOTS_ON ;
@:		fmt.dummy_frame		= OUTPUT_FORMAT_SYMBOLS ;
@:
@:  // pass output buffer pool address and size and completely reset
@:
@:		dvbs2neon_control (0, CONTROL_RESET_FULL, &buffer144k, sizeof(buffer144k)) ;
@:
@:  // reset stream zero and pass multistream and data mode 
@:
@:		dvbs2neon_control (stream, CONTROL_RESET_STREAM, multistream, datamode) ;		
@:
@:  //  set the parameters
@:
@:		dvbs2neon_control (stream, CONTROL_SET_PARAMETERS, (uint32)&fmt, 0) ;			
@:
@:	// CONTROL_SET_PARAMETERS does not clear any data, 
@:	// so frame type, constellation and FEC can be changed on the fly
@:
@:
@:	For TS:
@:
@:		stream 		= STREAM0 ;
@:		datamode 	= DATAMODE_TS ;
@:		multistream	= MULTISTREAM_OFF ;	
@:
@:		dvbs2neon_control (stream, CONTROL_RESET_STREAM,   multistream,  datamode) ;		
@:		dvbs2neon_control (stream, CONTROL_SET_PARAMETERS, (uint32)&fmt, 0) ;			
@:
@:		while (1)
@:		{
@:			outbuffer = dvbs2neon_packet (stream, &packet188, 0) ;
@:			if (outbuffer > 0)
@:			{
@:				p16 			= (uint16*) outbuffer ;
@:				symbol_count 	= p16 [-1] ;		
@:				output_format	= p16 [-2] ;
@:				fec				= p16 [-3] ;
@:				constellation	= p16 [-4] ;
@:				frame_type		= p16 [-5] ;
@:				pilots			= p16 [-6] ;
@:				roll_off		= p16 [-7] ;
@:				data_mode		= p16 [-8] ;
@:			} 
@:			else if (outbuffer != 0)
@:			{
@:				ERROR ;							// note that returned buffer addresses
@:												// can be >= 0x80000000
@:												// so compare value with LOWEST_ERROR
@:			}
@:		} ;
@:
@:
@:	For GSE:
@:
@:		stream 		= STREAM0 ;
@:		datamode 	= DATAMODE_GSECONTINUOUS ;
@:		multistream	= MULTISTREAM_OFF ;
@:
@:		dvbs2neon_control (stream, CONTROL_RESET_STREAM,   multistream,  datamode) ;		
@:		dvbs2neon_control (stream, CONTROL_SET_PARAMETERS, (uint32)&fmt, 0) ;			
@:
@:		outbuffer = dvbs2neon_gsedata (stream, &buffer, length) ;	// returns a frame when 
@:																	// the datafield is full
@:
@:		outbuffer = dvbs2neon_gsedata (stream, 0, 		1) ;		// returns a frame if the 
@:																	// datafield is partly filled
@:																	// DFL indicates the amount of data
@:
@:		outbuffer = dvbs2neon_gsedata (stream, 0,       0) ;		// returns a frame even if 
@:																	// the datafield is empty
@:																	// DFL = 0 
@:
@:	Dummy frames:
@:
@:		dvbs2neon_control (stream, CONTROL_GET_DUMMY_FRAME, &buffer, 0) ;		
@:
@:	// the symbols returned are consistent with the current constellation
@:	
@:	// a user supplied buffer should be 4kb minimum, aligned on 128 bytes
@:
@:	// if buffer == 0, the buffer set by CONTROL_SET_OUTPUT_BUFFER or
@:	// the buffer pool set by CONTROL_RESET_FULL will be used
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Metadata returned when a BB frame is converted to symbols is the same other modes
@:
@:	mysymbolsbuffer_0x9000 should be minimum size 0x9000 and on a 128 byte boundary
@:
@:	p = dvbs2neon_control (0, CONTROL_CONVERT_BBFRAME, &mybbframe, &mysymbolsbuffer_0x9000) ;
@:
@:	The parameters for STREAM0 are always used, so these should be set beforehand
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: int32 dvbsneon_control (STREAM, SET_OUTPUT_BUFFER, BUFFER_ ADDRESS, 0) ;
@:
@:	Instead of passing a buffer pool address which can hold 4 output buffers which 
@:	are used in sequence, an individual buffer address can be set up for each stream.
@:
@:	This can be changed at any time without loss of data.
@:
@:	Use an address of zero to go back to using the buffer poo.
@:	The buffer pool must have already been set up.
@:	The buffer should be minimum size 0x9000 and on a 128 byte boundary
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon_packet
@:	dvbs2neon_gsedata
@:
@:	Adds data to the datafield and returns a pointer to a buffer when a frame is ready 
@:	
@:	Calling from C:
@:
@:		char* dvbs2neon_packet 		(uint32 stream, (uint32)&packet188, 0) ;
@:
@:		char* dvbs2neon_gsedata		(uint32 stream, (uint32)&buffer, datalength) ;
@:
@:	TS packets mustt start with 0x47 
@:
@:	Returns a status indication or a pointer to an output buffer
@:		0 = more data is required to fill the frame
@:	  < 0 = error (check against LOWEST_ERROR)
@:	  > 0 = pointer to a buffer containing a frame of symbols or a BB frame  
@:			
@:			the returned buffer address may be 32 or 16 bit aligned
@:			
@:			if the buffer pool is being used, 4 outbuffers are used in sequence, so that 
@:	  		it is not neccessary to move the data to prevent it being overwritten by 
@:	  		the next frame	
@:
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Bit fields for normal frame FEC 3/4 QPSK no pilots
@:
@:					   *********					DATAFIELD	48328
@:			  ******************					BBFRAME		48408  
@:			  *************************				BCHFRAME	48600
@:			  **********************************	FECFRAME	64800
@:	********************************************	PLFRAME		64980
@:	PLHEADER  BBHEADER DATAFIELD	BCH		LDPC
@:	180		  80	   48328		192		16200
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: Definitions used for external control
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define CONTROL_RESET_FULL				0
#define CONTROL_RESET_STREAM			1							
#define CONTROL_SET_PARAMETERS			2							
#define CONTROL_SET_OUTPUT_BUFFER		3							
#define CONTROL_GET_EFFICIENCY			4
#define CONTROL_GET_INFO				5
#define CONTROL_GET_LAST_BBFRAME		6
#define CONTROL_CONVERT_BBFRAME         7
#define CONTROL_GET_DATAFIELD_SIZE		8
#define CONTROL_GET_SYMBOLS_PER_FRAME	9
#define CONTROL_GET_DUMMY_FRAME			10

#define OUTPUT_FORMAT_SYMBOLS			0
#define OUTPUT_FORMAT_IQ				1		// removed
#define OUTPUT_FORMAT_EXPRESS			2		// not yet implemented
#define OUTPUT_FORMAT_BBFRAME			9

#define DATAMODE_TS						0		// 4th parameter of RESET_STREAM						
#define DATAMODE_GSECONTINUOUS			1							
#define MULTISTREAM_OFF					0

#define ERROR_COMMAND_INVALID							-1
#define ERROR_STREAM_INVALID							-2
#define ERROR_FRAME_TYPE_INVALID						-3
#define ERROR_FEC_INVALID								-4
#define ERROR_ROLLOFF_INVALID							-5
#define ERROR_CONSTELLATION_INVALID						-6
#define ERROR_PILOTS_INVALID							-7
#define ERROR_OUTPUT_FORMAT_INVALID						-8
#define ERROR_BUFFER_ADDRESS_INVALID					-9
#define ERROR_FEC_INVALID_FOR_CONSTELLATION				-10
#define ERROR_BUFFER_POOL_INVALID						-11
#define ERROR_NO_OUTBUFFER_AVAILABLE					-12
#define ERROR_OUTPUT_FORMAT_INVALID_FOR_CONSTELLATION	-13
#define ERROR_OUTPUT_FORMAT_INVALID_FOR_ROLLOFF			-14
#define ERROR_FRAME_FEC_COMBINATION_INVALID				-15
#define ERROR_BBFRAME_NOT_AVAILABLE                     -16
#define ERROR_PACKET_SYNC_BYTE_MISSING                  -17
#define ERROR_NOT_IN_TS_MODE				            -18
#define ERROR_NOT_IN_GSE_MODE				            -19
#define ERROR_GSE_DATA_TOO_BIG				            -20
#define ERROR_UNKNOWN						            -21
#define ERROR_INVALID_MULTISTREAM						-22
#define ERROR_INVALID_DATAMODE							-23
#define ERROR_LOWEST						            -23

// note that returned buffer pointers can have bit 31 set, so compare with ERROR_LOWEST to verify an error


// offsets for the calling parameters block

#define FRAME_TYPE_PAR		0
#define FEC_PAR				4
#define ROLL_OFF_PAR		8
#define CONSTELLATION_PAR	12
#define PILOTS_PAR			16
#define OUTPUT_FORMAT_PAR	20	
	

// parameter definitions for DATV-Express compatibility													

#define CR_1_4				0
#define CR_1_3				1
#define CR_2_5				2
#define CR_1_2				3
#define CR_3_5				4
#define CR_2_3				5
#define CR_3_4				6
#define CR_4_5				7
#define CR_5_6				8
#define CR_8_9				9
#define CR_9_10				10
#define M_QPSK				0
#define M_8PSK				1
#define M_16APSK			2
#define M_32APSK			3
#define FRAME_NORMAL		0x00
#define FRAME_SHORT			0x10
#define FRAME_DUMMY			0x80
#define PILOTS_OFF			0
#define PILOTS_ON			1
#define RO_0_35				0
#define RO_0_25				1
#define RO_0_20				2
#define RO_0_15				3

#define FEC14							0
#define FEC13							1
#define FEC25							2
#define FEC12							3
#define FEC35							4
#define FEC23							5
#define FEC34							6
#define FEC45							7
#define FEC56							8
#define FEC89							9
#define FEC910							10

#define DVBS_MODE						1
#define DVBS2_MODE						2
#define FRAME_TYPE_NORMAL				0
#define FRAME_TYPE_SHORT				2
#define ROLLOFF_035						0
#define ROLLOFF_025						1
#define ROLLOFF_020						2
#define ROLLOFF_015						3
#define PILOTS_OFF						0
#define PILOTS_ON						1
#define QPSK							0
#define PSK8							1
#define APSK16							2
#define APSK32							3

#define	SYMBOLS_METADATA_OFFSET			38 			@: symbols start 38 bytes into the output buffer
#define BBFRAME_METADATA_OFFSET         40          @: BB frame data starts 40 bytes into the output buffer 
#define DUMMY_FRAME_METADATA_OFFSET     38          @: dummy frame data starts 38 bytes into the output buffer

#define METADATA_ITEMCOUNT				-2
#define METADATA_OUTPUTFORMAT			-4
#define METADATA_FEC					-6
#define METADATA_CONSTELLATION			-8
#define METADATA_FRAMETYPE				-10
#define METADATA_PILOTS					-12
#define METADATA_ROLLOFF				-14
#define METADATA_DATAMODE				-16

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: Internal definitions 
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define MAX_STREAMS						4
#define FECFRAME_SHORT_SIZE_BYTES		(16200 / 8)
#define FECFRAME_NORMAL_SIZE_BYTES		(64800 / 8)
#define MAX_LDPC_ROWS					140							// number of rows in the intermediate LDPC array
#define LDPC_BYTES_PER_ROW				64							// number of bytes per row in the intermediate LDPC output array
#define LBPR							LDPC_BYTES_PER_ROW			// short definition; only 45 are required, but it makes debugging easier				
#define BCHFRAME_BYTES_PER_GROUP		45							// 45 bytes (360 bits) per input group for LDPC
#define BCHPG							BCHFRAME_BYTES_PER_GROUP	// short definition
#define BBHEADER_BYTES					10


@: neon register aliases

#define q0L			d0
#define q0H			d1
#define q1L			d2
#define q1H			d3
#define q2L			d4
#define q2H			d5
#define q3L			d6
#define q3H			d7
#define q4L			d8
#define q4H			d9
#define q5L			d10
#define q5H			d11
#define q6L			d12
#define q6H			d13
#define q7L			d14
#define q7H			d15
#define q8L			d16
#define q8H			d17
#define q9L			d18
#define q9H			d19
#define q10L		d20
#define q10H		d21
#define q11L		d22
#define q11H		d23
#define q12L		d24
#define q12H		d25
#define q13L		d26
#define q13H		d27
#define q14L		d28
#define q14H		d29
#define q15L		d30
#define q15H		d31

	.text
	
	.align	2	
	.ltorg															@: literal pool
	.align	2
	
	.data 

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: read / write data
@:
@: Note: read only data tables are located near the bottom of this file 
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: stream structures
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	.align	8

stream_structure0:
	frameindex:							.word					0			@: 0 or 1 (normal/short)
	fecindex:							.word					0			@: 0-10
	fecframe_size_bytes:				.word					0
	bbframe_size_bytes:					.word					0
	bch_size_bytes:						.word					0
	ldpc_rows:							.word					0
	bch_table_pointer:					.word					0
	ldpc_parameters_pointer:			.word					0
	ldpc_reformat_routine:				.word					0
	fec_frame_structure_common_end:		.word					0			@: items above here must have the same offset in the fec_frame structure
	fecframe_pointer:					.word					0			@: pointer to the current fec_frame structure
	frametype:							.word					0			@: 0 or 0x10 (normal/short)
	rolloff:							.word					0
	constindex:							.word					0
	pilots_active:						.word					0
	output_format:						.word					0
	output_routine:						.word					0
	multistream_number:					.word					0
	frame_pointer:						.word					0
	last_bbframe_pointer:				.word					0
	frame_pointer_save:					.word					0
	frame_count:						.word					0
	symbol_generation_routine:			.word					0
	filtering_routine:					.word					0
	outbuffer_address:					.word					0
	fixed_outbuffer_address:			.word					0
	symbols_per_frame:					.word					0
	bbheader_size_bytes:				.word					0
	datafield_start_pointer:			.word					0
	datafield_current_pointer:			.word					0
	datafield_size_bytes:				.word					0
	datafield_length:					.word					0
	bch_pointer:						.word					0
	bchframe_size_bytes:				.word					0
	ldpc_pointer:						.word					0
	ldpc_size_bytes:					.word					0
	overflow_buffer_length:				.word					0
	overflow_buffer_pointer:			.word					0
	previous_overflow_length:			.word					0
	plheader_pointer:					.word					0
	efficiency:							.word					0
	last_fecframe_pointer:				.word					0			@: pointer to the fec_frame structure
	xtest:								.word					0			
	symbols_scramble_table:				.word					0			
	datamode:							.word					0			@: TS or GSECONTINUOUS
	bb_header:							.space					10			@: used for GSE
	.align 8																@:   used for the saved last BBframe	
	frame:								.space					0x2100		@: frame will be constructed here
	datafield_overflow_buffer:			.space					0x2100
	last_bbframe:						.space					0x2100
	stream_structure_end:				.word					0
										
	#define FRAME						(frame-stream_structure0)
	#define FRAMETYPE					(frametype-stream_structure0)
	#define FRAMEINDEX					(frameindex-stream_structure0)
	#define FRAME_POINTER				(frame_pointer-stream_structure0)
	#define FRAME_POINTER_SAVE			(frame_pointer_save-stream_structure0)
	#define LAST_BBFRAME_POINTER		(last_bbframe_pointer-stream_structure0)
	#define DATAFIELD_OVERFLOW_BUFFER	(datafield_overflow_buffer-stream_structure0)
	#define LAST_BBFRAME				(last_bbframe-stream_structure0)
	#define LAST_FECFRAME_POINTER		(last_fecframe_pointer-stream_structure0)
	#define MULTISTREAM_NUMBER			(multistream_number-stream_structure0)
	#define FECFRAME_SIZE_BYTES			(fecframe_size_bytes-stream_structure0)
	#define FECFRAME_POINTER			(fecframe_pointer-stream_structure0)
	#define OUTPUT_FORMAT				(output_format-stream_structure0)
	#define FRAME_COUNT					(frame_count-stream_structure0)
	#define FECINDEX					(fecindex-stream_structure0)
	#define OUTBUFFER_ADDRESS			(outbuffer_address-stream_structure0)
	#define FIXED_OUTBUFFER_ADDRESS		(fixed_outbuffer_address-stream_structure0)
	#define SYMBOL_GENERATION_ROUTINE	(symbol_generation_routine-stream_structure0)
	#define SYMBOLS_PER_FRAME			(symbols_per_frame-stream_structure0)
	#define CONSTINDEX					(constindex-stream_structure0)
	#define FILTERING_ROUTINE			(filtering_routine-stream_structure0)
	#define ROLLOFF						(rolloff-stream_structure0)
	#define BBFRAME_SIZE_BYTES			(bbframe_size_bytes-stream_structure0)
	#define DATAFIELD_START_POINTER		(datafield_start_pointer-stream_structure0)
	#define DATAFIELD_CURRENT_POINTER	(datafield_current_pointer-stream_structure0)
	#define DATAFIELD_SIZE_BYTES		(datafield_size_bytes-stream_structure0)
	#define DATAFIELD_LENGTH			(datafield_length_bytes-stream_structure0)
	#define OVERFLOW_BUFFER_LENGTH		(overflow_buffer_length-stream_structure0)
	#define OVERFLOW_BUFFER_POINTER		(overflow_buffer_pointer-stream_structure0)
	#define PREVIOUS_OVERFLOW_LENGTH	(previous_overflow_length-stream_structure0)
	#define BBHEADER_SIZE_BYTES			(bbheader_size_bytes-stream_structure0)
	#define BCHFRAME_SIZE_BYTES			(bchframe_size_bytes-stream_structure0)
	#define BCH_SIZE_BYTES				(bch_size_bytes-stream_structure0)
	#define BCH_POINTER					(bch_pointer-stream_structure0)
	#define BCH_TABLE_POINTER			(bch_table_pointer-stream_structure0)
	#define LDPC_SIZE_BYTES				(ldpc_size_bytes-stream_structure0)		
	#define LDPC_ROWS					(ldpc_rows-stream_structure0)		
	#define LDPC_POINTER				(ldpc_pointer-stream_structure0)
	#define LDPC_PARAMETERS_POINTER		(ldpc_parameters_pointer-stream_structure0)
	#define LDPC_REFORMAT_ROUTINE		(ldpc_reformat_routine-stream_structure0)
	#define EFFICIENCY					(efficiency-stream_structure0)
	#define PILOTS_ACTIVE				(pilots_active-stream_structure0)
	#define PLHEADER_POINTER			(plheader_pointer-stream_structure0)
	#define OUTPUT_ROUTINE				(output_routine-stream_structure0)
	#define XTEST						(xtest-stream_structure0)
	#define DATAMODE					(datamode-stream_structure0)
	#define SYMBOLS_SCRAMBLE_TABLE		(symbols_scramble_table-stream_structure0)
	#define BB_HEADER					(bb_header_routine-stream_structure0)
	#define STREAM_STRUCTURE_SIZE		(stream_structure_end+4-stream_structure0)
	
#define MAX_STREAMS		4

	.align	8
stream_structure1:		.space		STREAM_STRUCTURE_SIZE
	.align	8
stream_structure2:		.space		STREAM_STRUCTURE_SIZE
	.align	8
stream_structure3:		.space		STREAM_STRUCTURE_SIZE
	.align	8
stream_structure4:		.space		STREAM_STRUCTURE_SIZE
	.align	8
stream_structure5:		.space		STREAM_STRUCTURE_SIZE	@: copy of ss0, for BB frame to symbols conversion

#define CONVERT_STREAM		5
#define CONVERT_STRUCTURE	stream_structure5				/// "


	.align	8	
outbuffer_size:			.word		0						@: outbuffer size - for info only
outbuffer_number:		.word		0						@: number of the outbuffer currently in use (0-3)
outbuffer_pointers:		.word		0,0,0,0					@: 4 output buffers

	.align	8											
ldpc_inter_array:		.space		MAX_LDPC_ROWS * LBPR	@: intermediate output array when applying the LDPC parameters

	.align	8											
ldpc_input_array:		.space		MAX_LDPC_ROWS * LBPR * 2	@: each 45 byte row is appended to itself

	.align	8
symbol_buffer:			.space		36*1024*2*2				@: intermediate buffer used when the final output is FIR

	.align	2	 
	
@: end of read/write data area **********************************************************************************************

	.text
	
	.align	2	
	.ltorg														@: literal pool
	.align	2
		
stream_structure_pointers:	.word		stream_structure0,stream_structure1,stream_structure2
							.word		stream_structure3,stream_structure4,0

info_string:				.asciz		INFO_STRING


	.align	2

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: fec_frame structures
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   
fec_frame_structure:
	frameindex_:						.word					0			@: 0-1
	fecindex_:							.word					0			@: 0-10
	fecframe_size_bytes_:				.word					0
	bbframe_size_bytes_:				.word					0
	bch_size_bytes_:					.word					0
	ldpc_rows_:							.word					0
	bch_table_pointer_:					.word					0
	ldpc_parameters_pointer_:			.word					0
	ldpc_reformat_routine_:				.word					0
	fec_frame_structure_common_end_:	.word					0
	efficiencies:						.word					0,0,0,0		
	efficiencies_pilots:				.word					0,0,0,0 
	plheader_pointers:					.word					0,0,0,0		@: per constellation
	plheader_pointers_pilots:			.word					0,0,0,0		@: per constellation
	fec_frame_structure_end:			.word					0

#define PLHEADER_POINTERS				(plheader_pointers-fec_frame_structure)	
#define PLHEADER_POINTERS_PILOTS		(plheader_pointers_pilots-fec_frame_structure)	
#define EFFICIENCIES					(efficiencies-fec_frame_structure)	
#define EFFICIENCIES_PILOTS				(efficiencies_pilots-fec_frame_structure)	
#define SYMBOL_CONVERSION_TABLES		(symbol_conversion_tables-fec_frame_structure)	


fec_frame_structures_normal:
	.word	fec_frame_structure_n14, fec_frame_structure_n13, fec_frame_structure_n25, fec_frame_structure_n12
	.word	fec_frame_structure_n35, fec_frame_structure_n23, fec_frame_structure_n34, fec_frame_structure_n45
	.word	fec_frame_structure_n56, fec_frame_structure_n89, fec_frame_structure_n910
	
fec_frame_structures_short:
	.word	fec_frame_structure_s14, fec_frame_structure_s13, fec_frame_structure_s25, fec_frame_structure_s12
	.word	fec_frame_structure_s35, fec_frame_structure_s23, fec_frame_structure_s34, fec_frame_structure_s45
	.word   fec_frame_structure_s56, fec_frame_structure_s89
	.word	0	   								@: FEC910 not used for short frame
	
fec_frame_structure_n14:
	.word	0									@: frameindex, 0-1, Normal or Short
	.word	0									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(16008/8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	135									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n14_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n14					@: puts the LDPC into the frame
	.word	0
	.word	490243,0,0,0						@: efficiency for each constellation 
	.word	478577,0,0,0						@: efficiency for each constellation with pilots
	.word	phqn14,0,0,0						@: PL header addresses for each constellation
	.word	phqn14p,0,0,0						@: PL header addresses for each constellation with pilots
	
fec_frame_structure_n13:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	1									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(21408/8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	120									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n13_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n13					@: puts the LDPC into the frame
	.word	0
	.word	656448,0,0,0						@: efficiency for each constellation 
	.word	640827,0,0,0						@: efficiency for each constellation with pilots
	.word	phqn13,0,0,0						@: PL header addresses for each constellation
	.word	phqn13p,0,0,0						@: PL header addresses for each constellation with pilots

fec_frame_structure_n25:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	2									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(25728 / 8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	108									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n25_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n25					@: puts the LDPC into the frame
	.word	0
	.word	789412,0,0,0						@: efficiency for each constellation 
	.word	770627,0,0,0						@: efficiency for each constellation with pilots
	.word	phqn25,0,0,0						@: PL header addresses for each constellation
	.word	phqn25p,0,0,0						@: PL header addresses for each constellation with pilots

fec_frame_structure_n12:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	3									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(32208 / 8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	90									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n12_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n12					@: puts the LDPC into the frame
	.word	0
	.word	988858,0,0,0						@: efficiency for each constellation 
	.word	965327,0,0,0						@: efficiency for each constellation with pilots
	.word	phqn12,0,0,0						@: PL header addresses for each constellation
	.word	phqn12p,0,0,0						@: PL header addresses for each constellation with pilots

fec_frame_structure_n35:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	4									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(38688 / 8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	72									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n35_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n35					@: puts the LDPC into the frame
	.word	0
	.word	1188304,1779991,0,0					@: efficiency for each constellation 
	.word	1160026,1739569,0,0					@: efficiency for each constellation with pilots
	.word	phqn35,ph8n35,0,0					@: PL header addresses for each constellation
	.word	phqn35p,ph8n35p,0,0					@: PL header addresses for each constellation with pilots

fec_frame_structure_n23:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	5									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(43040 / 8)							@: BB frame size - kbch from the ETSI document
	.word	20									@: number of BCH bytes
	.word	60									@: number of LDPC rows
	.word	bch_n160_table_neon					@: BCH calculation table
	.word	ldpc_parameters_n23_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n23					@: puts the LDPC into the frame
	.word	0
	.word	1322253,1980636,2637201,0			@: efficiency for each constellation 
	.word	1290788,1935658,2574613,0			@: efficiency for each constellation with pilots
	.word	phqn23,ph8n23,ph16n23,0				@: PL header addresses for each constellation
	.word	phqn23p,ph8n23p,ph16n23p,0			@: PL header addresses for each constellation with pilots

fec_frame_structure_n34:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	6									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(48408 / 8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	45									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n34_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n34					@: puts the LDPC into the frame
	.word	0
	.word	1487473,2228124,2966728,3703295		@: efficiency for each constellation 
	.word	1452076,2177525,2896320,3623332		@: efficiency for each constellation with pilots
	.word	phqn34,ph8n34,ph16n34,ph32n34		@: PL header addresses for each constellation
	.word	phqn34p,ph8n34p,ph16n34p,ph32n34p	@: PL header addresses for each constellation with pilots

fec_frame_structure_n45:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	7									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(51648 / 8)							@: BB frame size - kbch from the ETSI document
	.word	24									@: number of BCH bytes
	.word	36									@: number of LDPC rows
	.word	bch_n192_table_neon3				@: BCH calculation table
	.word	ldpc_parameters_n45_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n45					@: puts the LDPC into the frame
	.word	0
	.word	1587196,0,3165623,3951571			@: efficiency for each constellation 
	.word	1549426,0,3090495,3866247			@: efficiency for each constellation with pilots
	.word	phqn45,0,ph16n45,ph32n45			@: PL header addresses for each constellation
	.word	phqn45p,0,ph16n45p,ph32n45p			@: PL header addresses for each constellation with pilots

fec_frame_structure_n56:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	8									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(53840 / 8)							@: BB frame size - kbch from the ETSI document
	.word	20									@: number of BCH bytes
	.word	30									@: number of LDPC rows
	.word	bch_n160_table_neon					@: BCH calculation table
	.word	ldpc_parameters_n56_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n56					@: puts the LDPC into the frame
	.word	0
	.word	1654663,2478562,3300184,4119540		@: efficiency for each constellation 
	.word	1615288,2422276,3221863,4030589		@: efficiency for each constellation with pilots
	.word	phqn56,ph8n56,ph16n56,ph32n56		@: PL header addresses for each constellation
	.word	phqn56p,ph8n56p,ph16n56p,ph32n56p	@: PL header addresses for each constellation with pilots

fec_frame_structure_n89:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	9									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(57472 / 8)							@: BB frame size - kbch from the ETSI document
	.word	16									@: number of BCH bytes
	.word	20									@: number of LDPC rows
	.word	bch_n128_table_neon					@: BCH calculation table
	.word	ldpc_parameters_n89_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n89					@: puts the LDPC into the frame
	.word	0
	.word	1766451,2646012,3523143,4397854		@: efficiency for each constellation 
	.word	1724416,2585924,3439530,4302894		@: efficiency for each constellation with pilots
	.word	phqn89,ph8n89,ph16n89,ph32n89		@: PL header addresses for each constellation
	.word	phqn89p,ph8n89p,ph16n89p,ph32n89p	@: PL header addresses for each constellation with pilots

fec_frame_structure_n910:
	.word	0									@: frameindex, 0-1,	 Normal or Short
	.word	10									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_NORMAL_SIZE_BYTES)		@: fecframe size
	.word	(58192 / 8)							@: BB frame size - kbch from the ETSI document
	.word	16									@: number of BCH bytes
	.word	18									@: number of LDPC rows
	.word	bch_n128_table_neon					@: BCH calculation table
	.word	ldpc_parameters_n910_neon4			@: LDPC parameters table
	.word	ldpc_reformat_n910					@: puts the LDPC into the frame
	.word	0
	.word	1788612,2679207,3567342,4453027		@: efficiency for each constellation 
	.word	1746049,2618365,3482680,4356875		@: efficiency for each constellation with pilots
	.word	phqn910,ph8n910,ph16n910,ph32n910		@: PL header addresses for each constellation
	.word	phqn910p,ph8n910p,ph16n910p,ph32n910p	@: PL header addresses for each constellation with pilots
	
fec_frame_structure_s14:
	.word	1									@: frameindex, 0-1, Normal or Short
	.word	CR_1_4								@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(3072/8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	72									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s14_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s14					@: puts the LDPC into the frame
	.word	0
  	.word   365324,0,0,0						@: efficiency for each constellation 
  	.word   357467,0,0,0						@: efficiency for each constellation with pilots
	.word	phqs14,0,0,0						@: PL header addresses for each constellation
	.word	phqs14p,0,0,0						@: PL header addresses for each constellation with pilots
	
fec_frame_structure_s13:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	CR_1_3								@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(5232/8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	30									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s13_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s13					@: puts the LDPC into the frame
	.word	0
    .word   629060,0,0,0						@: efficiency for each constellation 
    .word   615532,0,0,0						@: efficiency for each constellation with pilots
	.word	phqs13,0,0,0						@: PL header addresses for each constellation
	.word	phqs13p,0,0,0						@: PL header addresses for each constellation with pilots
	
fec_frame_structure_s25:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	CR_2_5								@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(6312/8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	27									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s25_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s25					@: puts the LDPC into the frame
	.word	0
    .word   760928,0,0,0						@: efficiency for each constellation 
    .word   744564,0,0,0						@: efficiency for each constellation with pilots
	.word	phqs25,0,0,0						@: PL header addresses for each constellation
	.word	phqs25p,0,0,0						@: PL header addresses for each constellation with pilots
	
fec_frame_structure_s12:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	CR_1_2								@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(7032/8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	25									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s12_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s12					@: puts the LDPC into the frame
	.word	0
    .word   848840,0,0,0						@: efficiency for each constellation 
    .word   830585,0,0,0						@: efficiency for each constellation with pilots
	.word	phqs12,0,0,0						@: PL header addresses for each constellation
	.word	phqs12p,0,0,0						@: PL header addresses for each constellation with pilots

fec_frame_structure_s35:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	4									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(9552 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	18									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s35_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s35					@: puts the LDPC into the frame
	.word	0
  	.word   1156532,1725319,0,0					@: efficiency for each constellation 
	.word   1131661,1692033,0,0					@: efficiency for each constellation 
	.word	phqs35,ph8s35,0,0					@: PL header addresses for each constellation
	.word	phqs35p,ph8s35p,0,0					@: PL header addresses for each constellation with pilots

fec_frame_structure_s23:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	5									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(10632 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	15									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s23_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s23					@: puts the LDPC into the frame
	.word	0
    .word   1288400,1922040,2548792,0			@: efficiency for each constellation 
    .word   1260693,1884959,2505223,0			@: efficiency for each constellation with pilots
	.word	phqs23,ph8s23,ph16s23,0				@: PL header addresses for each constellation
	.word	phqs23p,ph8s23p,ph16s23p,0			@: PL header addresses for each constellation with pilots

fec_frame_structure_s34:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	6									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(11712 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	12									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s34_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s34					@: puts the LDPC into the frame
	.word	0
  	.word   1420269,2118761,2809662,3493093		@: efficiency for each constellation 
  	.word   1389725,2077885,2761633,3419165		@: efficiency for each constellation with pilots
	.word	phqs34,ph8s34,ph16s34,ph32s34		@: PL header addresses for each constellation
	.word	phqs34p,ph8s34p,ph16s34p,ph32s34p	@: PL header addresses for each constellation with pilots

fec_frame_structure_s45:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	7									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(12432 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	10									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s45_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s45					@: puts the LDPC into the frame
	.word	0
    .word   1508181,0,2983575,3709309			@: efficiency for each constellation 
    .word   1475747,0,2932574,3630805			@: efficiency for each constellation with pilots
	.word	phqs45,0,ph16s45,ph32s45			@: PL header addresses for each constellation
	.word	phqs45p,0,ph16s45p,ph32s45p			@: PL header addresses for each constellation with pilots

fec_frame_structure_s56:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	8									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(13152 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	8									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s56_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s56					@: puts the LDPC into the frame
	.word	0
	.word   1596093,2381056,3157488,3925526		@: efficiency for each constellation 
  	.word   1561768,2335120,3103514,3842446		@: efficiency for each constellation with pilots
	.word	phqs56,ph8s56,ph16s56,ph32s56		@: PL header addresses for each constellation
	.word	phqs56p,ph8s56p,ph16s56p,ph32s56p	@: PL header addresses for each constellation with pilots

fec_frame_structure_s89:
	.word	1									@: frameindex, 0-1,	 Normal or Short
	.word	9									@: fecindex, 0-10, FEC14 to FEC910		 
	.word	(FECFRAME_SHORT_SIZE_BYTES)			@: fecframe size
	.word	(14232 / 8)							@: BB frame size - kbch from the ETSI document
	.word	21									@: number of BCH bytes
	.word	5									@: number of LDPC rows
	.word	bch_s168_table_neon					@: BCH calculation table
	.word	ldpc_parameters_s89_neon4			@: LDPC parameters table
	.word	ldpc_reformat_s89					@: puts the LDPC into the frame
	.word	0
  	.word   1727961,2577778,3418357,4249850		@: efficiency for each constellation 
  	.word   1690800,2528046,3359924,4159906		@: efficiency for each constellation with pilots
	.word	phqs89,ph8s89,ph16s89,ph32s89		@: PL header addresses for each constellation
	.word	phqs89p,ph8s89p,ph16s89p,ph32s89p	@: PL header addresses for each constellation with pilots


// DVB-S FEC 34 efficiency factor			1382353			

	.align	2													@: 4 byte boundary
 
 
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon_control 
@:
@:	Calling from C:
@:		int32 dvbs2neon_control (uint32 stream, uint32 command, uint32 param1, uint32 param2) ;
@:
@:	Accepts a stream number, a command and 2 parameters
@:	Returns a status indication; < 0 is an error
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

dvbs2neon_control:
	push	{r1-r12,r14}

	mov		r4,r0									@: save the stream number
	ldr		r0,=ERROR_STREAM_INVALID				@: in case it is out of range
	cmp		r4,#MAX_STREAMS
	bhi		control_exit							@: out of range
	mov		r0,r4									@: stream number

	ldr		r4,=stream_structure_pointers
	ldr		r12,[r4,r0,lsl #2]						@: get the pointer to the stream indicated by r0
													@: r12 is the global stream structure pointer
	mov		r4,r1									@: move the command to r4
	
	teq		r4,#CONTROL_RESET_FULL
	beq		control_reset_full

	teq		r4,#CONTROL_RESET_STREAM
	beq		control_reset_stream

	teq		r4,#CONTROL_SET_PARAMETERS						
	beq		control_set_parameters

	teq		r4,#CONTROL_SET_OUTPUT_BUFFER						
	beq		control_set_output_buffer

	teq		r4,#CONTROL_GET_EFFICIENCY						
	beq		control_get_efficiency

	teq		r4,#CONTROL_GET_INFO						
	beq		control_get_info
	
	teq		r4,#CONTROL_GET_LAST_BBFRAME
	beq		control_get_last_bbframe_external
	
	teq		r4,#CONTROL_CONVERT_BBFRAME
	beq		control_convert_bbframe

	teq		r4,#CONTROL_GET_DATAFIELD_SIZE						
	beq		control_get_datafield_size

	teq		r4,#CONTROL_GET_SYMBOLS_PER_FRAME						
	beq		control_get_symbols_per_frame
	
	teq		r4,#CONTROL_GET_DUMMY_FRAME						
	beq		control_get_dummy_frame
	
	mov		r0,#ERROR_COMMAND_INVALID
	b		control_exit							@: error		
	
control_exit:
	pop		{r1-r12,r14}
	mov		pc,r14


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	completely reset the system
@:
@:	r2 is the buffer pool address, which should be 128 byte aligned
@:	r4 is the buffer pool size, which should be 4 * 36 * 1024 bytes
@:	The pool will be split into 4 buffers
@:	
@:	If the buffer pool is not supplied (r2 = 0) a buffer can be supplied to each stream,
@:	  with the CONTROL_SET_BUFFER command  
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

control_reset_full:
	mov		r4,#0									@: in case no buffer pool is supplied
	mov		r5,#0
	teq		r2,#0									@: outbuffer address
	beq		crf2									@: no buffer supplied

@: split the supplied outbuffer address into 4 buffers	

	mov		r0,#ERROR_BUFFER_POOL_INVALID			@: in case of errors

	teq		r3,#0									@: pool size
	beq		control_exit							@: size is zero

	ands	r6,r2,#0xf								@: pool address
	bne		control_exit							@: pool address not a multiple of 16

	ands	r6,r3,#0xf								@: pool size
	bne		control_exit							@: pool size not a multiple of 16

	mov		r4,r2									@: address
	mov		r5,r3,lsr #2							@: size of each of the 4 buffers
	
crf2:
	ldr		r8,=outbuffer_pointers					@: generate 4 outbuffer addresses
	str		r4,[r8],#4
	add		r4,r5									@: add the buffer size
	str		r4,[r8],#4
	add		r4,r5
	str		r4,[r8],#4
	add		r4,r5
	str		r4,[r8],#4

	ldr		r6,=outbuffer_number					@: reset the current outbuffer number (0-3)
	mov		r4,#0
	str		r4,[r6]									@: save as the current outbuffer number (0-3)

	ldr		r12,=stream_structure0					@: reset all streams to FEC 2/3, rolloff 0.35, normal frame
	mov		r0,#0									@: stream number
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream
	ldr		r12,=stream_structure1					
	mov		r0,#1									
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream
	ldr		r12,=stream_structure2
	mov		r0,#2									
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream
	ldr		r12,=stream_structure3
	mov		r0,#3									
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream
	ldr		r12,=stream_structure4
	mov		r0,#4									
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream
	mov		r0,#5									@: used for BB frame to symbols conversion									
	mov		r2,#0									@: multistream number
	mov		r3,#DATAMODE_TS							@: data mode
	bl		reset_stream

	ldr		r0,=VERSION
	b		control_exit

	
	.align	2	
	.ltorg														@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: reset an individual_stream
@:
@: r0 contains the stream number
@: r2 contains the multistream number 
@: r12 points to the stream structure
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

control_reset_stream:
	push	{r14}
	bl		reset_stream

	teq		r0,#0
	bne		crs98

	mov		r4,r0									@: save r0
	
	cmp		r2,#255
	mov		r0,#ERROR_INVALID_MULTISTREAM
	bhi		crs98

	cmp		r3,#DATAMODE_GSECONTINUOUS
	mov		r0,#ERROR_INVALID_DATAMODE
	bhi		crs98

	mov		r0,r4									@: restore r0

@: if stream 0 is being reset, also reset stream 5 for BB frame to symbols conversion

	mov		r0,#CONVERT_STREAM
	ldr		r12,=CONVERT_STRUCTURE
	bl		reset_stream		

crs96:
	mov		r0,#0									@: good exit

crs98:
	pop		{r14}
	b		control_exit


reset_stream:
	push	{r0-r12,r14}

	mov		r4,r12									@: pointer to the stream structure
	ldr		r5,=stream_structure_end
	ldr		r6,=stream_structure0
	sub		r5,r6									@: number of bytes in the structure
	lsr		r5,#2									@: words - byte size will always be a multiple of 4
	mov		r6,#0
crs2:												@: clear the stream structure
	adds	r5,#-1									@: decrement the loop counter
	str		r6,[r4],#4
	bne		crs2									@: do another loop

crs4:
	str		r2,[r12,#MULTISTREAM_NUMBER]			@: save the stream number in the structure
	str		r3,[r12,#DATAMODE]						@: TS or GSECONTINUOUS

	ldr		r4,=FRAME_TYPE_NORMAL					@: default to normal frame
	str		r4,[r12,#FRAMEINDEX]

	ldr		r5,=ROLLOFF_035							@: default to rolloff 0x35
	str		r5,[r12,#ROLLOFF]				

	mov		r5,#0
	str		r5,[r12,#PILOTS_ACTIVE]					@: default to pilots off
	
	ldr		r5,=BBHEADER_BYTES						@: global constant
	str		r5,[r12,#BBHEADER_SIZE_BYTES]

	add		r4,r12,#FRAME							@: r4 now points to the frame
	str		r4,[r12,#FRAME_POINTER]					@: save the frame pointer

	add		r6,r5,r4								@: add the frame pointer to the number of BB header bytes
	str		r6,[r12,#DATAFIELD_START_POINTER]		@: save the datafield start pointer
	str		r6,[r12,#DATAFIELD_CURRENT_POINTER]		@: save the datafield current pointer

	ldr		r5,=datafield_overflow_buffer			
	ldr		r6,=stream_structure0
	sub		r5,r6									@: r6 now equals the offset of the buffer in the stream structure
	add		r6,r5,r12								@: add the structure start address to form the pointer
	str		r6,[r12,#OVERFLOW_BUFFER_POINTER]

	ldr		r5,=OUTPUT_FORMAT_SYMBOLS				@: default output format
	str		r5,[r12,#OUTPUT_FORMAT]

	ldr		r5,=0									
	ldr		r5,=symbols_scramble_table_default
	str		r5,[r12,#SYMBOLS_SCRAMBLE_TABLE]
	
	ldr		r11,=fec_frame_structure_n23
	bl		control_set_parameters_common			@: default to normal frame, FEC 2/3

	pop		{r0-r12,r14}
	mov		pc,r14 
 
 
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: this is the common routine for all parameters
@:
@: 		r2 points to the requested parameters
@: 		r12 points to the stream structure
@:
@:	return:
@:		  0 = OK
@:		-ve = error
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

control_set_parameters:
	push	{r0}									@: stream number
	bl		control_set_parameters2					@: set parameters
	pop		{r1}									@: stream number
	teq		r0,#0
	bne		csp96									@: error

	teq		r1,#0									
	bne		csp98									@: not stream 0
	mov		r0,#CONVERT_STREAM						
	ldr		r12,=CONVERT_STRUCTURE	
	bl		control_set_parameters2					@: set parameters for BB frame to symbols conversion stream

csp96:
	b		control_exit
	
 
control_set_parameters2: 
	push	{r1-r12,r14}
	mov		r10,r2									@: r10 is now the address of the requested parameter block
  
control_set_frame:
	ldr		r4,[r10,#FRAME_TYPE_PAR]				@: get the required frame type
	teq		r4,#FRAME_NORMAL
	beq		csf2
	teq		r4,#FRAME_SHORT
	beq		csf2
	ldr		r0,=#ERROR_FRAME_TYPE_INVALID			
	b		csp98									@: error
csf2:
	str		r4,[r12,#FRAMETYPE]
	teq		r4,#FRAME_SHORT
	moveq	r4,#1									@: index 1 for short frame type	   
	str		r4,[r12,#FRAMEINDEX]					@: save the frame type in the stream structure
	
control_set_constellation:
	mov		r4,#0
	ldr		r2,[r10,#CONSTELLATION_PAR]				@: get the required constellation	
	teq		r2,#M_QPSK								@: DATV-Express value 0-3
	beq		csc2
	teq		r2,#M_8PSK
	beq		csc2
	teq		r2,#M_16APSK
	beq		csc2
	teq		r2,#M_32APSK
	beq		csc2
	mov		r0,#ERROR_CONSTELLATION_INVALID			
	beq		csp98									@: error
csc2:
	str		r2,[r12,#CONSTINDEX]					@: save the constellation in the stream structure
	
control_set_pilots:
	ldr		r2,[r10,#PILOTS_PAR] 
	teq		r2,#PILOTS_OFF
	beq		csp2
	teq		r2,#PILOTS_ON
	beq		csp2
	mov		r0,#ERROR_PILOTS_INVALID
	b		csp98									@: error
csp2:	
	str		r2,[r12,#PILOTS_ACTIVE]					@: save the pilots setting in the stream structure										@: 0, 1, 2 for 0.35, 0.25, 0.20, 0.15

control_set_rolloff:
    ldr     r2,[r10,#ROLL_OFF_PAR]
    cmp     r2,#RO_0_15                             @: 0, 1, 2, 3 for 0.35, 0.25, 0.20, 0.15
    mov     r0,#ERROR_ROLLOFF_INVALID
    bhi     csp98                                   @: error
    str     r2,[r12,#ROLLOFF]                       @: save the rolloff in the stream structure

control_set_output_format:
	ldr		r2,[r10,#OUTPUT_FORMAT_PAR]				@: get the required output format 
	teq		r2,#OUTPUT_FORMAT_SYMBOLS
	beq		csof6

	teq		r2,#OUTPUT_FORMAT_BBFRAME
	beq		csof6

    mov     r0,#ERROR_OUTPUT_FORMAT_INVALID
	b		csp98									@: error
csof6:
	str		r2,[r12,#OUTPUT_FORMAT]					@: save the output format in the stream structure

control_set_fec:	
	ldr		r4,[r10,#FEC_PAR]						@: get the required FEC
	cmp		r4,#CR_9_10								@: DATV-Express value 0-10
	ldr		r0,=#ERROR_FEC_INVALID					
	bhi		csp98									@: error
	
	ldr		r4,[r10,#PILOTS_PAR]				 
	ldr		r5,[r10,#CONSTELLATION_PAR]					 
	ldr		r6,[r10,#FEC_PAR]	 

@: get the fec_frame structure

	ldr		r8,[r12,#FRAMEINDEX]
	teq		r8,#FRAME_NORMAL
	ldreq	r7,=fec_frame_structures_normal
	ldrne	r7,=fec_frame_structures_short
	ldr		r11,[r7,r6,lsl #2]						@: r11 points to the fec_frame structure

	ldr		r0,=ERROR_FRAME_FEC_COMBINATION_INVALID
	teq		r11,#0
	beq		csp98									@: error

@: get the efficiency for this fec frame combination to see if this combination is valid

	add		r8,r11,#EFFICIENCIES					@: r8 points to the list of efficiencies by constellation
	ldr		r7,[r8,r5,lsl #2]						@: get the efficiency for this fec and constellation combination
	ldr		r0,=#ERROR_FEC_INVALID_FOR_CONSTELLATION					
	teq		r7,#0
	beq		csp98									@: error
	   
@: set up for this fec		
	  
	bl		control_set_parameters_common			@: set up for this FEC
	
	mov		r0,#0									@: good exit

csp98:
	pop		{r1-r12,r14}
	mov		pc,r14 

///	b		control_exit
		
@: end of parameter processing ****************************************************************************************

		
@: the optional setting of an output buffer is handled separately from the parameters
	
control_set_output_buffer:	
	teq		r2,#0									
	beq		csob2									@: no output buffer - use buffer pool
	ands	r3,r2,#3								@: must be on a 4 byte boundary (128 byte alignment recommended)
	mov		r0,#ERROR_BUFFER_ADDRESS_INVALID
	bne		control_exit
csob2:
	str		r2,[r12,#FIXED_OUTBUFFER_ADDRESS]		@: save the output buffer in the stream structure	
	mov		r0,#0									@: good exit
	b		control_exit
		
control_get_efficiency:
	ldr		r0,[r12,#EFFICIENCY]
	b		control_exit
		
control_get_datafield_size:
	ldr		r0,[r12,#DATAFIELD_SIZE_BYTES]
	b		control_exit
		
control_get_symbols_per_frame:
	ldr		r0,[r12,#SYMBOLS_PER_FRAME]
	b		control_exit

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: this is the common routine for all parameters
@:
@: 		r0  contains the stream number
@:		r2  points to the user supplied output buffer
@: 		r12 points to the stream structure
@:
@:	return:
@:		r0 points to the data in the output buffer
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		
control_get_dummy_frame:
	mov		r5,r0									@: save the stream number

	ldr		r0,=ERROR_STREAM_INVALID				@: in case it is out of range
	cmp		r5,#MAX_STREAMS
	bhi		cgdf98									@: out of range

	ldr		r4,=stream_structure_pointers
	ldr		r12,[r4,r5,lsl #2]						@: get the pointer to the stream structure indicated by r5

	mov		r5,r2									@: r5 now contains the output buffer address
	teq		r5,#0
	bne		cgdf2									@: a buffer address has been supplied

kkk:

@: allocate an output buffer

	ldr		r5,[r12,#FIXED_OUTBUFFER_ADDRESS]
	teq		r5,#0
	bne		cgdf2									@: a fixed buffer address has been set for this stream

@: allocate a buffer in the buffer area supplied at reset

	ldr		r2,=outbuffer_number
	ldr		r3,[r2]									@: number of the current outbuffer (0-3)
	ldr		r4,=outbuffer_pointers
	ldr		r5,[r4,r3,lsl #2]						@: get the buffer address

	ldr		r0,=ERROR_NO_OUTBUFFER_AVAILABLE		
	teq		r5,#0
	beq		cgdf98									@: error - no outbuffers defined

@: update the next output buffer number
	
	add		r3,#1								
	and		r3,#3									@: 4 outbuffers
	str		r3,[r2]									@: save the new outbuffer number

cgdf2:
	str		r5,[r12,#OUTBUFFER_ADDRESS]				@: save the buffer address
	
	add		r5,#DUMMY_FRAME_METADATA_OFFSET			@: r5 is now the output buffer data pointer	
	add		r5,#-2									@: allow for 2 unused bytes at the start

    ldr     r0,=dummy_frames
    ldr     r1,[r12,#CONSTINDEX]                    @: 0, 1, 2, 3 for QPSK, 8PSK, 16APSK, 32APSK
    ldr     r4,[r0,r1,lsl #2]                       @: get the dummy frame address for this constellation

	ldr		r7,=dummy_frame_qpsk_end		 	
	ldr		r8,=dummy_frame_qpsk		 		
	sub		r7,r8									@: r7 = r7 - r8 = number of bytes to move
    lsr     r8,r7,#7                                @: get the number of 128 byte blocks

	push 	{r5}									@: save the output pointer
	vpush	{q0-q7}									@: save the Neon registers

cgdf12:
	vldm	r4!,{q0-q7}								@: read from dummy frame
	vstm	r5!,{q0-q7}								@: write to user buffer
	add		r7,#-128								@: byte count calculated above
	adds	r8,#-1									@: block count
	bne		cgdf12

cgdf14:												@: move the remaining bytes
	teq		r7,#0	
	beq		cgdf16
	ldrb	r9,[r4],#1
	strb	r9,[r5],#1
	add		r7,#-1
	b		cgdf14

cgdf16:
	vpop	{q0-q7}									@: restore the Neon registers

	pop		{r5}									@: restore the output pointer
	add		r5,#2									@: point to the start of the symbols

@: store the metadata 
	
	ldr		r0,=OUTPUT_FORMAT_SYMBOLS
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]		@: output format

	ldr		r0,[r12,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]				@: fec

	ldr		r0,[r12,#CONSTINDEX]				@: constellation
	strh	r0,[r5,#METADATA_CONSTELLATION]

	ldr		r0,=FRAME_DUMMY
	strh	r0,[r5,#METADATA_FRAMETYPE]			@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]			@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]			@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]			@: data mode

	ldr		r7,=dummy_frame_qpsk_end		 	
	ldr		r8,=dummy_frame_qpsk		 		
	sub		r7,r8								@: r7 = r7 - r8 = number of bytes moved
	add		r7,#-2								@: allow for 2 unused bytes at the start
	strh	r7,[r5,#METADATA_ITEMCOUNT]			@: item count

	mov		r0,r5								@: r0 points to the symbols

cgdf98:
	b		control_exit

		
control_get_info:
	ldr		r0,=info_string
	b		control_exit


	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	control_set_parameters_common - common setup 
@:
@:	r12 points to the stream structure
@:	r11 points to the fec_frame structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

control_set_parameters_common:
	push	{r0-r12,r14}

	str		r11,[r12,#FECFRAME_POINTER]						@: save a pointer to the current fec_frame
	str		r11,[r12,#LAST_FECFRAME_POINTER]

@: copy the common settings from the fec_frame structure to the stream structure	

	ldr		r4,[r11,#FRAMEINDEX]
	str		r4,[r12,#FRAMEINDEX]
	ldr		r4,[r11,#FECINDEX]
	str		r4,[r12,#FECINDEX]
	ldr		r4,[r11,#FECFRAME_SIZE_BYTES]
	str		r4,[r12,#FECFRAME_SIZE_BYTES]
	ldr		r4,[r11,#BBFRAME_SIZE_BYTES]
	str		r4,[r12,#BBFRAME_SIZE_BYTES]
	ldr		r4,[r11,#BCH_SIZE_BYTES]
	str		r4,[r12,#BCH_SIZE_BYTES]
	ldr		r4,[r11,#LDPC_ROWS]
	str		r4,[r12,#LDPC_ROWS]
	ldr		r4,[r11,#BCH_TABLE_POINTER]
	str		r4,[r12,#BCH_TABLE_POINTER]
	ldr		r4,[r11,#LDPC_PARAMETERS_POINTER]
	str		r4,[r12,#LDPC_PARAMETERS_POINTER]
	ldr		r4,[r11,#LDPC_REFORMAT_ROUTINE]
	str		r4,[r12,#LDPC_REFORMAT_ROUTINE]

	ldr		r4,[r12,#FRAME_POINTER]
	ldr		r6,[r12,#DATAFIELD_START_POINTER]
	ldr		r7,[r12,#BBFRAME_SIZE_BYTES]

	ldr		r5,[r12,#BBHEADER_SIZE_BYTES]
	sub		r8,r7,r5							@: BB frame size - BB header bytes
	str		r8,[r12,#DATAFIELD_SIZE_BYTES]		@: save the datafield size

	add		r6,r8								@: datafield start pointer + datafield size
	str		r6,[r12,#BCH_POINTER]				@: save the BCH bytes pointer

	ldr		r5,[r12,#BCH_SIZE_BYTES]		   
	add		r7,r5								@: BB frame size + BCH size
	str		r7,[r12,#BCHFRAME_SIZE_BYTES]

	add		r6,r5								@: BCH bytes pointer + number of BCH bytes
	str		r6,[r12,#LDPC_POINTER]				@: save the LDPC pointer

	ldr		r5,[r12,#FECFRAME_SIZE_BYTES]
	add		r5,r4								@: frame pointer + fecframe size
	sub		r5,r6								@: subtract the LDPC pointer
	str		r5,[r12,#LDPC_SIZE_BYTES]			@: save the number of FEC bytes									

@: get the pilot setting and constellation index	
	
	ldr		r4,[r12,#PILOTS_ACTIVE]				@: select the PL header table according to pilots
	ldr		r5,[r12,#CONSTINDEX]				@: 0, 1, 2, 3 for QPSK, 8PSK, 16APSK, 32APSK
	ldr		r6,[r12,#FECINDEX]					@: 0-10	

	teq		r4,#0								@: pilots active?
	addeq	r7,r11,#PLHEADER_POINTERS
	addne	r7,r11,#PLHEADER_POINTERS_PILOTS
	ldr		r8,[r7,r5,lsl #2]					@: use the constellation index to access the PL header pointers table
	str		r8,[r12,#PLHEADER_POINTER]

	teq		r4,#0								@: pilots active?
	addeq	r7,r11,#EFFICIENCIES
	addne	r7,r11,#EFFICIENCIES_PILOTS
	ldr		r8,[r7,r5,lsl #2]					@: index with constellation			   
	str		r8,[r12,#EFFICIENCY]
	
@: get the symbol count	   

	ldr		r9,[r12,#FRAMEINDEX]
	lsl		r9,#1
	add		r9,r4								@: pilots active

	ldr		r7,=symbol_counts_normal
	teq		r9,#1
	ldreq	r7,=symbol_counts_normal_pilots
	teq		r9,#2
	ldreq	r7,=symbol_counts_short
	teq		r9,#3
	ldreq	r7,=symbol_counts_short_pilots
	ldr		r8,[r7,r5,lsl #2]					@: index with constellation
	str		r8,[r12,#SYMBOLS_PER_FRAME]

@: get the symbol output routine	
	
	ldr		r7,=symbol_generation_routines
	ldr		r8,[r7,r5,lsl #2]					@: index with constellation
	str		r8,[r12,#SYMBOL_GENERATION_ROUTINE]
	
csm98:	
	pop		{r0-r12,r14}
	mov		pc,r14


	.align	2	
	.ltorg										@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon_gsedata
@:
@:	Adds data to the datafield in GSE mode and returns a buffer of symbols
@:
@:	Calling from C:
@:		uchar* dvbs2neon_gsedata (uint32 stream, uchar *datapointer, uint32 datalength) ;
@:
@:	returns a pointer to a buffer of symbols when one of the following is true: 
@:		the datafield is full
@:		datapointer is zero and datalength is zero	
@:		datapointer is zero and datalength is non zero and the datafield is not empty	
@:
@:		the datafield length in the BB header (DFL) is set to the amount of data in the datafield
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

dvbs2neon_gsedata:
	push	{r1-r12,r14}

	mov		r5,r0									@: save the stream number

	ldr		r0,=ERROR_STREAM_INVALID				@: in case it is out of range
	cmp		r5,#MAX_STREAMS
	bhi		dap98									@: out of range

	ldr		r4,=stream_structure_pointers
	ldr		r12,[r4,r5,lsl #2]						@: get the pointer to the stream structure indicated by r0

	ldr		r0,=ERROR_NOT_IN_GSE_MODE				
	ldr  	r4,[r12,#DATAMODE]
	teq		r4,#DATAMODE_GSECONTINUOUS
	bne		dap98									@: wrong mode

	ldr		r0,=ERROR_STREAM_INVALID				@: in case it is out of range
	cmp		r5,#MAX_STREAMS
	bhi		dap98									@: out of range

	ldr		r4,[r12,#DATAFIELD_SIZE_BYTES]			@: check that the data length is not too big
	mov		r0,#ERROR_GSE_DATA_TOO_BIG
	cmp		r2,r4									@: compare with incoming data length							
	bhi		dap98									@: too big

	teq		r1,#0									@: incoming data pointer	
	bne		gsd8									@: data pointer is not zero	

@: data pointer is zero, so output a frame with an empty or partially filled datafield 

	teq		r2,#0
	beq		gsd6									@: supplied data length is zero 
													@: output a frame even if the datafield is empty
gsd4:													
	ldr		r4,[r12,#DATAFIELD_CURRENT_POINTER]		@: current pointer into to the datafield
	ldr		r5,[r12,#DATAFIELD_START_POINTER]		@: pointer to the start of the datafield
	mov		r0,#0									@: return value
	cmp		r4,r5	
	beq		dap98									@: datafield empty so don't output anything
	
@: output a frame with a partially filled datafield									

gsd6:
	mov		r2,#0
	str		r2,[r12,#OVERFLOW_BUFFER_LENGTH]		@: clear the overflow length 
	b		dap2b									@: create the output data, as for TS

@: copy the incoming data into the datafield

gsd8:
	mov		r0,r1									@: incoming data pointer
	mov		r1,r2									@: incoming data length
	ldr		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: current pointer into the datafield

	push	{r1}									@: save the data count
	bl		calculate_crc8_and_optionally_move		@: copy the data into the datafield - ignore the CRC8
	pop		{r1}									@: restore the data length
	
	ldr		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: current pointer to the datafield
	add		r2,r1									@: add the data length	
	str		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: save the updated datafield pointer
													@: r2 points past the end of the active datafield 

	b		dap1g									@: check for datafield full 


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	dvbs2neon_packet
@:
@:	Adds a packet to the datafield and returns a pointer to a buffer when a frame is ready 
@:	
@:	Calling from C:
@:		uchar* dvbs2neon_process_packet (uint32 stream, uchar *packet188, uint32 param1) ;
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

dvbs2neon_packet:
	push	{r1-r12,r14}

	mov		r5,r0									@: save the stream number

	ldr		r0,=ERROR_STREAM_INVALID				@: in case it is out of range
	cmp		r5,#MAX_STREAMS
	bhi		dap98									@: out of range

	ldr		r4,=stream_structure_pointers
	ldr		r12,[r4,r5,lsl #2]						@: get the pointer to the stream structure indicated by r0
													@: r12 is now the pointer to the stream structure	

	ldr		r0,=ERROR_PACKET_SYNC_BYTE_MISSING		
	ldrb	r5,[r1]
	teq		r5,#0x47
	bne		dap98									@: no sync byte

	ldr		r0,=ERROR_NOT_IN_TS_MODE				
	ldr  	r4,[r12,#DATAMODE]
	teq		r4,#DATAMODE_TS
	bne		dap98									@: wrong mode

	mov		r0,r1									@: move the packet address to r0
	ldr		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: current pointer to the datafield
	teq		r0,#0
	beq		dap1g									@: packet pointer is null	

	mov		r1,#187
	add		r0,#1									@: process 187 bytes, but not the leading sync byte
	bl		calculate_crc8_and_optionally_move		@: copy the packet into the datafield and return the CRC8
	
	ldr		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: current pointer to the datafield
	add		r2,#187									@: 187 bytes have been added to the datafield	
	strb	r0,[r2],#1								@: add the returned CRC8 to the datafield and move to the next byte
	str		r2,[r12,#DATAFIELD_CURRENT_POINTER]		@: save the updated datafield pointer

dap1g:	
	ldr		r3,[r12,#BCH_POINTER]					@: overflow bytes will start here
	mov		r0,#0									@: return zero if frame not ready
	subs	r2,r3									@: datafield pointer minus end of datafield
	blo		dap98									@: there is still room in the datafield - wait for next packet

													@: r2 contains the number of bytes overflowing the datafield	
	ldr		r4,[r12,#OVERFLOW_BUFFER_LENGTH]
	str		r4,[r12,#PREVIOUS_OVERFLOW_LENGTH]		@: save the previous overflow length
	str		r2,[r12,#OVERFLOW_BUFFER_LENGTH]		@: save the new overflow length 

@:	datafield is full - move the overflow bytes to a temporary buffer

	ldr		r3,[r12,#BCH_POINTER]					@: r3 points to the overflow bytes past the end of the datafield in the frame
	ldr		r4,[r12,#OVERFLOW_BUFFER_POINTER]		@: pointer to the temporary overflow buffer
	mov		r5,r2									@: number of overflow bytes for this frame
	teq		r5,#0
	beq		dap2a									@: no overflow bytes
dap2:	
	ldrb	r7,[r3],#1								@: read an overflow byte and advance to next
	adds	r5,#-1									@: decrement the loop counter
	strb	r7,[r4],#1								@: store the byte to the overflow buffer and advance to next
	bne		dap2									@: go around the loop
dap2a:

@: allocate an output buffer

dap2b:
	ldr		r5,[r12,#FIXED_OUTBUFFER_ADDRESS]
	teq		r5,#0
	bne		dap2c									@: a fixed buffer address has been set for this stream

@: allocate a buffer in the buffer area supplied at reset

	ldr		r2,=outbuffer_number
	ldr		r3,[r2]									@: number of the current outbuffer (0-3)
	ldr		r4,=outbuffer_pointers
	ldr		r5,[r4,r3,lsl #2]						@: get the buffer address

	ldr		r0,=ERROR_NO_OUTBUFFER_AVAILABLE		
	teq		r5,#0
	beq		dap98									@: error - no outbuffers defined

@: update the next output buffer number
	
	add		r3,#1								
	and		r3,#3									@: 4 outbuffers
	str		r3,[r2]									@: save the new outbuffer number

dap2c:
	str		r5,[r12,#OUTBUFFER_ADDRESS]				@: save the buffer address
	
@: generate the output	

	vpush	{q0-q7}									@: save the Neon registers
	vpush	{q8-q15}

	bl		add_bb_header							@: add the 10 byte BB header to the front of the datafield

@: save the BB frame so that it can be retrieved separately 

	ldr		r4,[r12,#FECFRAME_POINTER]				@: pointer to the current fec_frame structure
	str		r4,[r12,#LAST_FECFRAME_POINTER]			@: save it

	mov		r4,r12
	add		r4,#FRAME								@: pointer to the frame (and also the BB frame)

	add		r5,r12,#LAST_BBFRAME
	str		r5,[r12,#LAST_BBFRAME_POINTER]			@: pointer to the last frame

	ldr		r6,[r12,#BBFRAME_SIZE_BYTES]			@: number of bytes to save 	
	add		r6,#127									@: round up the number of bytes to the next 128
	lsr		r6,#7									@: number of 128 byte blocks to copy

dap2e:
	vldm	r4!,{q0-q7}								@: get 128 bytes
	adds	r6,#-1									@: decrement the loop counter
	vstm	r5!,{q0-q7}								@: save 128 bytes
	bne		dap2e									@: loop around

zzz:
	nop
	
			
@: check the output mode			
					
	ldr		r4,[r12,#OUTPUT_FORMAT]
	teq		r4,#OUTPUT_FORMAT_BBFRAME
	beq		dap2m
	
@: output symbols
				
	bl		process_bbframe							@: do the rest of the required processing on the BB frame
	b		dap2r									@: and generate the output

@: output the BB frame

dap2m:					
	ldr		r2,[r12,#OUTBUFFER_ADDRESS]
	bl		get_last_bbframe2						@: r0 is now the outbuffer pointer 
	str		r0,[r12,#OUTBUFFER_ADDRESS]	
	
dap2r:													
	vpop	{q8-q15}								@: restore the Neon registers
	vpop	{q0-q7}

	ldr		r4,[r12,#DATAFIELD_START_POINTER]		@: pointer to the start of the datafield
	ldr		r5,[r12,#DATAFIELD_SIZE_BYTES]			@: allowable number of bytes in the datafield
	ldr		r6,=0
dap9:
	str		r6,[r4],#1
	adds	r5,#-1
	bne		dap9 ///////////////////////////////////////

@: clear the datafield /////////////////

	ldr		r4,[r12,#DATAFIELD_START_POINTER]		@: pointer to the start of the datafield
	ldr		r5,[r12,#DATAFIELD_SIZE_BYTES]			@: allowable number of bytes in the datafield
	ldr		r6,=0
dap8:
	str		r6,[r4],#1
	adds	r5,#-1
	bne		dap8
	
@: move the overflow bytes from the last packet to the start of the new datafield

	ldr		r3,[r12,#OVERFLOW_BUFFER_POINTER]		@: pointer to the temporary overflow buffer
	ldr		r4,[r12,#DATAFIELD_START_POINTER]		@: pointer to the start of the datafield
	ldr		r5,[r12,#OVERFLOW_BUFFER_LENGTH]		@: number of overflow bytes for this frame
	teq		r5,#0
	beq		dap3a									@: no overflow bytes
dap3:	
	ldrb	r7,[r3],#1								@: read an overflow byte and advance to next
	adds	r5,#-1									@: decrement the loop counter
	strb	r7,[r4],#1								@: store the byte to the start of the new datafield
	bne		dap3			
dap3a:

	str		r4,[r12,#DATAFIELD_CURRENT_POINTER]		@: save the current datafield pointer				

	ldr		r3,[r12,#FRAME_COUNT]
	add		r3,#1									@: count a frame
	str		r3,[r12,#FRAME_COUNT]		

	ldr		r0,[r12,#OUTBUFFER_ADDRESS]				@: return with the pointer to the outbuffer
dap3b:
	nop
				
dap98:	
	pop		{r1-r12,r14}
	mov		pc,r14									
	
	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	process_bbframe:
@		performs scramble, BCH, LDPC, PL header, symbols scramble, output
@:		saves the BB frame and the current fec-frame sructure pointer
@:
@:		add_bb_header has been moved to the main line
@:
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
process_bbframe:
	push	{r1-r11,r14}

@: add_bb_header and saving the BB frame have been moved to main line before calling this routune

	bl		bbframe_scramble				@: apply the BB frame scrambling
	bl		bch_encode_neon2				@: append the BCH bytes to the BB frame, producing a BCH frame
	bl		ldpc_encode_neon				@: append the LDPC bytes to the BCH frame

@: call the final output routine to scramble the symbols and save in the required format

	ldr		r0,[r12,#OUTBUFFER_ADDRESS]		@: generate symbols into the output buffer
    ldr     r2,[r12,#SYMBOL_GENERATION_ROUTINE]
    blx     r2                              @: generate the symbols

        
	ldr		r0,[r12,#OUTBUFFER_ADDRESS]	
	add		r0,#SYMBOLS_METADATA_OFFSET		@: symbols start 10 bytes in for symbol output
	str		r0,[r12,#OUTBUFFER_ADDRESS]		@: the symbols are in the outbuffer, so point to the symbols

	pop		{r1-r11,r14}
	mov		pc,r14							@: return	
			

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	add_bb_header
@:		the 10 byte BB header is added to the front of the datafield 
@:		this is now a BB frame
@:
@:	Calling: 
@:	  r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				
add_bb_header:	
	push	{r0-r12,r14}

	ldr		r5,[r12,#ROLLOFF]	 
	
	ldr		r4,[r12,#MULTISTREAM_NUMBER]			@: get the multistream number
	teq		r4,#0
	addeq	r5,#0xf0								@: transport stream, single TS, CCM, no ISSY, no NPD
	addne	r5,#0xc0								@: multistream; transport stream, multi TS, VCM, no ISSY, no NPD

	ldr		r7,=0x7f								@: mask
	ldr  	r6,[r12,#DATAMODE]
	teq		r6,#DATAMODE_GSECONTINUOUS
	andeq	r5,r7									@: GSE

@: calculate and store UPL, number of bits in a packet - unused for GSE

	ldr		r3,[r12,#FRAME_POINTER]					@: r3 is now the frame pointer (start of BB header)

	strb	r5,[r3],#1								@: store the MATYPE-1 byte into the header	
	strb	r4,[r3],#1								@: store the stream number in the header
	
	ldr		r5,=188 * 8								@: UPL - number of bits in a packet
	ldr  	r6,[r12,#DATAMODE]
	teq		r6,#DATAMODE_GSECONTINUOUS
	moveq	r5,#0									@: zero for GSE
	
	mov		r4,r5,lsr #8							@: upper byte
	strb	r4,[r3],#1
	and		r4,r5,#0xff								@: lower byte
	strb	r4,[r3],#1								
	
	ldr		r5,[r12,#DATAFIELD_SIZE_BYTES]			@: number of bytes in the datafield
	ldr  	r6,[r12,#DATAMODE]
	teq		r6,#DATAMODE_GSECONTINUOUS
	bne		abb4									@: not GSE output

@: GSE

	ldr		r4,[r12,#DATAFIELD_CURRENT_POINTER]		@: pointer to the end of the datafield (plus overflow)
	ldr		r6,[r12,#DATAFIELD_START_POINTER]		@: pointer to the start of the datafield
	subs	r5,r4,r6								@: r5 = r4 - r6 : datafield current length

	ldr		r6,[r12,#DATAFIELD_SIZE_BYTES]			@: allowable number of bytes in the datafield
	cmp		r5,r6
	movgt	r5,r6									@: too many - limit to the datafield size

@: zero any unused part of the datafield

	ldr		r6,[r12,#BCH_POINTER]					@: just past the end of the datafield
	mov		r7,#0
abb2:
	cmp		r4,r6
	bge		abb4
	strb	r7,[r4],#1
	b		abb2

// DFL

abb4:
	lsl		r5,#3									@: convert to number of bits
	mov		r4,r5,lsr #8							@: upper byte
	strb	r4,[r3],#1
	and		r4,r5,#0xff								@: lower byte
	strb	r4,[r3],#1								

// SYNC

	ldr  	r6,[r12,#DATAMODE]
	teq		r6,#DATAMODE_GSECONTINUOUS
	moveq	r4,#0x00								@: private value for GSE
	movne	r4,#0x47								@: sync byte value for TS
	strb	r4,[r3],#1

@:	calculate and store SYNCD, the bit offset from the start of the datafield of the first CRC8 byte	
@:	unused for GSE

	mov		r5,#0
	ldr  	r6,[r12,#DATAMODE]
	teq		r6,#DATAMODE_GSECONTINUOUS
	beq		abb6
	
	ldr		r5,[r12,#PREVIOUS_OVERFLOW_LENGTH]		@: get the number of overflow bytes for the previous frame
	adds	r5,#-1									@: account for the removed 0x47 transport stream sync byte
	addlt	r5,#188									@: add 188 if negative
	lsl		r5,#3									@: convert to a number of bits

abb6:
	mov		r4,r5,lsr #8							@: upper byte
	strb	r4,[r3],#1
	and		r4,r5,#0xff								@: lower byte
	strb	r4,[r3],#1

abb96:	
	ldr		r0,[r12,#FRAME_POINTER]					@: base address of the frame (start of BB header)
	mov		r1,#9									@: number of bytes to process in the BB header
	mov		r2,#0									@: do not move the bytes anywhere
	bl		calculate_crc8_and_optionally_move		@: generate the CRC8 for the BB header
	strb	r0,[r3],#1								@: store the CRC8 into the BB header

abb98:
	pop		{r0-r12,r14}
	mov		pc,r14									@: return


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	calculate_crc8_and_optionally_move
@:		
@:	Calling:
@:		r0 points to the input buffer to be processed
@:		r1 is the number of bytes to be processed
@:		r2 is the address where the input buffer should be copied
@:		r2 = zero if copying is not required
@:
@:	Return:
@:		r0 is the calculated CRC8 value
@:
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
calculate_crc8_and_optionally_move:
	push	{r1,r2,r3,r4,r5}
	ldr		r5,=crc8_table					
	mov		r3,#0							@: accumulator
	teq		r1,#0
	beq		crc4							@: data length is zero
crc2:
	ldrb	r4,[r0],#1						@: get a byte from the input buffer
	teq		r2,#0							@: check if we need to write the input byte to an output buffer
	strneb	r4,[r2],#1						@: store input byte to the output buffer and move to next
	eor		r3,r4							@: xor into the accumulator
	ldrb	r3,[r5,r3]						@: get the new accumulator from the CRC8 table
	adds	r1,#-1							@: decrement byte count
	bne		crc2							@: go around the loop
crc4:
	mov		r0,r3							@: return the accumulator
	pop		{r1,r2,r3,r4,r5}
	mov		pc,r14							@: return
	
	.align	2	
	.ltorg									@: literal pool
	.align	2

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	bbframe_scramble
@:		
@:		each byte of the BB frame is XORed with a byte from bbframe_scramble_table
@:
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
bbframe_scramble:
	push	{r0,r1,r2,r3}

	ldr		r0,[r12,#FRAME_POINTER]
	ldr		r1,[r12,#BBFRAME_SIZE_BYTES]
	add		r1,#127 
	lsr		r1,#7						@: do multiples of 128 bytes - too many, but no problem

	ldr		r2,=bbframe_scramble_normal_table
bbs22:	
	vldm	r0,{q0-q7}
	vldm	r2!,{q8-q15}
	veor	q0,q8
	veor	q1,q9
	veor	q2,q10
	veor	q3,q11
	veor	q4,q12
	veor	q5,q13
	veor	q6,q14
	veor	q7,q15
	vstm	r0!,{q0-q7}
	adds	r1,#-1
	bne		bbs22
bbs24:	
	pop		{r0,r1,r2,r3}
	mov		pc,r14							@: return
	

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	control_get_last_bbframe
@:		get last BBframe for a stream
@:
@:	calling:
@:		r2  is the user supplied pointer to the output buffer
@:		r12 points to the stream structure
@:
@:	Return:
@:		r0
@:		pointer to start of BBframe data, after the metadata
@:		-ve = BB frame not available
@:
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
control_get_last_bbframe_external:
	push	{r1-r12,r14}

	mov		r0,#ERROR_BBFRAME_NOT_AVAILABLE			@: in case of error	
	ldr		r4,[r12,#LAST_BBFRAME_POINTER]			@: r4 points to the last BB frame
	teq		r4,#0	
	beq		glbe98									@: nothing there

	bl		get_last_bbframe2						@: r0 now contains the output pointer

glbe98:
	pop		{r1-r12,r14}
	b 		control_exit


get_last_bbframe2:
	push	{r14}

	ldr		r4,[r12,#LAST_BBFRAME_POINTER]			@: r4 points to the last BB frame
	add		r5,r2,#BBFRAME_METADATA_OFFSET			@: r2 is the output buffer pointer													@: leave room for the metadata	
													
	ldr		r11,[r12,#LAST_FECFRAME_POINTER]

	ldr		r0,[r11,#BBFRAME_SIZE_BYTES]			@: number of bytes in the BBframe
	strh	r0,[r5,#METADATA_ITEMCOUNT]			
	
	ldr		r0,=OUTPUT_FORMAT_BBFRAME
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]

	ldr		r11,[r12,#LAST_FECFRAME_POINTER]

	ldr		r0,[r11,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]					

	ldr		r0,[r12,#CONSTINDEX]
	strh	r0,[r5,#METADATA_CONSTELLATION]			

	ldr		r0,[r11,#FRAMEINDEX]
	teq		r0,#0
	movne	r0,#0x10								@: convert frameindex (0/1) to frametype (0/0x10)
	strh	r0,[r5,#METADATA_FRAMETYPE]				@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]				@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]				@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]				@: data mode

	vpush	{q0-q7}									@: save the Neon registers
	vpush	{q8-q15}

	ldr		r6,[r11,#BBFRAME_SIZE_BYTES]			@: number of bytes to move
	add		r6,#127									@: round up the number of bytes to the next 128
	lsr		r6,#7									@: number of 128 byte blocks to move
glb22:
	vldm	r4!,{q0-q7}								@: get 128 bytes
	adds	r6,#-1									@: decrement the loop counter
	vstm	r5!,{q0-q7}								@: save 128 bytes
	bne		glb22									@: loop around

	vpop	{q8-q15}
	vpop	{q0-q7}									@: restore the Neon registers

	add		r0,r2,#BBFRAME_METADATA_OFFSET			@: r0 points to the start of the output data, past the metadata

glb98:
	pop		{r14}
	mov		pc,r14									@: return			

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	control_convert_bbframe
@:		convert user supplied BB frame to user supplied symbols buffer
@:
@:	calling:
@:		r2  is the user supplied pointer to the input buffer (BB frame)
@:		r3  is the user supplied pointer to the output buffer (symbols)
@:
@:	Return:
@:		pointer to start of the symbols, after the metadata
@:		-ve = error
@:
@:	All registers except r0 are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
control_convert_bbframe:
	push	{r1-r12,r14}

	ldr		r12,=CONVERT_STRUCTURE				@: stream structure for conversion (copy of stream_structure0)

	str		r2,[r12,#FRAME_POINTER]				@: user supplied BB frame pointer
	str		r3,[r12,#OUTBUFFER_ADDRESS]			@: user supplied output buffer for symbols

	ldr		r4,[r12,#BBFRAME_SIZE_BYTES]		@: size of the BB frame
	add		r4,r2								@: add the supplied BB frame pointer to the BB frame size
	str		r4,[r12,#BCH_POINTER]				@: points to the BCH location in the supplied BB frame

	ldr		r4,[r12,#BCHFRAME_SIZE_BYTES]		@: size of the BCH frame
	add		r4,r2								@: add the supplied BB frame pointer to the BCH frame size
	str		r4,[r12,#LDPC_POINTER]				@: points to the LDPC location in the supplied BB frame

	bl		process_bbframe						@: process the supplied BB frame

	ldr		r0,[r12,#OUTBUFFER_ADDRESS]			@: get the updated output buffer address

cbf98:
	pop		{r1-r12,r14}
	b 		control_exit
			
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	bch_encode_neon2
@:		calculate the BCH bytes and add to the end of the BB frame
@:		this is now a BCH frame
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

bch_encode_neon2:
	push		{r0-r11}						@: save registers

	vmov.u64	q0,#0							@: q0, q1 will be used for table input
	vmov.u64	q1,#0
	vmov.u64	q2,#0							@: q2, q3 will be the accumulator
	vmov.u64	q3,#0
	vmov.u64	q4,#0

	ldr			r2,[r12,#BCH_POINTER]			@: pointer to the BCH bytes in the frame
	ldr			r3,[r12,#BCH_TABLE_POINTER]		@: conversion table address
	ldr			r0,[r12,#FRAME_POINTER]			@: pointer to the start of the frame

	ldr			r8,=ldpc_input_array			@: for LDPC processing, put into an array
	ldr			r9,=ldpc_input_array + BCHPG	@:	 so that each 45 byte group is concatenated with itself
		
	ldr			r10,[r12,#BBFRAME_SIZE_BYTES]
	ldr			r7,=95443718
	umull		r7,r1,r10,r7					@: divide by 45 (BCHPG), the number of bytes processed each time around the loop 
												@: r1 is the outer loop counter
	mov			r11,#BCHPG
	mul			r11,r1,r11						@: r11 *= r1
	sub			r10,r10,r11						@: r10 contains the input byte count, modulo 45 

@: loop here for every 45 byte outer loop
	
bchn2:	
	mov			r11,r8					@: save the output pointer to the ldpc_input_array 
	ldr			r7,=BCHPG				@: inner loop counter
bchn4:
	vmov.u8		r5,q2L[0]				@: get the lowest byte of the accumulator
	ldrb		r4,[r0],#1				@: get a byte from the frame and advance to next
	strb		r4,[r8],#1				@: store into ldpc_input_array
	strb		r4,[r9],#1				@:	 and store the same byte further on by BCHPG bytes (+45)
	eor			r5,r4					@: XOR the accumulator byte with the input byte 
	add			r6,r3,r5,lsl #5			@: multiply by 32 and add to the BCH table start address

	vext.u8		q2,q2,q3,#1				@: shift the accumulator 1 byte right
	vext.u8		q3,q3,q4,#1				@: q4 = 0

	vldm		r6,{q0L,q0H,q1L}		@: load 24 bytes from the bch table (fewer may be required)
	veor		q2,q0					@: XOR the table line into the accumulator
	veor		q3,q1

	adds		r7,#-1					@: inner loop counter
	bne			bchn4

	mov			r4,r8					@: save the output pointer so that the BCH bytes can be added
	mov			r8,r11					@: restore the ldpc_input_array output pointer to the value at the start of the outer loop
	add			r8,#LBPR * 2			@: move to the next output row (+128)
	add			r9,r8,#BCHPG			@: the second pointer is 45 bytes further on

	adds		r1,#-1					
	bne			bchn2					@: go around the outer loop

@: all the groups of 45 bytes have been done so check if there are any modulo 45 bytes to do

	teq			r10,#0					@: number of modulo 45 bytes
	beq			bchn6					@: none to do, or already done
	mov			r7,r10					@: inner loop counter
	mov			r10,#0					@: clear the modulo byte count
	add			r1,#1					@: put the outer loop counter back to 1
	b			bchn4					@: do another outer loop
bchn6:
	mov			r8,r4					@: restore the ldpc_input_array pointer

@: save the (up to) 24 BCH bytes back into the frame separately, to avoid having to cope with 32 bit alignment	

	ldr			r0,[r12,#BCH_POINTER]	@: pointer to the BCH bytes in the frame

	vst1.u8		q2L[0],[r0]!
	vst1.u8		q2L[1],[r0]!
	vst1.u8		q2L[2],[r0]!
	vst1.u8		q2L[3],[r0]!
	vst1.u8		q2L[4],[r0]!
	vst1.u8		q2L[5],[r0]!
	vst1.u8		q2L[6],[r0]!
	vst1.u8		q2L[7],[r0]!

	vst1.u8		q2H[0],[r0]!
	vst1.u8		q2H[1],[r0]!
	vst1.u8		q2H[2],[r0]!
	vst1.u8		q2H[3],[r0]!
	vst1.u8		q2H[4],[r0]!
	vst1.u8		q2H[5],[r0]!
	vst1.u8		q2H[6],[r0]!
	vst1.u8		q2H[7],[r0]!

	vst1.u8		q3L[0],[r0]!
	vst1.u8		q3L[1],[r0]!
	vst1.u8		q3L[2],[r0]!
	vst1.u8		q3L[3],[r0]!
	vst1.u8		q3L[4],[r0]!
	vst1.u8		q3L[5],[r0]!
	vst1.u8		q3L[6],[r0]!
	vst1.u8		q3L[7],[r0]!

@: move the BCH bytes into the ldpc_input_array		
	
	add			r9,r8,#BCHPG					@: pointer to the right hand half of the ldpc_input array
	ldr			r0,[r12,#BCH_POINTER]			@: pointer to the BCH bytes in the frame
	ldr			r1,[r12,#BCH_SIZE_BYTES]		@: number of BCH bytes
bchn8:
	ldrb		r4,[r0],#1
	strb		r4,[r8],#1
	strb		r4,[r9],#1
	adds		r1,#-1
	bne			bchn8

bchn98: 
	pop			{r0-r11}				@: restore registers
	mov			pc,r14					@: return
	
	.align	2	
	.ltorg								@: literal pool
	.align	2
			
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_encode_neon
@:		generates the LDPC bytes 
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

ldpc_encode_neon:
	push		{r0-r12,r14}

	ldr			r0,[r12,#LDPC_PARAMETERS_POINTER]	@: get the parameters address
	ldr			r1,[r12,#FRAME_POINTER]				@: r1 points to the frame

@: clear the address of the current LDPC intermediate output row	
@: this row stays in Neon until all the LDPC parameter table lines for that row have been processed

	mov		r3,#0							@: r3 holds the address of the current LDPC output row				

@: set up a Neon mask in q15 for later

	vmov.u32	q15L,#0
	vldr		q15H,=0xffffff0000000000

@: loop here for each entry in the LDPC parameters table
@: r0 points to the LDPC parameters table

ldpcn4:										
	ldm		r0,{r5-r9}
	add		r0,#32
											@: r0 now points to the next 8 word table entry			
											@: r5 is the bit offset number from the LDPC spec  
											@: r6 is the offset of the 45 byte BCH group from the ldpc_input_array
											@: r7 is the offset of the LDPC output row (45 bytes)
											@: r8 is the address of the routine for the initial byte shift
											@: r9 is the address of the routine for bit shifts
	
@: form the input and output pointers

	ldr		r4,=ldpc_input_array
	add		r6,r4							@: add the frame address to the BCH group offset - r6 points to the group
	ldr		r4,=ldpc_inter_array
	add		r7,r4							@: add the ldpc output array address to the offset - r7 points to the row

@: check if the LDPC output address has changed and if so, write the accumulated data from Neon to memory

	vbic	q12,q15							@: ************ clear bytes 45-47 for testing only *******************
	teq		r7,r3							@: compare the new and current addresses
	beq		ldpcn8							@: no change				
	teq		r3,#0		
	beq		ldpcn6							@: no data to write

/// for testing and comparing with the previous version 

/// vrev32.u8	q10,q10 
/// vrev32.u8	q11,q11
/// vrev32.u8	q12,q12

	vstm		r3,{q10-q12}				@: write the accumulator from Neon to the inter array
ldpcn6:
	vmov.u8		q10,#0						@: clear the accumulator
	vmov.u8		q11,q10 
	vmov.u8		q12,q10 
ldpcn8:
	mov			r3,r7						@: save the new LDPC output address in r3
	
@: check for end of parameters table

	adds		r5,#1						@: bit offset number - check for end of table - otherwise unused
	beq			ldpcn10						@: was -1, so end of parameters list
	add			r5,#-1

@: load the 45 byte input group

	vldm		r6,{q6-q8}					@: load the BCH input group
	blx			r8							@: shift by 0-3 bytes to adjust for alignment
	blx			r9							@: do the bit shifts and save the group in q6-q8			

@: accumulate

	veor		q10,q6						@: accumulate q6-q8 into q10-q12
	veor		q11,q7
	veor		q12,q8
	b			ldpcn4						@: do the next line from the LDPC parameters table	
	
@: come here at the end of the parameters table 
@: convert the inter array back to linear byte format and store in the LDPC final buffer

ldpcn10:	
	ldr		r5,[r12,#LDPC_REFORMAT_ROUTINE] @: r5 is the address of the reformat routine
	blx		r5						   

@: perform the final shift and XOR: bit (n) ^= bit (n-1), bit (0) unaffected
@: the previous bit used is the changed version and not the original
@: bit 7 of the first byte is most significant
	
///	b		ldpcn98 /////////////////////////////

	ldr		r5,=ldpc_xor_table
	ldr		r6,[r12,#LDPC_POINTER]		@: pointer to the LDPC bytes in the frame
	ldr		r7,[r12,#LDPC_SIZE_BYTES]	@: number of LDPC bytes for this FEC
	ldr		r8,=0x1ff					@: masking constant
	mov		r9,#0						@: previous output value
ldpcn12:
	ldrb	r10,[r6]					@: get a byte from the output array
	orr		r10,r9,lsl #8				@: move the previous output byte to the upper byte
	and		r10,r8						@: mask off 9 bits
	ldrb	r11,[r10,r5]				@: get a byte from the conversion table
	strb	r11,[r6],#1					@: save the converted byte back to the output array
	mov		r9,r11						@: save it as the previous output

	adds	r7,#-1						@: decrement the loop counter
	bne		ldpcn12						@: go around the loop again

ldpcn98:
	pop		{r0-r12,r14}
	mov		pc,r14

	
	.align	2	
	.ltorg								@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n45
@:	ldpc_reformat_s14
@:		both have 36 rows in the ldpc inter array
@:		the output pointer for s14 is not 32 bit aligned (4n+1 bytes)
@:		reformats the LDPC data in the inter array back into the frame
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:	q0-q3	is the input buffer from the LDPC inter array
@:	q10-q15 is the output accumulator
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define LDPC_REFORMAT_LOOPS_N45			23

ldpc_reformat_n45:
ldpc_reformat_s14:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					
	ldr			r2,=LDPC_REFORMAT_LOOPS_N45		@: loop counter

lr45n2:									@: load the inter array row
	push		{r0}					@: safe the input pointer

	vmov.u8		q0,#0
	vmov.u8		q1,#0
	vmov.u8		q2,#0
	vmov.u8		q3,#0
	vmov.u8		q4,#0
	vmov.u8		q5,#0

	vld1.u16	d0[0],[r0]
	add			r0,#LBPR
	vld1.u16	d1[0],[r0]
	add			r0,#LBPR
	vld1.u16	d2[0],[r0]
	add			r0,#LBPR
	vld1.u16	d3[0],[r0]
	add			r0,#LBPR
	vld1.u16	d4[0],[r0]
	add			r0,#LBPR
	vld1.u16	d5[0],[r0]
	add			r0,#LBPR
	vld1.u16	d6[0],[r0]
	add			r0,#LBPR
	vld1.u16	d7[0],[r0]
	add			r0,#LBPR
	vld1.u16	d0[1],[r0]
	vld1.u16	d8[0],[r0]
	add			r0,#LBPR
	vld1.u16	d1[1],[r0]
	vld1.u16	d9[0],[r0]
	add			r0,#LBPR
	vld1.u16	d2[1],[r0]
	vld1.u16	d10[0],[r0]
	add			r0,#LBPR
	vld1.u16	d3[1],[r0]
	vld1.u16	d11[0],[r0]
	add			r0,#LBPR
	vld1.u16	d4[1],[r0]
	add			r0,#LBPR
	vld1.u16	d5[1],[r0]
	add			r0,#LBPR
	vld1.u16	d6[1],[r0]
	add			r0,#LBPR
	vld1.u16	d7[1],[r0]
	add			r0,#LBPR
	vld1.u16	d0[2],[r0]
	vld1.u16	d8[1],[r0]
	add			r0,#LBPR
	vld1.u16	d1[2],[r0]
	vld1.u16	d9[1],[r0]
	add			r0,#LBPR
	vld1.u16	d2[2],[r0]
	vld1.u16	d10[1],[r0]
	add			r0,#LBPR
	vld1.u16	d3[2],[r0]
	vld1.u16	d11[1],[r0]
	add			r0,#LBPR
	vld1.u16	d4[2],[r0]
	add			r0,#LBPR
	vld1.u16	d5[2],[r0]
	add			r0,#LBPR
	vld1.u16	d6[2],[r0]
	add			r0,#LBPR
	vld1.u16	d7[2],[r0]
	add			r0,#LBPR
	vld1.u16	d0[3],[r0]
	vld1.u16	d8[2],[r0]
	add			r0,#LBPR
	vld1.u16	d1[3],[r0]
	vld1.u16	d9[2],[r0]
	add			r0,#LBPR
	vld1.u16	d2[3],[r0]
	vld1.u16	d10[2],[r0]
	add			r0,#LBPR
	vld1.u16	d3[3],[r0]
	vld1.u16	d11[2],[r0]
	add			r0,#LBPR
	vld1.u16	d4[3],[r0]
	add			r0,#LBPR
	vld1.u16	d5[3],[r0]
	add			r0,#LBPR
	vld1.u16	d6[3],[r0]
	add			r0,#LBPR
	vld1.u16	d7[3],[r0]
	add			r0,#LBPR

	vld1.u16	d8[3],[r0]
	add			r0,#LBPR
	vld1.u16	d9[3],[r0]
	add			r0,#LBPR
	vld1.u16	d10[3],[r0]
	add			r0,#LBPR
	vld1.u16	d11[3],[r0]
	add			r0,#LBPR
	pop			{r0}						@: restore the input pointer

@: do the upper bytes	
	
@: bit 7: 8 bytes: 0, 36, 1, 37, 2, 38, 3, 39

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x80				@: mask 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)			
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3

	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#4
	vsra.u8		q7H,q6H,#5

	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#6
	vsra.u8		q7H,q6H,#7
	
	vorr.u8		q10L,q7L,q7H			@: q10L = dout [0]

@: bit 5: 8 bytes: 9, 45, 10, 46, 11, 47, 12, 48

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#4					@: multiplier
	vmov.u32	q8H,#2					@: multiplier
	vmov.u8		q9,#0x20				@: mask 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#4
	vsra.u8		q7H,q6H,#5	

	vorr.u32	q10H,q7L,q7H			@: q11H = dout [1]

@: bit 3: 8 bytes: 18, 54, 19, 55, 20, 56, 21, 57

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#16					@: multiplier
	vmov.u32	q8H,#8					@: multiplier
	vmov.u8		q9,#0x08				@: mask 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 4,4,2,2

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vorr		q7L,q6L
	vsra.u8		q7H,q6H,#1
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3
		
	vorr.u32	q11L,q7L,q7H			@: q11L = dout [2]

@: bit 1: 8 bytes: 27, 63, 28, 64, 29, 65, 30, 66

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#64					@: multiplier
	vmov.u32	q8H,#32					@: multiplier
	vmov.u8		q9,#0x02				@: mask 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 16,16,8,8
	
	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vshr.u8		q8,#2					@: multiplier = 4,4,2,2
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vorr		q7L,q6L
	vsra.u8		q7H,q6H,#1
		
	vorr.u32	q11H,q7L,q7H			@: q11H = dout [3]

@: do the lower bytes
	
@: bit 6: 8 bytes: 5, 41, 6, 42, 7, 43, 8, 44

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x40				@: mask 

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#5
	vsra.u8		q7H,q6H,#6	

	vorr.u32	q12L,q7L,q7H			@: q11L = dout [4]

@: bit 4: 8 bytes: 14, 50, 15, 51, 16, 52, 17, 53

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#8					@: multiplier
	vmov.u32	q8H,#4					@: multiplier
	vmov.u8		q9,#0x10				@: mask 

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4	

	vorr.u32	q12H,q7L,q7H			@: q12H = dout [5]

@: bit 2: 8 bytes: 23, 59, 24, 60, 25, 61, 26, 62

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#32					@: multiplier
	vmov.u32	q8H,#16					@: multiplier
	vmov.u8		q9,#0x04				@: mask 

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vshr.u8		q8,#2					@: multiplier = 8,8,4,4
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vshr.u8		q8,#2					@: multiplier = 2,2,1,1
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2	

	vorr.u32	q13L,q7L,q7H			@: q14L = dout [6]

@: bit 0: 8 bytes: 32, 68, 33, 69, 34, 70, 35, 71

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#128				@: multiplier
	vmov.u32	q8H,#64					@: multiplier
	vmov.u8		q9,#0x01				@: mask 

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 32,32,16,16

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 8,8,4,4
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vmla.u32	q7,q6,q8				@: accumulate

	vorr.u32	q13H,q7L,q7H			@: q15H = dout [7]

@: do the split bytes

	vshr.u64	q4,#48
	vshr.u64	q5,#48

@: bits 7,6: 2 bytes: 4, 40

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x80				@: mask 

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3

	vshr.u8		q9,#1					@: change the mask to bit 6 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#5
	vsra.u8		q7H,q6H,#6

	vorr.u32	q14L,q7L,q7H			@: q14L = dout [8]

@: bits 5,4: 2 bytes: 13, 49

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#4					@: multiplier
	vmov.u32	q8H,#2					@: multiplier
	vmov.u8		q9,#0x20				@: mask 

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vshr.u8		q9,#1					@: change the mask to bit 4 

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4
	
	vorr.u32	q14H,q7L,q7H			@: q14H = dout [9]

@: bit 3,2: 2 bytes: 22, 58

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#16					@: multiplier
	vmov.u32	q8H,#8					@: multiplier
	vmov.u8		q9,#0x08				@: mask 

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 4,4,2,2

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q9,#1					@: change the mask to bit 2 

	vshr.u8		q8,#1					@: multiplier = 2,2,1,1

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vorr.u32	q15L,q7L,q7H			@: q15L = dout [10]

@: bit 1,0: 2 bytes: 31, 67

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#64					@: multiplier
	vmov.u32	q8H,#32					@: multiplier
	vmov.u8		q9,#0x02				@: mask 

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 16,16,8,8

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q9,#1					@: change the mask to bit 0

	vshr.u8		q8,#1					@: multiplier = 8,8,4,4

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vmla.u32	q7,q6,q8				@: accumulate
	
	vorr.u8		q15H,q7L,q7H			@: q15H = dout [11]

@: the bytes are now the following order (left is byte 0):
	
@:	bit 7:		8 bytes:	q10L	00 36 01 37 02 38 03 39
@:	bit 5:		8 bytes:	q10H	09 45 10 46 11 47 12 48

@:	bit 3:		8 bytes:	q11L	18 54 19 55 20 56 21 57
@:	bit 1:		8 bytes:	q11H	27 63 28 64 29 65 30 66

@:	bit 6:		8 bytes:	q12L	05 41 06 42 07 43 08 44
@:	bit 4:		8 bytes:	q12H	14 50 15 51 16 52 17 53

@:	bit 2:		8 bytes:	q13L	23 59 24 60 25 61 26 62
@:	bit 0:		8 bytes:	q13H	32 68 33 69 34 70 35 71

@:	bits 7,6:	2 bytes:	q14L	04 40
@:	bits 5,4:	2 bytes:	q14H	13 49

@:	bits 3,2:	2 bytes:	q15L	22 58
@:	bits 1,0:	2 bytes:	q15H	31 67		

/*
	vldr		q10L,=0x3903380237013600		
	vldr		q10H,=0x4812471146104509
	vldr		q11L,=0x5721562055195418
	vldr		q11H,=0x6630652964286327
	vldr		q12L,=0x4408430742064105
	vldr		q12H,=0x5317521651155014
	vldr		q13L,=0x6226612560245923
	vldr		q13H,=0x7135703469336832
	vldr		q14L,=0x4004
	vldr		q14H,=0x4913
	vldr		q15L,=0x5822
	vldr		q15H,=0x6731
*/

@: put the odd pairs into q14L:		04 40 13 49 22 58 31 67

	vsli.u64	q14L,q14H,#16
	vsli.u64	q15L,q15H,#16
	vsli.u64	q14L,q15L,#32
	vmov.u8		q14H,#0
	vmov.u8		q15,#0

@:	vldr		q9L, =0x6630652964286327
@:	vldr		q9H, =0x7135703469336832

@:	vldr		q10L,=0x3903380237013600		
@:	vldr		q12L,=0x4408430742064105

@:	vldr		q10H,=0x4812471146104509
@:	vldr		q12H,=0x5317521651155014

@:	vldr		q11L,=0x5721562055195418
@:	vldr		q13L,=0x6226612560245923

@:	vldr		q11H,=0x6630652964286327
@:	vldr		q13H,=0x7135703469336832

@:	vldr		q14L,=0x6731582249134004

@:						 7 6 5 4 3 2 1 0


@:	swap the registers into some sort of order, as above

	vswp		q10H,q12L
	vswp		q11L,q12L
	vswp		q11H,q12H
	vswp		q12L,q13L
	vswp		q13L,q12L
	vswp		q13L,q12H

@:	form the output registers

	vldr		q15L,=0x0c0a08FF06040200
	vtbl.u8		q0L,{q10},q15L
	vldr		q15L,=0x1a18FF161412100e
	vtbl.u8		q0H,{q10,q11},q15L
	vldr		q15L,=0x18ff161412100e0c
	vtbl.u8		q1L,{q11,q12},q15L
	vldr		q15L,=0xff161412100e0c0a	
	vtbl.u8		q1H,{q12,q13},q15L
	vmov		q9,q13							@: copy q13 to q10, as the table registers must be contiguous
	vldr		q15L,=0x171513110e0c0a08
	vtbl.u8		q2L,{q9,q10},q15L
	vldr		q15L,=0x1513110f0d0b09ff
	vtbl.u8		q2H,{q10,q11},q15L
	vldr		q15L,=0x13110f0d0b09ff07		
	vtbl.u8		q3L,{q11,q12},q15L
	vldr		q15L,=0x110f0d0b09ff0705	
	vtbl.u8		q3H,{q12,q13},q15L
	vldr		q15L,=0x0f0d0b09ff070503
	vtbl.u8		q4L,{q13},q15L

@:	insert the stray bytes from q14L

	vldr		q15L,=0xffffff00ffffffff
	vtbx.u8		q0L,{q14L},q15L					@: byte 0x04 (4)

	vldr		q15L,=0xffffffffffffff01		
	vtbx.u8		q2H,{q14L},q15L					@: byte 0x28 (40)
	
	vldr		q15L,=0xffff02ffffffffff		
	vtbx.u8		q0H,{q14L},q15L					@: byte 0x0d (13)
	
	vldr		q15L,=0xffffffffffff03ff		
	vtbx.u8		q3L,{q14L},q15L					@: byte 0x31 (49)

	vldr		q15L,=0xff04ffffffffffff
	vtbx.u8		q1L,{q14L},q15L					@: byte 0x16 (22)

	vldr		q15L,=0xffffffffff05ffff
	vtbx.u8		q3H,{q14L},q15L					@: byte 0x3a (58)

	vldr		q15L,=0x06ffffffffffffff
	vtbx.u8		q1H,{q14L},q15L					@: byte 0x1f (31)
	
	vldr		q15L,=0xffffffff07ffffff
	vtbx.u8		q4L,{q14L},q15L					@: byte 0x43 (67)
	
	ldr			r4,[r12,#FRAMEINDEX]			@: get the frame type
	teq			r4,#FRAME_NORMAL
	
	vstmeq		r1!,{d0,d1,d2,d3,d4,d5,d6,d7,d8} @: store 72 bytes and step the pointer
	beq			lr45n4							 @: the output pointer for n45 will always be 32 bit aligned

@: the output pointer for s14 is aligned on 4n + 1 bytes, so save 3 bytes individually and shift the rest

	vst1.u8		d0[0],[r1]!			
	vst1.u8		d0[1],[r1]!			
	vst1.u8		d0[2],[r1]!			
	vext.u8		q0,q0,q1,#3
	vext.u8		q1,q1,q2,#3
	vext.u8		q2,q2,q3,#3
	vext.u8		q3,q3,q4,#3
	vext.u8		q4,q4,q5,#3
	vstm		r1,{d0,d1,d2,d3,d4,d5,d6,d7,d8} 
	add			r1,#72-3
	
lr45n4:
	add			r0,#2							@: move the input pointer 2 bytes along the inter array

	adds		r2,#-1							@: loop counter
	bne			lr45n2
				
lr45n98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n14
@:		135 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q8-q10	reload and rearrangement	
	
ldpc_reformat_n14:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=45									@: loop counter; 45 bytes in each LDPC inter array row

@: loop here for each byte in the rows of the intermediate buffer	
	
lr14n2:
	push		{r0,r1}								@: save the input and output pointers

@: load a byte from 128 rows of the inter array into q4-q11

	vld1.u8		q4L[0],[r0]
	vld1.u8		q12H[0],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q5L[0],[r0]
	vld1.u8		q12H[1],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q6L[0],[r0]
	vld1.u8		q12H[2],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q7L[0],[r0]
	vld1.u8		q12H[3],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q8L[0],[r0]
	vld1.u8		q12H[4],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q9L[0],[r0]
	vld1.u8		q12H[5],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q10L[0],[r0]
	vld1.u8		q12H[6],[r0]						@: also load into q12H
	add			r0,#LBPR
	vld1.u8		q11L[0],[r0]
	vld1.u8		q12H[7],[r0]						@: also load into q12H
	add			r0,#LBPR
	
	vld1.u8		q4L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[1],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[2],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[3],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[4],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[5],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[6],[r0]
	add			r0,#LBPR

	vld1.u8		q4L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q6L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q7L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q8L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q9L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q10L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q11L[7],[r0]
	add			r0,#LBPR	

	vld1.u8		q4H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[0],[r0]
	add			r0,#LBPR
	
	vld1.u8		q4H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[1],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[2],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[3],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[4],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[5],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[6],[r0]
	add			r0,#LBPR

	vld1.u8		q4H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q6H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q7H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q8H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q9H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q10H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q11H[7],[r0]
	add			r0,#LBPR

	mov			r3,r0						@: copy the input pointer at row 128

@: prepare to extract bytes which wrap from the last rows to the first rows 
@: the first 8 rows are already in q12H

	vshl.u8		q12H,#1						@: shift left 1 bit
	vext.u8		q12,q12,q12,#1				@: shift right 1 byte
	
@: load the remaining 7 bytes into q12L 
	
	vld1.u8		q12L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q12L[6],[r0]
	add			r0,#LBPR

	b			lr14n4
	
	.align	2	
	.ltorg									@: literal pool
	.align	2

@: q12[0]	16-7	32-0	49-1	66-2	83-3	100-4	117-5	134-6
@: q12[1]	16-6	33-7	49-0	66-1	83-2	100-3	117-4	134-5
@: q12[2]	16-5	33-6	50-7	66-0	83-1	100-2	117-3	134-4
@: q12[3]	16-4	33-5	50-6	67-7	83-0	100-1	117-2	134-3
@: q12[4]	16-3	33-4	50-5	67-6	84-7	100-0	117-1	134-2
@: q12[5]	16-2	33-3	50-4	67-5	84-6	101-7	117-0	134-1
@: q12[6]	16-1	33-2	50-3	67-4	84-5	101-6	118-7	134-0
@: q12[7]	16-0	33-1	50-2	67-3	84-4	101-5	118-6	
@: q12[8]	17-7	33-0	50-1	67-2	84-3	101-4	118-5	
@: q12[9]	17-6	34-7	50-0	67-1	84-2	101-3	118-4	
@: q12[10]	17-5	34-6	51-7	67-0	84-1	101-2	118-3	
@: q12[11]	17-4	34-5	51-6	68-7	84-0	101-1	118-2	
@: q12[12]	17-3	34-4	51-5	68-6	85-7	101-0	118-1	
@: q12[13]	17-2	34-3	51-4	68-5	85-6	102-7	118-0	
@: q12[14]
@: q12[15]

@: extract bytes 16, 33, 50, 67, 84, 101, 118 which wrap around from the last rows to the first rows

lr14n4:
	vmov.u8		q1,#1					@: mask for bits 0
	
@: byte 16	
	
	vldr		q0L,=0x0102040810204080
	vldr		q0H,=0
	vshr.u8		q2,q12,#7				@: move bits 7 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 16 now in q2[0]
	vmov		q13L,q2L				@: move the byte to q13L[0]
	
@: byte 33	
	
	vldr		q0L,=0x0204081020408000
	vldr		q0H,=0x0000000000000001
	vshr.u8		q2,q12,#6				@: move bits 6 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 33 now in q2[0]
	vsli.u64	q13L,q2L,#8				@: move the byte to q13L[1] 
	
@: byte 50
	
	vldr		q0L,=0x0408102040800000
	vldr		q0H,=0x0000000000000102
	vshr.u8		q2,q12,#5				@: move bits 5 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 50 now in q2[0]
	vsli.u64	q13L,q2L,#16			@: move the byte to q13L[2]
	
@: byte 67
	
	vldr		q0L,=0x0810204080000000
	vldr		q0H,=0x0000000000010204
	vshr.u8		q2,q12,#4				@: move bits 4 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 67 now in q2[0]
	vsli.u64	q13L,q2L,#24			@: move the byte to q13L[3]
	
@: byte 84
	
	vldr		q0L,=0x1020408000000000
	vldr		q0H,=0x0000000001020408
	vshr.u8		q2,q12,#3				@: move bits 3 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 84 now in q2[0]
	vsli.u64	q13L,q2L,#32			@: move the byte to q13L[4]
	
@: byte 101
	
	vldr		q0L,=0x2040800000000000
	vldr		q0H,=0x0000000102040810
	vshr.u8		q2,q12,#2				@: move bits 2 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 101 now in q2[0]
	vsli.u64	q13L,q2L,#40			@: move the byte to q13L[5]
		
@: byte 118
	
	vldr		q0L,=0x4080000000000000
	vldr		q0H,=0x0000010204081020
	vshr.u8		q2,q12,#1				@: move bits 1 to bits 0
	vand		q2,q1					@: mask off bits 0
	vmul.u8		q2,q0					@: move each bit into position
	vpaddl.u8	q2,q2					@: accumulate the bits into 1 byte
	vpaddl.u16	q2,q2
	vpaddl.u32	q2,q2
	vorr		q2L,q2H					@: byte 118 now in q2[0]
	vsli.u64	q13L,q2L,#48			@: move the byte to q13L[6]
	
@: now do the 128 bytes 
	
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

@: do bytes 0-15

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0
	
	vand		q14,q4,q1
	vand		q15,q5,q1	

	vorr		q2,q14							@: shift and accumulate
	vand		q14,q6,q1
	vsra.u8		q3,q15,#1
	vand		q15,q7,q1
	vsra.u8		q2,q14,#2
	vand		q14,q8,q1
	vsra.u8		q3,q15,#3
	vand		q15,q9,q1
	vsra.u8		q2,q14,#4
	vand		q14,q10,q1
	vsra.u8		q3,q15,#5
	vand		q15,q11,q1
	vsra.u8		q2,q14,#6
	vsra.u8		q3,q15,#7
	vorr		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[0],[r1]!					@: write byte 16
		
@: do bytes 17-32

	vld1.u8		q4L[0],[r3]						@:	16-7	32-0	49-1	66-2	83-3	100-4	117-5	134-6
	add			r3,#LBPR
	vext.u8		q4,q4,q4,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	vmov.u8		q3,#0							@: accumulator	
	
	vand		q14,q5,q1
	vand		q15,q6,q1	
	
	vmla.u16	q2,q14,q0L[1]					@: multiply by scalar
	vand		q14,q7,q1
	vorr		q3,q15
	vand		q15,q8,q1
	vsra.u8		q2,q14,#1
	vand		q14,q9,q1
	vsra.u8		q3,q15,#2
	vand		q15,q10,q1
	vsra.u8		q2,q14,#3
	vand		q14,q11,q1
	vsra.u8		q3,q15,#4
	vand		q15,q4,q1
	vsra.u8		q2,q14,#5
	vsra.u8		q3,q15,#6
	vorr		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[1],[r1]!					@: write byte 33

@: do bytes 34-49

	vld1.u8		q5L[0],[r3]						@:	16-6	33-7	49-0	66-1	83-2	100-3	117-4	134-5
	add			r3,#LBPR
	vext.u8		q5,q5,q5,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	vmov.u8		q3,#0							@: accumulator	
	
	vand		q14,q6,q1
	vand		q15,q7,q1	

	vmla.u16	q2,q14,q0L[2]					@: multiply by 4
	vand		q14,q8,q1
	vmla.u16	q3,q15,q0L[1]					@: multiply by 2
	vand		q15,q9,q1	
	vorr		q2,q14
	vand		q14,q10,q1
	vsra.u8		q3,q15,#1
	vand		q15,q11,q1	
	vsra.u8		q2,q14,#2
	vand		q14,q4,q1
	vsra.u8		q3,q15,#3
	vand		q15,q5,q1	
	vsra.u8		q2,q14,#4
	vsra.u8		q3,q15,#5
	vorr		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[2],[r1]!					@: write byte 50

	b			lr14n6
	
	.align	2	
	.ltorg										@: literal pool
	.align	2

@: do bytes 51-66

lr14n6:
	vld1.u8		q6L[0],[r3]						@:	16-5	33-6	50-7	66-0	83-1	100-2	117-3	134-4
	add			r3,#LBPR
	vext.u8		q6,q6,q6,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	
	vmov.u8		q3,#0

	vand		q14,q7,q1	
	vand		q15,q8,q1	

	vmla.u16	q2,q14,q0L[3]					@: multiply by 8
	vand		q14,q9,q1	
	vmla.u16	q3,q15,q0L[2]					@: multiply by 4
	vand		q15,q10,q1	
	vmla.u16	q2,q14,q0L[1]					@: multiply by 2
	vand		q14,q11,q1	
	vorr		q3,q15
	vand		q15,q4,q1	
	vsra.u8		q2,q14,#1
	vand		q14,q5,q1	
	vsra.u8		q3,q15,#2
	vand		q15,q6,q1	
	vsra.u8		q2,q14,#3
	vsra.u8		q3,q15,#4
	vorr.u8		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[3],[r1]!					@: write byte 67

@: do bytes 68-83 

	vld1.u8		q7L[0],[r3]						@:	16-4	33-5	50-6	67-7	83-0	100-1	117-2	134-3
	add			r3,#LBPR
	vext.u8		q7,q7,q7,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator
	vmov.u8		q3,#0							@: clear accumulator

	vand		q14,q8,q1	
	vand		q15,q9,q1	
	
	vmla.u16	q2,q14,q0H[0]					@: multiply by 16
	vand		q14,q10,q1	
	vmla.u16	q3,q15,q0L[3]					@: multiply by 8
	vand		q15,q11,q1	
	vmla.u16	q2,q14,q0L[2]					@: multiply by 4
	vand		q14,q4,q1	
	vmla.u16	q3,q15,q0L[1]					@: multiply by 2
	vand		q15,q5,q1	
	vorr		q2,q14
	vand		q14,q6,q1	
	vsra.u8		q3,q15,#1
	vand		q15,q7,q1	
	vsra.u8		q2,q14,#2
	vsra.u8		q3,q15,#3
	vorr.u8		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[4],[r1]!					@: write byte 84

@: do bytes 85-100 

	vld1.u8		q8L[0],[r3]						@:	16-3	33-4	50-5	67-6	84-7	100-0	117-1	134-2
	add			r3,#LBPR
	vext.u8		q8,q8,q8,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator
	vmov.u8		q3,#0							@: clear accumulator

	vand		q14,q9,q1	
	vand		q15,q10,q1	

	vmla.u16	q2,q14,q0H[1]					@: multiply by 32
	vand		q14,q11,q1	
	vmla.u16	q3,q15,q0H[0]					@: multiply by 16
	vand		q15,q4,q1	
	vmla.u16	q2,q14,q0L[3]					@: multiply by 8
	vand		q14,q5,q1	
	vmla.u16	q3,q15,q0L[2]					@: multiply by 4
	vand		q15,q6,q1	
	vmla.u16	q2,q14,q0L[1]					@: multiply by 2
	vand		q14,q7,q1	
	vorr		q3,q15
	vand		q15,q8,q1	
	vsra.u8		q2,q14,#1
	vsra.u8		q3,q15,#2
	vorr.u8		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[5],[r1]!					@: write byte 101 

@: do bytes 102-117

	vld1.u8		q9L[0],[r3]						@:	16-2	33-3	50-4	67-5	84-6	101-7	117-0	134-1
	add			r3,#LBPR
	vext.u8		q9,q9,q9,#1						@: rotate right 1 byte

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator
	vmov.u8		q3,#0							@: clear accumulator

	vand		q14,q10,q1	
	vand		q15,q11,q1	

	vmla.u16	q2,q14,q0H[2]					@: multiply by 64
	vand		q14,q4,q1	
	vmla.u16	q3,q15,q0H[1]					@: multiply by 32
	vand		q15,q5,q1	
	vmla.u16	q2,q14,q0H[0]					@: multiply by 16
	vand		q14,q6,q1	
	vmla.u16	q3,q15,q0L[3]					@: multiply by 8
	vand		q15,q7,q1	
	vmla.u16	q2,q14,q0L[2]					@: multiply by 4
	vand		q14,q8,q1	
	vmla.u16	q3,q15,q0L[1]					@: multiply by 2
	vand		q15,q9,q1	
	vorr		q2,q14
	vsra.u8		q3,q15,#1
	vorr.u8		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
	vst1.u8		q13L[6],[r1]!					@: write byte 118

@: do bytes 119-134 

	vld1.u8		q10L[0],[r3]					@:	16-1	33-2	50-3	67-4	84-5	101-6	118-7	134-0
	add			r3,#LBPR
	vext.u8		q10,q10,q10,#1					@: rotate right 1 byte

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator
	vmov.u8		q3,#0							@: clear accumulator

	vand		q14,q11,q1	
	vand		q15,q4,q1	

	vmla.u16	q2,q14,q0H[3]					@: multiply by 128
	vand		q14,q5,q1	
	vmla.u16	q3,q15,q0H[2]					@: multiply by 64
	vand		q15,q6,q1	
	vmla.u16	q2,q14,q0H[1]					@: multiply by 32
	vand		q14,q7,q1	
	vmla.u16	q3,q15,q0H[0]					@: multiply by 16
	vand		q15,q8,q1	
	vmla.u16	q2,q14,q0L[3]					@: multiply by 8
	vand		q14,q9,q1	
	vmla.u16	q3,q15,q0L[2]					@: multiply by 8
	vand		q15,q10,q1	
	vmla.u16	q2,q14,q0L[1]					@: multiply by 2
	vorr		q3,q15
	vorr.u8		q2,q3							@: 16 bytes now in q2
		
	bl			write16							@: write 16 bytes in q2 to [r1] and update r1
/// vst1.u8		q13L[7],[r1]!					@: write byte 134 (already done above)

@: proceed to the next column
	
	pop			{r0,r1}							@: restore the input and output pointers
	add			r0,#1							@: next byte along the rows
	add			r1,#135							@: next 135 output bytes
	
	adds		r2,#-1							@: column counter
	bne			lr14n2

lr14n98:
	pop			{r0-r12,r14}
	mov			pc,r14

@: write 16 bytes in q2 to [r1]! accounting for 32 bit alignment	
@: more than 16 bytes may be written, so this is only suitable for sequential output

write16:
	push		{r1,r4}
	and			r4,r1,#~3						@: mask off the bottom 2 bits of the output pointer 
	cmp			r4,r1
	beq			write16d						@: r1 is already 32 bit aligned
	add			r4,#4							@: increase r4 to the next 32 bit boundary
write16b:
	vst1.u8		q2L[0],[r1]!					@: write the lowest byte of q2
	vext.u8		q2,q2,q2,#1						@: rotate q2 right 1 byte			
	cmp			r4,r1
	bne			write16b
write16d:
	vstm		r1!,{q2}	
	pop			{r1,r4}
	add			r1,#16							@: 16 output bytes written
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2	

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n13
@:		120 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
	
ldpc_reformat_n13:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=45									@: loop counter ; 45 bytes in each LDPC inter array row
													@: . . . loop for upper lower sections
	mov		r3,#0									@: 0/1 = upper / lower section

@: loop here	
	
lr13n2: 
	push		{r0}								@: save the input pointer
	
@: load a byte from 8 rows of the inter array into q4-q7; 64 bytes in total

lr13n3:
	vld1.u8		d8[0],[r0]
	add			r0,#LBPR
	vld1.u8		d9[0],[r0]
	add			r0,#LBPR
	vld1.u8		d10[0],[r0]
	add			r0,#LBPR
	vld1.u8		d11[0],[r0]
	add			r0,#LBPR
	vld1.u8		d12[0],[r0]
	add			r0,#LBPR
	vld1.u8		d13[0],[r0]
	add			r0,#LBPR
	vld1.u8		d14[0],[r0]
	add			r0,#LBPR
	vld1.u8		d15[0],[r0]
	add			r0,#LBPR

	vld1.u8		d8[1],[r0]
	add			r0,#LBPR
	vld1.u8		d9[1],[r0]
	add			r0,#LBPR
	vld1.u8		d10[1],[r0]
	add			r0,#LBPR
	vld1.u8		d11[1],[r0]
	add			r0,#LBPR
	vld1.u8		d12[1],[r0]
	add			r0,#LBPR
	vld1.u8		d13[1],[r0]
	add			r0,#LBPR
	vld1.u8		d14[1],[r0]
	add			r0,#LBPR
	vld1.u8		d15[1],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[2],[r0]
	add			r0,#LBPR
	vld1.u8		d9[2],[r0]
	add			r0,#LBPR
	vld1.u8		d10[2],[r0]
	add			r0,#LBPR
	vld1.u8		d11[2],[r0]
	add			r0,#LBPR
	vld1.u8		d12[2],[r0]
	add			r0,#LBPR
	vld1.u8		d13[2],[r0]
	add			r0,#LBPR
	vld1.u8		d14[2],[r0]
	add			r0,#LBPR
	vld1.u8		d15[2],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[3],[r0]
	add			r0,#LBPR
	vld1.u8		d9[3],[r0]
	add			r0,#LBPR
	vld1.u8		d10[3],[r0]
	add			r0,#LBPR
	vld1.u8		d11[3],[r0]
	add			r0,#LBPR
	vld1.u8		d12[3],[r0]
	add			r0,#LBPR
	vld1.u8		d13[3],[r0]
	add			r0,#LBPR
	vld1.u8		d14[3],[r0]
	add			r0,#LBPR
	vld1.u8		d15[3],[r0]
	add			r0,#LBPR

	vld1.u8		d8[4],[r0]
	add			r0,#LBPR
	vld1.u8		d9[4],[r0]
	add			r0,#LBPR
	vld1.u8		d10[4],[r0]
	add			r0,#LBPR
	vld1.u8		d11[4],[r0]
	add			r0,#LBPR
	vld1.u8		d12[4],[r0]
	add			r0,#LBPR
	vld1.u8		d13[4],[r0]
	add			r0,#LBPR
	vld1.u8		d14[4],[r0]
	add			r0,#LBPR
	vld1.u8		d15[4],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[5],[r0]
	add			r0,#LBPR
	vld1.u8		d9[5],[r0]
	add			r0,#LBPR
	vld1.u8		d10[5],[r0]
	add			r0,#LBPR
	vld1.u8		d11[5],[r0]
	add			r0,#LBPR
	vld1.u8		d12[5],[r0]
	add			r0,#LBPR
	vld1.u8		d13[5],[r0]
	add			r0,#LBPR
	vld1.u8		d14[5],[r0]
	add			r0,#LBPR
	vld1.u8		d15[5],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[6],[r0]
	add			r0,#LBPR
	vld1.u8		d9[6],[r0]
	add			r0,#LBPR
	vld1.u8		d10[6],[r0]
	add			r0,#LBPR
	vld1.u8		d11[6],[r0]
	add			r0,#LBPR
	vld1.u8		d12[6],[r0]
	add			r0,#LBPR
	vld1.u8		d13[6],[r0]
	add			r0,#LBPR
	vld1.u8		d14[6],[r0]
	add			r0,#LBPR
	vld1.u8		d15[6],[r0]
	add			r0,#LBPR

	vld1.u8		d8[7],[r0]
	add			r0,#LBPR
	vld1.u8		d9[7],[r0]
	add			r0,#LBPR
	vld1.u8		d10[7],[r0]
	add			r0,#LBPR
	vld1.u8		d11[7],[r0]
	add			r0,#LBPR
	vld1.u8		d12[7],[r0]
	add			r0,#LBPR
	vld1.u8		d13[7],[r0]
	add			r0,#LBPR
	vld1.u8		d14[7],[r0]
	add			r0,#LBPR
	vld1.u8		d15[7],[r0]
	add			r0,#LBPR

@:	for the first time around the outer loop . . .
@:	d4	contains bits 0000 0120 0240 0360 0480 0600 0720 0840 / 0008 0128 . . . 
@:	d5	contains bits 0001 0121								  / 0009 0129 . . . 
@:	. . . 
@:	d11 contains bits 0007 0127								  / 0015 0135 . . . 

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

@: do bytes 0, 1, 2, 3, 4, 5, 6, 7

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q2,#0							@: accumulator	

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 15, 16, 17, 18, 19, 20, 21, 22

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[1]					@: multiply by scalar
	vorr		q2H,q8H
	vsra.u8		q2L,q9L,#1
	vsra.u8		q2H,q9H,#2
	vsra.u8		q2L,q10L,#3
	vsra.u8		q2H,q10H,#4
	vsra.u8		q2L,q11L,#5
	vsra.u8		q2H,q11H,#6
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H

@: do bytes 30, 31, 32, 33, 34, 35, 36, 37

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vsra.u8		q2L,q10L,#2
	vsra.u8		q2H,q10H,#3
	vsra.u8		q2L,q11L,#4
	vsra.u8		q2H,q11H,#5
	vorr.u8		q13L,q2L,q2H					@: 8 bytes now in q13L

@: do bytes 45, 46, 47, 48, 49, 50, 51, 52

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q8H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vsra.u8		q2L,q10L,#1
	vsra.u8		q2H,q10H,#2
	vsra.u8		q2L,q11L,#3
	vsra.u8		q2H,q11H,#4
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q13H

@: do bytes 60, 61, 62, 63, 64, 65, 66, 67

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q14L,q2L,q2H					@: 8 bytes now in q14L

@: do bytes 75, 76, 77, 78, 79, 80, 81, 82

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q8H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vsra.u8		q2L,q11L,#1
	vsra.u8		q2H,q11H,#2
	vorr.u8		q14H,q2L,q2H					@: 8 bytes now in q14H

@: do bytes 90, 91, 92, 93, 94, 95, 96, 97

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vorr.u8		q15L,q2L,q2H					@: 8 bytes now in q15L

@: do bytes 105, 106, 107, 108, 109, 110, 111, 112

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q8H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q9L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q9H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q10L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q10H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vorr.u8		q15H,q2L,q2H					@: 8 bytes now in q15H

@: after the first time through the upper section, the 64 bytes in the registers are (byte 0 first):
@:
@: q12:	 00	 01	 02	 03	 04	 05	 06	 07	   15  16  17  18  19  20  21  22
@: q13:	 30	 31	 32	 33	 34	 35	 36	 37	   45  46  47  48  49  50  51  52
@: q14:	 60	 61	 62	 63	 64	 65	 66	 67	   75  76  77  78  79  80  81  82
@: q15:	 90	 91	 92	 93	 94	 95	 96	 97	  105 106 107 108 109 110 111 112
@:
@: after the first time through the lower section, the 56 bytes in the registers are:
@:	
@: q12:	 08	 09	 10	 11	 12	 13	 14	 ..	 23	 24	 25	 26	 27	 28	 29	 .. 
@: q13:	 38	 39	 40	 41	 42	 42	 44	 ..	 53	 54	 55	 56	 57	 58	 59	 ..
@: q14:	 68	 69	 70	 71	 72	 73	 74	 ..	 83	 84	 85	 86	 87	 88	 89	 .. 
@: q15:	 98	 99 100 101 102 103 104	 .. 113 114 115 116 117 118 119	 ..		
@:
@: for the upper section, the bytes can be shifted into position and stored
@: for the lower section, the bytes need to be interleaved with those already written in the upper section
@:
@:

	teq			r3,#0
	bne			lr13n6							@: just done lower section - go amalgamate upper and lower sections

@: upper section; rearrange the bytes into q4-q11

lr13n4:
/*
	vldr		q12L,=#0x0706050403020100
	vldr		q12H,=#0x2221201918171615
	vldr		q13L,=#0x3736353433323130
	vldr		q13H,=#0x5251504948474645
	vldr		q14L,=#0x6766656463626160
	vldr		q14H,=#0x8281807978777675
	vldr		q15L,=#0x9796959493929190
	vldr		q15H,=#0xb2b1b0a9a8a7a6a5
*/

	vmov.u8		q4,#0
	vmov.u8		q5,#0
	vmov.u8		q6,#0
	vmov.u8		q7,#0
	vmov.u8		q8,#0
	vmov.u8		q9,#0
	vmov.u8		q10,#0
	vmov.u8		q11,#0
	
	vmov		q4L,q12L						@: bytes 0-7
	vsli.u64	q4H,q12H,#56					@: byte 15
	vsri.u64	q5L,q12H,#8						@: bytes 16-22
	vsli.u64	q5H,q13L,#48					@: bytes 30-31
	vsri.u64	q6L,q13L,#16					@: bytes 32-37
	vsli.u64	q6H,q13H,#40					@: bytes 45-47
	vsri.u64	q7L,q13H,#24					@: bytes 48-52
	vsli.u64	q7H,q14L,#32					@: bytes 60-63
	
	vsri.u64	q8L,q14L,#32					@: bytes 64-67
	vsli.u64	q8H,q14H,#24					@: bytes 75-79
	vsri.u64	q9L,q14H,#40					@: bytes 80-82
	vsli.u64	q9H,q15L,#16					@: bytes 90-95
	vsri.u64	q10L,q15L,#48					@: bytes 96-97
	vsli.u64	q10H,q15H,#8					@: bytes 105-111
	vsri.u64	q11L,q15H,#56					@: byte 112

	vstm		r1,{q4-q11}						@: store 128 bytes; only 120 needed, but no problem 

	b			lr13n8
	
@: lower section; load the 120 bytes stored by the upper section and interleave the bytes from the lower section	
		
lr13n6:
	
@:	populate the unused top bytes of each D register generated by the lower section 
@:	. . . from the upper section, or they will be overwritten 

	vldm		r1,{q4-q11}

/*
	vldr		q12L,=#0x0014131211100908
	vldr		q12H,=#0x0029282726252423
	vldr		q13L,=#0x0044434241403938
	vldr		q13H,=#0x0059585756555453
	vldr		q14L,=#0x0074737271706968
	vldr		q14H,=#0x0089888786858483
	vldr		q15L,=#0x00a4a3a2a1a09998
	vldr		q15H,=#0x00b9b8b7b6b5b4b3
*/

	vshr.u64	q3L,q4H,#56						@: byte 15
	vsli.u64	q12L,q3L,#56					
	
	vshl.u64	q3L,q5H,#8						@: byte 30
	vshr.u64	q3L,#56 
	vsli.u64	q12H,q3L,#56					
	
	vshl.u64	q3L,q6H,#16						@: byte 45
	vshr.u64	q3L,#56
	vsli.u64	q13L,q3L,#56
	
	vshl.u64	q3L,q7H,#24						@: byte 60
	vshr.u64	q3L,#56
	vsli.u64	q13H,q3L,#56
	
	vsli.u64	q3L,q8H,#32						@: byte 75
	vsri.u64	q3L,#56
	vsli.u64	q14L,q3L,#56
	
	vsli.u64	q3L,q9H,#40						@: byte 90
	vsri.u64	q3L,#56
	vsli.u64	q14H,q3L,#56
	
	vsli.u64	q3L,q10H,#48					@: byte 105
	vsri.u64	q3L,#56
	vsli.u64	q15L,q3L,#56
	
	vorr		q4H,q12L						@: bytes 8-14
	vsli.u64	q5L,q12H,#56					@: byte 23
	vsri.u64	q5H,q12H,#8						@: bytes 24-29
	vsli.u64	q6L,q13L,#48					@: bytes 38-39
	vsri.u64	q6H,q13L,#16					@: bytes 40-44
	vsli.u64	q7L,q13H,#40					@: bytes 53-55
	vsri.u64	q7H,q13H,#24					@: bytes 56-59
	vsli.u64	q8L,q14L,#32					@: bytes 68-71
	vsri.u64	q8H,q14L,#32					@: bytes 72-74
	vsli.u64	q9L,q14H,#24					@: bytes 83-87
	vsri.u64	q9H,q14H,#40					@: bytes 88-89
	vsli.u64	q10L,q15L,#16					@: bytes 98-103
	vsri.u64	q10H,q15L,#48					@: byte 104
	vsli.u64	q11L,q15H,#8					@: bytes 113-119

	vstm		r1,{q4-q11}						@: store the combined sections	
		
	b			lr13n8	
		
@: come here after either section		
	
lr13n8:				
	eor			r3,#1							@: toggle the section indicator
	teq			r3,#0
	bne			lr13n3							@: do the lower section

	pop			{r0}							@: restore the input pointer
	add			r0,#1							@: move the input pointer 1 byte along each inter array row
	add			r1,#120							@: step the output pointer for 120 bytes per loop	
			
	adds		r2,#-1
	bne			lr13n2							@: do another loop			

lr13n10:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

		
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	save 16 bytes from q1
@:		r1 points to the first output location
@:		r3 is the increment per byte
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

save_16_bytes:	
	push		{r1,r4}
	
	vst1.u8		q1L[0],[r1]						@: save the 8 bytes individually
	add			r1,r4
	vst1.u8		q1L[1],[r1]						
	add			r1,r4
	vst1.u8		q1L[2],[r1]						
	add			r1,r4
	vst1.u8		q1L[3],[r1]						
	add			r1,r4
	vst1.u8		q1L[4],[r1]						
	add			r1,r4
	vst1.u8		q1L[5],[r1]						
	add			r1,r4
	vst1.u8		q1L[6],[r1]						
	add			r1,r4
	vst1.u8		q1L[7],[r1]						
	add			r1,r4
	
	vst1.u8		q1H[0],[r1]						@: save the 8 bytes individually
	add			r1,r4
	vst1.u8		q1H[1],[r1]						
	add			r1,r4
	vst1.u8		q1H[2],[r1]						
	add			r1,r4
	vst1.u8		q1H[3],[r1]						
	add			r1,r4
	vst1.u8		q1H[4],[r1]						
	add			r1,r4
	vst1.u8		q1H[5],[r1]						
	add			r1,r4
	vst1.u8		q1H[6],[r1]						
	add			r1,r4
	vst1.u8		q1H[7],[r1]						
	add			r1,r4
	
	pop			{r1,r4}
	mov			pc,r14
	
	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n25
@:		108 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		
ldpc_reformat_n25:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array			@: input pointer
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					

	ldr			r4,=108*LBPR
	add			r4,r0							@: r4 points to unused row 108 in the LDPC inter array

	push		{r0}
	mov			r5,#8
lr25n1: 
	vldm		r0,{q3-q5}						@: load row 0/1/2/3 of the inter array
	bl			ldpcbits_1						@: shift it left 1 bit
	vstm		r4,{q6-q8}						@: store in row 108/109/110/111
	add			r0,#LBPR
	add			r4,#LBPR
	adds		r5,#-1
	bne			lr25n1
	pop			{r0}

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
			
	ldr			r2,=3							@: loop counter; process 16 bytes per row; 45 bytes in each LDPC inter array row

@: loop here every 16 bytes along the inter array rows	

lr25n2: 
	push		{r0}							@: save the input pointer
	push		{r1}							@: save the output pointer	
	
@: load 4 x 16 bytes into q4-q7
	
	vldm		r0,{q4}
	add			r0,#LBPR
	vldm		r0,{q5}
	add			r0,#LBPR
	vldm		r0,{q6}
	add			r0,#LBPR
	vldm		r0,{q7}
	add			r0,#LBPR

	ldr			r3,=14							@: loop counter for each 8 rows down the inter array
												@: 108 rows = 4 + 13 * 8, plus one for the wrap
@: loop here every 8 rows down the inter array	

@: load 8 x 16 bytes into q8-q15	
	
lr25n4:
	vldm		r0,{q8}
	add			r0,#LBPR
	vldm		r0,{q9}
	add			r0,#LBPR
	vldm		r0,{q10}
	add			r0,#LBPR
	vldm		r0,{q11}
	add			r0,#LBPR
	vldm		r0,{q12}
	add			r0,#LBPR
	vldm		r0,{q13}
	add			r0,#LBPR
	vldm		r0,{q14}
	add			r0,#LBPR
	vldm		r0,{q15}
	add			r0,#LBPR

@: do bits 7,5,3,1 using q4-q11		

@: do output bytes 0, 108, . . . 1620  (16 bytes) first time around the lr25n4 loop
@: do output bytes 1, 109, . . . 1621  (16 bytes) second time around the lr25n4 loop
	
	vmov.u8		q2,#0x80						@: AND mask for bits 7

	vmov.u8		q1,#0							@: accumulator

	vand		q3,q4,q2
	vorr		q1,q3							@: shift and accumulate
	vand		q3,q5,q2
	vsra.u8		q1,q3,#1
	vand		q3,q6,q2
	vsra.u8		q1,q3,#2
	vand		q3,q7,q2
	vsra.u8		q1,q3,#3
	vand		q3,q8,q2
	vsra.u8		q1,q3,#4
	vand		q3,q9,q2
	vsra.u8		q1,q3,#5
	vand		q3,q10,q2
	vsra.u8		q1,q3,#6
	vand		q3,q11,q2						
	vsra.u8		q1,q3,#7						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#0							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer
	
@: do bytes 27, 135, . . . 1647	 (16 bytes)
	
	vmov.u8		q2,#0x20						@: AND mask for bits 5
		
	vmov.u8		q1,#0							@: clear accumulator
	
	vand		q3,q4,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q5,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q6,q2						
	vorr		q1,q3
	vand		q3,q7,q2
	vsra.u8		q1,q3,#1
	vand		q3,q8,q2
	vsra.u8		q1,q3,#2
	vand		q3,q9,q2
	vsra.u8		q1,q3,#3
	vand		q3,q10,q2
	vsra.u8		q1,q3,#4
	vand		q3,q11,q2						
	vsra.u8		q1,q3,#5						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#27							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer
 
@: do bytes 54, 162, . . . 1674	 (16 bytes) 
	
	vmov.u8		q2,#0x08						@: AND mask for bits 3

	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q4,q2
	vmla.u16	q1,q3,q0H[0]					@: multiply by 16
	vand		q3,q5,q2
	vmla.u16	q1,q3,q0L[3]					@: multiply by 8
	vand		q3,q6,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q7,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q8,q2
	vorr		q1,q3
	vand		q3,q9,q2
	vsra.u8		q1,q3,#1
	vand		q3,q10,q2
	vsra.u8		q1,q3,#2
	vand		q3,q11,q2
	vsra.u8		q1,q3,#3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#54							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer

@: do bytes 81, 189, . . . 1701	 (16 bytes)

	vmov.u8		q2,#0x02						@: AND mask for bits 1	
	
	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q4,q2
	vmla.u16	q1,q3,q0H[2]					@: multiply by 64
	vand		q3,q5,q2
	vmla.u16	q1,q3,q0H[1]					@: multiply by 32
	vand		q3,q6,q2
	vmla.u16	q1,q3,q0H[0]					@: multiply by 16
	vand		q3,q7,q2
	vmla.u16	q1,q3,q0L[3]					@: multiply by 8
	vand		q3,q8,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q9,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q10,q2
	vorr		q1,q3
	vand		q3,q11,q2
	vsra.u8		q1,q3,#1						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#81							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer
	
@: do bits 6, 4, 2, 0 using q8-q15

@: do output bytes 14, 122, . . . 1634	(16 bytes)

	vmov.u8		q2,#0x40						@: AND mask for bits 6

	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q8,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q9,q2
	vorr		q1,q3
	vand		q3,q10,q2
	vsra.u8		q1,q3,#1
	vand		q3,q11,q2
	vsra.u8		q1,q3,#2
	vand		q3,q12,q2
	vsra.u8		q1,q3,#3
	vand		q3,q13,q2
	vsra.u8		q1,q3,#4
	vand		q3,q14,q2
	vsra.u8		q1,q3,#5
	vand		q3,q15,q2
	vsra.u8		q1,q3,#6						@: 8 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#14							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer

@: do bytes 41, 149 . . . 1661	(16 bytes)

	vmov.u8		q2,#0x10						@: AND mask for bits 4

	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q8,q2
	vmla.u16	q1,q3,q0L[3]					@: multiply by 8
	vand		q3,q9,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q10,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q11,q2
	vorr		q1,q3
	vand		q3,q12,q2
	vsra.u8		q1,q3,#1
	vand		q3,q13,q2
	vsra.u8		q1,q3,#2
	vand		q3,q14,q2
	vsra.u8		q1,q3,#3
	vand		q3,q15,q2
	vsra.u8		q1,q3,#4						@: 8 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#41							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer

@: do bytes 68, 176, . . . 1688	 (16 bytes)

	vmov.u8		q2,#0x04						@: AND mask for bits 2

	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q8,q2
	vmla.u16	q1,q3,q0H[1]					@: multiply by 32
	vand		q3,q9,q2
	vmla.u16	q1,q3,q0H[0]					@: multiply by 16
	vand		q3,q10,q2
	vmla.u16	q1,q3,q0L[3]					@: multiply by 8
	vand		q3,q11,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q12,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q13,q2
	vorr		q1,q3
	vand		q3,q14,q2
	vsra.u8		q1,q3,#1
	vand		q3,q15,q2
	vsra.u8		q1,q3,#2						@: 8 bytes now in q1
		
	push		{r1}							@: save the output pointer
	add			r1,#68							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer

@: do bytes 95, 203, . . . 1715	 (16 bytes) 
	
	vmov.u8		q2,#0x01						@: AND mask for bits 0

	vmov.u8		q1,#0							@: clear accumulator

	vand		q3,q8,q2
	vmla.u16	q1,q3,q0H[3]					@: multiply by 128
	vand		q3,q9,q2
	vmla.u16	q1,q3,q0H[2]					@: multiply by 64
	vand		q3,q10,q2
	vmla.u16	q1,q3,q0H[1]					@: multiply by 32
	vand		q3,q11,q2
	vmla.u16	q1,q3,q0H[0]					@: multiply by 16
	vand		q3,q12,q2
	vmla.u16	q1,q3,q0L[3]					@: multiply by 8
	vand		q3,q13,q2
	vmla.u16	q1,q3,q0L[2]					@: multiply by 4
	vand		q3,q14,q2
	vmla.u16	q1,q3,q0L[1]					@: multiply by 2
	vand		q3,q15,q2
	vorr		q1,q3
		
	push		{r1}							@: save the output pointer
	add			r1,#95							@: pointer 
	ldr			r4,=108							@: pointer increment per byte
	bl			save_16_bytes					@: save the 16 bytes in q1 
	pop			{r1}							@: restore the output pointer

@: move the partly unused registers to the top	
	
	vmov		q4,q12
	vmov		q5,q13
	vmov		q6,q14
	vmov		q7,q15
	
	add			r1,#1							@: increment the output pointer
	adds		r3,#-1							@: inner loop counter
	bne			lr25n4							@: go around the inner loop
	
	pop			{r1}							@: restore the output pointer saved near lr25n2
	add			r1,#16*108						@: bytes written output per outer loop
	
	pop			{r0}							@: restore the input pointer saved near lr25n2
	add			r0,#16							@: move along the inter array rows
	
	adds		r2,#-1							@: outer loop counter
	bne			lr25n2
	
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n12
@:		90 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		
ldpc_reformat_n12:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=45									@: loop counter; 45 bytes in each LDPC inter array row

lr12n2: 
	push		{r0}								@: save the input pointer
	
@: load 64 bytes from the inter array into q2-q5

	vld1.u8		q2L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[0],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[1],[r0]
	add			r0,#LBPR
	
	vld1.u8		q2L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[2],[r0]
	add			r0,#LBPR
	
	vld1.u8		q2L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[3],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[4],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[4],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[4],[r0]
	add			r0,#LBPR
	
	vld1.u8		q2L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[5],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[5],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[5],[r0]
	add			r0,#LBPR
	
	vld1.u8		q2L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[6],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[6],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[6],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[7],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[7],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[7],[r0]
	add			r0,#LBPR
	
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
	
@: do bytes 0, 1, 2, 3, 4, 5, 6, 7
	
	vmov.u8		q1,#0x80						@: AND mask for bits 7

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vmov.u8		q1,#0							@: accumulator

	vorr		q1L,q6L							@: shift and accumulate
	vsra.u8		q1H,q6H,#1
	vsra.u8		q1L,q7L,#2
	vsra.u8		q1H,q7H,#3
	vsra.u8		q1L,q8L,#4
	vsra.u8		q1H,q8H,#5
	vsra.u8		q1L,q9L,#6
	vsra.u8		q1H,q9H,#7
	vorr.u8		q10L,q1L,q1H					@: 8 bytes now in q10L

@: do bytes 45, 46, 47, 48, 49, 50, 51, 52

	vmov.u8		q1,#0x08						@: AND mask for bits 3

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q6L,q0H[0]					@: multiply by 16
	vmla.u16	q1H,q6H,q0L[3]					@: multiply by 8
	vmla.u16	q1L,q7L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q7H,q0L[1]					@: multiply by 2
	vorr		q1L,q8L
	vsra.u8		q1H,q8H,#1
	vsra.u8		q1L,q9L,#2
	vsra.u8		q1H,q9H,#3
	vorr.u8		q12L,q1L,q1H					@: 8 bytes now in q12L
	
@: do bytes 12, 13, 14, 15, 16, 17, 18

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6-q8 collectively right by one byte		
	vext.u8		q7,q7,q8,#1						
	vext.u8		q8,q8,q9,#1		
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q9L,q0L[1]					@: multiply by 2
	vorr		q1H,q9H
	vsra.u8		q1L,q6L,#1
	vsra.u8		q1H,q6H,#2
	vsra.u8		q1L,q7L,#3
	vsra.u8		q1H,q7H,#4
	vsra.u8		q1L,q8L,#5
	vsra.u8		q1H,q8H,#6
	vorr.u8		q10H,q1L,q1H					@: 7 bytes now in q10H
	
@: do bytes 57, 58, 59, 60, 61, 62, 63

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6-q8 collectively right by one byte		
	vext.u8		q7,q7,q8,#1						
	vext.u8		q8,q8,q9,#1		
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q9L,q0H[1]					@: multiply by 32
	vmla.u16	q1H,q9H,q0H[0]					@: multiply by 16
	vmla.u16	q1L,q6L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q6H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q7L,q0L[1]					@: multiply by 2
	vorr		q1H,q7H
	vsra.u8		q1L,q8L,#1
	vsra.u8		q1H,q8H,#2
	vorr.u8		q12H,q1L,q1H					@: 7 bytes now in q12H
		
@: do bytes 23, 24, 25, 26, 27, 28, 29

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6-q7 collectively right by one byte		
	vext.u8		q7,q7,q8,#1						
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q8H,q0L[1]					@: multiply by 2
	vorr		q1L,q9L
	vsra.u8		q1H,q9H,#1
	vsra.u8		q1L,q6L,#2
	vsra.u8		q1H,q6H,#3
	vsra.u8		q1L,q7L,#4
	vsra.u8		q1H,q7H,#5
	vorr.u8		q11L,q1L,q1H					@: 7 bytes now in q11L

@: do bytes 68, 69, 70, 71, 72, 73, 74

	vmov.u8		q1,#0x02						@: AND mask for bits 1	
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6-q7 collectively right by one byte		
	vext.u8		q7,q7,q8,#1						
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q1H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q1L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q1H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q1L,q6L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q6H,q0L[1]					@: multiply by 2
	vorr		q1L,q7L
	vsra.u8		q1H,q7H,#1
	vorr.u8		q13L,q1L,q1H					@: 7 bytes now in q13L
	
@: do bytes 34, 35, 36, 37, 38, 39, 40

	vmov.u8		q1,#0x10						@: AND mask for bits 4

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6 right by one byte		
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q7L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q7H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q8L,q0L[1]					@: multiply by 2
	vorr		q1H,q8H
	vsra.u8		q1L,q9L,#1
	vsra.u8		q1H,q9H,#2
	vsra.u8		q1L,q6L,#3
	vsra.u8		q1H,q6H,#4

	vorr.u8		q11H,q1L,q1H					@: 7 bytes now in q11H

@: do bytes 79, 80, 81, 82, 83, 84, 85

	vmov.u8		q1,#0x01						@: AND mask for bits 0

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q6,q6,q7,#1						@: shift q6 right by one byte		
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q7L,q0H[3]					@: multiply by 128
	vmla.u16	q1H,q7H,q0H[2]					@: multiply by 64
	vmla.u16	q1L,q8L,q0H[1]					@: multiply by 32
	vmla.u16	q1H,q8H,q0H[0]					@: multiply by 16
	vmla.u16	q1L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q6L,q0L[1]					@: multiply by 2
	vorr		q1H,q6H

	vorr.u8		q13H,q1L,q1H					@: 7 bytes now in q13H

@: the 58 bytes in the registers are now:	

@: q10:	 00	 01	 02	 03	 04	 05	 06	 07	   12  13  14  15  16  17  18  ..
@: q11:	 23	 24	 25	 26	 27	 28	 29	 ..	   34  35  36  37  38  39  40  ..
@: q12:	 45	 46	 47	 48	 49	 50	 51	 52	   57  58  59  60  61  62  63  ..			
@: q13:	 68	 69	 70	 71	 72	 73	 74	 ..	   79  80  81  82  83  84  85  ..	

@: shift the bytes into their correct position in q10-q15

	b			lr12n4	
	.align		2	
	.ltorg										@: literal pool
	.align		2
lr12n4:

/*	
	vldr		q10L,=0x0706050403020100
	vldr		q10H,=0xff18171615141312
	vldr		q11L,=0xff29282726252423
	vldr		q11H,=0xff40393837363534
	vldr		q12L,=0x5251504948474645
	vldr		q12H,=0xff63626160595857
	vldr		q13L,=0xff74737271706968
	vldr		q13H,=0xff85848382818079
*/

	vsri.u64	q15L,q13H,#8					@: 81-85
	vsli.u64	q14H,q13H,#56					@: 79
	vsri.u64	q14H,q13L,#32					@: 72-74
	vsli.u64	q14L,q13L,#32					@: 68-71
	vsli.u64	q13H,q12H,#8					@: 57-63
	vsri.u64	q13L,q12L,#24					@: 48-52
	vsli.u64	q12H,q12L,#40					@: 45-47
	vsri.u64	q12H,q11H,#48					@: 40
	vsli.u64	q12L,q11H,#16					@: 34-39
	vsri.u64	q11H,q11L,#8					@: 24-29
	vsli.u64	q11L,q11L,#56					@: 23
	vsri.u64	q11L,q10H,#32					@: 16-18
	vsli.u64	q10H,q10H,#32					@: 12-15
	
@: the 58 bytes in the registers are now:	

@: q10:	 00	 01	 02	 03	 04	 05	 06	 07	   ..  ..  ..  ..  12  13  14  15  
@: q11:	 16	 17	 18	 ..	 ..	 ..	 ..	 23	   24  25  26  27  28  29  ..  ..
@: q12:	 ..	 ..	 34	 35	 36	 37	 38	 39	   40  ..  ..  ..  ..  45  46  47  
@: q13:	 48	 49	 50	 51	 52	 ..	 ..	 ..	   ..  57  58  59  60  61  62  63  
@: q14:	 ..	 ..	 ..	 ..	 68	 69	 70	 71	   72  73  74  ..  ..  ..  ..  79  
@: q15:	 80	 81	 82	 83	 84	 85	 ..	 ..	   ..  ..
	
@: r0 is still pointing to row 64 of the inter table
@: load in the remaining 26 bytes from the inter array
@: but first load a byte for the first 6 rows of the inter array and shift left 1 bit

	mov			r4,r0							@: save the input pointer (inter array row 64)
	pop			{r0}							@: restore the input pointer to inter array row 0
	push		{r0}							@: re-save it
	
@: load a byte from the rows 0-5 of the inter table 
	
	vld1.u8		q3L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[3],[r0]
	add			r0,#LBPR
	
@: shift the bytes	
	
	vshl.u8		q3,#1
	vshl.u8		q4,#1
	vshl.u8		q5,#1
	
	mov			r0,r4							@: restore the input pointer to inter array row 64

@:	a byte from rows 58-63 is required for byte numbers that cross the row 64 boundary

	add			r4,#-64							
	vld1.u8		q5H[7],[r4]						@: from row 63
	add			r4,#-64							
	vld1.u8		q5L[7],[r4] 
	add			r4,#-64							
	vld1.u8		q4H[7],[r4] 
	add			r4,#-64							
	vld1.u8		q4L[7],[r4] 
	add			r4,#-64							
	vld1.u8		q3H[7],[r4] 
	add			r4,#-64							
	vld1.u8		q3L[7],[r4]						@: from row 58
	
@: load a byte from inter array rows 64-89
	
	vld1.u8		q2L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[0],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[0],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[0],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[1],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[1],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q3L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q3H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q4L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q4H[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5L[2],[r0]
	add			r0,#LBPR
	vld1.u8		q5H[2],[r0]
	add			r0,#LBPR

	vld1.u8		q2L[3],[r0]
	add			r0,#LBPR
	vld1.u8		q2H[3],[r0]
	add			r0,#LBPR
	
@: do bytes 8, 9, 10, 11
	
	vmov.u8		q1,#0x80						@: AND mask for bits 7

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vmov.u8		q1,#0							@: accumulator

	vorr		q1L,q6L							@: shift and accumulate
	vsra.u8		q1H,q6H,#1
	vsra.u8		q1L,q7L,#2
	vsra.u8		q1H,q7H,#3
	vsra.u8		q1L,q8L,#4
	vsra.u8		q1H,q8H,#5
	vsra.u8		q1L,q9L,#6
	vsra.u8		q1H,q9H,#7
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L

@: space is limited, so merge the bytes into the 90 byte output buffer in q10-q15	
	
	vshl.u64	q1L,#32							@: get rid of the top 4 bytes
	vsri.u64	q10H,q1L,#32					@: shift and merge	
	
@: do bytes 53, 54, 55, 56

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q6L,q0H[0]					@: multiply by 16
	vmla.u16	q1H,q6H,q0L[3]					@: multiply by 8
	vmla.u16	q1L,q7L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q7H,q0L[1]					@: multiply by 2
	vorr		q1L,q8L
	vsra.u8		q1H,q8H,#1
	vsra.u8		q1L,q9L,#2
	vsra.u8		q1H,q9H,#3
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L

	vsli.u64	q13L,q1L,#40					@: shift and merge the bottom 3 bytes
	vshl.u64	q1L,#32							@: move the 4th byte to the top
	vsri.u64	q13H,q1L,#56					@: shift and merge the 4th byte 

	b			lr12n6	
	.align		2	
	.ltorg										@: literal pool
	.align		2
lr12n6:
	
@: do bytes 19, 20, 21, 22

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte

	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q9L,q0L[1]					@: multiply by 2
	vorr		q1H,q9H
	vsra.u8		q1L,q6L,#1
	vsra.u8		q1H,q6H,#2
	vsra.u8		q1L,q7L,#3
	vsra.u8		q1H,q7H,#4
	vsra.u8		q1L,q8L,#5
	vsra.u8		q1H,q8H,#6
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L

	vshr.u64	q1H,q11L,#56					@: save byte 23
	vsli.u64	q11L,q1L,#24					@: move the 4 bytes into place
	vsli.u64	q11L,q1H,#56					@: restore byte 23
	
@: do bytes 64, 65, 66, 67

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q9L,q0H[1]					@: multiply by 32
	vmla.u16	q1H,q9H,q0H[0]					@: multiply by 16
	vmla.u16	q1L,q6L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q6H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q7L,q0L[1]					@: multiply by 2
	vorr		q1H,q7H
	vsra.u8		q1L,q8L,#1
	vsra.u8		q1H,q8H,#2
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L
	
	vshl.u64	q1L,#32							@: get rid of the top 4 bytes
	vsri.u64	q14L,q1L,#32					@: shift and merge	
		
@: do bytes 30, 31, 32, 33

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q8L,q8L,q8L,#7					@: rotate left by 1 byte
	vext.u8		q8H,q8H,q8H,#7					@: rotate left by 1 byte
	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte

	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q8H,q0L[1]					@: multiply by 2
	vorr		q1L,q9L
	vsra.u8		q1H,q9H,#1
	vsra.u8		q1L,q6L,#2
	vsra.u8		q1H,q6H,#3
	vsra.u8		q1L,q7L,#4
	vsra.u8		q1H,q7H,#5
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L

	vsli.u64	q11H,q1L,#48					@: bottom 2 bytes	
	vshl.u64	q1L,#32							@: get rid of the top 4 bytes
	vsri.u64	q12L,q1L,#48					@: shift and merge the top 2 bytes		
	
@: do bytes 75, 76, 77, 78

	vmov.u8		q1,#0x02						@: AND mask for bits 1	
	
	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q8L,q8L,q8L,#7					@: rotate left by 1 byte
	vext.u8		q8H,q8H,q8H,#7					@: rotate left by 1 byte
	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q1H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q1L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q1H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q1L,q6L,q0L[2]					@: multiply by 4
	vmla.u16	q1H,q6H,q0L[1]					@: multiply by 2
	vorr		q1L,q7L
	vsra.u8		q1H,q7H,#1
	vorr.u8		q1L,q1H							@: 4 bytes now in q1L

	vshr.u64	q1H,q14H,#56					@: save byte 79 
	vsli.u64	q14H,q1L,#24					@: shift and merge
	vsli.u64	q14H,q1H,#56					@: restore byte 79
	
@: do bytes 41, 42, 43, 44

	vmov.u8		q1,#0x10						@: AND mask for bits 4

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q7L,q7L,q7L,#7					@: rotate left by 1 byte
	vext.u8		q7H,q7H,q7H,#7					@: rotate left by 1 byte
	vext.u8		q8L,q8L,q8L,#7					@: rotate left by 1 byte
	vext.u8		q8H,q8H,q8H,#7					@: rotate left by 1 byte
	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte
	
	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q7L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q7H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q8L,q0L[1]					@: multiply by 2
	vorr		q1H,q8H
	vsra.u8		q1L,q9L,#1
	vsra.u8		q1H,q9H,#2
	vsra.u8		q1L,q6L,#3
	vsra.u8		q1H,q6H,#4
	vorr.u8		q1L,q1H							@: 8 bytes now in q1L
	
	vshl.u64	q1H,q12H,#56					@: save byte 40
	vshl.u64	q1L,#32							@: get rid of the top 4 bytes
	vsri.u64	q12H,q1L,#24					@: shift the 4 bytes into place
	vsri.u64	q12H,q1H,#56					@: restore byte 40

@: do bytes 86, 87, 88, 89

	vmov.u8		q1,#0x01						@: AND mask for bits 0

	vand		q6,q2,q1
	vand		q7,q3,q1	
	vand		q8,q4,q1	
	vand		q9,q5,q1	

	vext.u8		q7L,q7L,q7L,#7					@: rotate left by 1 byte
	vext.u8		q7H,q7H,q7H,#7					@: rotate left by 1 byte
	vext.u8		q8L,q8L,q8L,#7					@: rotate left by 1 byte
	vext.u8		q8H,q8H,q8H,#7					@: rotate left by 1 byte
	vext.u8		q9L,q9L,q9L,#7					@: rotate left by 1 byte
	vext.u8		q9H,q9H,q9H,#7					@: rotate left by 1 byte

	vmov.u8		q1,#0							@: clear accumulator

	vmla.u16	q1L,q7L,q0H[3]					@: multiply by 128
	vmla.u16	q1H,q7H,q0H[2]					@: multiply by 64
	vmla.u16	q1L,q8L,q0H[1]					@: multiply by 32
	vmla.u16	q1H,q8H,q0H[0]					@: multiply by 16
	vmla.u16	q1L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q1H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q1L,q6L,q0L[1]					@: multiply by 2
	vorr		q1H,q6H
	vorr.u8		q1L,q1H							@: 4 bytes now in q15H

	vsli.u64	q15L,q1L,#48					@: shift and merge the bottom 2 bytes
	vshl.u64	q1L,#32							@: get rid of the top 4 bytes
	vsri.u64	q15H,q1L,#48					@: shift and merge the top 2 bytes

@: output writes must be 32 bit aligned
@: 90 bytes are output on each loop, so alternate loops need adjusting by 2
@: the output is shifted left by 2 bytes and 2 bytes are inserted from the output buffer

lr12n8:
	and			r4,r1,#~3						@: r4 points to the nearest lower 32 bit aligned address
	teq			r4,r1
	beq			lr12n10							@: already 32 bit aligned

	vext.u8		q15,q14,q15,#14					@: shift the 90 output bytes left by 2 bytes
	vext.u8		q14,q13,q14,#14
	vext.u8		q13,q12,q13,#14
	vext.u8		q12,q11,q12,#14
	vext.u8		q11,q10,q11,#14
	vext.u8		q10,q9,q10,#14					@: it doesn't matter what's in q9

	vld1.u16	q10L[0],[r4]					@: get 2 bytes from the output buffer
lr12n10:									
									
	vstm		r4,{q10-q15}					@: store 96 bytes to the LDPC final buffer (only 90 needed)
	add			r1,#90							@: step the output pointer
	
	pop			{r0}							@: restore the input pointer to inter array row 0		
	add			r0,#1							@: move 1 byte along each row of the array

	adds		r2,#-1	
	bne			lr12n2							@: go around the loop
	
lr12n98:	
	pop			{r0-r12,r14}
	mov			pc,r14
	

	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n35
@:		72 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:			
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
		
ldpc_reformat_n35:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: output pointer
	ldr		r2,=45									@: loop counter ; 45 bytes in each LDPC inter array row

@: loop here	
	
lr35n2: 
	push		{r0}								@: save the input pointer
	
@: load a byte from 8 rows of the inter array into q4-q7; 64 bytes in total

	vld1.u8		d8[0],[r0]
	add			r0,#LBPR
	vld1.u8		d9[0],[r0]
	add			r0,#LBPR
	vld1.u8		d10[0],[r0]
	add			r0,#LBPR
	vld1.u8		d11[0],[r0]
	add			r0,#LBPR
	vld1.u8		d12[0],[r0]
	add			r0,#LBPR
	vld1.u8		d13[0],[r0]
	add			r0,#LBPR
	vld1.u8		d14[0],[r0]
	add			r0,#LBPR
	vld1.u8		d15[0],[r0]
	add			r0,#LBPR

	vld1.u8		d8[1],[r0]
	add			r0,#LBPR
	vld1.u8		d9[1],[r0]
	add			r0,#LBPR
	vld1.u8		d10[1],[r0]
	add			r0,#LBPR
	vld1.u8		d11[1],[r0]
	add			r0,#LBPR
	vld1.u8		d12[1],[r0]
	add			r0,#LBPR
	vld1.u8		d13[1],[r0]
	add			r0,#LBPR
	vld1.u8		d14[1],[r0]
	add			r0,#LBPR
	vld1.u8		d15[1],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[2],[r0]
	add			r0,#LBPR
	vld1.u8		d9[2],[r0]
	add			r0,#LBPR
	vld1.u8		d10[2],[r0]
	add			r0,#LBPR
	vld1.u8		d11[2],[r0]
	add			r0,#LBPR
	vld1.u8		d12[2],[r0]
	add			r0,#LBPR
	vld1.u8		d13[2],[r0]
	add			r0,#LBPR
	vld1.u8		d14[2],[r0]
	add			r0,#LBPR
	vld1.u8		d15[2],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[3],[r0]
	add			r0,#LBPR
	vld1.u8		d9[3],[r0]
	add			r0,#LBPR
	vld1.u8		d10[3],[r0]
	add			r0,#LBPR
	vld1.u8		d11[3],[r0]
	add			r0,#LBPR
	vld1.u8		d12[3],[r0]
	add			r0,#LBPR
	vld1.u8		d13[3],[r0]
	add			r0,#LBPR
	vld1.u8		d14[3],[r0]
	add			r0,#LBPR
	vld1.u8		d15[3],[r0]
	add			r0,#LBPR

	vld1.u8		d8[4],[r0]
	add			r0,#LBPR
	vld1.u8		d9[4],[r0]
	add			r0,#LBPR
	vld1.u8		d10[4],[r0]
	add			r0,#LBPR
	vld1.u8		d11[4],[r0]
	add			r0,#LBPR
	vld1.u8		d12[4],[r0]
	add			r0,#LBPR
	vld1.u8		d13[4],[r0]
	add			r0,#LBPR
	vld1.u8		d14[4],[r0]
	add			r0,#LBPR
	vld1.u8		d15[4],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[5],[r0]
	add			r0,#LBPR
	vld1.u8		d9[5],[r0]
	add			r0,#LBPR
	vld1.u8		d10[5],[r0]
	add			r0,#LBPR
	vld1.u8		d11[5],[r0]
	add			r0,#LBPR
	vld1.u8		d12[5],[r0]
	add			r0,#LBPR
	vld1.u8		d13[5],[r0]
	add			r0,#LBPR
	vld1.u8		d14[5],[r0]
	add			r0,#LBPR
	vld1.u8		d15[5],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[6],[r0]
	add			r0,#LBPR
	vld1.u8		d9[6],[r0]
	add			r0,#LBPR
	vld1.u8		d10[6],[r0]
	add			r0,#LBPR
	vld1.u8		d11[6],[r0]
	add			r0,#LBPR
	vld1.u8		d12[6],[r0]
	add			r0,#LBPR
	vld1.u8		d13[6],[r0]
	add			r0,#LBPR
	vld1.u8		d14[6],[r0]
	add			r0,#LBPR
	vld1.u8		d15[6],[r0]
	add			r0,#LBPR

	vld1.u8		d8[7],[r0]
	add			r0,#LBPR
	vld1.u8		d9[7],[r0]
	add			r0,#LBPR
	vld1.u8		d10[7],[r0]
	add			r0,#LBPR
	vld1.u8		d11[7],[r0]
	add			r0,#LBPR
	vld1.u8		d12[7],[r0]
	add			r0,#LBPR
	vld1.u8		d13[7],[r0]
	add			r0,#LBPR
	vld1.u8		d14[7],[r0]
	add			r0,#LBPR
	vld1.u8		d15[7],[r0]
	add			r0,#LBPR

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q2,#0							@: accumulator	

@: do bytes 0, 1, 2, 3, 4, 5, 6, 7

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 9, 10, 11, 12, 13, 14, 15, 16

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[1]					@: multiply by s
	vorr		q2H,q8H
	vsra.u8		q2L,q9L,#1
	vsra.u8		q2H,q9H,#2
	vsra.u8		q2L,q10L,#3
	vsra.u8		q2H,q10H,#4
	vsra.u8		q2L,q11L,#5
	vsra.u8		q2H,q11H,#6
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H

@: do bytes 18, 19, 20, 21, 22, 23, 24, 25

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vsra.u8		q2L,q10L,#2
	vsra.u8		q2H,q10H,#3
	vsra.u8		q2L,q11L,#4
	vsra.u8		q2H,q11H,#5
	vorr.u8		q13L,q2L,q2H					@: 8 bytes now in q13L

@: do bytes 27, 28, 29, 30, 31, 32, 33, 34

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q8H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vsra.u8		q2L,q10L,#1
	vsra.u8		q2H,q10H,#2
	vsra.u8		q2L,q11L,#3
	vsra.u8		q2H,q11H,#4
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q13H

@: do bytes 36, 37, 38, 39, 40, 41, 42, 43

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q14L,q2L,q2H					@: 8 bytes now in q14L

@: do bytes 45, 46, 47, 48, 49, 50, 51, 52

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q8H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vsra.u8		q2L,q11L,#1
	vsra.u8		q2H,q11H,#2
	vorr.u8		q14H,q2L,q2H					@: 8 bytes now in q14H

@: do bytes 54, 55, 56, 57, 58, 59, 60, 61

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vorr.u8		q15L,q2L,q2H					@: 8 bytes now in q15L

@: do bytes 63, 64, 65, 66, 67, 68, 69, 70

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q8H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q9L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q9H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q10L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q10H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vorr.u8		q15H,q2L,q2H					@: 8 bytes now in q15H

@: the first 64 bytes are now in registers q12-q15

@: now do the last 8 bytes: 8, 17, 26, 35, 44, 53, 62, 71 

@: load the 8 bytes

	vld1.u8		d8[0],[r0]
	add			r0,#LBPR
	vld1.u8		d9[0],[r0]
	add			r0,#LBPR
	vld1.u8		d10[0],[r0]
	add			r0,#LBPR
	vld1.u8		d11[0],[r0]
	add			r0,#LBPR
	vld1.u8		d12[0],[r0]
	add			r0,#LBPR
	vld1.u8		d13[0],[r0]
	add			r0,#LBPR
	vld1.u8		d14[0],[r0]
	add			r0,#LBPR
	vld1.u8		d15[0],[r0]
	add			r0,#LBPR

@: duplicate each byte to every element if its register

	vdup.u8		d8,d8[0]
	vdup.u8		d9,d9[0]
	vdup.u8		d10,d10[0]
	vdup.u8		d11,d11[0]
	vdup.u8		d12,d12[0]
	vdup.u8		d13,d13[0]
	vdup.u8		d14,d14[0]
	vdup.u8		d15,d15[0]

@: shift left the bytes in each register increasingly by 1

	vldr		q0L,=0x8040201008040201
	vldr		q0H,=0x8040201008040201
	vmul.u8		q4,q0			
	vmul.u8		q5,q0			
	vmul.u8		q6,q0			
	vmul.u8		q7,q0			

@: mask and accumulate														
																						
	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q11L,q2L,q2H					@: 8 bytes now in q11L

@: the bytes in the registers are now:	
	
@: q11:	 08	 17	 26	 35	 44	 53	 62	 71	   ..  ..  ..  ..  ..  ..  ..  ..		
@: q12:	 00	 01	 02	 03	 04	 05	 06	 07	   09  10  11  12  13  14  15  16
@: q13:	 18	 19	 20	 21	 22	 23	 24	 25	   27  28  29  30  31  32  33  34
@: q14:	 36	 37	 38	 39	 40	 41	 42	 43	   45  46  47  48  49  50  51  52
@: q15:	 54	 55	 56	 57	 58	 59	 60	 61	   63  64  65  66  67  68  69  70

@: rearrange the bytes into q4-q8
	
	vmov		q4L,q12L						@: bytes 0-7
	vmov		q4H,q11L						@: byte 8
	vsli.u64	q4H,q12H,#8						@: bytes 9-15
	vmov		q5L,q11L						@: byte 17
	vsri.u64	q5L,q12H,#56					@: byte 16
	vsli.u64	q5L,q13L,#16					@: bytes 18-23
	vmov		q5H,q11L						@: byte 26
	vsri.u64	q5H,q13L,#48					@: bytes 24-25
	vsli.u64	q5H,q13H,#24					@: bytes 27-31
	vmov		q6L,q11L						@: byte 35
	vsri.u64	q6L,q13H,#40					@: bytes 32-34
	vsli.u64	q6L,q14L,#32					@: bytes 36-39
	vmov		q6H,q11L						@: byte 44
	vsri.u64	q6H,q14L,#32					@: bytes 40-43
	vsli.u64	q6H,q14H,#40					@: bytes 45-47
	vmov		q7L,q11L						@: byte 53
	vsri.u64	q7L,q14H,#24					@: bytes 48-52
	vsli.u64	q7L,q15L,#48					@: bytes 54-55
	vmov		q7H,q11L						@: byte 62
	vsri.u64	q7H,q15L,#16					@: bytes 56-61
	vsli.u64	q7H,q15H,#56					@: bytes 63
	vmov		q8L,q11L						@: byte 71
	vsri.u64	q8L,q15H,#8						@: bytes 64-70	

	vstm		r1,{q4-q8}						@: store 80 bytes; only 72 needed, but no problem	
	
	pop			{r0}							@: restore the input pointer
	add			r0,#1							@: move the input pointer 1 byte along each inter array row
	add			r1,#72							@: step the output pointer for 72 bytes per loop	
			
	adds		r2,#-1
	bne			lr35n2							@: do another loop			

lr35n98:
	pop			{r0-r12,r14}
	mov			pc,r14


	
	.align	2	
	.ltorg										@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n23
@:		60 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
		
ldpc_reformat_n23:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=45									@: loop counter; 45 bytes in each LDPC inter array row

@: loop here	
	
lr23n2: 
	push		{r0}								@: save the input pointer
	
@: load a byte from 8 rows of the inter array into q4-q7; 64 bytes in total

	vld1.u8		d8[0],[r0]
	vld1.u8		d12[7],[r0]							@: duplicate this byte and shift it right by 1 bit later
	add			r0,#LBPR
	vld1.u8		d9[0],[r0]
	vld1.u8		d13[7],[r0]							@: ditto
	add			r0,#LBPR
	vld1.u8		d10[0],[r0]
	vld1.u8		d14[7],[r0]							@: ditto
	add			r0,#LBPR
	vld1.u8		d11[0],[r0]
	vld1.u8		d15[7],[r0]
	add			r0,#LBPR
	
	vshl.u8		d12,#1								@: shift the duplicated bytes before loading other bytes
	vshl.u8		d13,#1
	vshl.u8		d14,#1
	vshl.u8		d15,#1
	
	vld1.u8		d12[0],[r0]
	add			r0,#LBPR
	vld1.u8		d13[0],[r0]
	add			r0,#LBPR
	vld1.u8		d14[0],[r0]
	add			r0,#LBPR
	vld1.u8		d15[0],[r0]
	add			r0,#LBPR

	vld1.u8		d8[1],[r0]
	add			r0,#LBPR
	vld1.u8		d9[1],[r0]
	add			r0,#LBPR
	vld1.u8		d10[1],[r0]
	add			r0,#LBPR
	vld1.u8		d11[1],[r0]
	add			r0,#LBPR
	vld1.u8		d12[1],[r0]
	add			r0,#LBPR
	vld1.u8		d13[1],[r0]
	add			r0,#LBPR
	vld1.u8		d14[1],[r0]
	add			r0,#LBPR
	vld1.u8		d15[1],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[2],[r0]
	add			r0,#LBPR
	vld1.u8		d9[2],[r0]
	add			r0,#LBPR
	vld1.u8		d10[2],[r0]
	add			r0,#LBPR
	vld1.u8		d11[2],[r0]
	add			r0,#LBPR
	vld1.u8		d12[2],[r0]
	add			r0,#LBPR
	vld1.u8		d13[2],[r0]
	add			r0,#LBPR
	vld1.u8		d14[2],[r0]
	add			r0,#LBPR
	vld1.u8		d15[2],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[3],[r0]
	add			r0,#LBPR
	vld1.u8		d9[3],[r0]
	add			r0,#LBPR
	vld1.u8		d10[3],[r0]
	add			r0,#LBPR
	vld1.u8		d11[3],[r0]
	add			r0,#LBPR
	vld1.u8		d12[3],[r0]
	add			r0,#LBPR
	vld1.u8		d13[3],[r0]
	add			r0,#LBPR
	vld1.u8		d14[3],[r0]
	add			r0,#LBPR
	vld1.u8		d15[3],[r0]
	add			r0,#LBPR

	vld1.u8		d8[4],[r0]
	add			r0,#LBPR
	vld1.u8		d9[4],[r0]
	add			r0,#LBPR
	vld1.u8		d10[4],[r0]
	add			r0,#LBPR
	vld1.u8		d11[4],[r0]
	add			r0,#LBPR
	vld1.u8		d12[4],[r0]
	add			r0,#LBPR
	vld1.u8		d13[4],[r0]
	add			r0,#LBPR
	vld1.u8		d14[4],[r0]
	add			r0,#LBPR
	vld1.u8		d15[4],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[5],[r0]
	add			r0,#LBPR
	vld1.u8		d9[5],[r0]
	add			r0,#LBPR
	vld1.u8		d10[5],[r0]
	add			r0,#LBPR
	vld1.u8		d11[5],[r0]
	add			r0,#LBPR
	vld1.u8		d12[5],[r0]
	add			r0,#LBPR
	vld1.u8		d13[5],[r0]
	add			r0,#LBPR
	vld1.u8		d14[5],[r0]
	add			r0,#LBPR
	vld1.u8		d15[5],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[6],[r0]
	add			r0,#LBPR
	vld1.u8		d9[6],[r0]
	add			r0,#LBPR
	vld1.u8		d10[6],[r0]
	add			r0,#LBPR
	vld1.u8		d11[6],[r0]
	add			r0,#LBPR
	vld1.u8		d12[6],[r0]
	add			r0,#LBPR
	vld1.u8		d13[6],[r0]
	add			r0,#LBPR
	vld1.u8		d14[6],[r0]
	add			r0,#LBPR
	vld1.u8		d15[6],[r0]
	add			r0,#LBPR

	vld1.u8		d8[7],[r0]
	add			r0,#LBPR
	vld1.u8		d9[7],[r0]
	add			r0,#LBPR
	vld1.u8		d10[7],[r0]
	add			r0,#LBPR
	vld1.u8		d11[7],[r0]
	add			r0,#LBPR

@: 60 bytes loaded; d12[7]-d15[7] are loaded higher up with the first 4 bytes shift right by one bit
			
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q2,#0							@: accumulator	

@: do bytes 0, 1, 2, 3, 4, 5, 6, 7

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 15, 16, 17, 18, 19, 20, 21, 22

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vsra.u8		q2L,q10L,#2
	vsra.u8		q2H,q10H,#3
	vsra.u8		q2L,q11L,#4
	vsra.u8		q2H,q11H,#5
	vorr.u8		q13L,q2L,q2H					@: 8 bytes now in q13L

@: do bytes 30, 31, 32, 33, 34, 35, 36, 37

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q14L,q2L,q2H					@: 8 bytes now in q14L

@: do bytes 45, 46, 47, 48, 49, 50, 51, 52

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vorr.u8		q15L,q2L,q2H					@: 8 bytes now in q15L

@: shift q4L-q5H colectively right 1 byte	

	vext.u8		q4,q4,q5,#1
	vext.u8		q5,q5,q6,#1
	
@: do bytes 8, 9, 10, 11, 12, 13, 14, ..

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vsra.u8		q2L,q11L,#1
	vsra.u8		q2H,q11H,#2
	vsra.u8		q2L,q8L,#3
	vsra.u8		q2H,q8H,#4
	vsra.u8		q2L,q9L,#5
	vsra.u8		q2H,q9H,#6
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H

@: do bytes 23, 24, 25, 26, 27, 28, 29, ..

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q10H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vsra.u8		q2L,q8L,#1
	vsra.u8		q2H,q8H,#2
	vsra.u8		q2L,q9L,#3
	vsra.u8		q2H,q9H,#4
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q13H

@: do bytes 38, 39, 40, 41, 42, 43, 44, ..

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q10H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q11L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q11H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q8L,q0L[1]					@: multiply by 2
	vorr		q2H,q8H
	vsra.u8		q2L,q9L,#1
	vsra.u8		q2H,q9H,#2
	vorr.u8		q14H,q2L,q2H					@: 8 bytes now in q14H

@: do bytes 53, 54, 55, 56, 57, 58, 59, ..

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q10H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q11L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q11H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q8L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q8H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vorr.u8		q15H,q2L,q2H					@: 8 bytes now in q15H

@: the bytes in the registers are:

@: q12:	 00	 01	 02	 03	 04	 05	 06	 07	   08  09  10  11  12  13  14  ..
@: q13:	 15	 16	 17	 18	 19	 20	 21	 22	   23  24  25  26  27  28  29  ..	
@: q14:	 30	 31	 32	 33	 34	 35	 36	 37	   38  39  40  41  42  43  44  ..	
@: q15:	 45	 46	 47	 48	 49	 50	 51	 52	   53  54  55  56  57  58  59  ..		

/*
	vldr		q12L,=0x0706050403020100
	vldr		q12H,=0xff14131211100908
	vldr		q13L,=0x2221201918171615
	vldr		q13H,=0xff29282726252423
	vldr		q14L,=0x3736353433323130
	vldr		q14H,=0xff44434241403938
	vldr		q15L,=0x5251504948474645
	vldr		q15H,=0xff59585756555453
*/
	
@: rearrange the bytes into q4-q8
	
	vmov		q4,q12							@: bytes 0-14
	vsli.u64	q4H,q13L,#56					@: byte 15
	vext.u8		q5,q13,q13,#1					@: bytes 16-29
	vsli.u64	q5H,q14L,#48					@: bytes 30-31
	vext.u8		q6,q14,q14,#2					@: bytes 32-44
	vsli.u64	q6H,q15L,#40					@: bytes 45-47
	vext.u8		q7,q15,q15,#3					@: bytes 48-59
	vstm		r1,{q4-q7}						@: store 64 bytes; only 60 needed, but no problem	
	
	pop			{r0}							@: restore the input pointer
	add			r0,#1							@: move the input pointer 1 byte along each inter array row
	add			r1,#60							@: step the output pointer for 60 bytes per loop	
			
	adds		r2,#-1
	bne			lr23n2							@: do another loop			

lr23n98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n34
@:		45 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:		
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	45 byte accumulator		
@: q8-q10	reload and rearrangement	
	
ldpc_reformat_n34:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=45									@: loop counter; 45 bytes in each LDPC inter array row

@: loop here for each byte of the 45 rows of the intermediate buffer	
	
lr34n2: 
	push		{r0}								@: save the input pointer
		
@: first load the data that needs to be shifted

	vld1.u8		d13[5],[r0]							@: 0-7	5-2
	add			r0,#LBPR
	vld1.u8		d14[5],[r0]							@: 0-6	5-1
	add			r0,#LBPR
	vld1.u8		d15[5],[r0]							@: 0-5	5-0
	add			r0,#LBPR
	
	vld1.u8		d8[6],[r0]							@: 0-4	6-7
	add			r0,#LBPR
	vld1.u8		d9[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d10[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d11[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d12[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d13[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d14[6],[r0]							
	add			r0,#LBPR
	vld1.u8		d15[6],[r0]							@: 1-5	6-0 
	add			r0,#LBPR

	vld1.u8		d8[7],[r0]							@: 1-4	7-7
	add			r0,#LBPR
	vld1.u8		d9[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d10[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d11[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d12[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d13[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d14[7],[r0]							
	add			r0,#LBPR
	vld1.u8		d15[7],[r0]							@: 2-5	6-0 
	add			r0,#LBPR
	
@: shift all 4 input registers registers 1 bit left

	vshl.u8		q4,#1
	vshl.u8		q5,#1
	vshl.u8		q6,#1
	vshl.u8		q7,#1

	pop			{r0}								@: restore and resave the input pointer
	push		{r0}
	
@: load a byte from 45 rows of the inter array into q4-q7

	vld1.u8		d8[0],[r0]
	add			r0,#LBPR
	vld1.u8		d9[0],[r0]
	add			r0,#LBPR
	vld1.u8		d10[0],[r0]
	add			r0,#LBPR
	vld1.u8		d11[0],[r0]
	add			r0,#LBPR
	vld1.u8		d12[0],[r0]
	add			r0,#LBPR
	vld1.u8		d13[0],[r0]
	add			r0,#LBPR
	vld1.u8		d14[0],[r0]
	add			r0,#LBPR
	vld1.u8		d15[0],[r0]
	add			r0,#LBPR

	vld1.u8		d8[1],[r0]
	add			r0,#LBPR
	vld1.u8		d9[1],[r0]
	add			r0,#LBPR
	vld1.u8		d10[1],[r0]
	add			r0,#LBPR
	vld1.u8		d11[1],[r0]
	add			r0,#LBPR
	vld1.u8		d12[1],[r0]
	add			r0,#LBPR
	vld1.u8		d13[1],[r0]
	add			r0,#LBPR
	vld1.u8		d14[1],[r0]
	add			r0,#LBPR
	vld1.u8		d15[1],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[2],[r0]
	add			r0,#LBPR
	vld1.u8		d9[2],[r0]
	add			r0,#LBPR
	vld1.u8		d10[2],[r0]
	add			r0,#LBPR
	vld1.u8		d11[2],[r0]
	add			r0,#LBPR
	vld1.u8		d12[2],[r0]
	add			r0,#LBPR
	vld1.u8		d13[2],[r0]
	add			r0,#LBPR
	vld1.u8		d14[2],[r0]
	add			r0,#LBPR
	vld1.u8		d15[2],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[3],[r0]
	add			r0,#LBPR
	vld1.u8		d9[3],[r0]
	add			r0,#LBPR
	vld1.u8		d10[3],[r0]
	add			r0,#LBPR
	vld1.u8		d11[3],[r0]
	add			r0,#LBPR
	vld1.u8		d12[3],[r0]
	add			r0,#LBPR
	vld1.u8		d13[3],[r0]
	add			r0,#LBPR
	vld1.u8		d14[3],[r0]
	add			r0,#LBPR
	vld1.u8		d15[3],[r0]
	add			r0,#LBPR

	vld1.u8		d8[4],[r0]
	add			r0,#LBPR
	vld1.u8		d9[4],[r0]
	add			r0,#LBPR
	vld1.u8		d10[4],[r0]
	add			r0,#LBPR
	vld1.u8		d11[4],[r0]
	add			r0,#LBPR
	vld1.u8		d12[4],[r0]
	add			r0,#LBPR
	vld1.u8		d13[4],[r0]
	add			r0,#LBPR
	vld1.u8		d14[4],[r0]
	add			r0,#LBPR
	vld1.u8		d15[4],[r0]
	add			r0,#LBPR
	
	vld1.u8		d8[5],[r0]
	add			r0,#LBPR
	vld1.u8		d9[5],[r0]
	add			r0,#LBPR
	vld1.u8		d10[5],[r0]
	add			r0,#LBPR
	vld1.u8		d11[5],[r0]
	add			r0,#LBPR
	vld1.u8		d12[5],[r0]
	add			r0,#LBPR

	pop			{r0}							@: restore the input pointer
	
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
	
@: do bytes 0, 1, 2, 3, 4, 5, 6, 7

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes .. .. 8, 9, 10, 11, 12 ..

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8L,q8L,q8L,#1					@: rotate 1 byte to the right
	vext.u8		q8H,q8H,q8H,#1					@: rotate 1 byte to the right
	vext.u8		q9L,q9L,q9L,#1					@: rotate 1 byte to the right
	
	vmla.u16	q2L,q9H,q0L[1]					@: multiply by scalar
	vorr		q2H,q10L
	vsra.u8		q2L,q10H,#1
	vsra.u8		q2H,q11L,#2
	vsra.u8		q2L,q11H,#3
	vsra.u8		q2H,q8L,#4
	vsra.u8		q2L,q8H,#5
	vsra.u8		q2H,q9L,#6
	vorr.u8		q12H,q2L,q2H					@: 5 bytes now in q12H

@: do bytes .. .. 13, 14, 15, 16, 17, 18

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q11L,q11L,q11L,#7				@: rotate 1 byte to the left
	vext.u8		q11H,q11H,q11H,#7				@: rotate 1 byte to the left

	vmla.u16	q2L,q11L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q11H,q0L[1]					@: multiply by 2
	vorr		q2L,q8L
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vorr.u8		q13L,q2L,q2H					@: 6 bytes now in q13L

@: do bytes .. .. 19, 20, 21, 22, 23 ..

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8L,q8L,q8L,#1					@: rotate 1 byte to the right
	
	vmla.u16	q2L,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9H,q0L[1]					@: multiply by 2
	vorr		q2H,q10L
	vsra.u8		q2L,q10H,#1
	vsra.u8		q2H,q11L,#2
	vsra.u8		q2L,q11H,#3
	vsra.u8		q2H,q8L,#4
	vorr.u8		q13H,q2L,q2H					@: 5 bytes now in q13H

@: do bytes .. 24, 25, 26, 27, 28, 29 .. 

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8L,q8L,q8L,#1					@: rotate 1 byte to the right
	vext.u8		q8H,q8H,q8H,#1					@: rotate 1 byte to the right
	vext.u8		q9L,q9L,q9L,#1					@: rotate 1 byte to the right
	vext.u8		q9H,q9H,q9H,#1					@: rotate 1 byte to the right
	
	vmla.u16	q2L,q10L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q10H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q11L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q11H,q0L[1]					@: multiply by 2
	vorr		q2L,q8L
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vorr.u8		q14L,q2L,q2H					@: 6 bytes now in q14L

@: do bytes .. .. 30, 31, 32, 33, 34, 35 

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q11H,q11H,q11H,#7				@: rotate 1 byte to the left

	vmla.u16	q2L,q11H,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9H,q0L[1]					@: multiply by 2
	vorr		q2H,q10L
	vsra.u8		q2L,q10H,#1
	vsra.u8		q2H,q11L,#2
	vorr.u8		q14H,q2L,q2H					@: 6 bytes now in q14H

@: do bytes .. .. 36, 37, 38, 39, 40 ..

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8L,q8L,q8L,#1					@: rotate 1 byte to the right
	vext.u8		q8H,q8H,q8H,#1					@: rotate 1 byte to the right

	vmla.u16	q2L,q9L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q9H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q10L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q10H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q11L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q11H,q0L[1]					@: multiply by 2
	vorr		q2L,q8L
	vsra.u8		q2H,q8H,#1
	vorr.u8		q15L,q2L,q2H					@: 5 bytes now in q15L

@: do bytes .. .. 41, 42, 43, 44 .. .. 

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q10H,q10H,q10H,#7				@: rotate 1 byte to the left
	vext.u8		q11L,q11L,q11L,#7				@: rotate 1 byte to the left
	vext.u8		q11H,q11H,q11H,#7				@: rotate 1 byte to the left

	vmla.u16	q2L,q10H,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q11L,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q11H,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 8
	vmla.u16	q2L,q9H,q0L[1]					@: multiply by 2
	vorr		q2H,q10L
	vorr.u8		q15H,q2L,q2H					@: 4 bytes now in q15H

@: bytes in the registers are:

@: q12:	 00	 01	 02	 03	 04	 05	 06	 07	   ..  ..  08  09  10  11  12  ..	 
@: q13:	 ..	 ..	 13	 14	 15	 16	 17	 18	   ..  ..  19  20  21  22  23  ..
@: q14:	 ..	 24	 25	 26	 27	 28	 29	 ..	   ..  ..  30  31  32  33  34  35	 
@: q15:	 ..	 ..	 36	 37	 38	 39	 40	 ..	   ..  ..  41  42  43  44  ..  ..

/*
	vldr		q12L,=0x0706050403020100
	vldr		q12H,=0xff1211100908ffff
	vldr		q13L,=0x181716151413ffff
	vldr		q13H,=0xff2322212019ffff
	vldr		q14L,=0xff292827262524ff
	vldr		q14H,=0x353433323130ffff
	vldr		q15L,=0xff4039383736ffff
	vldr		q15H,=0xffff44434241ffff
*/

	vldr		q4H,=0x1413120e0d0c0b0a			@: bytes 15-07	
	vldr		q5L,=0x1e1d1c1b1a171615			@: bytes 23-16
	vldr		q5H,=0x0b0a060504030201			@: bytes 31-24
	vldr		q6L,=0x151413120f0e0d0c			@: bytes 39-32
	vldr		q6H,=0xffffff1d1c1b1a16			@: bytes 44-40
	
	vmov		q8L,q12L						 
	vtbl.u8		q8H,{q12,q13},q4H				
	vtbl.u8		q9L,{q12,q13},q5L
	vtbl.u8		q9H,{q14,q15},q5H
	vtbl.u8		q10L,{q14,q15},q6L
	vtbl.u8		q10H,{q14,q15},q6H
	
@: see if the output pointer is 32 bit aligned and compensate

	mov			r5,r1							@: output pointer
	and			r4,r1,#~3						@: r4 points to the nearest lower 32 bit aligned address
ldpc34n4:
	teq			r4,r5
	beq			ldpc34n6						@: 32 bit aligned
	vext.u8		q10,q9,q10,#15					@: shift q8-q10 collectively left by 1 byte
	vext.u8		q9,q8,q9,#15				
	vext.u8		q8,q7,q8,#15			
	add			r5,#-1
	vld1.u8		q8L[0],[r5]						@: get a byte from the frame
	b			ldpc34n4						@: check for alignment
ldpc34n6:

	vstm		r4,{q8-q10}						@: write 48 bytes (only 45 needed)
	
	add			r0,#1							@: move the input pointer 1 byte along each inter array row
	add			r1,#45							@: step the output pointer for 45 bytes per loop	
			
	adds		r2,#-1
	bne			lr34n2							@: do another loop			

lr34n98:
	pop			{r0-r12,r14}
	mov			pc,r14


	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n56
@:	ldpc_reformat_s13
@:		both have 30 rows in the ldpc inter array
@: 		the output pointer for n563 is not 32 bit aligned (4n + 2 bytes)
@: 		the output pointer for s13 is not 32 bit aligned (4n + 3 bytes)
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	60 byte accumulator		
@: q4-q11	reload and rearrangement	
	
ldpc_reformat_n56:
ldpc_reformat_s13:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=23									@: loop counter; 45 bytes in each LDPC inter array row

@: loop here	
	
lr56n2: 
	push		{r0}								@: save the input pointer
	
	vld1.u16	q4L[0],[r0] 
	vld1.u16	q7L[3],[r0] 
	add			r0,#LBPR
	vld1.u16	q4H[0],[r0]
	vld1.u16	q7H[3],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[0],[r0]
	add			r0,#LBPR

	vshl.u64	q7,#1								@: shift the duplicated bytes

	vld1.u16	q6L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[0],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[1],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[2],[r0]
	add			r0,#LBPR	
	vld1.u16	q6L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[2],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[2],[r0]
	add			r0,#LBPR	

	vld1.u16	q4L[3],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[3],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[3],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[3],[r0]
	add			r0,#LBPR	
	vld1.u16	q6L[3],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[3],[r0]
	add			r0,#LBPR

	pop			{r0}							@: restore the input pointer
	
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
	
@: do bytes 0, 30, 1, 31, 2, 32, 3, 33

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 15, 45, 16, 36, 17, 47, 18, 48

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q13H

	vshl.u64	q9,q5,#49						@: move bits 7-1 and 7-0 into position
	vsri.u64	q4,q9,#48
	vext.u8		q4L,q4L,q4L,#2					@: rotate right by 2 bytes
	vext.u8		q4H,q4H,q4H,#2					@: rotate right by 2 bytes
	
@: do bytes 4, 34, 5, 35, 6, 36, 7, 37

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vsra.u8		q2L,q10L,#1
	vsra.u8		q2H,q10H,#2
	vsra.u8		q2L,q11L,#3
	vsra.u8		q2H,q11H,#4
	vsra.u8		q2L,q8L,#5
	vsra.u8		q2H,q8H,#6
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H
	
@: do bytes 19, 49, 20, 50, 21, 51, 22, 52

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q9L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q9H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q10L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q10H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vsra.u8		q2L,q8L,#1
	vsra.u8		q2H,q8H,#2
	vorr.u8		q14H,q2L,q2H					@: 8 bytes now in q14H

	vshl.u64	q10,q6,#49						@: move bits 11-1 and 11-0 into position
	vsri.u64	q5,q10,#48
	vext.u8		q5L,q5L,q5L,#2					@: rotate right by 2 bytes
	vext.u8		q5H,q5H,q5H,#2					@: rotate right by 2 bytes	

@: do bytes 8, 38, 9, 39, 10, 40, 11, 41
		
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vsra.u8		q2L,q8L,#2
	vsra.u8		q2H,q8H,#3
	vsra.u8		q2L,q9L,#4
	vsra.u8		q2H,q9H,#5
	vorr.u8		q13L,q2L,q2H					@: 8 bytes now in q13L

@: do bytes 23, 53, 24, 54, 25, 55, 26, 56

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q10H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q11L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q11H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vorr.u8		q15L,q2L,q2H					@: 8 bytes now in q15L

	vshl.u64	q11,q7,#49						@: move bits 15-1 and 15-0 into position
	vsri.u64	q6,q11,#48
	vext.u8		q6L,q6L,q6L,#2					@: rotate right by 2 bytes
	vext.u8		q6H,q6H,q6H,#2					@: rotate right by 2 bytes

@: do bytes 12, 42, 13, 43, 14, 44

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q11L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q11H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q8L,q0L[1]					@: multiply by 2
	vorr		q2H,q8H
	vsra.u8		q2L,q9L,#1
	vsra.u8		q2H,q9H,#2
	vsra.u8		q2L,q10L,#3
	vsra.u8		q2H,q10H,#4
	vorr.u8		q14L,q2L,q2H					@: 6 bytes now in q14L

@: do bytes 27, 57, 28, 58, 29, 59

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q11L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q11H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q8L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q8H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vorr.u8		q15H,q2L,q2H					@: 6 bytes now in q15H

@: bytes in the registers are:

@: q12:	 00	 30	 01	 31	 02	 32	 03	 33	   04  34  05  35  06  36  07  37	 
@: q13:	 08	 48	 09	 39	 10	 40	 11	 41	   15  45  16  46  17  47  18  48
@: q14:	 12	 42	 13	 43	 14	 44	 ..	 ..	   19  49  20  50  21  51  22  52	 
@: q15:	 23	 53	 24	 54	 25	 55	 26	 56	   27  57  28  58  29  59  ..  ..

/*
	vldr		q12L,=0x3303320231013000
	vldr		q12H,=0x3707360635053404
	vldr		q13L,=0x4111401039093808
	vldr		q13H,=0x4818471746164515
	vldr		q14L,=0xffff441443134212
	vldr		q14H,=0x5222512150204919
	vldr		q15L,=0x5626552554245323
	vldr		q15H,=0xffff592958285727
*/

	vuzp.u8		q12,q13							@: de-interleave the bytes
	vuzp.u8		q14,q15 
	vswp		q13,q14							@: put into a better order

	vmov		q8,q12
	vsli.u64	q8H,q13L,#32					@: bytes 12, 13, 14, ..
	vshr.u64	q2L,q12H,#32
	vsli.u64	q8H,q2L,#56
	
	vext.u8		q9,q13,q13,#1					@: rotate q13 right by 1 byte
	vsri.u64	q9L,q12H,#40					@: bytes 16, 17, 18
	vsli.u64	q9H,q14L,#48					@: bytes 30, 31

	vext.u8		q10,q14,q14,#2					@: rotate q14 right by 2 bytes
	vsli.u64	q10H,q15L,#16					@: bytes 42, 43, 44 
	vshr.u64	q2H,q14H,#32
	vsli.u64	q10H,q2H,#40					@: bytes 45, 46, 47
	
	vext.u8		q11,q15,q15,#3					@: rotate q15 right by 3 bytes	
	vsri.u64	q11L,q14H,#56					@: byte 48
	
@: see if the output pointer is 32 bit aligned and compensate

	mov			r5,r1							@: output pointer
	and			r4,r1,#~3						@: r4 points to the nearest lower 32 bit aligned address
ldpc56n4:
	teq			r4,r5
	beq			ldpc56n6						@: 32 bit aligned
	vext.u8		q11,q10,q11,#15					@: shift q12-q15 collectively left by 1 byte
	vext.u8		q10,q9,q10,#15					
	vext.u8		q9,q8,q9,#15				
	vext.u8		q8,q7,q8,#15			
	add			r5,#-1
	vld1.u8		q8L[0],[r5]						@: get a byte from the frame
	b			ldpc56n4						@: check for alignment
ldpc56n6:

	vstm		r4,{q8-q11}

	add			r1,#60							@: 60 bytes written
	add			r0,#2							@: move 2 bytes along the inter array rows
	
	adds		r2,#-1
	bne			lr56n2
	
lr56n98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n89
@:		20 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:		   
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
	
ldpc_reformat_n89:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=23									@: loop counter ; 45 bytes in each LDPC inter array row

@: loop here	
	
lr89n2: 
	push		{r0}								@: save the input pointer
	
	vld1.u16	q4L[0],[r0] 
	vld1.u16	q6L[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q4H[0],[r0]
	vld1.u16	q6H[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[0],[r0]
	vld1.u16	q7L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[0],[r0]
	vld1.u16	q7H[2],[r0]
	add			r0,#LBPR

	vshl.u8		q6,#1								@: shift the duplicated bytes
	vshl.u8		q7,#1

	vld1.u16	q6L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[0],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[1],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[2],[r0]
	add			r0,#LBPR	

	pop			{r0}							@: restore the input pointer
	
@:	Q4:	 0-7  1-7  2-7 ... 0-6	1-6	 2-6 ...
@:	Q5:	 0-5  1-5  2-5 ... 0-4	1-4	 2-4 ...
@:	Q6:	 0-3  1-3  2-3 ... 0-2	1-2	 2-2 ...
@:	Q7:	 0-1  1-1  2-1 ... 0-0	1-0	 2-0 ...

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
	
@: do bytes 0, 20, 1, 21, 2, 22

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 6 bytes now in q12L

@: do bytes 5, 25, 6, 26, 7, 27
		
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vsra.u8		q2L,q10L,#2
	vsra.u8		q2H,q10H,#3
	vsra.u8		q2L,q11L,#4
	vsra.u8		q2H,q11H,#5
	vorr.u8		q13L,q2L,q2H					@: 6 bytes now in q13L

@: do bytes 10, 30, 11, 31, 12, 32

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q14L,q2L,q2H					@: 6 bytes now in q14L

@: do bytes 15, 35, 16, 36, 17, 37

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q8H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q9L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q9H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vorr.u8		q15L,q2L,q2H					@: 6 bytes now in q15L

@: shift q4L-q5H colectively right 2 bytes	

	vext.u8		q4,q4,q5,#2
	vext.u8		q5,q5,q6,#2
	
@: do bytes 3, 23, 4, 24

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vsra.u8		q2L,q11L,#1
	vsra.u8		q2H,q11H,#2
	vsra.u8		q2L,q8L,#3
	vsra.u8		q2H,q8H,#4
	vsra.u8		q2L,q9L,#5
	vsra.u8		q2H,q9H,#6
	vorr.u8		q12H,q2L,q2H					@: 4 bytes now in q12H

@: do bytes 8, 28, 9, 29

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q10H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vsra.u8		q2L,q8L,#1
	vsra.u8		q2H,q8H,#2
	vsra.u8		q2L,q9L,#3
	vsra.u8		q2H,q9H,#4
	vorr.u8		q13H,q2L,q2H					@: 4 bytes now in q13H

@: do bytes 13, 23, 14, 24

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q10H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q11L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q11H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q8L,q0L[1]					@: multiply by 2
	vorr		q2H,q8H
	vsra.u8		q2L,q9L,#1
	vsra.u8		q2H,q9H,#2
	vorr.u8		q14H,q2L,q2H					@: 4 bytes now in q14H

@: do bytes 18, 38, 19, 39

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q10L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q10H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q11L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q11H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q8L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q8H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vorr.u8		q15H,q2L,q2H					@: 4 bytes now in q15H

@: bytes in the registers are:

@: q12:	 00	 20	 01	 21	 02	 22	 ..	 ..	   03  23  04  24  ..  ..  ..  ..
@: q13:	 05	 25	 06	 26	 07	 27	 ..	 ..	   08  28  09  29  ..  ..  ..  ..	 
@: q14:	 10	 30	 11	 31	 12	 32	 ..	 ..	   13  33  14  34  ..  ..  ..  ..
@: q15:	 15	 35	 16	 36	 17	 37	 ..	 ..	   18  38  19  39  ..  ..  ..  ..

/*
	vldr		q12L,=0xffff220221012000
	vldr		q12H,=0xffffffff24042303
	vldr		q13L,=0xffff270726062505
	vldr		q13H,=0xffffffff29092808
	vldr		q14L,=0xffff321231113010
	vldr		q14H,=0xffffffff34143313
	vldr		q15L,=0xffff371736163515
	vldr		q15H,=0xffffffff39193818
*/

	vuzp.u8		q12L,q13L						@: reorder some of the bytes
	vuzp.u8		q12H,q13H	
	vuzp.u8		q14L,q15L	
	vuzp.u8		q14H,q15H	

	vswp		q13L,q14L						@: put the registers into vaguely ascending order
	vswp		q13H,q14H

	vldr		q2L,=0x0605040908020100
	vtbl.u8		q8L,{q12,q13},q2L				@: extract and put into order bytes 0-7 
	
	vldr		q2L,=0x1419181211100d0c
	vtbl.u8		q8H,{q12,q13},q2L				@: extract and put into order bytes 8-15
	
	vldr		q2L,=0x181211100d0c0605
	vtbl.u8		q9L,{q13,q14},q2L				@: extract and put into order bytes 16-23
	
	vldr		q2L,=0x11100d0c06050409
	vtbl.u8		q9H,{q14,q15},q2L				@: extract and put into order bytes 24-31
	
	vldr		q2L,=0x1d1c161514191812
	vtbl.u8		q10L,{q14,q15},q2L				@: extract and put into order bytes 32-39	
	
	vstm		r1,{q8L,q8H,q9L,q9H,q10L}
	
	add			r1,#40							@: 40 bytes written
	add			r0,#2							@: move 2 bytes along the inter array rows
	
	adds		r2,#-1
	bne			lr89n2							@: go around the loop
	
lr89n98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_n910
@:	ldpc_reformat_s35
@:		
@:		both have 18 rows in the ldpc inter array
@:		the output pointer for n910 is not 32 bit aligned (4n+2 bytes)
@:		the output pointer for s35 is not 32 bit aligned (4n+3 bytes)
@:		reformats the LDPC data in the inter array back into the frame
@:			
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		16 byte accumulator
@: q4-q7	input buffer
@: q8-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
	
ldpc_reformat_n910:
ldpc_reformat_s35:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array					@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]					@: pointer to the LDPC bytes in the frame					
	ldr		r2,=23									@: loop counter ; 45 bytes in each LDPC inter array row

@: loop here	
	
lr910n2:	
	push		{r0}								@: save the input pointer
	
@: first load the 16 bit values that will be shifted	
	
	vld1.u16	q5L[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q5H[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q6L[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q6H[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q7L[2],[r0] 
	add			r0,#LBPR
	vld1.u16	q7H[2],[r0] 
	add			r0,#LBPR
	
@: shift the 16 bit values before loading any more

	vshl.u16	q5,#1
	vshl.u16	q6,#1
	vshl.u16	q7,#1
	
@: restore and re-save the input pointer

	pop			{r0}
	push		{r0}
	
	vld1.u16	q4L[0],[r0] 
	add			r0,#LBPR
	vld1.u16	q4H[0],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[0],[r0]
	add			r0,#LBPR
	vld1.u16	q6L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[0],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[0],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q5H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q6H[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7L[1],[r0]
	add			r0,#LBPR
	vld1.u16	q7H[1],[r0]
	add			r0,#LBPR

	vld1.u16	q4L[2],[r0]
	add			r0,#LBPR
	vld1.u16	q4H[2],[r0]
	add			r0,#LBPR

	pop			{r0}							@: restore the input pointer
	
@:	Q4:	 0-7  1-7  2-7 ... 0-6	1-6	 2-6 ...
@:	Q5:	 0-5  1-5  2-5 ... 0-4	1-4	 2-4 ...
@:	Q6:	 0-3  1-3  2-3 ... 0-2	1-2	 2-2 ...
@:	Q7:	 0-1  1-1  2-1 ... 0-0	1-0	 2-0 ...

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar
	
@: do bytes 0, 18, 1, 19, 2, 20

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vorr		q2L,q8L							@: shift and accumulate
	vsra.u8		q2H,q8H,#1
	vsra.u8		q2L,q9L,#2
	vsra.u8		q2H,q9H,#3
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 6 bytes now in q12L

@: do bytes 3, 21, 4, 22

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes
	vext.u8		q9,q9,q9,#2						@: shift right by 2 bytes
	vext.u8		q10,q10,q10,#2					@: shift right by 2 bytes
	
	vmla.u16	q2L,q11L,q0L[1]					@: multiply by 2
	vorr		q2H,q11H
	vsra.u8		q2L,q8L,#1
	vsra.u8		q2H,q8H,#2
	vsra.u8		q2L,q9L,#3
	vsra.u8		q2H,q9H,#4
	vsra.u8		q2L,q10L,#5
	vsra.u8		q2H,q10H,#6
	vorr.u8		q12H,q2L,q2H					@: 4 bytes now in q12H

@: do bytes 5, 23, 6, 24
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q8,q4,q1
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes
	vext.u8		q9,q9,q9,#2						@: shift right by 2 bytes

	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vsra.u8		q2L,q8L,#2
	vsra.u8		q2H,q8H,#3
	vsra.u8		q2L,q9L,#4
	vsra.u8		q2H,q9H,#5
	vorr.u8		q13L,q2L,q2H					@: 4 bytes now in q13L

@: do bytes 7, 25, 8, 26

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes

	vmla.u16	q2L,q9L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q9H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q10L,q0L[1]					@: multiply by 2
	vorr		q2H,q10H
	vsra.u8		q2L,q11L,#1
	vsra.u8		q2H,q11H,#2
	vsra.u8		q2L,q8L,#3
	vsra.u8		q2H,q8H,#4
	vorr.u8		q13H,q2L,q2H					@: 4 bytes now in q13H

@: do bytes 9, 27, 10, 28, 11, 29

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vmla.u16	q2L,q8L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q8H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q9L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q9H,q0L[1]					@: multiply by 2
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q14L,q2L,q2H					@: 6 bytes now in q14L

@: do bytes 12, 30, 13, 31

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes
	vext.u8		q9,q9,q9,#2						@: shift right by 2 bytes
	vext.u8		q10,q10,q10,#2					@: shift right by 2 bytes

	vmla.u16	q2L,q11L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q11H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q8L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q8H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q9L,q0L[1]					@: multiply by 2
	vorr		q2H,q9H
	vsra.u8		q2L,q10L,#1
	vsra.u8		q2H,q10H,#2
	vorr.u8		q14H,q2L,q2H					@: 4 bytes now in q14H

@: do bytes 14, 32, 15, 33

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes
	vext.u8		q9,q9,q9,#2						@: shift right by 2 bytes

	vmla.u16	q2L,q10L,q0H[2]					@: multiply by 64
	vmla.u16	q2H,q10H,q0H[1]					@: multiply by 32
	vmla.u16	q2L,q11L,q0H[0]					@: multiply by 16
	vmla.u16	q2H,q11H,q0L[3]					@: multiply by 8
	vmla.u16	q2L,q8L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q8H,q0L[1]					@: multiply by 2
	vorr		q2L,q9L
	vsra.u8		q2H,q9H,#1
	vorr.u8		q15L,q2L,q2H					@: 4 bytes now in q15L

@: do bytes 16, 34, 17, 35

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q8,q4,q1	
	vand		q9,q5,q1	
	vand		q10,q6,q1	
	vand		q11,q7,q1	

	vext.u8		q8,q8,q8,#2						@: shift right by 2 bytes

	vmla.u16	q2L,q9L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q9H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q10L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q10H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q11L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q11H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q8L,q0L[1]					@: multiply by 2
	vorr		q2H,q8H
	vorr.u8		q15H,q2L,q2H					@: 4 bytes now in q15H

@: bytes in the registers are:

@: q12:	 00	 18	 01	 19	 02	 20	 ..	 ..	   03  21  04  22  ..  ..  ..  ..
@: q13:	 05	 23	 06	 24	 ..	 ..	 ..	 ..	   07  25  08  26  ..  ..  ..  ..	 
@: q14:	 09	 27	 10	 28	 11	 29	 ..	 ..	   12  30  13  31  ..  ..  ..  ..
@: q15:	 14	 32	 15	 33	 ..	 ..	 ..	 ..	   18  38  19  39  ..  ..  ..  ..

/*
	vldr		q12L,=0xffff200219011800
	vldr		q12H,=0xffffffff22042103
	vldr		q13L,=0xffffffff24062305
	vldr		q13H,=0xffffffff26082507
	vldr		q14L,=0xffff291128102709
	vldr		q14H,=0xffffffff31133012
	vldr		q15L,=0xffffffff33153214
	vldr		q15H,=0xffffffff35173416
*/

	vuzp.u8		q12L,q13L						@: reorder some of the bytes
	vuzp.u8		q12H,q13H	
	vuzp.u8		q14L,q15L	
	vuzp.u8		q14H,q15H	

	vswp		q13L,q14L						@: put the registers into vaguely ascending order
	vswp		q13H,q14H

	vldr		q2L,=0x0c05040908020100
	vtbl.u8		q8L,{q12,q13},q2L				@: extract and put into order bytes 0-7 
	
	vldr		q2L,=0x151419181211100d
	vtbl.u8		q8H,{q12,q13},q2L				@: extract and put into order bytes 8-15
	
	vldr		q2L,=0x1419181211100d0c
	vtbl.u8		q9L,{q13,q14},q2L				@: extract and put into order bytes 16-23
	
	vldr		q2L,=0x19181211100d0c05
	vtbl.u8		q9H,{q14,q15},q2L				@: extract and put into order bytes 24-31
	
	vldr		q2L,=0xffffffff1d1c1514
	vtbl.u8		q10L,{q14,q15},q2L				@: extract and put into order bytes 32-39	

	push		{r1}							@: save the output pointer
	vmov		q2,q8
	bl			write16
	vmov		q2,q9
	bl			write16
	vmov		q2,q10
	bl			write16
	pop			{r1}

	add			r1,#36							@: 36 bytes written
	add			r0,#2							@: move 2 bytes along the inter array rows
	
	adds		r2,#-1
	bne			lr910n2							@: go around the loop
	
lr910n98:
	pop			{r0-r12,r14}
	mov			pc,r14
	
	
	.align	2	
	.ltorg										@: literal pool
	.align	2

    	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:  ldpc_reformat_s27
@:		27 rows in the ldpc inter array
@:      reformats the LDPC data in the inter array back into the frame
@:      
@:  Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2-q3	accumulator		
@: q4-q7	and buffer
@: q8-q15	input buffer

ldpc_reformat_s25:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array            @: input pointer
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

	ldr			r2,=3		                    @: loop counter; 3 x 16 bytes horizontally
	ldr			r4,=27							@: step 27 bytes when outputting each of 16 bytes


	b			lr25s1
	.align	2	
	.ltorg										@: literal pool
	.align	2
lr25s1:

    
@: loop here for each 16 input bytes horizontally in the inter array (3 loops)

lr25s2:	

@: save the input pointer

	push		{r0}                            

@: load the first 8 rows of 16 bytes from the inter array

	vldm		r0,{q8}					        
    add         r0,#LBPR
    vldm        r0,{q9}
    add         r0,#LBPR
    vldm        r0,{q10}
    add         r0,#LBPR
    vldm        r0,{q11}
    add         r0,#LBPR
    vldm        r0,{q12}
    add         r0,#LBPR
    vldm        r0,{q13}
    add         r0,#LBPR
    vldm        r0,{q14}
    add         r0,#LBPR
    vldm        r0,{q15}
    add         r0,#LBPR    
    
@: do bytes 0, 27, . . . 378, 405 (16 bytes)

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#0							@: output pointer for byte 0	
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
@: do bytes 17, 44, . . . 395, 422 (16 bytes)   
	
	vldm		r0,{q8}						    @: load next input row

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#17							@: output pointer
	bl			save_16_bytes					@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 7, . . . (16 bytes)   
	
    vldm		r0,{q9}		    				@: load next input row
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#7							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 24, . . . (16 bytes)   
	
	vldm		r0,{q10}						@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#24							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 14, . . . (16 bytes)	
	
	vldm		r0,{q11}						@: load next input row
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					@: multiply by 16
	vmla.u16	q3,q5,q0L[3]					@: multiply by 8
	vmla.u16	q2,q6,q0L[2]					@: multiply by 4
	vmla.u16	q3,q7,q0L[1]					@: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#14							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row        
    
@: do bytes 4, . . . (16 bytes)	
	
	vldm		r0,{q12}						@: load next input row
	
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#4							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 21, . . . (16 bytes)	
	
	vldm		r0,{q13} 						@: load next input row
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0H[2]					@: multiply by 64
	vmla.u16	q3,q5,q0H[1]					@: multiply by 32
	vmla.u16	q2,q6,q0H[0]					@: multiply by 16
	vmla.u16	q3,q7,q0L[3]					@: multiply by 8

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#21							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 11, . . . (16 bytes)	
	
	vldm		r0,{q14}						@: load next input row
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#11							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 1, . . . (16 bytes)

	vldm		r0,{q15}						@: load next input row

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#1							@: output pointer for byte 0	
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 18, . . . (16 bytes)   
	
	vldm		r0,{q8}						    @: load next input row

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#18							@: output pointer
	bl			save_16_bytes					@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 8, . . . (16 bytes)   
	
    vldm		r0,{q9}		    				@: load next input row
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#8							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 25, . . . (16 bytes)   
	
	vldm		r0,{q10}						@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#25							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 15, . . . (16 bytes)	
	
	vldm		r0,{q11}						@: load next input row
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					@: multiply by 16
	vmla.u16	q3,q5,q0L[3]					@: multiply by 8
	vmla.u16	q2,q6,q0L[2]					@: multiply by 4
	vmla.u16	q3,q7,q0L[1]					@: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#15							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row        
    
@: do bytes 5, . . . (16 bytes)	
	
	vldm		r0,{q12}						@: load next input row
	
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#5							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 22, . . . (16 bytes)	
	
	vldm		r0,{q13} 						@: load next input row
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0H[2]					@: multiply by 64
	vmla.u16	q3,q5,q0H[1]					@: multiply by 32
	vmla.u16	q2,q6,q0H[0]					@: multiply by 16
	vmla.u16	q3,q7,q0L[3]					@: multiply by 8

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#22							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 12, . . . (16 bytes)	
	
	vldm		r0,{q14}						@: load next input row
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#12							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 2, . . . (16 bytes)

	vldm		r0,{q15}						@: load next input row

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#2							@: output pointer for byte 0	
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 19, . . . (16 bytes)   
	
	vldm		r0,{q8}						    @: load next input row

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#19							@: output pointer
	bl			save_16_bytes					@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 9, . . . (16 bytes)   
	
    vldm		r0,{q9}		    				@: load next input row
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#9							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 26, . . . (16 bytes)   
	
	vldm		r0,{q10}						@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#26							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: all 27 rows used - go back to row zero and shift each input byte left by 1 from now on  
    
    pop         {r0}							@: restore and resave the input pointer
    push        {r0}
    
@: do bytes 16, . . . (16 bytes)	
	
	vldm		r0,{q11}						@: load next input row
	vshl.u8     q11,#1
    
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					@: multiply by 16
	vmla.u16	q3,q5,q0L[3]					@: multiply by 8
	vmla.u16	q2,q6,q0L[2]					@: multiply by 4
	vmla.u16	q3,q7,q0L[1]					@: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#16							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row        
    
@: do bytes 6, . . . (16 bytes)	
	
	vldm		r0,{q12}						@: load next input row
	vshl.u8     q12,#1
    
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#6							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 23, . . . (16 bytes)	
	
	vldm		r0,{q13} 						@: load next input row
	vshl.u8     q13,#1
    
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0H[2]					@: multiply by 64
	vmla.u16	q3,q5,q0H[1]					@: multiply by 32
	vmla.u16	q2,q6,q0H[0]					@: multiply by 16
	vmla.u16	q3,q7,q0L[3]					@: multiply by 8

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#23							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row    
    
@: do bytes 13, . . . (16 bytes)	
	
	vldm		r0,{q14}						@: load next input row
	vshl.u8     q14,#1
    
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#13							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 3, . . . (16 bytes)

	vldm		r0,{q15}						@: load next input row
    vshl.u8     q15,#1
    
	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#3							@: output pointer for byte 0	
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 20, . . . (16 bytes)   
	
	vldm		r0,{q8}						    @: load next input row
    vshl.u8     q8,#1
    
	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#20							@: output pointer
	bl			save_16_bytes					@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 10, . . . (16 bytes)   
	
    vldm		r0,{q9}		    				@: load next input row
	vshl.u8     q9,#1
    
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#10							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: end of main loop - move 16 bytes along each row and do it again (twice)

	pop			{r0}							@: restore input pointer
	add			r0,#16							@: move along the row
	
	add			r1,#16*27						@: move the output pointer the the next 432 output bytes
	
	adds		r2,#-1							@: main loop counter
	bne			lr25s2							@: go around the main loop

lr25s98:
	pop			{r0-r12,r14}
	mov			pc,r14
	

	.align	2	
	.ltorg										@: literal pool
	.align	2

    	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:  ldpc_reformat_s12
@:		25 rows in the ldpc inter array
@:      reformats the LDPC data in the inter array back into the frame
@:      
@:  Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2-q3	accumulator		
@: q4-q7	and buffer
@: q8-q15	input buffer

ldpc_reformat_s12:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array            @: input pointer
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

	ldr			r2,=3		                    @: loop counter; 3 x 16 bytes horizontally
	ldr			r4,=25							@: step 25 bytes when outputting each of 16 bytes


	b			lr12s1
	.align	2	
	.ltorg										@: literal pool
	.align	2
lr12s1:

    
@: loop here for each 16 input bytes horizontally in the inter array (3 loops)

lr12s2:	

@: save the input pointer

	push		{r0}                            

@: load the first 8 rows of 16 bytes from the inter array

	vldm		r0,{q8}					        
    add         r0,#LBPR
    vldm        r0,{q9}
    add         r0,#LBPR
    vldm        r0,{q10}
    add         r0,#LBPR
    vldm        r0,{q11}
    add         r0,#LBPR
    vldm        r0,{q12}
    add         r0,#LBPR
    vldm        r0,{q13}
    add         r0,#LBPR
    vldm        r0,{q14}
    add         r0,#LBPR
    vldm        r0,{q15}
    add         r0,#LBPR    
    
@: do bytes 0, 25, . . . 350, 375 (16 bytes)

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#0							@: output pointer for byte 0	
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
@: do bytes 22, 47, . . . 372, 397 (16 bytes)   
	
	vldm		r0,{q8}						@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#22							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 19, 44, . . . 369, 394 (16 bytes)	
	
	vldm		r0,{q9}						@: load next input row
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0H[2]					@: multiply by 64
	vmla.u16	q3,q5,q0H[1]					@: multiply by 32
	vmla.u16	q2,q6,q0H[0]					@: multiply by 16
	vmla.u16	q3,q7,q0L[3]					@: multiply by 8

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#19							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 16, 41, . . . 366, 391 (16 bytes)	
	
	vldm		r0,{q10}						@: load next input row
	
	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#16							@: output pointer
	bl			save_16_bytes							@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 13, 38, . . . 363, 388 (16 bytes)	
	
	vldm		r0,{q11}						@: load next input row
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					@: multiply by 16
	vmla.u16	q3,q5,q0L[3]					@: multiply by 8
	vmla.u16	q2,q6,q0L[2]					@: multiply by 4
	vmla.u16	q3,q7,q0L[1]					@: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#13							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 10, 35, . . . 360, 385 (16 bytes)	
	
	vldm		r0,{q12}						@: load next input row
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#10							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 7, 32, . . . 357, 382 (16 bytes)	
	
	vldm		r0,{q13}						@: load next input row
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#7							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 4, 29, . . . 354, 379 (16 bytes)	
	
	vldm		r0,{q14}						@: load next input row
	
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#4							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 1, 26, . . . 351, 376 (16 bytes)		

	vldm		r0,{q15}						@: load next input row

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#1							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

	b			lr12s6
	.align	2	
	.ltorg										@: literal pool
	.align	2
lr12s6:

@: start loading rows into Q8 again
	
@: do bytes 23, 48, . . . 373, 398 (16 bytes)   
	
	vldm		r0,{q8}							@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#23							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 20, . . . (16 bytes)
	
	vldm		r0,{q9}							@: load next input row
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0H[2]					@: multiply by 64
	vmla.u16	q3,q5,q0H[1]					@: multiply by 32
	vmla.u16	q2,q6,q0H[0]					@: multiply by 16
	vmla.u16	q3,q7,q0L[3]					@: multiply by 8

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#20							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 17, . . . (16 bytes)
	
	vldm		r0,{q10}						@: load next input row
	
	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#17							@: output pointer
	bl			save_16_bytes					@: save 16 bytes - r1 is the initial output pointer 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
		
@: do bytes 14, . . . (16 bytes)
	
	vldm		r0,{q11}						@: load next input row
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					@: multiply by 16
	vmla.u16	q3,q5,q0L[3]					@: multiply by 8
	vmla.u16	q2,q6,q0L[2]					@: multiply by 4
	vmla.u16	q3,q7,q0L[1]					@: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#14							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 11, . . . (16 bytes)
	
	vldm		r0,{q12}						@: load next input row
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#11							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 8, . . .	
	
	vldm		r0,{q13}						@: load next input row
	
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#8							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 5, . . . 16 bytes)	
	
	vldm		r0,{q14}						@: load next input row
	
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#5							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 2, . . . (16 bytes)		

	vldm		r0,{q15}						@: load next input row

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#2							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

	b			lr12s8
	.align	2	
	.ltorg										@: literal pool
	.align	2
lr12s8:
	
@: start loading rows into Q0 again - after all 25 rows used, restore input pointer to row zero and shift left by one each byte	
	
@: do bytes 24, . . . 399 (16 bytes)   
	
	vldm		r0,{q8}						@: load next input row
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vmla.u16	q2,q4,q0H[3]					@: multiply by 128
	vmla.u16	q3,q5,q0H[2]					@: multiply by 64
	vmla.u16	q2,q6,q0H[1]					@: multiply by 32
	vmla.u16	q3,q7,q0H[0]					@: multiply by 16

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}
	add			r1,#24							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: 25 rows used - restore the input pointer and shift left each byte by 1 from here on	
	
	pop			{r0}							@: restore the input pointer to row zero
	push		{r0}							@: resave it	
	
@: do bytes 21, . . . (16 bytes)
	
	vldm		r0,{q9}						@: load next input row
	vshl.u8		q9,#1							@: shift left each byte by 1
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vmla.u16	q2,q4,q0H[2]					 @: multiply by 64
	vmla.u16	q3,q5,q0H[1]					 @: multiply by 32
	vmla.u16	q2,q6,q0H[0]					 @: multiply by 16
	vmla.u16	q3,q7,q0L[3]					 @: multiply by 8

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	

	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1
	
	push		{r1}							@: save the output pointer
	add			r1,#21							@: offset of first byte
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 18, . . .
	
	vldm		r0,{q10}						@: load next input row
	vshl.u8		q10,#1							@: shift left each byte by 1
	
	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vmla.u16	q2,q4,q0H[1]					@: multiply by 32
	vmla.u16	q3,q5,q0H[0]					@: multiply by 16
	vmla.u16	q2,q6,q0L[3]					@: multiply by 8
	vmla.u16	q3,q7,q0L[2]					@: multiply by 4

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#18							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
		
@: do bytes 15, . . . 
	
	vldm		r0,{q11}						@: load next input row
	vshl.u8		q11,#1							@: shift left each byte by 1
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q12,q1	
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1	
	
	vmla.u16	q2,q4,q0H[0]					 @: multiply by 16
	vmla.u16	q3,q5,q0L[3]					 @: multiply by 8
	vmla.u16	q2,q6,q0L[2]					 @: multiply by 4
	vmla.u16	q3,q7,q0L[1]					 @: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1	
	
	vorr		q2,q4
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3
		
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#15							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 12, . . . 
	
	vldm		r0,{q12}						@: load next input row
	vshl.u8		q12,#1							@: shift left each byte by 1
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q13,q1	
	vand		q5,q14,q1	
	vand		q6,q15,q1	
	vand		q7,q8,q1	

	vmla.u16	q2,q4,q0L[3]					@: multiply by 8
	vmla.u16	q3,q5,q0L[2]					@: multiply by 4
	vmla.u16	q2,q6,q0L[1]					@: multiply by 2
	vorr		q3,q7

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	vand		q6,q11,q1	
	vand		q7,q12,q1	

	vsra.u8		q2,q4,#1
	vsra.u8		q3,q5,#2
	vsra.u8		q2,q6,#3
	vsra.u8		q3,q7,#4

	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#12							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row

@: do bytes 9, . . .	
	
	vldm		r0,{q13}						@: load next input row
	vshl.u8		q13,#1							@: shif left each byte by 1

	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q14,q1	
	vand		q5,q15,q1	
	vand		q6,q8,q1	
	vand		q7,q9,q1	
	
	vmla.u16	q2,q4,q0L[2]					@: multiply by 4
	vmla.u16	q3,q5,q0L[1]					@: multiply by 2
	vorr		q2,q6
	vsra.u8		q3,q7,#1
	
	vand		q4,q10,q1	
	vand		q5,q11,q1	
	vand		q6,q12,q1	
	vand		q7,q13,q1	
	
	vsra.u8		q2,q4,#2
	vsra.u8		q3,q5,#3
	vsra.u8		q2,q6,#4
	vsra.u8		q3,q7,#5
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#9							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
    
@: do bytes 6, . . . 	
	
	vldm		r0,{q14}						@: load next input row
	vshl.u8		q14,#1							@: shif left each byte by 1
	
	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator

	vand		q4,q15,q1	
	vand		q5,q8,q1	
	vand		q6,q9,q1	
	vand		q7,q10,q1	

	vmla.u16	q2,q4,q0L[1]					@: multiply by 2
	vorr		q3,q5
	vsra.u8		q2,q6,#1
	vsra.u8		q3,q7,#2

	vand		q4,q11,q1	
	vand		q5,q12,q1	
	vand		q6,q13,q1	
	vand		q7,q14,q1	

	vsra.u8		q2,q4,#3
	vsra.u8		q3,q5,#4
	vsra.u8		q2,q6,#5
	vsra.u8		q3,q7,#6
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#6							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: do bytes 3, . . .		

	vldm		r0,{q15}						@: load next input row
	vshl.u8		q15,#1							@: shift left each byte by 1

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	vmov.u8		q3,#0							@: accumulator
	
	vand		q4,q8,q1						@: first 4 qwords
	vand		q5,q9,q1	
	vand		q6,q10,q1	
	vand		q7,q11,q1		

	vorr		q2,q4						 	@: accumulate
	vsra.u8		q3,q5,#1
	vsra.u8		q2,q6,#2
	vsra.u8		q3,q7,#3

	vand		q4,q12,q1						@: second 4 qwords
	vand		q5,q13,q1	
	vand		q6,q14,q1	
	vand		q7,q15,q1		

	vsra.u8		q2,q4,#4						@: accumulate
	vsra.u8		q3,q5,#5
	vsra.u8		q2,q6,#6
	vsra.u8		q3,q7,#7
	
	vorr.u8		q1,q2,q3						@: 16 bytes now in q1

	push		{r1}							@: save the output pointer
	add			r1,#3							@: output pointer
	bl			save_16_bytes					@: save 16 bytes in Q1 - r1 is the initial output pointer, r4 is step size 
	pop			{r1}							@: restore the output pointer 
	
    add         r0,#LBPR                        @: move the input pointer to the next row
	
@: end of main loop - move 16 bytes along each row and do it again (twice)

	pop			{r0}							@: restore input pointer
	add			r0,#16							@: move along the row
	
	add			r1,#400							@: move the output pointer the the next 400 output bytes
	
	adds		r2,#-1							@: main loop counter
	bne			lr12s2							@: go around the main loop

lr12s98:
	pop			{r0-r12,r14}
	mov			pc,r14
	

	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_s23
@:		15 rows in the ldpc inter array
@:		the output pointer is not 32 bit aligned (4n + 2 bytes)
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2-q3	and buffer
@: q4-q7	input buffer
@: q8-q15	120 byte accumulator
@: q15		temp accumulator		
		
ldpc_reformat_s23:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array			@: input pointer
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					
	ldr			r2,=6							@: loop counter; 45 bytes in each LDPC inter array row
												@: 8 input bytes per loop
												
	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

@: loop here	
	
lr23s2: 
	push		{r0}							@: save the input pointer
	
@: load 8 bytes from the first 8 rows (of 15) of the inter array

	vldr		q4L,[r0]
	add			r0,#LBPR
	vldr		q4H,[r0]
	add			r0,#LBPR
	vldr		q5L,[r0]
	add			r0,#LBPR
	vldr		q5H,[r0]
	add			r0,#LBPR
	vldr		q6L,[r0]
	add			r0,#LBPR
	vldr		q6H,[r0]
	add			r0,#LBPR
	vldr		q7L,[r0]
	add			r0,#LBPR
	vldr		q7H,[r0]
	add			r0,#LBPR

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q15,#0							@: accumulator	
	
@: do bytes 0, 15, 30, 45, 60, 75, 90, 105

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q15,#0							@: accumulator
	
	vand		q2,q4,q1
	vand		q3,q5,q1	

	vorr		q15L,q2L						@: shift and accumulate
	vsra.u8		q15H,q2H,#1
	vsra.u8		q15L,q3L,#2
	vsra.u8		q15H,q3H,#3

	vand		q2,q6,q1	
	vand		q3,q7,q1	

	vsra.u8		q15L,q2L,#4
	vsra.u8		q15H,q2H,#5
	vsra.u8		q15L,q3L,#6
	vsra.u8		q15H,q3H,#7

	vorr.u8		q8L,q15L,q15H					@: 6 bytes now in q8L

@: do bytes 2, 17, 32, 47, 62, 77, 92, 107
		
	vldr		q4L,[r0]						@: get the 9th row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q15,#0							@: accumulator	
	
	vand		q2,q4,q1
	vand		q3,q5,q1	

	vmla.u16	q15L,q2H,q0L[1]					@: multiply by 2
	vorr		q15H,q3L
	vsra.u8		q15L,q3H,#1

	vand		q2,q6,q1	
	vand		q3,q7,q1		
	
	vsra.u8		q15H,q2L,#2
	vsra.u8		q15L,q2H,#3
	vsra.u8		q15H,q3L,#4
	vsra.u8		q15L,q3H,#5
	
	vand		q2,q4,q1
	
	vsra.u8		q15H,q2L,#6
	
	vorr.u8		q10L,q15L,q15H					@: 4 bytes now in q10L

@: do bytes 4, 19, 34, 49, 64, 79, 94, 109
		
	vldr		q4H,[r0]						@: get the 10th row from the inter array
	add			r0,#LBPR	
		
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q15,#0							@: accumulator	
	
	vand		q2,q5,q1	
	vand		q3,q6,q1		
	
	vmla.u16	q15L,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q2H,q0L[1]					@: multiply by 2
	vorr		q15L,q3L
	vsra.u8		q15H,q3H,#1
		
	vand		q2,q7,q1	
	vand		q3,q4,q1		
	
	vsra.u8		q15L,q2L,#2
	vsra.u8		q15H,q2H,#3
	vsra.u8		q15L,q3L,#4
	vsra.u8		q15H,q3H,#5
	vorr.u8		q12L,q15L,q15H					@: 6 bytes now in q12L

@: do bytes 6, 21, 36, 51, 66, 81, 96, 111
		
	vldr		q5L,[r0]						@: get the 11th row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q15,#0							@: accumulator	
		
	vand		q2,q5,q1	
	vand		q3,q6,q1		

	vmla.u16	q15L,q2H,q0L[3]					@: multiply by 8
	vmla.u16	q15H,q3L,q0L[2]					@: multiply by 4
	vmla.u16	q15L,q3H,q0L[1]					@: multiply by 2
		
	vand		q2,q7,q1	
	vand		q3,q4,q1		

	vorr		q15H,q2L
	vsra.u8		q15L,q2H,#1
	vsra.u8		q15H,q3L,#2
	vsra.u8		q15L,q3H,#3
	
	vand		q2,q5,q1		
	
	vsra.u8		q15H,q2L,#4
	
	vorr.u8		q14L,q15L,q15H					@: 8 bytes now in q14L

@: do bytes 8, 23, 38, 53, 68, 83, 98, 113
		
	vldr		q5H,[r0]						@: get the 12th row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q6,q1	
	vand		q3,q7,q1		

	vmla.u16	q15L,q2L,q0H[0]					@: multiply by 16
	vmla.u16	q15H,q2H,q0L[3]					@: multiply by 8
	vmla.u16	q15L,q3L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q3H,q0L[1]					@: multiply by 2
		
	vand		q2,q4,q1	
	vand		q3,q5,q1		
	
	vorr		q15L,q2L
	vsra.u8		q15H,q2H,#1
	vsra.u8		q15L,q3L,#2
	vsra.u8		q15H,q3H,#3
	
	vorr.u8		q8H,q15L,q15H					@: 8 bytes now in q8H

@: do bytes 10, 25, 40, 55, 70, 85, 100, 115
		
	vldr		q6L,[r0]						@: get the 13th row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q6,q1	
	vand		q3,q7,q1		

	vmla.u16	q15L,q2H,q0H[1]					@: multiply by 32
	vmla.u16	q15H,q3L,q0H[0]					@: multiply by 16
	vmla.u16	q15L,q3H,q0L[3]					@: multiply by 8
		
	vand		q2,q4,q1	
	vand		q3,q5,q1			
	
	vmla.u16	q15H,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15L,q2H,q0L[1]					@: multiply by 2
	vorr		q15H,q3L
	vsra.u8		q15L,q3H,#1
	
	vand		q2,q6,q1	
	
	vsra.u8		q15H,q2L,#2
	
	vorr.u8		q10H,q15L,q15H					@: 8 bytes now in q10H

@: do bytes 12, 27, 42, 57, 72, 87, 102, 117
		
	vldr		q6H,[r0]						@: get the 14th row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q7,q1	
	vand		q3,q4,q1			

	vmla.u16	q15L,q2L,q0H[2]					@: multiply by 64
	vmla.u16	q15H,q2H,q0H[1]					@: multiply by 32
	vmla.u16	q15L,q3L,q0H[0]					@: multiply by 16
	vmla.u16	q15H,q3H,q0L[3]					@: multiply by 8
			
	vand		q2,q5,q1	
	vand		q3,q6,q1			
	
	vmla.u16	q15L,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q2H,q0L[1]					@: multiply by 2
	vorr		q15L,q3L
	vsra.u8		q15H,q3H,#1

	vorr.u8		q12H,q15L,q15H					@: 8 bytes now in q12H

@: do bytes 14, 29, 44, 59, 74, 89, 104, 119
		
	vldr		q7L,[r0]						@: get the 15th (last) row from the inter array
	add			r0,#LBPR	

	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q15,#0							@: clear accumulator

	vand		q2,q7,q1	
	vand		q3,q4,q1			
	
	vmla.u16	q15L,q2H,q0H[3]					@: multiply by 128
	vmla.u16	q15H,q3L,q0H[2]					@: multiply by 64
	vmla.u16	q15L,q3H,q0H[1]					@: multiply by 32
	
	vand		q2,q5,q1	
	vand		q3,q6,q1				
	
	vmla.u16	q15H,q2L,q0H[0]					@: multiply by 16
	vmla.u16	q15L,q2H,q0L[3]					@: multiply by 8
	vmla.u16	q15H,q3L,q0L[2]					@: multiply by 4
	vmla.u16	q15L,q3H,q0L[1]					@: multiply by 2
		
	vand		q2,q7,q1	
	
	vorr		q15H,q2L
	vorr.u8		q14H,q15L,q15H					@: 8 bytes now in q14H


	b			lr23s4	
	.align		2	
	.ltorg										@: literal pool
	.align		2
lr23s4:
	
@: restore the input pointer, read from the inter array and shift left 1 before merging into the input buffer 	
	
	pop			{r0}
	push		{r0}							@: restore and resave the input pointer	
		
@: do bytes 1, 16, 31, 46, 61, 76, 91, 106

	vldr		q7H,[r0]						@: 1st inter array row 0-7, 1-0, . . . 
	add			r0,#LBPR	
	vshl.u64	q7H,#1							@: shift left

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q15,#0							@: accumulator
	
	vand		q2,q4,q1
	vand		q3,q5,q1	

	vorr		q15L,q2L						@: shift and accumulate
	vsra.u8		q15H,q2H,#1
	vsra.u8		q15L,q3L,#2
	vsra.u8		q15H,q3H,#3

	vand		q2,q6,q1	
	vand		q3,q7,q1	

	vsra.u8		q15L,q2L,#4
	vsra.u8		q15H,q2H,#5
	vsra.u8		q15L,q3L,#6
	vsra.u8		q15H,q3H,#7

	vorr.u8		q9L,q15L,q15H					@: 6 bytes now in q9L

@: do bytes 3, 18, 33, 48, 63, 78, 93, 108
		
	vldr		q4L,[r0]						@: 2nd inter array row 0-6, 2-7, . . .
	add			r0,#LBPR	
	vshl.u64	q4L,#1							@: shift left

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q15,#0							@: accumulator	
	
	vand		q2,q4,q1
	vand		q3,q5,q1	

	vmla.u16	q15L,q2H,q0L[1]					@: multiply by 2
	vorr		q15H,q3L
	vsra.u8		q15L,q3H,#1

	vand		q2,q6,q1	
	vand		q3,q7,q1		
	
	vsra.u8		q15H,q2L,#2
	vsra.u8		q15L,q2H,#3
	vsra.u8		q15H,q3L,#4
	vsra.u8		q15L,q3H,#5
	
	vand		q2,q4,q1
	
	vsra.u8		q15H,q2L,#6
	
	vorr.u8		q11L,q15L,q15H					@: 4 bytes now in q11L

@: do bytes 5, 20, 35, 50, 65, 80, 95, 110
		
	vldr		q4H,[r0]						@: 3rd inter array row 0-5, 2-6, . . . 
	add			r0,#LBPR	
	vshl.u64	q4H,#1			
		
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q15,#0							@: accumulator	
	
	vand		q2,q5,q1	
	vand		q3,q6,q1		
	
	vmla.u16	q15L,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q2H,q0L[1]					@: multiply by 2
	vorr		q15L,q3L
	vsra.u8		q15H,q3H,#1
		
	vand		q2,q7,q1	
	vand		q3,q4,q1		
	
	vsra.u8		q15L,q2L,#2
	vsra.u8		q15H,q2H,#3
	vsra.u8		q15L,q3L,#4
	vsra.u8		q15H,q3H,#5
	vorr.u8		q13L,q15L,q15H					@: 6 bytes now in q13L

@: do bytes 7, 22, 37, 52, 67, 82, 97, 112
		
	vldr		q5L,[r0]						@: 4th inter array row 0-4, 2-5, . . . 
	add			r0,#LBPR	
	vshl.u64	q5L,#1
	
	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q15,#0							@: accumulator	
		
	vand		q2,q5,q1	
	vand		q3,q6,q1		

	vmla.u16	q15L,q2H,q0L[3]					@: multiply by 8
	vmla.u16	q15H,q3L,q0L[2]					@: multiply by 4
	vmla.u16	q15L,q3H,q0L[1]					@: multiply by 2
		
	vand		q2,q7,q1	
	vand		q3,q4,q1		

	vorr		q15H,q2L
	vsra.u8		q15L,q2H,#1
	vsra.u8		q15H,q3L,#2
	vsra.u8		q15L,q3H,#3
	
	vand		q2,q5,q1		
	
	vsra.u8		q15H,q2L,#4
	
	vorr.u8		q15L,q15L,q15H					@: 8 bytes now in q15L

	vpush		{q15L}							@: save temporarily, as q15 is used as the temp accumulator
	
@: do bytes 9, 24, 39, 54, 69, 84, 99, 114
		
	vldr		q5H,[r0]						@: 5th inter array row 0-3, 2-4, . . .
	add			r0,#LBPR	
	vshl.u64	q5H,#1
	
	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q6,q1	
	vand		q3,q7,q1		

	vmla.u16	q15L,q2L,q0H[0]					@: multiply by 16
	vmla.u16	q15H,q2H,q0L[3]					@: multiply by 8
	vmla.u16	q15L,q3L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q3H,q0L[1]					@: multiply by 2
		
	vand		q2,q4,q1	
	vand		q3,q5,q1		
	
	vorr		q15L,q2L
	vsra.u8		q15H,q2H,#1
	vsra.u8		q15L,q3L,#2
	vsra.u8		q15H,q3H,#3
	
	vorr.u8		q9H,q15L,q15H					@: 8 bytes now in q9H

@: do bytes 11, 26, 41, 56, 71, 86, 101, 116
		
	vldr		q6L,[r0]						@: 6th inter array row 0-2, 2-3, . . . 
	add			r0,#LBPR	
	vshl.u64	q6L,#1
	
	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q6,q1	
	vand		q3,q7,q1		

	vmla.u16	q15L,q2H,q0H[1]					@: multiply by 32
	vmla.u16	q15H,q3L,q0H[0]					@: multiply by 16
	vmla.u16	q15L,q3H,q0L[3]					@: multiply by 8
		
	vand		q2,q4,q1	
	vand		q3,q5,q1			
	
	vmla.u16	q15H,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15L,q2H,q0L[1]					@: multiply by 2
	vorr		q15H,q3L
	vsra.u8		q15L,q3H,#1
	
	vand		q2,q6,q1	
	
	vsra.u8		q15H,q2L,#2
	
	vorr.u8		q11H,q15L,q15H					@: 8 bytes now in q11H

@: do bytes 13, 28, 43, 58, 73, 88, 103, 118
		
	vldr		q6H,[r0]						@: get the 14th row from the inter array
	add			r0,#LBPR	
	vshl.u64	q6H,#1

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q15,#0							@: clear accumulator
		
	vand		q2,q7,q1	
	vand		q3,q4,q1			

	vmla.u16	q15L,q2L,q0H[2]					@: multiply by 64
	vmla.u16	q15H,q2H,q0H[1]					@: multiply by 32
	vmla.u16	q15L,q3L,q0H[0]					@: multiply by 16
	vmla.u16	q15H,q3H,q0L[3]					@: multiply by 8
			
	vand		q2,q5,q1	
	vand		q3,q6,q1			
	
	vmla.u16	q15L,q2L,q0L[2]					@: multiply by 4
	vmla.u16	q15H,q2H,q0L[1]					@: multiply by 2
	vorr		q15L,q3L
	vsra.u8		q15H,q3H,#1
	vorr.u8		q13H,q15L,q15H					@: 8 bytes now in q13H

@: restore bytes 7, 22, . . . saved earlier

	vpop		{q15L}	
	
	
@: the bytes in the registers are:

@: q8:   00  15  30  45  60  75  80  105   08  23  38  53  68  83  98  113   
@: q9:	 01  16  31  46  61  76  91  106   09  24  39  54  69  84  99  114
@: q10:	 02  17  32  47  62  77  92  107   10  25  40  55  70  85  100 115		
@: q11:	 03  18  33  48  63  78  93  108   11  26  41  56  71  86  101 116
@: q12:	 04  19  34  49  64  79  94  109   12  27  42  57  72  87  102 117   
@: q13:	 05  20  35  50  65  80  95  110   13  28  43  58  73  88  103 118
@: q14:	 06  21  36  51  66  81  96  111   14  29  44  59  74  89  104 119
@: q15	 07  22  37  52  67  82  97  112

/*
    vmov.u8     q7,#1
	vldr		q8L,=0x695a4b3c2d1e0f00
    vldr        q8H,=0x7162534435261708
    vadd.u8     q9,q8,q7
    vadd.u8     q10,q9,q7
    vadd.u8     q11,q10,q7
    vadd.u8     q12,q11,q7
    vadd.u8     q13,q12,q7
    vadd.u8     q14,q13,q7
    vadd.u8     q15,q14,q7
	vmov.u8		q15H,#0
*/

@: put the bytes into a better order    
	
    vzip.u8     q8,q9
	vzip.u8		q10,q11
    vzip.u8     q12,q13
	vzip.u8		q14,q15

	vzip.u16	q8,q10
	vzip.u16	q9,q11
	vzip.u16	q12,q14
	vzip.u16	q13,q15

	vzip.u32	q8,q12
	vzip.u32	q9,q13
	vzip.u32	q10,q14
	vzip.u32	q11,q15

	vswp		q8H,q9L
	vswp		q10H,q11L
	vswp		q12H,q13L
	vswp		q14H,q15L

	vswp		q10,q12
	vswp		q11,q13

bk42:	

@: put the bytes into correct order

	vsli.u64	q8H,q9L,#56						@: byte 15
	vext.u8		q9,q9,q9,#1						@: shift right 1 byte
	vsli.u64	q9H,q10L,#48					@: bytes 30-31
	vext.u8		q10,q10,q10,#2					@: shift right 2 bytes
	vsli.u64	q10H,q11L,#40					@: bytes 45-47
	vext.u8		q11,q11,q11,#3					@: shift right 3 bytes
	vsli.u64	q11H,q12L,#32					@: bytes 60-63
	vext.u8		q12,q12,q12,#4					@: shift right 4 bytes
	vsli.u64	q12H,q13L,#24					@: bytes 75-79
	vext.u8		q13,q13,q13,#5					@: shift right 5 bytes
	vsli.u64	q13H,q14L,#16					@: bytes 90-95
	vext.u8		q14,q14,q14,#6					@: shift right 6 bytes
	vsli.u64	q14H,q15L,#8					@: bytes 105-111
	vext.u8		q15,q15,q15,#7					@: shift right 7 bytes
	
bk44:	
	
@: output pointer is aligned on 4n + 2 bytes, so write 1 byte and shuffle down 

    vst1.u16	q8L[0],[r1]!
    
    vext.u8		q8,q8,q9,#2
    vext.u8		q9,q9,q10,#2
    vext.u8		q10,q10,q11,#2
    vext.u8		q11,q11,q12,#2
    vext.u8		q12,q12,q13,#2
    vext.u8		q13,q13,q14,#2
    vext.u8		q14,q14,q15,#2
    vext.u8		q15,q15,q15,#2

	vstm		r1,{q8-q15}						@: store 128 bytes (only 118 needed)
	
	pop			{r0}							@: restore the input pointer
	add			r0,#8							@: move the input pointer 8 bytes along each inter array row
	add			r1,#118							@: step the output pointer for 80 bytes per loop	
			
	adds		r2,#-1
	bne			lr23s2							@: do another loop			

lr23s98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2



@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:  ldpc_reformat_s34
@:		12 rows in the ldpc inter array
@:		the output pointer is not 32 bit aligned (4n + 1 bytes)
@:      reformats the LDPC data in the inter array back into the frame
@:      
@:  Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define LDPC_REFORMAT_LOOPS_S34					6

ldpc_reformat_s34:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array	
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					
	ldr			r2,=LDPC_REFORMAT_LOOPS_S34		@: loop counter
	
@: loop here for each 12 x 8 input bytes processed

lr34s2:	

@: load 8 bytes from each LDPC inter array row

	vldr.u8		d0, [r0,#0*LBPR]					
	vldr.u8		d1, [r0,#1*LBPR]
	vldr.u8		d2, [r0,#2*LBPR]
	vldr.u8		d3, [r0,#3*LBPR]
	vldr.u8		d4, [r0,#4*LBPR]
	vldr.u8		d5, [r0,#5*LBPR]
	vldr.u8		d6, [r0,#6*LBPR]
	vldr.u8		d7, [r0,#7*LBPR]
	vldr.u8		d8, [r0,#8*LBPR]
	vldr.u8		d9, [r0,#9*LBPR]
	vldr.u8		d10,[r0,#10*LBPR]
	vldr.u8		d11,[r0,#11*LBPR]

@: reset the accumulators for the 96 output bytes

	vmov.u32	q10,#0					
	vmov.u32	q11,#0
	vmov.u32	q12,#0
	vmov.u32	q13,#0
	vmov.u32	q14,#0
	vmov.u32	q15,#0
	
@: do the upper bytes

@: bit 7: 8 bytes: 0, 12, . . . 84

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x80				@: mask	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)			
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3

	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#4
	vsra.u8		q7H,q6H,#5

	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#6
	vsra.u8		q7H,q6H,#7
	
	vorr.u8		q10L,q7L,q7H			@: q10L = dout [0]

@: bit 5: 8 bytes: 3, 15, . . . 87

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#4					@: multiplier
	vmov.u32	q8H,#2					@: multiplier
	vmov.u8		q9,#0x20				@: mask	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#4
	vsra.u8		q7H,q6H,#5	

	vorr.u32	q11H,q7L,q7H			@: q11H = dout [3]

@: bit 3: 8 bytes: 6, 18, . . . 90

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#16					@: multiplier
	vmov.u32	q8H,#8					@: multiplier
	vmov.u8		q9,#0x08				@: mask	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 4,4,2,2

	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vorr		q7L,q6L
	vsra.u8		q7H,q6H,#1
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3
		
	vorr.u32	q13L,q7L,q7H			@: q13L = dout [6]

@: bit 1: 8 bytes: 9, 21, . . . 93

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#64					@: multiplier
	vmov.u32	q8H,#32					@: multiplier
	vmov.u8		q9,#0x02				@: mask	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 16,16,8,8
	
	vand.u8		q6,q1,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vshr.u8		q8,#2					@: multiplier = 4,4,2,2
	
	vand.u8		q6,q2,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q3,q9				@: mask off the bits of interest (1,0)			
	vorr		q7L,q6L
	vsra.u8		q7H,q6H,#1
		
	vorr.u32	q14H,q7L,q7H			@: q14H = dout [6]

@: now do the lower bytes

@: bit 6: 8 bytes: 2, 14, . . . 86

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x40				@: mask	

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#5
	vsra.u8		q7H,q6H,#6	

	vorr.u32	q11L,q7L,q7H			@: q11L = dout [2]

@: bit 4: 8 bytes: 5, 17, . . . 89

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#8					@: multiplier
	vmov.u32	q8H,#4					@: multiplier
	vmov.u8		q9,#0x10				@: mask	

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4	

	vorr.u32	q12H,q7L,q7H			@: q12H = dout [5]

@: bit 2: 8 bytes: 8, 20, . . . 92

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#32					@: multiplier
	vmov.u32	q8H,#16					@: multiplier
	vmov.u8		q9,#0x04				@: mask	

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vshr.u8		q8,#2					@: multiplier = 8,8,4,4
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vshr.u8		q8,#2					@: multiplier = 2,2,1,1
	vmla.u32	q7,q6,q8				@: accumulate
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2	

	vorr.u32	q14L,q7L,q7H			@: q14L = dout [8]

@: bit 0: 8 bytes: 11, 23, . . . 95

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#128				@: multiplier
	vmov.u32	q8H,#64					@: multiplier
	vmov.u8		q9,#0x01				@: mask	

	vand.u8		q6,q2,q9				@: mask off the bits of interest (7,6)
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 32,32,16,16

	vand.u8		q6,q3,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 8,8,4,4
	
	vand.u8		q6,q4,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1
	
	vand.u8		q6,q5,q9				@: mask off the bits of interest (1,0)			
	vmla.u32	q7,q6,q8				@: accumulate

	vorr.u32	q15H,q7L,q7H			@: q15H = dout [11]

@: do the split bytes

@: bits 7,6: 8 bytes: 1, 13, . . . 85

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#2					@: multiplier
	vmov.u32	q8H,#1					@: multiplier
	vmov.u8		q9,#0x80				@: mask	

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vsra.u8		q7L,q6L,#2
	vsra.u8		q7H,q6H,#3

	vshr.u8		q9,#1					@: change the mask to bit 6	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#5
	vsra.u8		q7H,q6H,#6

	vorr.u32	q10H,q7L,q7H			@: q10H = dout [1]

@: bits 5,4: 8 bytes: 4, 16, . . . 88

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#4					@: multiplier
	vmov.u32	q8H,#2					@: multiplier
	vmov.u8		q9,#0x20				@: mask	

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vorr.u8		q7L,q6L
	vsra.u8		q7H,q6H,#1

	vshr.u8		q9,#1					@: change the mask to bit 4	

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#3
	vsra.u8		q7H,q6H,#4
	
	vorr.u32	q12L,q7L,q7H			@: q12L = dout [4]

@: bit 3,2: 8 bytes: 7, 19, . . . 91

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#16					@: multiplier
	vmov.u32	q8H,#8					@: multiplier
	vmov.u8		q9,#0x08				@: mask	

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 4,4,2,2

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q9,#1					@: change the mask to bit 2	

	vshr.u8		q8,#1					@: multiplier = 2,2,1,1

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vsra.u8		q7L,q6L,#1
	vsra.u8		q7H,q6H,#2
	
	vorr.u32	q13H,q7L,q7H			@: q11L = dout [7]

@: bit 1,0: 8 bytes: 10, 22, . . . 94

	vmov.u32	q7,#0					@: accumulator
	vmov.u32	q8L,#64					@: multiplier
	vmov.u32	q8H,#32					@: multiplier
	vmov.u8		q9,#0x02				@: mask	

	vand.u8		q6,q4,q9				@: mask off the bits of interest (7,6)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 16,16,8,8

	vand.u8		q6,q5,q9				@: mask off the bits of interest (5,4)				
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q9,#1					@: change the mask to bit 0

	vshr.u8		q8,#1					@: multiplier = 8,8,4,4

	vand.u8		q6,q0,q9				@: mask off the bits of interest (3,2)			
	vmla.u32	q7,q6,q8				@: accumulate

	vshr.u8		q8,#2					@: multiplier = 2,2,1,1

	vand.u8		q6,q1,q9				@: mask off the bits of interest (1,0)			
	vmla.u32	q7,q6,q8				@: accumulate
	
	vorr.u8		q15L,q7L,q7H			@: q15L = dout [10]

@:	the 96 bytes are in d20-d31 in the order 	00 12 24 . . .	d20[0] d20[1] d20[2]
@:												01 13 25 . . .  d21[0] d21[1] d21[2]
@:												.  .  .
@:
@:  they need to be transposed to				00 01 02 . . .	d20[0] d20[1] d20[2]
@:												08 09 10 . . .  d21[0] d21[1] d21[2]

	vtrn.u8		d20,d21
	vtrn.u8		d22,d23
	vtrn.u8		d24,d25
	vtrn.u8		d26,d27
	vtrn.u8		d28,d29
	vtrn.u8		d30,d31

	vtrn.u16	d20,d22
	vtrn.u16	d21,d23
	vtrn.u16	d24,d26
	vtrn.u16	d25,d27
	vtrn.u16	d28,d30
	vtrn.u16	d29,d31

	vtrn.u32	d20,d24
	vtrn.u32	d28,d21
	vtrn.u32	d25,d29
	vtrn.u32	d22,d26
	vtrn.u32	d30,d23
	vtrn.u32	d27,d31

@: the bytes are in order in the d20-d31 registers, but the registers need to be put in order

	vswp		d21,d28
	vswp		d22,d25
	vswp		d23,d25
	vswp		d24,d30
	vswp		d25,d27
	vswp		d26,d30
	vswp		d27,d28
	vswp		d28,d29
	vswp		d29,d30
							
@:	store 96 bytes from d20-d31 (q10-q15) back into the frame

///	vstm		r1!,{d20-d31}
	
@: the output pointer for s34 is aligned on 4n + 1 bytes, so save 3 bytes individually and shift the rest

	vst1.u8		q10L[0],[r1]!			
	vst1.u8		q10L[1],[r1]!			
	vst1.u8		q10L[2],[r1]!			
	vext.u8		q10,q10,q11,#3
	vext.u8		q11,q11,q12,#3
	vext.u8		q12,q12,q13,#3
	vext.u8		q13,q13,q14,#3
	vext.u8		q14,q14,q15,#3
	vext.u8		q15,q15,q15,#3
	vstm		r1,{q10-q15} 

	add			r1,#96-3					@: update the output pointer
	
	add			r0,#8						@: move the input pointer along each row of the inter array

	adds		r2,#-1
	bne			lr34s2						@: do another loop

lr34s98:	
	pop			{r0-r12,r14}
	mov			pc,r14
	
	.align	2	
	.ltorg	       							@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_s45
@:		10 rows in the ldpc inter array
@:		the output pointer is not 32 bit aligned (4n + 3 bytes)
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		accumulator
@: q4-q5	AND buffer
@: q6-q10	input buffer
@: q11-q15	64 byte accumulator		
		
ldpc_reformat_s45:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array				@: input pointer
	ldr			r1,[r12,#LDPC_POINTER]				@: pointer to the LDPC bytes in the frame					
	ldr			r2,=6								@: loop counter; 45 bytes in each LDPC inter array row
													@: 8 input bytes per loop
												
	vldr		q0L,=0x0008000400020001				@: for multiply by scalar
	vldr		q0H,=0x0080004000200010				@: for multiply by scalar

@: loop here	
	
lr45s2: 
	push		{r0}							@: save the input pointer
	
@: load 8 bytes from all 10 rows of the inter array into q6-q10; 80 bytes in total

	vldr		q6L,[r0]
	add			r0,#LBPR
	vldr		q6H,[r0]
	add			r0,#LBPR
	vldr		q7L,[r0]
	add			r0,#LBPR
	vldr		q7H,[r0]
	add			r0,#LBPR
	vldr		q8L,[r0]
	add			r0,#LBPR
	vldr		q8H,[r0]
	add			r0,#LBPR
	vldr		q9L,[r0]
	add			r0,#LBPR
	vldr		q9H,[r0]
	add			r0,#LBPR
	vldr		q10L,[r0]
	add			r0,#LBPR
	vldr		q10H,[r0]
	add			r0,#LBPR

	vmov.u8		q11,#0
	vmov.u8		q12,#0
	vmov.u8		q13,#0
	vmov.u8		q14,#0
	vmov.u8		q15,#0

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q2,#0							@: accumulator	

@: do bytes 0, 10, 20, 30, 40, 50, 60, 70

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q4,q6,q1	
	vand		q5,q7,q1	
	vorr		q2L,q4L						 	@: shift and accumulate
	vsra.u8		q2H,q4H,#1
	vsra.u8		q2L,q5L,#2
	vsra.u8		q2H,q5H,#3
	vand		q4,q8,q1	
	vand		q5,q9,q1		
	vsra.u8		q2L,q4L,#4
	vsra.u8		q2H,q4H,#5
	vsra.u8		q2L,q5L,#6
	vsra.u8		q2H,q5H,#7
	
	vorr.u8		q11L,q2L,q2H					@: 8 bytes now in q11L

@: do bytes 4, 14, 24, 34, 44, 54, 64, 74

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q4,q7,q1	
	vand		q5,q8,q1	

	vmla.u16	q2L,q4L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q4H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q5L,q0L[1]					@: multiply by 2
	vorr		q2H,q5H

	vand		q4,q9,q1	
	vand		q5,q10,q1	

	vsra.u8		q2L,q4L,#1
	vsra.u8		q2H,q4H,#2
	vsra.u8		q2L,q5L,#3
	vsra.u8		q2H,q5H,#4

	vorr.u8		q11H,q2L,q2H					@: 8 bytes now in q11H

@: do bits 5, 15, 25, 35, 45, 55, 65, 75

bk2:

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q4,q6,q1	
	vand		q5,q7,q1	
	
	vmla.u16	q2L,q4L,q0H[0]					 @: multiply by 16
	vmla.u16	q2H,q4H,q0L[3]					 @: multiply by 8
	vmla.u16	q2L,q5L,q0L[2]					 @: multiply by 4
	vmla.u16	q2H,q5H,q0L[1]					 @: multiply by 2
	
	vand		q4,q8,q1	
	vand		q5,q9,q1	
	
	vorr		q2L,q4L
	vsra.u8		q2H,q4H,#1
	vsra.u8		q2L,q5L,#2
	vsra.u8		q2H,q5H,#3
	
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H

@: do bytes 9, 19, 29, 39, 49, 59, 69, 79
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0  
	vmov.u8		q2,#0							@: clear accumulator

	vand		q4,q7,q1	
	vand		q5,q8,q1	

	vmla.u16	q2L,q4L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q4H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q5L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q5H,q0H[0]					@: multiply by 16

	vand		q4,q9,q1	
	vand		q5,q10,q1	

	vmla.u16	q2L,q4L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q4H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q5L,q0L[1]					@: multiply by 2
	vorr		q2H,q5H

	vorr.u8		q15H,q2L,q2H					@: 8 bytes now in q15H

@: shift q9L, q9H, q10L, q10H right by 1 bit    
    
    vshr.u64    q9,#1
    vshr.u64    q10,#1    
        
@: do bytes 1, 11, 21, 31, 41, 51, 61, 71

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q4,q10,q1
	vand		q5,q6,q1	 

	vmla.u16	q2L,q4L,q0L[1]					@: multiply by 2
	vorr		q2H,q4H
	vsra.u8		q2L,q5L,#1
	vsra.u8		q2H,q5H,#2

	vand		q4,q7,q1
	vand		q5,q8,q1	 

	vsra.u8		q2L,q4L,#3
	vsra.u8		q2H,q4H,#4
	vsra.u8		q2L,q5L,#5
	vsra.u8		q2H,q5H,#6
	
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 2, 12, 22, 32, 42, 52, 62, 72
		
	vmov.u8		q1,#0x20						@: AND mask for bits 5
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q4,q9,q1
	vand		q5,q10,q1	
	
	vmla.u16	q2L,q4L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q4H,q0L[1]					@: multiply by 2
	vorr		q2L,q5L
	vsra.u8		q2H,q5H,#1
	
	vand		q4,q6,q1
	vand		q5,q7,q1	

	vsra.u8		q2L,q4L,#2
	vsra.u8		q2H,q4H,#3
	vsra.u8		q2L,q5L,#4
	vsra.u8		q2H,q5H,#5
	
	vorr.u8		q13L,q2L,q2H					@: 6 bytes now in q13L

@: do bytes 6, 16, 26, 36, 46, 56, 66, 76

	vmov.u8		q1,#0x04						@: AND mask for bits 2
	vmov.u8		q2,#0							@: clear accumulator

	vand		q4,q10,q1	
	vand		q5,q6,q1	

	vmla.u16	q2L,q4L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q4H,q0H[0]					@: multiply by 16
	vmla.u16	q2L,q5L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q5H,q0L[2]					@: multiply by 4

	vand		q4,q7,q1	
	vand		q5,q8,q1	

	vmla.u16	q2L,q4L,q0L[1]					@: multiply by 2
	vorr		q2H,q4H
	vsra.u8		q2L,q5L,#1
	vsra.u8		q2H,q5H,#2
	
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q13H

@: do bytes 7, 17, 27, 37, 47, 57, 67, 77

	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q4,q9,q1	
	vand		q5,q10,q1	
	
	vmla.u16	q2L,q4L,q0H[2]					 @: multiply by 64
	vmla.u16	q2H,q4H,q0H[1]					 @: multiply by 32
	vmla.u16	q2L,q5L,q0H[0]					 @: multiply by 16
	vmla.u16	q2H,q5H,q0L[3]					 @: multiply by 8

	vand		q4,q6,q1	
	vand		q5,q7,q1	

	vmla.u16	q2L,q4L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q4H,q0L[1]					@: multiply by 2
	vorr		q2L,q5L
	vsra.u8		q2H,q5H,#1
	vorr.u8		q14H,q2L,q2H					@: 8 bytes now in q14H

@: shift q7L, q7H, q8L, q8H right by 1 bit

    vshr.u64    q7,#1
    vshr.u64    q8,#1
    
@: do bytes 3, 13, 23, 33, 43, 53, 63, 73      

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q4,q8,q1	
	vand		q5,q9,q1	

	vmla.u16	q2L,q4L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q4H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q5L,q0L[1]					@: multiply by 2
	vorr		q2H,q5H

	vand		q4,q10,q1	
	vand		q5,q6,q1	

	vsra.u8		q2L,q4L,#1
	vsra.u8		q2H,q4H,#2
	vsra.u8		q2L,q5L,#3
	vsra.u8		q2H,q5H,#4

	vorr.u8		q14L,q2L,q2H					@: 8 bytes now in q14L

@: do bytes 8, 18, 28, 38, 48, 58, 68, 78
	
	vmov.u8		q1,#0x01						@: AND mask for bits 0
	vmov.u8		q2,#0							@: clear accumulator

	vand		q4,q8,q1	
	vand		q5,q9,q1	

	vmla.u16	q2L,q4L,q0H[3]					@: multiply by 128
	vmla.u16	q2H,q4H,q0H[2]					@: multiply by 64
	vmla.u16	q2L,q5L,q0H[1]					@: multiply by 32
	vmla.u16	q2H,q5H,q0H[0]					@: multiply by 16

	vand		q4,q10,q1	
	vand		q5,q6,q1	

	vmla.u16	q2L,q4L,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q4H,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q5L,q0L[1]					@: multiply by 2
	vorr		q2H,q5H

	vorr.u8		q15L,q2L,q2H					@: 8 bytes now in q15L
    
@: the bytes in the registers are:

@: q11:	 00	 10	 20	 30  40  50  60  70    04  14  24  34  44  54  64  74
@: q12:	 01  11  21  31  41  51  61  71	   05  15  25  35  45  55  65  75	
@: q13:	 02  12  22  32  42  52  62  72    06  16  26  36  46  56  66  76    
@: q14:  03  13  23  33  43  53  63  73    07  17  27  37  47  56  67  77
@: q15:  08  18  28  38  48  58  68  78    09  19  29  39  49  59  69  79     		  

/*
    vmov.u8     q10,#1
    vldr        q11L,=0x7060504030201000
    vldr        q11H,=0x7464544434241404
    vadd.u8     q12,q11,q10
    vadd.u8     q13,q12,q10
    vadd.u8     q14,q13,q10
    vldr        q15L,=0x7868584838281808
    vldr        q15H,=0x7969594939291909
*/

@: put the bytes into a better order    
	
    vzip.u8     q11,q12
    vzip.u8     q13,q14
    vzip.u16    q11,q13
    vzip.u16    q12,q14
	vzip.u32	q11,q12
	vzip.u32	q13,q14
    vzip.u8     q15L,q15H
    vzip.u16    q15L,q15H

@: put the bytes into correct order

	vmov		q6L,q11L						@: 0-7
	vmov		q6H,q15L						@: 8-9
	vsli.u64	q6H,q11H,#16					@: 10-15
	vshr.u64	q7L,q15L,#16					@: 18-19	
	vsri.u64	q7L,q11H,#48					@: 16-17
	vsli.u64	q7L,q12L,#32					@: 20-23
	vsli.u64	q7H,q15H,#32					@: 28-29
	vsri.u64	q7H,q12L,#32					@: 24-27
	vsli.u64	q7H,q12H,#48					@: 30-31
	vsli.u64	q8L,q15H,#16					@: 38-39
	vsri.u64	q8L,q12H,#16					@: 32-37
	vmov		q8H,q13L						@: 40-47
	vsri.u64	q9L,q15L,#16					@: 48-49
	vsli.u64	q9L,q13H,#16					@: 50-55
	vsri.u64	q9H,q15L,#32					@: 58-59
	vsri.u64	q9H,q13H,#48					@: 56-57
	vsli.u64	q9H,q14L,#32					@: 60-63
	vsli.u64	q10L,q15H,#16					@: 68-69
	vsri.u64	q10L,q14L,#32					@: 64-67
	vsli.u64	q10L,q14H,#48					@: 70-71
	vmov		q10H,q15H						@: 78-79
	vsri.u64	q10H,q14H,#16					@: 72-77
	
@: output pointer is aligned on 4n + 3 bytes, so write 1 byte and shuffle down 

    vst1.u8		q6L[0],[r1]!
    
    vext.u8		q6,q6,q7,#1
    vext.u8		q7,q7,q8,#1
    vext.u8		q8,q8,q9,#1
    vext.u8		q9,q9,q10,#1
    vext.u8		q10,q10,q11,#1

	vstm		r1,{q6-q10}						@: store 64 bytes
	
	pop			{r0}							@: restore the input pointer
	add			r0,#8							@: move the input pointer 8 bytes along each inter array row
	add			r1,#79							@: step the output pointer for 80 bytes per loop	
			
	adds		r2,#-1
	bne			lr45s2							@: do another loop			

lr45s98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:  ldpc_reformat_s56
@:		8 rows in the ldpc inter array
@:		the output pointer is not 32 bit aligned (4n + 1 bytes)
@:      reformats the LDPC data in the inter array back into the frame
@:      
@:  Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#define LDPC_REFORMAT_LOOPS_S56					3

ldpc_reformat_s56:
	push		{r0-r12,r14}
	
	ldr			r0,=ldpc_inter_array
	ldr			r1,[r12,#LDPC_POINTER]			@: pointer to the LDPC bytes in the frame					
	ldr			r2,=LDPC_REFORMAT_LOOPS_S56		@: loop counter

@: loop here for each 8 x 16 input bytes processed

lr56s2:	

@: save the input pointer

	push		{r0}

@: load 16 bytes from each LDPC inter array row

	vldm		r0,{q0L,q0H}
	add			r0,#LBPR					
	vldm		r0,{q1L,q1H}					
	add			r0,#LBPR					
	vldm		r0,{q2L,q2H}					
	add			r0,#LBPR					
	vldm		r0,{q3L,q3H}					
	add			r0,#LBPR					
	
@: bit 7: 16 bytes: 0, 8, . . . 120: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x80				@: mask	

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vorr.u8		q7,q6

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#2

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#3

	vmov		q8,q7					@: q8 = qout [0]

@: bit 6: 16 bytes: 1, 9, . . . 121: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x40				@: mask	
	vmov.u32	q4,#2					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#2

	vmov		q9,q7					@: q9 = qout [1]

@: bit 5: 16 bytes: 2, 10, . . . 122: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x20				@: mask	
	vmov.u32	q4,#4					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vmov		q10,q7					@: q10 = qout [2]

@: bit 4: 16 bytes: 3, 11, . . . 123: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x10				@: mask	
	vmov.u32	q4,#8					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vmov		q11,q7					@: q11 = qout [3]

@: bit 3: 16 bytes: 4, 12, . . . 124: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x08				@: mask	
	vmov.u32	q4,#16					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vmov		q12,q7					@: q12 = qout [4]

@: bit 2: 16 bytes: 5, 13, . . . 125: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x04				@: mask	
	vmov.u32	q4,#32					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulator

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vmov		q13,q7					@: q13 = qout [5]

@: bit 1: 16 bytes: 6, 14, . . . 126: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x02				@: mask	
	vmov.u32	q4,#64					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 32,32,32,32

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vmov		q14,q7					@: q14 = qout [6]

@: bit 0: 16 bytes: 7, 15, . . . 127: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x01				@: mask	
	vmov.u32	q4,#128					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 64,64,64,64

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 32,32,32,32

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vmov		q15,q7					@: q14 = qout [6]

@: now do the same for bits 3-0

@: load 16 bytes from each LDPC inter array row

	vldm		r0,{q0L,q0H}
	add			r0,#LBPR					
	vldm		r0,{q1L,q1H}					
	add			r0,#LBPR					
	vldm		r0,{q2L,q2H}					
	add			r0,#LBPR					
	vldm		r0,{q3L,q3H}					
	add			r0,#LBPR					
	
@: bit 7: 16 bytes: 0, 8, . . . 120: bits 3-0

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x80				@: mask	

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vorr.u8		q7,q6

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#2

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#3

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q8,q7					@: q8 = qout [0]

@: bit 6: 16 bytes: 1, 9, . . . 121: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x40				@: mask	
	vmov.u32	q4,#2					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#2

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q9,q7					@: q9 = qout [1]

@: bit 5: 16 bytes: 2, 10, . . . 122: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x20				@: mask	
	vmov.u32	q4,#4					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vsra.u8		q7,q6,#1

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q10,q7					@: q10 = qout [2]

@: bit 4: 16 bytes: 3, 11, . . . 123: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x10				@: mask	
	vmov.u32	q4,#8					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vorr		q7,q6

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q11,q7					@: q11 = qout [3]

@: bit 3: 16 bytes: 4, 12, . . . 124: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x08				@: mask	
	vmov.u32	q4,#16					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 2,2,2,2

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q12,q7					@: q12 = qout [4]

@: bit 2: 16 bytes: 5, 13, . . . 125: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x04				@: mask	
	vmov.u32	q4,#32					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 4,4,4,4

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q13,q7					@: q13 = qout [5]

@: bit 1: 16 bytes: 6, 14, . . . 126: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x02				@: mask	
	vmov.u32	q4,#64					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 32,32,32,32

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 8,8,8,8

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u8		q7,#4					@: shift into bits 3:0 position
	vorr		q14,q7					@: q14 = qout [6]

@: bit 0: 16 bytes: 7, 15, . . . 127: bits 7-4

	vmov.u32	q7,#0					@: accumulator
	vmov.u8		q5,#0x01				@: mask	
	vmov.u32	q4,#128					@: multiplier

	vand.u8		q6,q0,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 64,64,64,64

	vand.u8		q6,q1,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 32,32,32,32

	vand.u8		q6,q2,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u32	q4,#1					@: multiplier = 16,16,16,16

	vand.u8		q6,q3,q5				@: mask off the bits of interest		
	vmla.u32	q7,q6,q4				@: accumulate

	vshr.u8		q7,#4
	vorr		q15,q7					@: q15 = qout [5]

@: end of processing for this loop

/*
	vldr		q8L,=0x3830282018100800
	vldr		q8H,=0x7870686058504840
	vmov.u8		q15,#1
	vadd.u8		q9,q8,q15
	vadd.u8		q10,q9,q15
	vadd.u8		q11,q10,q15
	vadd.u8		q12,q11,q15
	vadd.u8		q13,q12,q15
	vadd.u8		q14,q13,q15
	vadd.u8		q15,q14,q15
*/

	vzip.u8		q8,q9
	vzip.u8		q10,q11
	vzip.u8		q12,q13
	vzip.u8		q14,q15
	vzip.u16	q8,q10
	vzip.u16	q9,q11
	vzip.u16	q12,q14
	vzip.u16	q13,q15
	vzip.u32	q8,q12
	vzip.u32	q9,q13
	vzip.u32	q10,q14
	vzip.u32	q11,q15
	vswp		q9,q12
	vswp		q11,q14
	
///	vstm		r1!,{q8-q15}			@: save the 128 bytes to the final buffer
	
@: the output pointer for s56 is aligned on 4n + 1 bytes, so save 3 bytes individually and shift the rest

	vst1.u8		q8L[0],[r1]!			
	vst1.u8		q8L[1],[r1]!			
	vst1.u8		q8L[2],[r1]!			
	vext.u8		q8,q8,q9,#3
	vext.u8		q9,q9,q10,#3
	vext.u8		q10,q10,q11,#3
	vext.u8		q11,q11,q12,#3
	vext.u8		q12,q12,q13,#3
	vext.u8		q13,q13,q14,#3
	vext.u8		q14,q14,q15,#3
	vext.u8		q15,q15,q15,#3
	vstm		r1,{q8-q15} 

	add			r1,#128-3				@: update the output pointer

	pop			{r0}					@: restore the input pointer
	add			r0,#16					@: move along each row of the inter array

lr56s4:
	adds		r2,#-1
	bne			lr56s2					@: do another loop

lr56s98:
	pop			{r0-r12,r14}
	mov			pc,r14
	
	.align	2	
	.ltorg	    						@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	ldpc_reformat_s89
@:		5 rows in the ldpc inter array
@:		reformats the LDPC data in the inter array back into the frame
@:			 
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:	
@: q0		scalar multiply constants
@: q1		AND mask
@: q2		accumulator
@: q4-q9	input buffer
@: q10-q11	AND buffer
@: q12-q15	64 byte accumulator		
@: q4-q11	reload and rearrangement	
		
ldpc_reformat_s89:
	push	{r0-r12,r14}
	
	ldr		r0,=ldpc_inter_array				@: input pointer
	ldr		r1,[r12,#LDPC_POINTER]				@: pointer to the LDPC bytes in the frame					
	ldr		r2,=6								@: loop counter; 45 bytes in each LDPC inter array row
												@: 8 input bytes per loop
@: loop here	
	
lr89s2: 
	push		{r0}							@: save the input pointer
	
@: load 8 bytes from all 5 rows of the inter array into q4L-q6L; 40 bytes in total

	vldr		q4L,[r0]
	add			r0,#LBPR
	vldr		q4H,[r0]
	add			r0,#LBPR
	vldr		q5L,[r0]
	add			r0,#LBPR
	vldr		q5H,[r0]
	add			r0,#LBPR
	vldr		q6L,[r0]
	add			r0,#LBPR

@: duplicate and shift

	vshl.u8		q6H,q4L,#1	  
	vshl.u8		q7L,q4H,#1	  
	vshl.u8		q7H,q5L,#1	  
	vshl.u8		q8L,q5H,#1	  
	vshl.u8		q8H,q6L,#1	  
	vshl.u8		q9L,q6H,#1	  
	vshl.u8		q9H,q7L,#1	  

	vldr		q0L,=0x0008000400020001			@: for multiply by scalar
	vldr		q0H,=0x0080004000200010			@: for multiply by scalar

	vmov.u8		q1,#0							@: will be used for mask
	vmov.u8		q2,#0							@: accumulator	

@: do bytes 0, 5, 10, 15, 20, 25, 30, 35

	vmov.u8		q1,#0x80						@: AND mask for bits 7
	vmov.u8		q2,#0							@: accumulator
	
	vand		q10,q4,q1	
	vand		q11,q5,q1	
	vorr		q2L,q10L						 @: shift and accumulate
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vand		q10,q6,q1	
	vand		q11,q7,q1		
	vsra.u8		q2L,q10L,#4
	vsra.u8		q2H,q10H,#5
	vsra.u8		q2L,q11L,#6
	vsra.u8		q2H,q11H,#7
	vorr.u8		q12L,q2L,q2H					@: 8 bytes now in q12L

@: do bytes 1, 6, 11, 16, 21, 26, 31, 36

	vmov.u8		q1,#0x40						@: AND mask for bits 6
	vmov.u8		q2,#0							@: accumulator	
	
	vand		q10,q5,q1
	vand		q11,q6,q1	 
	vmla.u16	q2L,q10H,q0L[1]					@: multiply by 2
	vorr		q2H,q11L
	vsra.u8		q2L,q11H,#1
	vand		q10,q7,q1
	vand		q11,q8,q1	 
	vsra.u8		q2H,q10L,#2
	vsra.u8		q2L,q10H,#3
	vsra.u8		q2H,q11L,#4
	vsra.u8		q2L,q11H,#5
	vand		q10,q9,q1	 
	vsra.u8		q2H,q10L,#6
	vorr.u8		q12H,q2L,q2H					@: 8 bytes now in q12H

@: do bytes 2, 7, 12, 17, 22, 27, 32, 37

	vmov.u8		q1,#0x10						@: AND mask for bits 4
	vmov.u8		q2,#0							@: accumulator	

	vand		q10,q4,q1	
	vand		q11,q5,q1	
	vmla.u16	q2L,q10H,q0L[3]					@: multiply by 8
	vmla.u16	q2H,q11L,q0L[2]					@: multiply by 4
	vmla.u16	q2L,q11H,q0L[1]					@: multiply by 2
	vand		q10,q6,q1	
	vand		q11,q7,q1	
	vorr		q2H,q10L
	vsra.u8		q2L,q10H,#1
	vsra.u8		q2H,q11L,#2
	vsra.u8		q2L,q11H,#3
	vand		q10,q8,q1	
	vsra.u8		q2H,q10L,#4
	vorr.u8		q13L,q2L,q2H					@: 8 bytes now in q13H

@: do bytes 3, 8, 13, 18, 23, 28, 33, 38

	vmov.u8		q1,#0x08						@: AND mask for bits 3
	vmov.u8		q2,#0							@: clear accumulator 

	vand		q10,q6,q1	
	vand		q11,q7,q1	
	vmla.u16	q2L,q10L,q0H[0]					 @: multiply by 16
	vmla.u16	q2H,q10H,q0L[3]					 @: multiply by 8
	vmla.u16	q2L,q11L,q0L[2]					 @: multiply by 4
	vmla.u16	q2H,q11H,q0L[1]					 @: multiply by 2
	vand		q10,q8,q1	
	vand		q11,q9,q1	
	vorr		q2L,q10L
	vsra.u8		q2H,q10H,#1
	vsra.u8		q2L,q11L,#2
	vsra.u8		q2H,q11H,#3
	vorr.u8		q13H,q2L,q2H					@: 8 bytes now in q14L
		
@: do bytes 4, 9, 14, 19, 24, 29, 34, 39
	
	vmov.u8		q1,#0x02						@: AND mask for bits 1
	vmov.u8		q2,#0							@: clear accumulator

	vand		q10,q5,q1	
	vand		q11,q6,q1	
	vmla.u16	q2L,q10L,q0H[2]					 @: multiply by 64
	vmla.u16	q2H,q10H,q0H[1]					 @: multiply by 32
	vmla.u16	q2L,q11L,q0H[0]					 @: multiply by 16
	vmla.u16	q2H,q11H,q0L[3]					 @: multiply by 8
	vand		q10,q7,q1	
	vand		q11,q8,q1	
	vmla.u16	q2L,q10L,q0L[2]					@: multiply by 4
	vmla.u16	q2H,q10H,q0L[1]					@: multiply by 2
	vorr		q2L,q11L
	vsra.u8		q2H,q11H,#1
	vorr.u8		q14L,q2L,q2H					@: 8 bytes now in q15L

@: the bytes in the registers are:

@: q12:	 00	 05	 10	 15	 20	 25	 30	 35	   01  06  11  16  21  26  31  36
@: q13:	 02	 07	 12	 17	 22	 27	 32	 37	   03  08  13  18  23  28  33  38	
@: q14:	 04	 09	 14	 19	 24	 29	 34	 39		  

/*
	vldr		q12L,=0x3530252015100500
	vldr		q12H,=0x3631262116110601
	vldr		q13L,=0x3732272217120702
	vldr		q13H,=0x3833282318130803
	vldr		q14L,=0x3934292419140904
*/
	
@: rearrange the bytes into q4-q6
	
	vldr		q8L,=0x110901FF18100800
	vldr		q8H,=0x03FF1A120A02FF19
	vldr		q9L,=0x1C140C04FF1B130B
	vldr		q9H,=0x0E06FF1D150D05FF
	vldr		q10L,=0xFF1F170F07FF1E16
	
	vtbl.u8		q4L,{q12-q13},q8L
	vtbl.u8		q4H,{q12-q13},q8H
	vtbl.u8		q5L,{q12-q13},q9L
	vtbl.u8		q5H,{q12-q13},q9H
	vtbl.u8		q6L,{q12-q13},q10L

@: q14:	 04	 09	 14	 19	 24	 29	 34	 39		  

	vldr		q8L,=0xFFFFFF00FFFFFFFF
	vldr		q8H,=0xFF02FFFFFFFF01FF
	vldr		q9L,=0xFFFFFFFF03FFFFFF
	vldr		q9H,=0xFFFF05FFFFFFFF04
	vldr		q10L,=0x07FFFFFFFF06FFFF

	vtbx.u8		q4L,{q14L},q8L
	vtbx.u8		q4H,{q14L},q8H
	vtbx.u8		q5L,{q14L},q9L
	vtbx.u8		q5H,{q14L},q9H
	vtbx.u8		q6L,{q14L},q10L

	vstm		r1,{q4L-q6L}					@: store 40 bytes
	
	pop			{r0}							@: restore the input pointer
	add			r0,#8							@: move the input pointer 8 bytes along each inter array row
	add			r1,#40							@: step the output pointer for 40 bytes per loop	
			
	adds		r2,#-1
	bne			lr89s2							@: do another loop			

lr89s98:
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	generate_symbols_qpsk
@:
@:		outputs a 2 bit scrambled symbol in each byte ......IQ
@:		the symbol values are as per the ETSI document
@:		output meta data containing output format and symbol count
@:		output the PL header  
@:		generate the symbols from the frame bytes and insert pilot tones if required 
@:		apply physical layer scrambling to all symbols except the PL header
@:
@:		Normal frames:
@:			frame contains 8100 bytes
@:			frame contains 32400 symbols
@:			each frame contains 4 symbols IQIQIQIQ
@:										  0 1 2 3  symbol zero is most significant
@:	
@:			pilots can occur every 90 x 16 = 1440 symbols, = 360 bytes
@:			32400 / 1440 = 22.5, so there are 21 pilot blocks
@:
@:		Short frames:
@:			frame contains 2025 bytes
@:			frame contains 8100 symbols
@:			each byte contains 4 symbols IQIQIQIQ
@:										  0 1 2 3  symbol zero is most significant
@:	
@:			pilots can occur every 90 x 16 = 1440 symbols, = 360 bytes
@:			8100 / 1440 = 5.625
@:			so there are 5 pilot blocks
@:		
@:	Calling:
@:		r12 points to the stream structure
@:		r0 points to the output buffer
@:
@:		the output buffer pointer returned to the calling program will be 16 bit aligned
@:
@:	All registers are restored to their original values
@:
@:	scramble		symbol value
@:	type			3	2	1	0
@:	---------------------------------------------
@:	0	I=I	  Q=Q	3	2	1	0
@:	1	I=-Q  Q=I	1	3	0	2					 
@:	2	I=-I  Q=-Q	0	1	2	3
@:	3	I=Q	  Q=-I	2	0	3	1
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
generate_symbols_qpsk:
	push		{r0-r12,r14}

	mov		r5,r0								@: outbuffer address
	add		r5,#SYMBOLS_METADATA_OFFSET			@: skip over the metadata and point to the start of the data

@: put the PL header into the symbol buffer 

	add			r5,#-2							@: allow for the 2 unused bytes	
	ldr			r8,[r12,#PLHEADER_POINTER]		@: points to a buffer of 92 bytes - first 2 bytes unused
	vldm		r8,{q0-q5}						@: load the header
	vstm		r5,{q0-q5}						@: save the header into the symbol buffer		
	add			r5,#2							@: point to the start of the data

@: store the metadata 
	
	ldr		r0,=OUTPUT_FORMAT_SYMBOLS
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]		@: output format

	ldr		r0,[r12,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]				@: fec

	ldr		r0,[r12,#CONSTINDEX]				@: constellation
	strh	r0,[r5,#METADATA_CONSTELLATION]

	ldr		r0,[r12,#FRAMETYPE]
	teq		r0,#0
	movne	r0,#0x10							@: convert frameindex (0/1) to frametype (0/0x10)
	strh	r0,[r5,#METADATA_FRAMETYPE]			@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]			@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]			@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]			@: data mode

	ldr			r8,[r12,#SYMBOLS_PER_FRAME]			
	strh		r8,[r5,#METADATA_ITEMCOUNT]		@: item count

	add			r5,#90							@: skip over the header

	ldr			r0,[r12,#FRAME_POINTER]				@: input from the start of the frame
	ldr			r7,[r12,#FECFRAME_SIZE_BYTES]
	add			r7,r0								@: when r0 >= r7, then processing is complete 
	ldr			r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table
		
@: convert the frame into symbols

@: outer byte loop - process 12 x 32 bytes per column processed per loop
@: if pilots are active, they occur after 360 input bytes, so we may need to backtrack after 384

gs4x2:
	mov			r8,#12
gs4x4:
	cmp			r0,r7							@: if r0 >= r7 then processing is complete
	bge			gs4x12							

	vldm		r0!,{q0-q1}						@: load 32 frame bytes ; each byte IQIQIQIQ

@: extract 128 symbols
							
	vshr.u8		q8,q0,#6						@: symbols 0, 4, . . 60
	vshl.u8		q0,#2	

	vshr.u8		q9,q0,#6						@: symbols 1, 5, . . 61							
	vshl.u8		q0,#2	

	vshr.u8		q10,q0,#6						@: symbols 2, 6, . . 62							
	vshl.u8		q0,#2	

	vshr.u8		q11,q0,#6						@: symbols 3, 7, . . 63 
	vshl.u8		q0,#2	

	vzip.u8		q8,q9							@: shuffle the symbols into order
	vzip.u8		q10,q11
	vzip.u16	q8,q10
	vzip.u16	q9,q11			  
	vswp		q9,q10
							
	vshr.u8		q12,q1,#6						@: symbols 64, 65 . . 124
	vshl.u8		q1,#2	

	vshr.u8		q13,q1,#6												
	vshl.u8		q1,#2	

	vshr.u8		q14,q1,#6												
	vshl.u8		q1,#2	

	vshr.u8		q15,q1,#6						
	vshl.u8		q1,#2	

	vzip.u8		q12,q13							@: shuffle the symbols into order
	vzip.u8		q14,q15
	vzip.u16	q12,q14
	vzip.u16	q13,q15			   
	vswp		q13,q14
					
@: 128 unscrambled symbols are now in order in q8-q15

@: shift and OR the 2 bit symbols with the 2 bit entries from the scramble table 

	vldm		r6!,{q0-q7}						@: load 128 bytes from the scramble table	

/*
	vmov.u8		q0,#0  ////////////////////////////
	vmov.u8		q1,#0
	vmov.u8		q2,#0
	vmov.u8		q3,#0
	vmov.u8		q4,#0
	vmov.u8		q5,#0
	vmov.u8		q6,#0
	vmov.u8		q7,#0
*/

	vsli.u8		q0,q8,#2						@: OR with the shifted symbol bytes
	vsli.u8		q1,q9,#2
	vsli.u8		q2,q10,#2
	vsli.u8		q3,q11,#2
	vsli.u8		q4,q12,#2						@: OR with the shifted symbol bytes
	vsli.u8		q5,q13,#2
	vsli.u8		q6,q14,#2
	vsli.u8		q7,q15,#2

@: each byte in q0-q7 is now of the form:  . . . . symbol symbol scramble scramble	

	vldr	q8L,=0x0302000101030200				@: load the lookup table
	vldr	q8H,=0x0200010300010302

@: scramble q0-q7 in turn

	vtbl.u8		q0L,{q8},q0L			
	vtbl.u8		q0H,{q8},q0H		
	vtbl.u8		q1L,{q8},q1L					
	vtbl.u8		q1H,{q8},q1H		
	vtbl.u8		q2L,{q8},q2L					
	vtbl.u8		q2H,{q8},q2H		
	vtbl.u8		q3L,{q8},q3L					
	vtbl.u8		q3H,{q8},q3H		
	vtbl.u8		q4L,{q8},q4L					
	vtbl.u8		q4H,{q8},q4H		
	vtbl.u8		q5L,{q8},q5L					
	vtbl.u8		q5H,{q8},q5H		
	vtbl.u8		q6L,{q8},q6L					
	vtbl.u8		q6H,{q8},q6H		
	vtbl.u8		q7L,{q8},q7L					
	vtbl.u8		q7H,{q8},q7H		
	
	vstm		r5!,{q0-q7}						@: store the 128 symbols into the output buffer
	
	adds		r8,#-1
	bne			gs4x4							@: do the next 32 bytes

@: 384 bytes have been processed yielding 1536 symbols
	
@: insert 36 pilot symbols if required

	ldr			r10,[r12,#PILOTS_ACTIVE]
	teq			r10,#0
	beq			gs4x10							@: pilots not required

@: pilots occur every 360 input bytes and we have processed 384, so we need to backtrack

	add			r0,#-24							@: backtrack the input pointer by 24 bytes
	add			r5,#-24*4						@: backtrack the output pointer by 96 symbols
	add			r6,#-24*4						@: backtrack the scramble table pointer by 96 symbols
	
	vldm		r6,{q0-q2}						@: load 48 bytes from the scramble table
	add			r6,#36							@: only 36 required

	vtbl.u8		q0L,{q8},q0L					@: scramble the (zero value) pilot symbols 
	vtbl.u8		q0H,{q8},q0H		
	vtbl.u8		q1L,{q8},q1L				
	vtbl.u8		q1H,{q8},q1H		
	vtbl.u8		q2L,{q8},q2L				
	vtbl.u8		q2H,{q8},q2H		

	vstm		r5,{q0-q2}						@: store 48 symbols into the output buffer
	add			r5,#36							@: only 36 required
	
gs4x10: 
	b			gs4x2
	
@: the whole frame has been processed

gs4x12:

gs4x98: 
	pop		{r0-r12,r14}
	mov		pc,r14
	
	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	generate_symbols_8psk
@:
@:		outputs a 3 bit scrambled symbol in each byte
@:		the symbol values are as per the ETSI document
@:		first put the PL header into the symbol_buffer 
@:		then generate the symbols from the frame bytes and apply physical layer scrambling
@:		insert pilot tones if required and apply physical layer scrambling to them		
@:
@:	Normal frame:
@:		frame contains 8100 bytes = 3 x 2700 
@:		180 = 15 * 12
@:		2700 = 15 * 15 * 12
@:		3 column pointers at bytes 0, 2700, 5400 ; all multiples of 4
@:
@:		frame contains 21600 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 360 bytes per column 
@:		21600 / 1440 = 15 exactly
@:		there is no pilot block at the end of the frame, so there are 14 pilot blocks
@:
@:	Short frame:
@:		frame contains 2025 bytes = 3 x 675 = 45 * 180 = 3 * 15 * 180
@:		3 column pointers at bytes 0, 675, 1350 ; pointers 1, 2 are not multiples of 4; (4n + 3, 4n + 2)
@:
@:		frame contains 5400 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 180 bytes per column
@:		5400 / 1440 = 3.75, so there are 3 pilot blocks
@:		
@:	Calling:
@:		r12 points to the stream structure
@:		r0 points to the output buffer
@:
@:		the output buffer pointer returned to the calling program will be 16 bit aligned
@:
@:	All registers are restored to their original values
@:
@:	scramble		symbol value
@:	type			7	6	5	4	3	2	1	0
@:	---------------------------------------------
@:	0	I=I	  Q=Q	7	6	5	4	3	2	1	0
@:	1	I=-Q  Q=I	1	3	0	2	5	7	4	6					 
@:	2	I=-I  Q=-Q	4	5	6	7	0	1	2	3
@:	3	I=Q	  Q=-I	2	0	3	1	6	4	7	5
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

generate_symbols_8psk:
	push	{r0-r12,r14}

	mov		r5,r0								@: outbuffer address
	add		r5,#SYMBOLS_METADATA_OFFSET			@: skip over the metadata and point to the start of the data

@: put the PL header into the symbol buffer 

	add			r5,#-2							@: allow for the 2 unused bytes	
	ldr			r8,[r12,#PLHEADER_POINTER]		@: points to a buffer of 92 bytes - first 2 bytes unused
	vldm		r8,{q0-q5}						@: load the header
	vstm		r5,{q0-q5}						@: save the header into the symbol buffer		
	add			r5,#2							@: point to the start of the data

@: store the metadata 
	
	ldr		r0,=OUTPUT_FORMAT_SYMBOLS
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]		@: output format

	ldr		r0,[r12,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]				@: fec

	ldr		r0,[r12,#CONSTINDEX]				@: constellation
	strh	r0,[r5,#METADATA_CONSTELLATION]

	ldr		r0,[r12,#FRAMETYPE]
	teq		r0,#0
	movne	r0,#0x10							@: convert frameindex (0/1) to frametype (0/0x10)
	strh	r0,[r5,#METADATA_FRAMETYPE]			@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]			@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]			@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]			@: data mode

	ldr			r8,[r12,#SYMBOLS_PER_FRAME]			
	strh		r8,[r5,#METADATA_ITEMCOUNT]		@: item count

	add			r5,#90							@: skip over the header

// form the input pointers

	ldr		r0,[r12,#FRAME_POINTER]				@: input from the start of the frame
	ldr		r4,[r12,#FECFRAME_SIZE_BYTES]
	ldr		r6,=21846
	mul		r4,r6								@: divide by 3
	lsr		r4,#16								@: r5 is now the number of bytes to process in each column

	add		r7,r0,r4							@: when r0 >= r7, then processing is complete 
	add		r1,r0,r4							@: second input pointer starts 1/3 of the way into the frame
	add		r2,r1,r4							@: third input pointer starts 2/3 of the way into the frame

	ldr		r10,[r12,#FRAMEINDEX]				@: get the frame type 0 / 1
	teq		r10,#FRAME_NORMAL	
	addne	r1,#-3								@: compensate for 32 bit alignment for short frame
	addne	r2,#-2
	
	ldr		r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table

@: convert the frame into symbols

@: outer byte loop - process 12 x 16 bytes per column processed per loop
@: if pilots are active, they occur after input 180 bytes, so we may need to backtrack after 192

gs8n2:
	mov			r8,#12
gs8n4:
	cmp			r0,r7							@: if r0 >= r7 then processing is complete
	bge			gs8n12

	ldr			r10,[r12,#FRAMEINDEX]			@: get the frame type 0 / 1
	teq			r10,#FRAME_NORMAL	
	bne			gs8n6

	vldm		r0!,{q0}						@: load 16 bytes from each column 
	vldm		r1!,{q1}						@: pointers are 32 bit aligned for normal frame
	vldm		r2!,{q2}						
	b			gs8n7							

@: adjust for input pointers 1, 2 not being 32 bit aligned for short frame

gs8n6:
	vldm		r0!,{q0}						@: load 16 bytes from each column 

	vldm		r1!,{q1}	
	vext.u8		q1,q1,#3						@: first 3 bytes not required - rotate towards byte zero
	vld1.u8		q1H[5],[r1]!					@: the next byte becomes byte q1[13]
	vld1.u8		q1H[6],[r1]!					@: the next byte becomes byte q1[14]
	vld1.u8		q1H[7],[r1]!					@: the next byte becomes byte q1[15]
	add			r1,#-3							@: put the pointer back
	
	vldm		r2!,{q2}	
	vext.u16	q2,q2,#1						@: first 2 bytes not required - rotate towards byte zero
	vld1.u16	q2H[3],[r2]						@: the next 2 input bytes become bytes q2[14-15]
		
gs8n7:

	vmov.u8		q5,#0x80						@: mask ???????????????????

@: extract 128 symbols
							
	vshr.u8		q8,q0,#5						@: symbols 0, 8, . . 120
	vshl.u8		q0,#1	
	vsri.u8		q8,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q8,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q9,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q9,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q9,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q10,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q10,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q10,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q11,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q11,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q11,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q12,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q12,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q12,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q13,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q13,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q13,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q14,q0,#5							
	vshl.u8		q0,#1	
	vsri.u8		q14,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q14,q2,#7
	vshl.u8		q2,#1

	vshr.u8		q15,q0,#5							@: symbols 7, 15, . . 127
	vshl.u8		q0,#1	
	vsri.u8		q15,q1,#6
	vshl.u8		q1,#1
	vsri.u8		q15,q2,#7
	vshl.u8		q2,#1

@: shuffle the unscrambled symbols into order	
	
	vzip.u8		q8,q9
	vzip.u8		q10,q11
	vzip.u8		q12,q13
	vzip.u8		q14,q15
	vzip.u16	q8,q10
	vzip.u16	q9,q11
	vzip.u16	q12,q14
	vzip.u16	q13,q15
	vzip.u32	q8,q12
	vzip.u32	q9,q13
	vzip.u32	q10,q14
	vzip.u32	q11,q15
	vswp		q9,q12
	vswp		q11,q14

@: 128 unscrambled symbols now in order in q8-q15

	ldr			r10,[r12,#FECINDEX]				@: get the FEC
	teq			r10,#CR_3_5
	bne			gs8n8
	
@: for 8PSK, FEC 35, the bits in the symbols must be reversed (for reasons unknown!)

	vldr		q0L,=0x0703050106020400			@: load the conversion table	

	vtbl.u8		q8L,{q0L},q8L			
	vtbl.u8		q8H,{q0L},q8H		
	vtbl.u8		q9L,{q0L},q9L					
	vtbl.u8		q9H,{q0L},q9H		
	vtbl.u8		q10L,{q0L},q10L					
	vtbl.u8		q10H,{q0L},q10H		
	vtbl.u8		q11L,{q0L},q11L					
	vtbl.u8		q11H,{q0L},q11H		
	vtbl.u8		q12L,{q0L},q12L					
	vtbl.u8		q12H,{q0L},q12H		
	vtbl.u8		q13L,{q0L},q13L					
	vtbl.u8		q13H,{q0L},q13H		
	vtbl.u8		q14L,{q0L},q14L					
	vtbl.u8		q14H,{q0L},q14H		
	vtbl.u8		q15L,{q0L},q15L					
	vtbl.u8		q15H,{q0L},q15H		
gs8n8:

@: shift and OR the 3 bit symbols with the 2 bit entries from the scramble table

	vmov.u8		q7,#4							@: multiplier to shift the symbols bytes left 2 
		
	vldm		r6!,{q0-q3}						@: load 64 bytes from the scramble table	
	vmla.u8		q0,q8,q7						@: OR with the shifted symbol bytes
	vmla.u8		q1,q9,q7
	vmla.u8		q2,q10,q7
	vmla.u8		q3,q11,q7

	vmov.u8		q8,#4						

	vldm		r6!,{q4-q7}						@: load 64 bytes from the scramble table
	vmla.u8		q4,q12,q8						@: shift and concatenate with the symbols
	vmla.u8		q5,q13,q8
	vmla.u8		q6,q14,q8
	vmla.u8		q7,q15,q8

@: each byte in q0-q7 is now of the form:  . . . symbol symbol symbol scramble scramble

	vldr		q8L,=0x0702040105030600			@: load the lookup table
	vldr		q8H,=0x0600050304010702
	vldr		q9L,=0x0306000501070204
	vldr		q9H,=0x0204010700050306 

@: scramble q0-q7 in turn

	vtbl.u8		q0L,{q8-q9},q0L			
	vtbl.u8		q0H,{q8-q9},q0H		
	vtbl.u8		q1L,{q8-q9},q1L					
	vtbl.u8		q1H,{q8-q9},q1H		
	vtbl.u8		q2L,{q8-q9},q2L					
	vtbl.u8		q2H,{q8-q9},q2H		
	vtbl.u8		q3L,{q8-q9},q3L					
	vtbl.u8		q3H,{q8-q9},q3H		
	vtbl.u8		q4L,{q8-q9},q4L					
	vtbl.u8		q4H,{q8-q9},q4H		
	vtbl.u8		q5L,{q8-q9},q5L					
	vtbl.u8		q5H,{q8-q9},q5H		
	vtbl.u8		q6L,{q8-q9},q6L					
	vtbl.u8		q6H,{q8-q9},q6H		
	vtbl.u8		q7L,{q8-q9},q7L					
	vtbl.u8		q7H,{q8-q9},q7H		
	
	vstm		r5!,{q0-q7}						@: store the 128 symbols into the output buffer
	
	adds		r8,#-1
	bne			gs8n4							@: do the next 3 columns of 16 bytes

@: 192 bytes per column (3) have been processed yielding 1536 symbols
	
@: insert 36 pilot symbols if required

	ldr			r10,[r12,#PILOTS_ACTIVE]
	teq			r10,#0
	beq			gs8n10							@: pilots not required

@: pilots occur every 180 bytes and we have processed 192, so we need to backtrack

	add			r0,#-12							@: backtrack the 3 column input pointers by 12 bytes
	add			r1,#-12
	add			r2,#-12
	add			r5,#-12*8						@: backtrack the output pointer by 96 symbols
	add			r6,#-12*8						@: backtrack the scramble table pointer by 96 symbols
	
	vldm		r6,{q0-q2}						@: load 48 bytes from the scramble table
	add			r6,#36							@: only 36 required

	vtbl.u8		q0L,{q8-q9},q0L					@: scramble the (zero value) pilot symbols 
	vtbl.u8		q0H,{q8-q9},q0H		
	vtbl.u8		q1L,{q8-q9},q1L				
	vtbl.u8		q1H,{q8-q9},q1H		
	vtbl.u8		q2L,{q8-q9},q2L				
	vtbl.u8		q2H,{q8-q9},q2H		

	vstm		r5,{q0-q2}						@: store 48 symbols into the output buffer
	add			r5,#36							@: only 36 required
	
gs8n10: 
	b			gs8n2
	
@: the whole frame has been processed

gs8n12:

gs8n98: 
	pop			{r0-r12,r14}
	mov			pc,r14
	
	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	generate_symbols_16apsk
@:
@:		outputs a 4 bit scrambled symbol in each byte 
@:		the symbol values are as per the ETSI document
@:		first put the PL header into the symbol_buffer 
@:		then generate the symbols from the frame bytes and apply physical layer scrambling
@:		insert pilot tones if required and apply physical layer scrambling to them		
@:
@:	Normal frame:
@:		frame contains 8100 bytes = 4 x 2025 
@:		4 column pointers at bytes 0, 2025, 4050, 6075 
@:
@:		2nd pointer = 4n + 1	start the pointer at 2025-1 and compensate for 32 bit alignment
@:		3rd pointer = 4n + 2	start the pointer at 4050-2 and compensate
@:		4th pointer = 4n + 3	start the pointer at 6075-3 and compensate
@:
@:		frame contains 16200 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 180 bytes per column
@:		16200 / 1440 = 11.25, so there are 11 pilot blocks
@:
@:	Short frame:
@:		frame contains 2025 bytes 
@:		4 column pointers at bytes 0, 506.25, 1012.5, 1518.75 bytes! 
@:
@:		2nd pointer: start at 504 and ignore first 2 bytes and then next 2 bits
@:		3rd pointer: start at 1012 and ignore the first 4 bits
@:		4th pointer: start at 1516 and ignore the first 2 bytes and then next 6 bits 
@:
@:		frame contains 4050 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 180 bytes per column
@:		4050 / 1440 = 2.8125, so there are 2 pilot blocks
@:		
@:	Calling:
@:		r12 points to the stream structure
@:		r0 points to the output buffer
@:
@:		the output buffer pointer returned to the calling program will be 16 bit aligned
@:
@:	All registers are restored to their original values
@:
@:	scramble		symbol value
@:	type			15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0
@:	-----------------------------------------------------------------------------
@:	0	I=I	  Q=Q	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0
@:	1	I=-Q  Q=I	13	15	12	14	5	7	4	6	9	11	8	10	1	3	0	2				 
@:	2	I=-I  Q=-Q	12	13	14	15	8	9	10	11	4	5	6	7	0	1	2	3
@:	3	I=Q	  Q=-I	14	12	15	13	6	4	7	5	10	8	11	9	2	0	3	1	
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

generate_symbols_16apsk:
	push	{r0-r12,r14}

	mov		r5,r0								@: outbuffer address
	add		r5,#SYMBOLS_METADATA_OFFSET			@: skip over the metadata and point to the start of the data

@: put the PL header into the symbol buffer 

	add			r5,#-2							@: allow for the 2 unused bytes	
	ldr			r8,[r12,#PLHEADER_POINTER]		@: points to a buffer of 92 bytes - first 2 bytes unused
	vldm		r8,{q0-q5}						@: load the header
	vstm		r5,{q0-q5}						@: save the header into the symbol buffer		
	add			r5,#2							@: point to the start of the data

@: store the metadata 
	
	ldr		r0,=OUTPUT_FORMAT_SYMBOLS
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]		@: output format

	ldr		r0,[r12,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]				@: fec

	ldr		r0,[r12,#CONSTINDEX]				@: constellation
	strh	r0,[r5,#METADATA_CONSTELLATION]

	ldr		r0,[r12,#FRAMETYPE]
	teq		r0,#0
	movne	r0,#0x10							@: convert frameindex (0/1) to frametype (0/0x10)
	strh	r0,[r5,#METADATA_FRAMETYPE]			@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]			@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]			@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]			@: data mode

	ldr			r8,[r12,#SYMBOLS_PER_FRAME]			
	strh		r8,[r5,#METADATA_ITEMCOUNT]		@: item count

	add			r5,#90							@: skip over the header

	ldr			r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table

// form the input pointers

	ldr		r0,[r12,#FRAME_POINTER]				@: input from the start of the frame
	ldr		r4,[r12,#FECFRAME_SIZE_BYTES]
	lsr		r4,#2								@: divide by 4; r4 is now the number of bytes to process in each column

	add		r7,r0,r4							@: when r0 >= r7, then processing is complete 
	add		r1,r0,r4							@: second input pointer starts 1/4 of the way into the frame
	add		r2,r1,r4							@: third input pointer starts 1/2 of the way into the frame
	add		r3,r2,r4							@: third input pointer starts 3/4 of the way into the frame
	
	ldr		r10,[r12,#FRAMEINDEX]				@: get the frame type 0 / 1
	teq		r10,#FRAME_NORMAL	
	
	addeq	r1,#-1								@: compensate for 32 bit alignment for normal frame
	addeq	r2,#-2
	addeq	r3,#-3
	
	addne	r1,#-2								@: compensate for 32 bit alignment for short frame
	addne	r3,#-2
	
	ldr		r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table

@: convert the frame into symbols

@: outer byte loop - process 12 x 16 bytes per column processed per loop
@: if pilots are active, they occur after 180 input bytes, so we may need to backtrack after 192

gs16x2:
	mov			r8,#12
gs16x4:
	cmp			r0,r7							@: if r0 >= r7 then processing is complete
	bge			gs16x12
			
	ldr			r10,[r12,#FRAMEINDEX]			@: get the frame type 0 / 1
	teq			r10,#FRAME_NORMAL	
	bne			gs16x6							@: short frame

@: normal frame loading
	
	vldm		r0!,{q0}						@: load 16 bytes from the first colummn
	
	vldm		r1!,{q1}	
	vext.u8		q1,q1,#1						@: first byte not required - rotate towards byte zero
	vld1.u8		q1H[7],[r1]						@: the next byte becomes byte q1[15]
	
	vldm		r2!,{q2}	
	vext.u16	q2,q2,#1						@: first 2 bytes not required - rotate towards byte zero
	vld1.u16	q2H[3],[r2]						@: the next 2 bytes become bytes q2[14-15]
		
	vldm		r3!,{q3}	
	vext.u8		q3,q3,#3						@: first 3 bytes not required - rotate towards byte zero
	vld1.u8		q3H[5],[r3]!					@: the next byte becomes byte q3[13]
	vld1.u8		q3H[6],[r3]!					@: the next byte becomes byte q3[14]
	vld1.u8		q3H[7],[r3]!					@: the next byte becomes byte q3[15]
	add			r3,#-3							@: put the pointer back

	b			gs16x7
	
@: short frame loading 	
	
gs16x6:	
	vldm		r0!,{q0}						@: load 16 bytes from the first column
	
@: 2nd column	
	
	vldm		r1!,{q8}						@: get 16 bytes
	vext.u16	q8,q8,#1						@: first 2 bytes not required - rotate towards byte zero
	vld1.u16	q8H[3],[r1]!					@: the next 2 input bytes become bytes q8[14-15]
		
@: the 2 most significant bits to lose are in q8[0](7:6)

	vshr.u8		q9,q8,#6						@: put the top 2 bits of each byte into the bottom 2 bits
	vshl.u8		q8,#2							@: shift (and lose) the top 2 bits of each byte
	vext.u8		q9,q9,q9,#1						@: rotate 1 byte towards q9[0]
	mov			r10,#0
	vmov.u8		q9H[7],r10						@: clear byte q9[15]
	vorr		q8,q9							@: merge the 2 bits for each byte 
	
@: get the next input byte to extract the top 2 bits to put in the bottom 2 bits of q8[15]

	vmov.u8		q9,#0
	vld1.u8		q9H[7],[r1]!
	vshr.u8		q9,#6							@: 2 bits now in q9[15](7-6)
	vorr		q1,q8,q9						@: q1 now contains the correct bits

	add			r1,#-3							@: put the pointer back
	
@: 3rd column	
	
	vldm		r2!,{q8}						@: get 16 bytes
		
@: the 4 most significant bits to lose are in q8[0](7-4)

	vshr.u8		q9,q8,#4						@: put the top 4 bits of each byte into the bottom 4 bits
	vshl.u8		q8,#4							@: shift (and lose) the top 4 bits of each byte
	vext.u8		q9,q9,q9,#1						@: rotate 1 byte towards q9[0]
	mov			r10,#0
	vmov.u8		q9H[7],r10						@: clear byte q9[15]
	vorr		q8,q9							@: merge the 4 bits for each byte 
	
@: get the next input byte to extract the top 4 bits to put in the bottom 4 bits of q8[15]

	vmov.u8		q9,#0
	vld1.u8		q9H[7],[r2]!
	vshr.u8		q9,#4							@: 4 bits now in q9[15](7-4)
	vorr		q2,q8,q9						@: q2 now contains the correct bits

	add			r2,#-1							@: put the pointer back
	
@: 4th column	
	
	vldm		r3!,{q8}						@: get 16 bytes
	vext.u16	q8,q8,#1						@: first 2 bytes not required - rotate towards byte zero
	vld1.u16	q8H[3],[r3]!					@: the next 2 bytes become bytes q8[14-15]
		
@: the 6 most significant bits to lose are in q8[0](7:2)

	vshr.u8		q9,q8,#2						@: put the top 6 bits of each byte into the bottom 6 bits
	vshl.u8		q8,#6							@: shift (and lose) the top 6 bits of each byte
	vext.u8		q9,q9,q9,#1						@: rotate 1 byte towards q9[0]
	mov			r10,#0
	vmov.u8		q9H[7],r10						@: clear byte q9[15]
	vorr		q8,q9							@: merge the 6 bits for each byte 
	
@: get the next input byte to extract the top 6 bits to put in the bottom 6 bits of q8[15]

	vmov.u8		q9,#0
	vld1.u8		q9H[7],[r3]!
	vshr.u8		q9,#2							@: 6 bits now in q9[15](7-2)
	vorr		q3,q8,q9						@: q3 now contains the correct bits

	add			r3,#-3							@: put the pointer back
	
@: extract 128 symbols

gs16x7:		
	vmov.u8		q5,#0x80						@: mask

	vshr.u8		q8,q0,#4						@: symbols 0, 8, . . 120
	vshl.u8		q0,#1	
	vsri.u8		q8,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q8,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q8,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q9,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q9,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q9,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q9,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q10,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q10,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q10,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q10,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q11,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q11,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q11,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q11,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q12,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q12,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q12,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q12,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q13,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q13,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q13,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q13,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q14,q0,#4							
	vshl.u8		q0,#1	
	vsri.u8		q14,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q14,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q14,q3,#7
	vshl.u8		q3,#1

	vshr.u8		q15,q0,#4							@: symbols 7, 15, . . 127
	vshl.u8		q0,#1	
	vsri.u8		q15,q1,#5
	vshl.u8		q1,#1
	vsri.u8		q15,q2,#6
	vshl.u8		q2,#1
	vsri.u8		q15,q3,#7
	vshl.u8		q3,#1

@: shuffle the unscrambled symbols into order	
	
	vzip.u8		q8,q9
	vzip.u8		q10,q11
	vzip.u8		q12,q13
	vzip.u8		q14,q15
	vzip.u16	q8,q10
	vzip.u16	q9,q11
	vzip.u16	q12,q14
	vzip.u16	q13,q15
	vzip.u32	q8,q12
	vzip.u32	q9,q13
	vzip.u32	q10,q14
	vzip.u32	q11,q15
	vswp		q9,q12
	vswp		q11,q14

@: 128 unscrambled symbols now in order in q8-q15

@: shift and OR the 4 bit symbols with the 2 bit entries from the scramble table

	vmov.u8		q7,#4							@: multiplier to shift the symbols bytes left 2 
		
	vldm		r6!,{q0-q3}						@: load 64 bytes from the scramble table	

/*
	vmov.u8		q0,#0  ////////////////////////////
	vmov.u8		q1,#0
	vmov.u8		q2,#0
	vmov.u8		q3,#0
*/

	vmla.u8		q0,q8,q7						@: OR with the shifted symbol bytes
	vmla.u8		q1,q9,q7
	vmla.u8		q2,q10,q7
	vmla.u8		q3,q11,q7

	vmov.u8		q8,#4						

	vldm		r6!,{q4-q7}						@: load 64 bytes from the scramble table

/*
	vmov.u8		q4,#0  ////////////////////////////
	vmov.u8		q5,#0
	vmov.u8		q6,#0
	vmov.u8		q7,#0
*/

	vmla.u8		q4,q12,q8
	vmla.u8		q5,q13,q8
	vmla.u8		q6,q14,q8
	vmla.u8		q7,q15,q8

@: each byte in q0-q7 is now of the form:  .  . symbol symbol symbol symbol scramble scramble

@: the lookup table can only be 32 bytes, but we have 6 bit values as the indices
@: the scrambling will be done in 2 passes
@: the first pass will scramble symbols where the most significant bit (5) is zero
@: then bit 5 is flipped and a different lookup table is used  
	
@: scramble q0-q3 into q8-q11

	vldr		q12L,=0x0302000101030200		@: lookup table for bit 5 = 0
	vldr		q12H,=0x0200010300010302
	vldr		q13L,=0x0b06080509070a04
	vldr		q13H,=0x0a04090708050b06
	
	vtbx.u8		q8L,{q12-q13},q0L			
	vtbx.u8		q8H,{q12-q13},q0H		
	vtbx.u8		q9L,{q12-q13},q1L					
	vtbx.u8		q9H,{q12-q13},q1H	
	vtbx.u8		q10L,{q12-q13},q2L			
	vtbx.u8		q10H,{q12-q13},q2H		
	vtbx.u8		q11L,{q12-q13},q3L					
	vtbx.u8		q11H,{q12-q13},q3H	

	vmov.u8		q14,#0x20						@: bit 5 flipping mask	

	veor		q0,q14							@: flip bits 5
	veor		q1,q14							
	veor		q2,q14							
	veor		q3,q14							
	
	vldr		q12L,=0x070a0409050b0608		@: lookup table for bit 5 = 1
	vldr		q12H,=0x0608050b0409070a
	vldr		q13L,=0x0f0e0c0d0d0f0e0c
	vldr		q13H,=0x0e0c0d0f0c0d0f0e

	vtbx.u8		q8L,{q12-q13},q0L			
	vtbx.u8		q8H,{q12-q13},q0H		
	vtbx.u8		q9L,{q12-q13},q1L					
	vtbx.u8		q9H,{q12-q13},q1H	
	vtbx.u8		q10L,{q12-q13},q2L			
	vtbx.u8		q10H,{q12-q13},q2H		
	vtbx.u8		q11L,{q12-q13},q3L					
	vtbx.u8		q11H,{q12-q13},q3H	

	vstm		r5!,{q8-q11}					@: save 64 symbols	

	b			gs16x8							@: the literals get screwed up if this isn't here
	
	.align		2
	.ltorg
	.align		2

gs16x8:

@: scramble q4-7 into q8-q11

	vldr		q12L,=0x0302000101030200		@: lookup table for bit 5 = 0
	vldr		q12H,=0x0200010300010302
	vldr		q13L,=0x0b06080509070a04
	vldr		q13H,=0x0a04090708050b06

	vtbx.u8		q8L,{q12-q13},q4L			
	vtbx.u8		q8H,{q12-q13},q4H		
	vtbx.u8		q9L,{q12-q13},q5L					
	vtbx.u8		q9H,{q12-q13},q5H	
	vtbx.u8		q10L,{q12-q13},q6L			
	vtbx.u8		q10H,{q12-q13},q6H		
	vtbx.u8		q11L,{q12-q13},q7L					
	vtbx.u8		q11H,{q12-q13},q7H	

	vmov.u8		q14,#0x20						@: bit 5 flipping mask	

	veor		q4,q14							@: flip bits 5
	veor		q5,q14							
	veor		q6,q14							
	veor		q7,q14							
	
	vldr		q12L,=0x070a0409050b0608		@: lookup table for bit 5 = 1
	vldr		q12H,=0x0608050b0409070a
	vldr		q13L,=0x0f0e0c0d0d0f0e0c
	vldr		q13H,=0x0e0c0d0f0c0d0f0e

	vtbx.u8		q8L,{q12-q13},q4L			
	vtbx.u8		q8H,{q12-q13},q4H		
	vtbx.u8		q9L,{q12-q13},q5L					
	vtbx.u8		q9H,{q12-q13},q5H	
	vtbx.u8		q10L,{q12-q13},q6L			
	vtbx.u8		q10H,{q12-q13},q6H		
	vtbx.u8		q11L,{q12-q13},q7L					
	vtbx.u8		q11H,{q12-q13},q7H	

	vstm		r5!,{q8-q11}					@: save 64 symbols
	
	adds		r8,#-1
	bne			gs16x4							@: do the next 4 columns of 16 bytes

@: 192 bytes per column (4) have been processed yielding 1536 symbols
	
@: insert 36 pilot symbols if required

	ldr			r10,[r12,#PILOTS_ACTIVE]
	teq			r10,#0
	beq			gs16x10							@: pilots not required

@: pilots occur every 180 bytes and we have processed 192, so we need to backtrack

	add			r0,#-12							@: backtrack the 3 column input pointers by 12 bytes
	add			r1,#-12
	add			r2,#-12
	add			r3,#-12
	add			r5,#-12*8						@: backtrack the output pointer by 96 symbols
	add			r6,#-12*8						@: backtrack the scramble table pointer by 96 symbols
	
	vldm		r6,{q0-q2}						@: load 48 bytes from the scramble table
	add			r6,#36							@: only 36 required

gs16x9:

	vldr		q12L,=0x0302000101030200		@: lookup table for bit 5 = 0
	vldr		q12H,=0x0200010300010302
	vldr		q13L,=0x0b06080509070a04
	vldr		q13H,=0x0a04090708050b06	

	vtbl.u8		q0L,{q12-q13},q0L				@: scramble the (zero value) pilot symbols 
	vtbl.u8		q0H,{q12-q13},q0H		
	vtbl.u8		q1L,{q12-q13},q1L				
	vtbl.u8		q1H,{q12-q13},q1H		
	vtbl.u8		q2L,{q12-q13},q2L				
	vtbl.u8		q2H,{q12-q13},q2H		

	vstm		r5,{q0-q2}						@: store 48 symbols into the output buffer
	add			r5,#36							@: only 36 required
	
gs16x10:	
	b			gs16x2	

@: the whole frame has been processed

gs16x12:

gs16x98:	
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	generate_symbols_32apsk
@:
@:		outputs a 5 bit scrambled symbol in each byte
@:		the symbol values are as per the ETSI document
@:		first put the PL header into the symbol_buffer 
@:		then generate the symbols from the frame bytes and apply physical layer scrambling
@:		insert pilot tones if required and apply physical layer scrambling to them		
@:
@:  Normal frame:
@:		frame contains 8100 bytes = 5 x 1620 
@:		4 column pointers at bytes 0, 1620, 3240, 4860 6480 all multiples of 4 
@:
@:		frame contains 12960 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 180 bytes per column
@:		12960 / 1440 = 9 exactly
@:		there is no pilot block at the end of the frame, so there are 8 pilot blocks
@:
@:  Short frame:
@:		frame contains 2025 bytes = 5 x 405 
@:		4 column pointers at bytes 0, 405, 810, 1215, 1620; pointers 1, 2, 3 are not multiples of 4 
@:
@:		frame contains 3240 symbols
@:		pilots can occur every 90 x 16 = 1440 symbols, = 180 bytes per column
@:		3240 / 1440 = 2.25, he frame, so there are 2 pilot blocks
@:		
@:	Calling:
@:		r12 points to the stream structure
@:		r0 points to the output buffer
@:
@:		the output buffer pointer returned to the calling program will be 16 bit aligned
@:
@:	All registers are restored to their original values
@:
@:	scramble		symbol value
@:	type			31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8	 7	6  5  4	 3	2  1  0
@:	---------------------------------------------------------------------------------------------------------------
@:	0	I=I	  Q=Q	31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8	 7	6  5  4	 3	2  1  0
@:	1	I=-Q  Q=I	10 11 14 15	 8	9 12 13 19	3 23  7 17	1 21  5 26 27 30 31 24 25 28 29 18	2 22  6 16	0 20  4
@:	2	I=-I  Q=-Q	25 24 27 26 29 28 31 30 17 16 19 18 21 20 23 22	 9	8 11 10 13 12 15 14	 1	0  3  2	 5	4  7  6
@:	3	I=Q	  Q=-I	12 13  8  9 14 15 10 11 21	5 17  1 23	7 19  3 28 29 24 25 30 31 26 27 20	4 16  0 22	6 18  2	 
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

generate_symbols_32apsk:
	push	{r0-r12,r14}

	mov		r5,r0								@: outbuffer address
	add		r5,#SYMBOLS_METADATA_OFFSET			@: skip over the metadata and point to the start of the data

@: put the PL header into the symbol buffer 

	add			r5,#-2							@: allow for the 2 unused bytes	
	ldr			r8,[r12,#PLHEADER_POINTER]		@: points to a buffer of 92 bytes - first 2 bytes unused
	vldm		r8,{q0-q5}						@: load the header
	vstm		r5,{q0-q5}						@: save the header into the symbol buffer		
	add			r5,#2							@: point to the start of the data

@: store the metadata 
	
	ldr		r0,=OUTPUT_FORMAT_SYMBOLS
	strh	r0,[r5,#METADATA_OUTPUTFORMAT]		@: output format

	ldr		r0,[r12,#FECINDEX]
	strh	r0,[r5,#METADATA_FEC]				@: fec

	ldr		r0,[r12,#CONSTINDEX]				@: constellation
	strh	r0,[r5,#METADATA_CONSTELLATION]

	ldr		r0,[r12,#FRAMETYPE]
	teq		r0,#0
	movne	r0,#0x10							@: convert frameindex (0/1) to frametype (0/0x10)
	strh	r0,[r5,#METADATA_FRAMETYPE]			@: frame type

	ldr		r0,[r12,#PILOTS_ACTIVE]
	strh	r0,[r5,#METADATA_PILOTS]			@: pilots

	ldr		r0,[r12,#ROLLOFF]
	strh	r0,[r5,#METADATA_ROLLOFF]			@: rolloff

	ldr		r0,[r12,#DATAMODE]
	strh	r0,[r5,#METADATA_DATAMODE]			@: data mode

	ldr			r8,[r12,#SYMBOLS_PER_FRAME]			
	strh		r8,[r5,#METADATA_ITEMCOUNT]		@: item count

	add			r5,#90							@: skip over the header

	ldr			r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table
	
// form the input pointers

	ldr		r0,[r12,#FRAME_POINTER]				@: input from the start of the frame
	ldr		r8,[r12,#FECFRAME_SIZE_BYTES]
	ldr		r6,=13108
	mul		r8,r6								@: divide by 5 to get the number of symbols
	lsr		r8,#16								@: r5 is now the number of bytes to process in each column

	add		r7,r0,r8							@: when r0 >= r7, then processing is complete 
	add		r1,r0,r8							@: second input pointer starts 1/5 of the way into the frame
	add		r2,r1,r8							@: third input pointer starts 2/5 of the way into the frame
	add		r3,r2,r8							@: third input pointer starts 3/5 of the way into the frame
	add		r4,r3,r8							@: fifth input pointer starts 4/5 of the way into the frame

	ldr		r10,[r12,#FRAMEINDEX]				@: get the frame type 0 / 1
	teq		r10,#FRAME_NORMAL	
	addne	r1,#-1								@: compensate for 32 bit alignment for short frame
	addne	r2,#-2
	addne	r3,#-3
	
	ldr		r6,[r12,#SYMBOLS_SCRAMBLE_TABLE]	@: scrambling type table

@: convert the frame into symbols

@: outer byte loop - process 12 x 16 bytes per column processed per loop
@: if pilots are active, they occur after 180 input bytes, so we may need to backtrack after 192

gs32n2:
	mov			r8,#12
gs32n4:
	cmp			r0,r7							@: if r0 >= r7 then processing is complete
	bge			gs32n12

	ldr			r10,[r12,#FRAMEINDEX]			@: get the frame type 0 / 1
	teq			r10,#FRAME_NORMAL	
	bne			gs32n6

	vldm		r0!,{q0}						@: load 16 bytes from each column 
	vldm		r1!,{q1}						@: pointers are 32 bit aligned for normal frame
	vldm		r2!,{q2}						
	vldm		r3!,{q3}					
	vldm		r4!,{q4}					
	b			gs32n7							

@: adjust for input pointers 1, 2, 3 not being 32 bit aligned for short frame

gs32n6:
	vldm		r0!,{q0}						@: load 16 bytes from each column 

	vldm		r1!,{q1}	
	vext.u8		q1,q1,#1						@: first byte not required - rotate towards byte zero
	vld1.u8		q1H[7],[r1]						@: the next input byte becomes byte q1[15]
	
	vldm		r2!,{q2}	
	vext.u16	q2,q2,#1						@: first 2 bytes not required - rotate towards byte zero
	vld1.u16	q2H[3],[r2]						@: the next 2 input bytes become bytes q2[14-15]
		
	vldm		r3!,{q3}	
	vext.u8		q3,q3,#3						@: first 3 bytes not required - rotate towards byte zero
	vld1.u8		q3H[5],[r3]!					@: the next byte becomes byte q3[13]
	vld1.u8		q3H[6],[r3]!					@: the next byte becomes byte q3[14]
	vld1.u8		q3H[7],[r3]!					@: the next byte becomes byte q3[15]
	add			r3,#-3							@: put the pointer back

	vldm		r4!,{q4}					
	
gs32n7:

@: extract 128 symbols

	vshr.u8		q8,q0,#3						@: symbols 0, 8, . . 120
	vshl.u8		q0,#1	
	vsri.u8		q8,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q8,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q8,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q8,q4,#7
	vshl.u8		q4,#1
	
	vshr.u8		q9,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q9,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q9,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q9,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q9,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q10,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q10,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q10,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q10,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q10,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q11,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q11,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q11,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q11,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q11,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q12,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q12,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q12,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q12,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q12,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q13,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q13,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q13,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q13,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q13,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q14,q0,#3							
	vshl.u8		q0,#1	
	vsri.u8		q14,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q14,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q14,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q14,q4,#7
	vshl.u8		q4,#1

	vshr.u8		q15,q0,#3							@: symbols 7, 15, . . 127
	vshl.u8		q0,#1	
	vsri.u8		q15,q1,#4
	vshl.u8		q1,#1
	vsri.u8		q15,q2,#5
	vshl.u8		q2,#1
	vsri.u8		q15,q3,#6
	vshl.u8		q3,#1
	vsri.u8		q15,q4,#7
	vshl.u8		q4,#1

@: shuffle the unscrambled symbols into order	
	
	vzip.u8		q8,q9
	vzip.u8		q10,q11
	vzip.u8		q12,q13
	vzip.u8		q14,q15
	vzip.u16	q8,q10
	vzip.u16	q9,q11
	vzip.u16	q12,q14
	vzip.u16	q13,q15
	vzip.u32	q8,q12
	vzip.u32	q9,q13
	vzip.u32	q10,q14
	vzip.u32	q11,q15
	vswp		q9,q12
	vswp		q11,q14

@: 128 unscrambled symbols are now in order in q8-q15

	vldm		r6!,{q0-q7}						@: load 128 bytes from the scramble table	

@: shift and OR the 2 bit entries from the scramble table with the 5 bit symbols 
		
	vsli.u8		q8,q0,#5
	vsli.u8		q9,q1,#5
	vsli.u8		q10,q2,#5
	vsli.u8		q11,q3,#5
	vsli.u8		q12,q4,#5
	vsli.u8		q13,q5,#5
	vsli.u8		q14,q6,#5
	vsli.u8		q15,q7,#5

@: each byte in q8-q15 is now of the form:	.  scramble scramble symbol symbol symbol symbol symbol 

@: the lookup table can only be 32 bytes, but we have 7 bit values as the indices
@: the scrambling will be done in 2 halves, with 4 passes for each half

@: first 64 symbols 

@: first pass; original scrambling bits = 00 

@: if the scramble bits are both zero, the symbols are unchanged, so copy the 64 symbols to q0-q3 

	vmov		q0,q8
	vmov		q1,q9
	vmov		q2,q10
	vmov		q3,q11
	
@: second pass; original scrambling bits = 01 

@: XOR the scrambling bits 6:5 with 01	
	
	vmov.u8		q6,#0x20
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
	
@: load the conversion table zero value symbols

	vldr		q4L,=0x1202160610001404				@: lookup table for original scrambling bits 6:5 = 01
	vldr		q4H,=0x1a1b1e1f18191c1d
	vldr		q5L,=0x1303170711011505
	vldr		q5H,=0x0a0b0e0f08090c0d

@: scramble the symbols with original scrambling bits 6:5 = 01
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
	
@: third pass; original scrambling bits = 10 

@: XOR the scrambling bits 6:5 with 11	
	
	vmov.u8		q6,#0x60
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
	
@: load the conversion table

	vldr		q4L,=0x0100030205040706		@: lookup table for original scrambling bits 6:5 = 01
	vldr		q4H,=0x09080b0a0d0c0f0e
	vldr		q5L,=0x1110131215141716
	vldr		q5H,=0x19181b1a1d1c1f1e

@: scramble the symbols with original scrambling bits 6:5 = 10
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
		
@: fourth pass; original scrambling bits = 11

@: XOR the scrambling bits 6:5 with 01	
	
	vmov.u8		q6,#0x20
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
	
@: load the conversion table

	vldr		q4L,=0x1404100016061202					@: lookup table for original scrambling bits 6:5 = 11
	vldr		q4H,=0x1c1d18191e1f1a1b
	vldr		q5L,=0x1505110117071303
	vldr		q5H,=0x0c0d08090e0f0a0b

@: scramble the symbols with original scrambling bits 6:5 = 11
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
	
	vstm		r5!,{q0-q3}						@: save the first 64 symbols	

	b			gs32n8							@: the literals get screwed up if this isn't here
	
	.align		2
	.ltorg
	.align		2

gs32n8:

@: second 64 symbols 

@: first pass; original scrambling bits = 00 

@: move the second 64 symbols to where the first 64 were, to enable the code to be copied

	vmov		q8,q12
	vmov		q9,q13
	vmov		q10,q14
	vmov		q11,q15
	
@: if the scramble bits are both zero, the symbols are unchanged, so copy the 64 symbols to q0-q3 

	vmov		q0,q8
	vmov		q1,q9
	vmov		q2,q10
	vmov		q3,q11
	
@: second pass; original scrambling bits = 01 

@: XOR the scrambling bits 6:5 with 01	
	
	vmov.u8		q6,#0x20
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
	
@: load the conversion table

	vldr		q4L,=0x1202160610001404		@: lookup table for original scrambling bits 6:5 = 01
	vldr		q4H,=0x1a1b1e1f18191c1d
	vldr		q5L,=0x1303170711011505
	vldr		q5H,=0x0a0b0e0f08090c0d

@: scramble the symbols with original scrambling bits 6:5 = 01
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
	
@: third pass; original scrambling bits = 10 

@: XOR the scrambling bits 6:5 with 11	
	
	vmov.u8		q6,#0x60
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
	
@: load the conversion table

	vldr		q4L,=0x0100030205040706					@: lookup table for original scrambling bits 6:5 = 01
	vldr		q4H,=0x09080b0a0d0c0f0e
	vldr		q5L,=0x1110131215141716
	vldr		q5H,=0x19181b1a1d1c1f1e

@: scramble the symbols with original scrambling bits 6:5 = 10
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
		
@: fourth pass; original scrambling bits = 11

@: XOR the scrambling bits 6:5 with 01	
	
	vmov.u8		q6,#0x20
	veor		q8,q6
	veor		q9,q6
	veor		q10,q6
	veor		q11,q6
		
	vldr		q4L,=0x1404100016061202					@: lookup table for original scrambling bits 6:5 = 11
	vldr		q4H,=0x1c1d18191e1f1a1b
	vldr		q5L,=0x1505110117071303
	vldr		q5H,=0x0c0d08090e0f0a0b

@: scramble the symbols with original scrambling bits 6:5 = 11
	
	vtbx.u8		q0L,{q4-q5},q8L			
	vtbx.u8		q0H,{q4-q5},q8H		
	vtbx.u8		q1L,{q4-q5},q9L					
	vtbx.u8		q1H,{q4-q5},q9H 
	vtbx.u8		q2L,{q4-q5},q10L			
	vtbx.u8		q2H,{q4-q5},q10H		
	vtbx.u8		q3L,{q4-q5},q11L					
	vtbx.u8		q3H,{q4-q5},q11H	
	
	vstm		r5!,{q0-q3}						@: save the second 64 symbols	
	
	adds		r8,#-1
	bne			gs32n4							@: do the next 5 columns of 16 bytes

@: 192 bytes per column (5) have been processed yielding 1536 symbols
	
@: insert 36 pilot symbols if required

	ldr			r10,[r12,#PILOTS_ACTIVE]
	teq			r10,#0
	beq			gs32n10							@: pilots not required

@: pilots occur every 180 bytes and we have processed 192, so we need to backtrack

	add			r0,#-12							@: backtrack the 5 column input pointers by 12 bytes
	add			r1,#-12
	add			r2,#-12
	add			r3,#-12
	add			r4,#-12
	add			r5,#-12*8						@: backtrack the output pointer by 96 symbols
	add			r6,#-12*8						@: backtrack the scramble table pointer by 96 symbols
	
	vldm		r6,{q8-q10}						@: load 48 bytes from the scramble table
	add			r6,#36							@: only 36 required

	vldr		q4L,=0x000000000a1f0c19			@: load the conversion table for pilots (symbol value = 25) 

	vtbl.u8		q0L,{q4L},q8L					 
	vtbl.u8		q0H,{q4L},q8H					 
	vtbl.u8		q1L,{q4L},q9L					 
	vtbl.u8		q1H,{q4L},q9H					 
	vtbl.u8		q2L,{q4L},q10L					 
	vtbl.u8		q2H,{q4L},q10H					 

	vstm		r5,{q0-q2}						@: store 48 symbols into the output buffer
	add			r5,#36							@: only 36 required
	
gs32n10:	
	b			gs32n2
	
@: the whole frame has been processed

gs32n12:

gs32n98:	
	pop			{r0-r12,r14}
	mov			pc,r14

	
	.align	2	
	.ltorg										@: literal pool
	.align	2

	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	symbols_scramble_split_IQ_bytes
@:		scramble the symbols and write to the output buffer in 30I, 30Q format 
@:		both are multiples of 15 bytes
@:
@:	Calling:
@:		r12 points to the stream structure
@:
@:	All registers are restored to their original values
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

symbols_scramble_split_IQ_neon:
ssx:
	push		{r0-r12,r14}	
		
	vmov.u16	q8,#0x0004					@: for shifting even bytes left
	vmov.u16	q9,#0xfc00					@: for shifting odd bytes right
	vldr		q10L,=0x0888008088800800	@: 16 byte translation table
	vldr		q10H,=0x8000880800088088						
	vmov.u8		q11,#3						@: mask for bits 1:0 in each byte

	ldr			r0,[r12,#FRAME_POINTER]					@: input pointer
	ldr			r1,[r12,#OUTBUFFER_ADDRESS]				@: output pointer
	ldr			r2,=symbols_scramble_table6_neon		@: modifier table
	
	ldr			r6,[r12,#FECFRAME_SIZE_BYTES]
	add			r6,#59						@: so that the dividend rounds up to the next multiple of 60
	ldr			r7,=0x4444445
	umull		r8,r3,r6,r7					@: divide by 60, the number of bytes processed each time around the loop 
											@: r3 is the loop counter
											
	ldr			r5,[r12,#PLHEADER_POINTER]
	vldm		r5,{d0,d1,d2}				@: load 6 words of PL header 
	vstm		r1!,{d0,d1,d2}				@: save to the output buffer

ssx2:
	vldm		r0,{q12-q15}				@: load 64 input bytes; only 60 required (4 x 15); first byte 7:6 is most significant IQ
											@: 4 x 15 bytes will be processed
	vmov		q0,q12
	bl			ssxcommon					@: process first 15 bytes, in q0
	vext.u8		q0,q12,q13,#15	
	bl			ssxcommon					@: process second 15 bytes, in q0
	vext.u8		q0,q13,q14,#14	
	bl			ssxcommon					@: process third 15 bytes, in q0
	vext.u8		q0,q14,q15,#13	
	bl			ssxcommon					@: process fourth 15 bytes, in q0

	add			r0,#60						@: step the input pointer
	adds		r3,#-1						@: loop counter
	bne			ssx2						@: do another 60 bytes
	
ssx98:	
	pop			{r0-r12,r14}
	mov			pc,r14
	
@: process bytes 0-14 in q0, producing 4 words; 30I.. 30Q.. 30I.. 30Q..
	
ssxcommon:
	vshr.u8		q1,q0,#4					@: shift the 2nd symbol in each byte in bits 5:4 to bits 1:0
	vshr.u8		q2,q0,#2					@: shift the 3rd symbol in each byte in bits 3:2 to bits 1:0
	vand		q3,q0,q11					@: mask off the 4th symbol, which is already in bits 1:0
	vand		q2,q11						@: mask off the 3rd symbol in bits 1:0
	vand		q1,q11						@: mask off the 2nd symbol in bits 1:0
	vshr.u8		q0,#6						@: shift the first symbol in bits 7:6 to bits 1:0

@:		byte 0		b1 b0		byte 1						byte 14
@: q0:	. . . . . . I0 Q0		. . . . . . I4 Q4			. . . . . . I56 Q56
@: q1:	. . . . . . I1 Q1
@: q2:	. . . . . . I2 Q2
@: q3:	. . . . . . I3 Q3									. . . . . . I59 Q59
	
	vldm		r2!,{q4-q7}					@: load 64 bytes (4 x (15 + dummy)) each with a 2 bit modifier in bits 3-2

	vorr		q0,q4						@: prepend the 2 bits in each byte with the symbols
	vorr		q1,q5						@: the modifier byte order is 0, 4, 8, 12, 1, 5, . . . 59 repeating every 60
	vorr		q2,q6
	vorr		q3,q7

@: use each byte in q0-q3 as index to a scrambled symbol from q8
	
	vtbl.u8		d0,{q10},d0					@: extract the scrambled symbols
	vtbl.u8		d1,{q10},d1					@: the byte returned has I in bit7 and Q in bit3
	vtbl.u8		d2,{q10},d2
	vtbl.u8		d3,{q10},d3
	vtbl.u8		d4,{q10},d4
	vtbl.u8		d5,{q10},d5
	vtbl.u8		d6,{q10},d6
	vtbl.u8		d7,{q10},d7
	
@: q0[0] .. q0[14]	symbols 00	04	...	 56
@: q3[0] .. q0[14]	symbols 03	07	...	 59
	
	vsra.u8		q0,q1,#1					@: rebuild the symbol bytes
	vsra.u8		q0,q2,#2
	vsra.u8		q0,q3,#3

@:		byte 0			  b1 b0		byte 1						byte 14
@: q0:	I0 I1 I2 I3 Q0 Q1 Q2 Q3		I4 I5 I6 I7 Q4 Q5 Q6 Q7		I56 I57 I58 I59 Q56 Q57 Q58 Q59

	vshr.u8		q1,q0,#4					@: lose all the Q bits by shifting the I bits to the bottom of the byte
	vshl.u8		q2,q1,q8					@: shift the I bits in even bytes left 4 to the top of the byte
	vpadd.u8	q3L,q2L,q2H					@: add adjacent bytes - 60 I bits now in Q3L

	vshl.u8		q1,q0,#4					@: lose all the I bits by shifting the Q bits to the top of the byte
	vshl.u8		q2,q1,q9					@: shift the Q bits in odd bytes right 4 to the bottom of the byte
	vpadd.u8	q3H,q2L,q2H					@: add adjacent bytes - 60 Q bits now in Q3H
	
@:	most significant I bit is in q3[0]:7 and the most significant Q bit in q3[8]:7

	vrev64.u8	q3,q3						@: reverse the byte order in each group of 8 bytes
	vshr.u64	q4,q3,#4					@: lose the bottom 4 unused Q bits for neatness
	vshr.u64	q3,#34						@: lose the bottom I unused Q bits for neatness
	vshl.u64	q4,#34						@: first group of 30 Q bits now in bits 63-34 of q4L
	vshl.u64	q3,#34
											@: second group of 30 Q bits now in bits 63-34 of q4H
	vsri.u64	q3,q4,#32					@: shift the Q bits into position
	vtrn.u32	q3L,q3H						@: re-order the 4 x 32 bits
	vswp		q3L,q3H						@: same again

	vstm		r1!,{q3}					@: save 30I.. 30Q.. 30I.. 30Q.. in 4 words	

	mov			pc,r14
		

	.align	2	
	.ltorg									@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	LDPC encode routines to shift bytes and bits in Neon registers
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

loadshift_0:
	vmov		q3,q6
	vmov		q4,q7
	vmov		q5,q8
	mov			pc,r14

loadshift_1:
	vext.u8		q3,q6,q7,#1					 
	vext.u8		q4,q7,q8,#1					 
	vext.u8		q5,q8,q3,#1					 
	mov			pc,r14

loadshift_2:
	vext.u8		q3,q6,q7,#2					 
	vext.u8		q4,q7,q8,#2					 
	vext.u8		q5,q8,q3,#2					 
	mov			pc,r14

loadshift_3:
	vext.u8		q3,q6,q7,#3					 
	vext.u8		q4,q7,q8,#3					 
	vext.u8		q5,q8,q3,#3					 
	mov			pc,r14

ldpcbits_0:
	vmov		q6,q3
	vmov		q7,q4
	vmov		q8,q5
	mov			pc,r14

ldpcbits_1:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#7					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#7					
	vshr.u8		q2,q5,#7					

	vshl.u8		q6,q3,#1					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#1
	vshl.u8		q8,q5,#1

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_2:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#6					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#6					
	vshr.u8		q2,q5,#6					

	vshl.u8		q6,q3,#2					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#2
	vshl.u8		q8,q5,#2

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_3:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#5					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#5					
	vshr.u8		q2,q5,#5					

	vshl.u8		q6,q3,#3					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#3
	vshl.u8		q8,q5,#3

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_4:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#4					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#4					
	vshr.u8		q2,q5,#4					

	vshl.u8		q6,q3,#4					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#4
	vshl.u8		q8,q5,#4

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_5:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#3					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#3					
	vshr.u8		q2,q5,#3					

	vshl.u8		q6,q3,#5					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#5
	vshl.u8		q8,q5,#5

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q5 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_6:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#2					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#2					
	vshr.u8		q2,q5,#2					

	vshl.u8		q6,q3,#6					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#6
	vshl.u8		q8,q5,#6

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

ldpcbits_7:									@: shift q3-q5 1 bit towards q3 and store in q6-q8
	vshr.u8		q0,q3,#1					@: overflow bits that will lost from bytes in q3 are now in bytes of q0
	vshr.u8		q1,q4,#1					
	vshr.u8		q2,q5,#1					

	vshl.u8		q6,q3,#7					@: shift each byte left by _n and move to q6-q8
	vshl.u8		q7,q4,#7
	vshl.u8		q8,q5,#7

	vext.u8		q3,q0,q1,#1					@: shift the overflow bits in q0 right by 1 byte towards q0
	vext.u8		q4,q1,q2,#1					@: and store in q3-q5
	vext.u8		q5,q2,q3,#1					@: top 3 bytes of q2 don't matter

	vorr		q6,q3
	vorr		q7,q4
	vorr		q8,q5

	mov			pc,r14

	
	.align	2	
	.ltorg									@: literal pool
	.align	2

	
.global _reverse_byte_order

_reverse_byte_order:
	rev		r0,r0
	mov		pc,r14
	
	
	.align	2	
	.ltorg									@: literal pool
	.align	2


@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Table data (read only)
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
	.text
	
	.align	2
	   
@: output generation routines; indexed by constellation index
   
symbol_generation_routines:						@: indexed by constellation [0-3]
	.word	generate_symbols_qpsk
	.word	generate_symbols_8psk
	.word	generate_symbols_16apsk
	.word	generate_symbols_32apsk

@: number of symbols for each constellation

symbol_counts_normal:
	.word	32490,21690,16290,13050				@: QPSK, 8PSK, 16APSK, 32APSK

symbol_counts_normal_pilots:
    .word   33282,22194,16686,13338
    
symbol_counts_short:
	.word	8190,5490,4140,3330

symbol_counts_short_pilots:
	.word	8370,5598,4212,3402
	

@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	Physical layer (PL) headers
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    .align  7

@: QPSK, normal frame, FEC 14, no pilots
plheader_qpsk_n14:
phqn14:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,3,2,0,1,3,1,0,1,3,2,0,2,0,2,3,1,3,1,0,2,3,2,0,1,3,2
    .byte   3,2,3,1,0,2,3,2,3,1,3,1,0,1,3,1,0,1,0,2,3,2,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 13, no pilots
plheader_qpsk_n13:
phqn13:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,3,2,0,1,3,1,0,1,0,1,3,1,3,1,0,2,0,2,3,1,0,1,3,2,0,1
    .byte   0,1,0,2,3,1,0,1,0,2,0,2,3,2,3,1,0,1,0,2,3,2,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 25, no pilots
plheader_qpsk_n25:
phqn25:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,3,2,0,1,3,1,0,1,0,1,3,1,3,1,0,2,0,2,3,1,0,1,3,2,3,2
    .byte   3,2,3,1,0,2,3,2,3,1,3,1,0,1,0,2,3,2,3,1,0,1,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, normal frame, FEC 12, no pilots
plheader_qpsk_n12:
phqn12:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,0,1,3,2,0,2,3,2,3,2,0,2,0,2,3,1,0,2,3,1,0,1,3,2,0,1
    .byte   0,1,0,2,3,1,3,2,3,1,3,1,0,1,0,2,3,2,3,1,0,1,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 35, no pilots
plheader_qpsk_n35:
phqn35:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,0,1,3,2,0,2,3,2,3,2,0,2,0,2,3,1,0,2,3,1,0,1,3,2,3,2
    .byte   3,2,3,1,0,2,0,1,0,2,0,2,3,2,3,1,0,1,0,2,3,2,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, normal frame, FEC 23, no pilots
plheader_qpsk_n23:
phqn23:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,0,1,3,2,0,2,3,2,0,1,3,1,3,1,0,2,3,1,0,2,3,2,0,1,0,1
    .byte   0,1,0,2,3,1,3,2,3,1,3,1,0,1,3,1,0,1,0,2,3,2,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, normal frame, FEC 34, no pilots
plheader_qpsk_n34:
phqn34:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,0,1,3,2,0,2,3,2,0,1,3,1,3,1,0,2,3,1,0,2,3,2,0,1,3,2
    .byte   3,2,3,1,0,2,0,1,0,2,0,2,3,2,0,2,3,2,3,1,0,1,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 45, no pilots
plheader_qpsk_n45:
phqn45:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   3,1,3,2,3,2,0,1,0,2,3,2,3,2,0,2,3,1,0,2,3,1,0,2,0,1,3,2,0,1
    .byte   0,1,3,1,0,2,0,1,0,2,3,1,0,1,0,2,3,2,0,2,3,2,3,1,3,1,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 56, no pilots
plheader_qpsk_n56:
phqn56:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   3,1,3,2,3,2,0,1,0,2,3,2,3,2,0,2,3,1,0,2,3,1,0,2,0,1,3,2,3,2
    .byte   3,2,0,2,3,1,3,2,3,1,0,2,3,2,3,1,0,1,3,1,0,1,0,2,0,2,3,2,3,2

    .align  7

@: QPSK, normal frame, FEC 89, no pilots
plheader_qpsk_n89:
phqn89:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   3,1,3,2,3,2,0,1,0,2,3,2,0,1,3,1,0,2,3,1,0,2,3,1,3,2,0,1,0,1
    .byte   0,1,3,1,0,2,0,1,0,2,3,1,0,1,3,1,0,1,3,1,0,1,0,2,0,2,3,2,3,2

    .align  7

@: QPSK, normal frame, FEC 910, no pilots
plheader_qpsk_n910:
phqn910:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   3,1,3,2,3,2,0,1,0,2,3,2,0,1,3,1,0,2,3,1,0,2,3,1,3,2,0,1,3,2
    .byte   3,2,0,2,3,1,3,2,3,1,0,2,3,2,0,2,3,2,0,2,3,2,3,1,3,1,0,1,0,1

    .align  7

@: QPSK, normal frame, FEC 14, pilots
plheader_qpsk_n14_pilots:
phqn14p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,3,1,0,2,3,2,0,2,3,1,0,1,0,1,3,2,3,2,0,1,3,1,0,2,3,1
    .byte   3,1,3,2,0,1,3,1,3,2,3,2,0,2,3,2,0,2,0,1,3,1,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, normal frame, FEC 13, pilots
plheader_qpsk_n13_pilots:
phqn13p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,3,1,0,2,3,2,0,2,0,2,3,2,3,2,0,1,0,1,3,2,0,2,3,1,0,2
    .byte   0,2,0,1,3,2,0,2,0,1,0,1,3,1,3,2,0,2,0,1,3,1,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, normal frame, FEC 25, pilots
plheader_qpsk_n25_pilots:
phqn25p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,3,1,0,2,3,2,0,2,0,2,3,2,3,2,0,1,0,1,3,2,0,2,3,1,3,1
    .byte   3,1,3,2,0,1,3,1,3,2,3,2,0,2,0,1,3,1,3,2,0,2,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, normal frame, FEC 12, pilots
plheader_qpsk_n12_pilots:
phqn12p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,0,2,3,1,0,1,3,1,3,1,0,1,0,1,3,2,0,1,3,2,0,2,3,1,0,2
    .byte   0,2,0,1,3,2,3,1,3,2,3,2,0,2,0,1,3,1,3,2,0,2,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, normal frame, FEC 35, pilots
plheader_qpsk_n35_pilots:
phqn35p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,0,2,3,1,0,1,3,1,3,1,0,1,0,1,3,2,0,1,3,2,0,2,3,1,3,1
    .byte   3,1,3,2,0,1,0,2,0,1,0,1,3,1,3,2,0,2,0,1,3,1,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, normal frame, FEC 23, pilots
plheader_qpsk_n23_pilots:
phqn23p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,0,2,3,1,0,1,3,1,0,2,3,2,3,2,0,1,3,2,0,1,3,1,0,2,0,2
    .byte   0,2,0,1,3,2,3,1,3,2,3,2,0,2,3,2,0,2,0,1,3,1,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, normal frame, FEC 34, pilots
plheader_qpsk_n34_pilots:
phqn34p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   0,1,0,2,0,2,3,1,0,1,3,1,0,2,3,2,3,2,0,1,3,2,0,1,3,1,0,2,3,1
    .byte   3,1,3,2,0,1,0,2,0,1,0,1,3,1,0,1,3,1,3,2,0,2,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, normal frame, FEC 45, pilots
plheader_qpsk_n45_pilots:
phqn45p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   3,2,3,1,3,1,0,2,0,1,3,1,3,1,0,1,3,2,0,1,3,2,0,1,0,2,3,1,0,2
    .byte   0,2,3,2,0,1,0,2,0,1,3,2,0,2,0,1,3,1,0,1,3,1,3,2,3,2,0,2,0,2

    .align  7

@: QPSK, normal frame, FEC 56, pilots
plheader_qpsk_n56_pilots:
phqn56p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   3,2,3,1,3,1,0,2,0,1,3,1,3,1,0,1,3,2,0,1,3,2,0,1,0,2,3,1,3,1
    .byte   3,1,0,1,3,2,3,1,3,2,0,1,3,1,3,2,0,2,3,2,0,2,0,1,0,1,3,1,3,1

    .align  7

@: QPSK, normal frame, FEC 89, pilots
plheader_qpsk_n89_pilots:
phqn89p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   3,2,3,1,3,1,0,2,0,1,3,1,0,2,3,2,0,1,3,2,0,1,3,2,3,1,0,2,0,2
    .byte   0,2,3,2,0,1,0,2,0,1,3,2,0,2,3,2,0,2,3,2,0,2,0,1,0,1,3,1,3,1

    .align  7

@: QPSK, normal frame, FEC 910, pilots
plheader_qpsk_n910_pilots:
phqn910p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,3,2
    .byte   3,2,3,1,3,1,0,2,0,1,3,1,0,2,3,2,0,1,3,2,0,1,3,2,3,1,0,2,3,1
    .byte   3,1,0,1,3,2,3,1,3,2,0,1,3,1,0,1,3,1,0,1,3,1,3,2,3,2,0,2,0,2

    .align  7

@: QPSK, short frame, FEC 14, no pilots
plheader_qpsk_s14:
phqs14:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,0,1,3,2,0,2,3,2,0,1,3,1,3,1,0,2,0,2,3,1,0,1,3,2,0,1
    .byte   0,1,0,2,3,1,0,1,0,2,0,2,3,2,0,2,3,2,3,1,0,1,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, short frame, FEC 13, no pilots
plheader_qpsk_s13:
phqs13:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,0,1,3,2,0,2,3,2,3,2,0,2,0,2,3,1,3,1,0,2,3,2,0,1,3,2
    .byte   3,2,3,1,0,2,3,2,3,1,3,1,0,1,0,2,3,2,3,1,0,1,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, short frame, FEC 25, no pilots
plheader_qpsk_s25:
phqs25:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,0,1,3,2,0,2,3,2,3,2,0,2,0,2,3,1,3,1,0,2,3,2,0,1,0,1
    .byte   0,1,0,2,3,1,0,1,0,2,0,2,3,2,3,1,0,1,0,2,3,2,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, short frame, FEC 12, no pilots
plheader_qpsk_s12:
phqs12:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,3,2,0,1,3,1,0,1,0,1,3,1,3,1,0,2,3,1,0,2,3,2,0,1,3,2
    .byte   3,2,3,1,0,2,0,1,0,2,0,2,3,2,3,1,0,1,0,2,3,2,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, short frame, FEC 35, no pilots
plheader_qpsk_s35:
phqs35:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,3,2,0,1,3,1,0,1,0,1,3,1,3,1,0,2,3,1,0,2,3,2,0,1,0,1
    .byte   0,1,0,2,3,1,3,2,3,1,3,1,0,1,0,2,3,2,3,1,0,1,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, short frame, FEC 23, no pilots
plheader_qpsk_s23:
phqs23:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,3,2,0,1,3,1,0,1,3,2,0,2,0,2,3,1,0,2,3,1,0,1,3,2,3,2
    .byte   3,2,3,1,0,2,0,1,0,2,0,2,3,2,0,2,3,2,3,1,0,1,0,2,0,2,0,1,0,1

    .align  7

@: QPSK, short frame, FEC 34, no pilots
plheader_qpsk_s34:
phqs34:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   3,1,3,2,3,2,0,1,3,1,0,1,3,2,0,2,0,2,3,1,0,2,3,1,0,1,3,2,0,1
    .byte   0,1,0,2,3,1,3,2,3,1,3,1,0,1,3,1,0,1,0,2,3,2,3,1,3,1,3,2,3,2

    .align  7

@: QPSK, short frame, FEC 45, no pilots
plheader_qpsk_s45:
phqs45:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   0,2,0,1,0,1,3,2,3,1,0,1,0,1,3,1,0,2,3,1,0,2,3,1,3,2,0,1,3,2
    .byte   3,2,0,2,3,1,3,2,3,1,0,2,3,2,3,1,0,1,3,1,0,1,0,2,0,2,3,2,3,2

    .align  7

@: QPSK, short frame, FEC 56, no pilots
plheader_qpsk_s56:
phqs56:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   0,2,0,1,0,1,3,2,3,1,0,1,0,1,3,1,0,2,3,1,0,2,3,1,3,2,0,1,0,1
    .byte   0,1,3,1,0,2,0,1,0,2,3,1,0,1,0,2,3,2,0,2,3,2,3,1,3,1,0,1,0,1

    .align  7

@: QPSK, short frame, FEC 89, no pilots
plheader_qpsk_s89:
phqs89:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,0,2
    .byte   0,2,0,1,0,1,3,2,3,1,0,1,3,2,0,2,3,1,0,2,3,1,0,2,0,1,3,2,3,2
    .byte   3,2,0,2,3,1,3,2,3,1,0,2,3,2,0,2,3,2,0,2,3,2,3,1,3,1,0,1,0,1

    .align  7

@: QPSK, short frame, FEC 14, pilots
plheader_qpsk_s14_pilots:
phqs14p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,0,2,3,1,0,1,3,1,0,2,3,2,3,2,0,1,0,1,3,2,0,2,3,1,0,2
    .byte   0,2,0,1,3,2,0,2,0,1,0,1,3,1,0,1,3,1,3,2,0,2,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, short frame, FEC 13, pilots
plheader_qpsk_s13_pilots:
phqs13p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,0,2,3,1,0,1,3,1,3,1,0,1,0,1,3,2,3,2,0,1,3,1,0,2,3,1
    .byte   3,1,3,2,0,1,3,1,3,2,3,2,0,2,0,1,3,1,3,2,0,2,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, short frame, FEC 25, pilots
plheader_qpsk_s25_pilots:
phqs25p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,0,2,3,1,0,1,3,1,3,1,0,1,0,1,3,2,3,2,0,1,3,1,0,2,0,2
    .byte   0,2,0,1,3,2,0,2,0,1,0,1,3,1,3,2,0,2,0,1,3,1,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, short frame, FEC 12, pilots
plheader_qpsk_s12_pilots:
phqs12p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,3,1,0,2,3,2,0,2,0,2,3,2,3,2,0,1,3,2,0,1,3,1,0,2,3,1
    .byte   3,1,3,2,0,1,0,2,0,1,0,1,3,1,3,2,0,2,0,1,3,1,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, short frame, FEC 35, pilots
plheader_qpsk_s35_pilots:
phqs35p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,3,1,0,2,3,2,0,2,0,2,3,2,3,2,0,1,3,2,0,1,3,1,0,2,0,2
    .byte   0,2,0,1,3,2,3,1,3,2,3,2,0,2,0,1,3,1,3,2,0,2,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, short frame, FEC 23, pilots
plheader_qpsk_s23_pilots:
phqs23p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,3,1,0,2,3,2,0,2,3,1,0,1,0,1,3,2,0,1,3,2,0,2,3,1,3,1
    .byte   3,1,3,2,0,1,0,2,0,1,0,1,3,1,0,1,3,1,3,2,0,2,0,1,0,1,0,2,0,2

    .align  7

@: QPSK, short frame, FEC 34, pilots
plheader_qpsk_s34_pilots:
phqs34p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   3,2,3,1,3,1,0,2,3,2,0,2,3,1,0,1,0,1,3,2,0,1,3,2,0,2,3,1,0,2
    .byte   0,2,0,1,3,2,3,1,3,2,3,2,0,2,3,2,0,2,0,1,3,1,3,2,3,2,3,1,3,1

    .align  7

@: QPSK, short frame, FEC 45, pilots
plheader_qpsk_s45_pilots:
phqs45p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   0,1,0,2,0,2,3,1,3,2,0,2,0,2,3,2,0,1,3,2,0,1,3,2,3,1,0,2,3,1
    .byte   3,1,0,1,3,2,3,1,3,2,0,1,3,1,3,2,0,2,3,2,0,2,0,1,0,1,3,1,3,1

    .align  7

@: QPSK, short frame, FEC 56, pilots
plheader_qpsk_s56_pilots:
phqs56p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   0,1,0,2,0,2,3,1,3,2,0,2,0,2,3,2,0,1,3,2,0,1,3,2,3,1,0,2,0,2
    .byte   0,2,3,2,0,1,0,2,0,1,3,2,0,2,0,1,3,1,0,1,3,1,3,2,3,2,0,2,0,2

    .align  7

@: QPSK, short frame, FEC 89, pilots
plheader_qpsk_s89_pilots:
phqs89p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,0,1
    .byte   0,1,0,2,0,2,3,1,3,2,0,2,3,1,0,1,3,2,0,1,3,2,0,1,0,2,3,1,3,1
    .byte   3,1,0,1,3,2,3,1,3,2,0,1,3,1,0,1,3,1,0,1,3,1,3,2,3,2,0,2,0,2


    .align  7

@: 8PSK, normal frame, FEC 35, no pilots
plheader_8psk_n35:
ph8n35:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,3,5
    .byte   3,5,3,6,0,5,3,6,3,5,0,5,3,6,0,6,3,5,0,6,0,6,3,5,3,6,0,5,0,5
    .byte   0,5,3,5,0,6,3,6,3,5,0,6,3,6,0,6,3,6,0,6,3,6,0,6,0,6,3,6,3,6

    .align  7

@: 8PSK, normal frame, FEC 23, no pilots
plheader_8psk_n23:
ph8n23:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,3,5
    .byte   3,5,3,6,0,5,3,6,3,5,0,5,3,6,0,6,3,5,0,6,0,6,3,5,3,6,0,5,3,6
    .byte   3,6,0,6,3,5,0,5,0,6,3,5,0,5,3,5,0,5,3,5,0,5,3,5,3,5,0,5,0,5

    .align  7

@: 8PSK, normal frame, FEC 34, no pilots
plheader_8psk_n34:
ph8n34:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,3,5
    .byte   3,5,3,6,0,5,3,6,3,5,0,5,0,5,3,5,0,6,3,5,3,5,0,6,0,5,3,6,0,5
    .byte   0,5,3,5,0,6,3,6,3,5,0,6,3,6,3,5,0,5,3,5,0,5,3,5,3,5,0,5,0,5

    .align  7

@: 8PSK, normal frame, FEC 56, no pilots
plheader_8psk_n56:
ph8n56:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,3,5
    .byte   3,5,3,6,0,5,3,6,3,5,0,5,0,5,3,5,0,6,3,5,3,5,0,6,0,5,3,6,3,6
    .byte   3,6,0,6,3,5,0,5,0,6,3,5,0,5,0,6,3,6,0,6,3,6,0,6,0,6,3,6,3,6

    .align  7

@: 8PSK, normal frame, FEC 89, no pilots
plheader_8psk_n89:
ph8n89:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,0,6
    .byte   0,6,3,6,3,6,3,6,3,5,3,6,3,6,3,5,0,6,0,6,3,5,3,5,3,6,3,6,0,5
    .byte   3,6,0,6,0,6,0,5,3,5,0,6,0,5,0,6,0,5,3,5,3,6,3,5,0,6,3,6,0,5

    .align  7

@: 8PSK, normal frame, FEC 910, no pilots
plheader_8psk_n910:
ph8n910:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,0,6
    .byte   0,6,3,6,3,6,3,6,3,5,3,6,3,6,3,5,0,6,0,6,3,5,3,5,3,6,3,6,3,6
    .byte   0,5,3,5,3,5,3,6,0,6,3,5,3,6,3,5,3,6,0,6,0,5,0,6,3,5,0,5,3,6

    .align  7

@: 8PSK, normal frame, FEC 35, pilots
plheader_8psk_n35_pilots:
ph8n35p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,3,6
    .byte   3,6,3,5,0,6,3,5,3,6,0,6,3,5,0,5,3,6,0,5,0,5,3,6,3,5,0,6,0,6
    .byte   0,6,3,6,0,5,3,5,3,6,0,5,3,5,0,5,3,5,0,5,3,5,0,5,0,5,3,5,3,5

    .align  7

@: 8PSK, normal frame, FEC 23, pilots
plheader_8psk_n23_pilots:
ph8n23p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,3,6
    .byte   3,6,3,5,0,6,3,5,3,6,0,6,3,5,0,5,3,6,0,5,0,5,3,6,3,5,0,6,3,5
    .byte   3,5,0,5,3,6,0,6,0,5,3,6,0,6,3,6,0,6,3,6,0,6,3,6,3,6,0,6,0,6

    .align  7

@: 8PSK, normal frame, FEC 34, pilots
plheader_8psk_n34_pilots:
ph8n34p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,3,6
    .byte   3,6,3,5,0,6,3,5,3,6,0,6,0,6,3,6,0,5,3,6,3,6,0,5,0,6,3,5,0,6
    .byte   0,6,3,6,0,5,3,5,3,6,0,5,3,5,3,6,0,6,3,6,0,6,3,6,3,6,0,6,0,6

    .align  7

@: 8PSK, normal frame, FEC 56, pilots
plheader_8psk_n56_pilots:
ph8n56p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,3,6
    .byte   3,6,3,5,0,6,3,5,3,6,0,6,0,6,3,6,0,5,3,6,3,6,0,5,0,6,3,5,3,5
    .byte   3,5,0,5,3,6,0,6,0,5,3,6,0,6,0,5,3,5,0,5,3,5,0,5,0,5,3,5,3,5

    .align  7

@: 8PSK, normal frame, FEC 89, pilots
plheader_8psk_n89_pilots:
ph8n89p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,0,5
    .byte   0,5,3,5,3,5,3,5,3,6,3,5,3,5,3,6,0,5,0,5,3,6,3,6,3,5,3,5,0,6
    .byte   3,5,0,5,0,5,0,6,3,6,0,5,0,6,0,5,0,6,3,6,3,5,3,6,0,5,3,5,0,6

    .align  7

@: 8PSK, normal frame, FEC 910, pilots
plheader_8psk_n910_pilots:
ph8n910p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,6,0,5
    .byte   0,5,3,5,3,5,3,5,3,6,3,5,3,5,3,6,0,5,0,5,3,6,3,6,3,5,3,5,3,5
    .byte   0,6,3,6,3,6,3,5,0,5,3,6,3,5,3,6,3,5,0,5,0,6,0,5,3,6,0,6,3,5

    .align  7

@: 8PSK, short frame, FEC 35, no pilots
plheader_8psk_s35:
ph8s35:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,6,0,6
    .byte   0,6,0,5,3,6,0,5,0,6,3,6,0,5,3,5,0,6,3,5,3,5,0,6,0,5,3,6,3,6
    .byte   3,6,0,6,3,5,0,5,0,6,3,5,0,5,3,5,0,5,3,5,0,5,3,5,3,5,0,5,0,5

    .align  7

@: 8PSK, short frame, FEC 23, no pilots
plheader_8psk_s23:
ph8s23:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,6,0,6
    .byte   0,6,0,5,3,6,0,5,0,6,3,6,0,5,3,5,0,6,3,5,3,5,0,6,0,5,3,6,0,5
    .byte   0,5,3,5,0,6,3,6,3,5,0,6,3,6,0,6,3,6,0,6,3,6,0,6,0,6,3,6,3,6

    .align  7

@: 8PSK, short frame, FEC 34, no pilots
plheader_8psk_s34:
ph8s34:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,6,0,6
    .byte   0,6,0,5,3,6,0,5,0,6,3,6,3,6,0,6,3,5,0,6,0,6,3,5,3,6,0,5,3,6
    .byte   3,6,0,6,3,5,0,5,0,6,3,5,0,5,0,6,3,6,0,6,3,6,0,6,0,6,3,6,3,6

    .align  7

@: 8PSK, short frame, FEC 56, no pilots
plheader_8psk_s56:
ph8s56:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,6,0,6
    .byte   0,6,0,5,3,6,0,5,0,6,3,6,3,6,0,6,3,5,0,6,0,6,3,5,3,6,0,5,0,5
    .byte   0,5,3,5,0,6,3,6,3,5,0,6,3,6,3,5,0,5,3,5,0,5,3,5,3,5,0,5,0,5

    .align  7

@: 8PSK, short frame, FEC 89, no pilots
plheader_8psk_s89:
ph8s89:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,6,3,5
    .byte   3,5,0,5,0,5,0,5,0,6,0,5,0,5,0,6,3,5,3,5,0,6,0,6,0,5,0,5,3,6
    .byte   0,5,3,5,3,5,3,6,0,6,3,5,3,6,3,5,3,6,0,6,0,5,0,6,3,5,0,5,3,6

    .align  7

@: 8PSK, short frame, FEC 35, pilots
plheader_8psk_s35_pilots:
ph8s35p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,5,0,5
    .byte   0,5,0,6,3,5,0,6,0,5,3,5,0,6,3,6,0,5,3,6,3,6,0,5,0,6,3,5,3,5
    .byte   3,5,0,5,3,6,0,6,0,5,3,6,0,6,3,6,0,6,3,6,0,6,3,6,3,6,0,6,0,6

    .align  7

@: 8PSK, short frame, FEC 23, pilots
plheader_8psk_s23_pilots:
ph8s23p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,5,0,5
    .byte   0,5,0,6,3,5,0,6,0,5,3,5,0,6,3,6,0,5,3,6,3,6,0,5,0,6,3,5,0,6
    .byte   0,6,3,6,0,5,3,5,3,6,0,5,3,5,0,5,3,5,0,5,3,5,0,5,0,5,3,5,3,5

    .align  7

@: 8PSK, short frame, FEC 34, pilots
plheader_8psk_s34_pilots:
ph8s34p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,5,0,5
    .byte   0,5,0,6,3,5,0,6,0,5,3,5,3,5,0,5,3,6,0,5,0,5,3,6,3,5,0,6,3,5
    .byte   3,5,0,5,3,6,0,6,0,5,3,6,0,6,0,5,3,5,0,5,3,5,0,5,0,5,3,5,3,5

    .align  7

@: 8PSK, short frame, FEC 56, pilots
plheader_8psk_s56_pilots:
ph8s56p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,5,0,5
    .byte   0,5,0,6,3,5,0,6,0,5,3,5,3,5,0,5,3,6,0,5,0,5,3,6,3,5,0,6,0,6
    .byte   0,6,3,6,0,5,3,5,3,6,0,5,3,5,3,6,0,6,3,6,0,6,3,6,3,6,0,6,0,6

    .align  7

@: 8PSK, short frame, FEC 89, pilots
plheader_8psk_s89_pilots:
ph8s89p:
    .byte   0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,3,5,3,6
    .byte   3,6,0,6,0,6,0,6,0,5,0,6,0,6,0,5,3,6,3,6,0,5,0,5,0,6,0,6,3,5
    .byte   0,6,3,6,3,6,3,5,0,5,3,6,3,5,3,6,3,5,0,5,0,6,0,5,3,6,0,6,3,5


    .align  7

@: 16APSK, normal frame, FEC 23, no pilots
plheader_16apsk_n23:
ph16n23:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,3,2,3,2,3,1,3,2,0,1,0,2,3,1,3,1,0,2,0,2,0,1,0,1,0,1
    .byte   3,2,0,2,0,2,0,1,3,1,0,2,0,1,3,1,3,2,0,2,0,1,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, normal frame, FEC 34, no pilots
plheader_16apsk_n34:
ph16n34:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,3,2,3,2,3,1,3,2,0,1,0,2,3,1,3,1,0,2,0,2,0,1,0,1,3,2
    .byte   0,1,3,1,3,1,3,2,0,2,3,1,3,2,0,2,0,1,3,1,3,2,3,1,0,2,3,2,0,1

    .align  7

@: 16APSK, normal frame, FEC 45, no pilots
plheader_16apsk_n45:
ph16n45:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,0,1,0,1,0,2,0,1,3,2,3,1,0,2,0,2,0,2,0,2,0,1,0,1,0,1
    .byte   3,2,0,2,0,2,3,2,0,2,3,1,3,2,0,2,0,1,3,1,3,2,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, normal frame, FEC 56, no pilots
plheader_16apsk_n56:
ph16n56:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,0,1,0,1,0,2,0,1,3,2,3,1,0,2,0,2,0,2,0,2,0,1,0,1,3,2
    .byte   0,1,3,1,3,1,0,1,3,1,0,2,0,1,3,1,3,2,0,2,0,1,3,1,0,2,3,2,0,1

    .align  7

@: 16APSK, normal frame, FEC 89, no pilots
plheader_16apsk_n89:
ph16n89:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,0,1,0,1,0,2,0,1,0,1,0,2,3,1,3,1,3,1,3,1,3,2,3,2,0,1
    .byte   3,2,0,2,0,2,3,2,0,2,3,1,3,2,3,1,3,2,0,2,0,1,3,1,0,2,3,2,0,1

    .align  7

@: 16APSK, normal frame, FEC 910, no pilots
plheader_16apsk_n910:
ph16n910:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,0,2
    .byte   0,2,3,2,0,1,0,1,0,2,0,1,0,1,0,2,3,1,3,1,3,1,3,1,3,2,3,2,3,2
    .byte   0,1,3,1,3,1,0,1,3,1,0,2,0,1,0,2,0,1,3,1,3,2,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, normal frame, FEC 23, pilots
plheader_16apsk_n23_pilots:
ph16n23p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,3,1,3,1,3,2,3,1,0,2,0,1,3,2,3,2,0,1,0,1,0,2,0,2,0,2
    .byte   3,1,0,1,0,1,0,2,3,2,0,1,0,2,3,2,3,1,0,1,0,2,0,1,3,2,0,2,3,1

    .align  7

@: 16APSK, normal frame, FEC 34, pilots
plheader_16apsk_n34_pilots:
ph16n34p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,3,1,3,1,3,2,3,1,0,2,0,1,3,2,3,2,0,1,0,1,0,2,0,2,3,1
    .byte   0,2,3,2,3,2,3,1,0,1,3,2,3,1,0,1,0,2,3,2,3,1,3,2,0,1,3,1,0,2

    .align  7

@: 16APSK, normal frame, FEC 45, pilots
plheader_16apsk_n45_pilots:
ph16n45p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,0,2,0,2,0,1,0,2,3,1,3,2,0,1,0,1,0,1,0,1,0,2,0,2,0,2
    .byte   3,1,0,1,0,1,3,1,0,1,3,2,3,1,0,1,0,2,3,2,3,1,0,1,3,2,0,2,3,1

    .align  7

@: 16APSK, normal frame, FEC 56, pilots
plheader_16apsk_n56_pilots:
ph16n56p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,0,2,0,2,0,1,0,2,3,1,3,2,0,1,0,1,0,1,0,1,0,2,0,2,3,1
    .byte   0,2,3,2,3,2,0,2,3,2,0,1,0,2,3,2,3,1,0,1,0,2,3,2,0,1,3,1,0,2

    .align  7

@: 16APSK, normal frame, FEC 89, pilots
plheader_16apsk_n89_pilots:
ph16n89p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,0,2,0,2,0,1,0,2,0,2,0,1,3,2,3,2,3,2,3,2,3,1,3,1,0,2
    .byte   3,1,0,1,0,1,3,1,0,1,3,2,3,1,3,2,3,1,0,1,0,2,3,2,0,1,3,1,0,2

    .align  7

@: 16APSK, normal frame, FEC 910, pilots
plheader_16apsk_n910_pilots:
ph16n910p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,2,0,1
    .byte   0,1,3,1,0,2,0,2,0,1,0,2,0,2,0,1,3,2,3,2,3,2,3,2,3,1,3,1,3,1
    .byte   0,2,3,2,3,2,0,2,3,2,0,1,0,2,0,1,0,2,3,2,3,1,0,1,3,2,0,2,3,1

    .align  7

@: 16APSK, short frame, FEC 23, no pilots
plheader_16apsk_s23:
ph16s23:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,3,1
    .byte   3,1,0,1,0,1,0,1,0,2,0,1,3,2,3,1,0,2,0,2,3,1,3,1,3,2,3,2,3,2
    .byte   0,1,3,1,3,1,3,2,0,2,3,1,3,2,0,2,0,1,3,1,3,2,3,1,0,2,3,2,0,1

    .align  7

@: 16APSK, short frame, FEC 34, no pilots
plheader_16apsk_s34:
ph16s34:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,3,1
    .byte   3,1,0,1,0,1,0,1,0,2,0,1,3,2,3,1,0,2,0,2,3,1,3,1,3,2,3,2,0,1
    .byte   3,2,0,2,0,2,0,1,3,1,0,2,0,1,3,1,3,2,0,2,0,1,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, short frame, FEC 45, no pilots
plheader_16apsk_s45:
ph16s45:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,3,1
    .byte   3,1,0,1,3,2,3,2,3,1,3,2,0,1,0,2,3,1,3,1,3,1,3,1,3,2,3,2,3,2
    .byte   0,1,3,1,3,1,0,1,3,1,0,2,0,1,3,1,3,2,0,2,0,1,3,1,0,2,3,2,0,1

    .align  7

@: 16APSK, short frame, FEC 56, no pilots
plheader_16apsk_s56:
ph16s56:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,3,1
    .byte   3,1,0,1,3,2,3,2,3,1,3,2,0,1,0,2,3,1,3,1,3,1,3,1,3,2,3,2,0,1
    .byte   3,2,0,2,0,2,3,2,0,2,3,1,3,2,0,2,0,1,3,1,3,2,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, short frame, FEC 89, no pilots
plheader_16apsk_s89:
ph16s89:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,2,3,1
    .byte   3,1,0,1,3,2,3,2,3,1,3,2,3,2,3,1,0,2,0,2,0,2,0,2,0,1,0,1,3,2
    .byte   0,1,3,1,3,1,0,1,3,1,0,2,0,1,0,2,0,1,3,1,3,2,0,2,3,1,0,1,3,2

    .align  7

@: 16APSK, short frame, FEC 23, pilots
plheader_16apsk_s23_pilots:
ph16s23p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,3,2
    .byte   3,2,0,2,0,2,0,2,0,1,0,2,3,1,3,2,0,1,0,1,3,2,3,2,3,1,3,1,3,1
    .byte   0,2,3,2,3,2,3,1,0,1,3,2,3,1,0,1,0,2,3,2,3,1,3,2,0,1,3,1,0,2

    .align  7

@: 16APSK, short frame, FEC 34, pilots
plheader_16apsk_s34_pilots:
ph16s34p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,3,2
    .byte   3,2,0,2,0,2,0,2,0,1,0,2,3,1,3,2,0,1,0,1,3,2,3,2,3,1,3,1,0,2
    .byte   3,1,0,1,0,1,0,2,3,2,0,1,0,2,3,2,3,1,0,1,0,2,0,1,3,2,0,2,3,1

    .align  7

@: 16APSK, short frame, FEC 45, pilots
plheader_16apsk_s45_pilots:
ph16s45p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,3,2
    .byte   3,2,0,2,3,1,3,1,3,2,3,1,0,2,0,1,3,2,3,2,3,2,3,2,3,1,3,1,3,1
    .byte   0,2,3,2,3,2,0,2,3,2,0,1,0,2,3,2,3,1,0,1,0,2,3,2,0,1,3,1,0,2

    .align  7

@: 16APSK, short frame, FEC 56, pilots
plheader_16apsk_s56_pilots:
ph16s56p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,3,2
    .byte   3,2,0,2,3,1,3,1,3,2,3,1,0,2,0,1,3,2,3,2,3,2,3,2,3,1,3,1,0,2
    .byte   3,1,0,1,0,1,3,1,0,1,3,2,3,1,0,1,0,2,3,2,3,1,0,1,3,2,0,2,3,1

    .align  7

@: 16APSK, short frame, FEC 89, pilots
plheader_16apsk_s89_pilots:
ph16s89p:
    .byte   0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,3,1,3,2
    .byte   3,2,0,2,3,1,3,1,3,2,3,1,3,1,3,2,0,1,0,1,0,1,0,1,0,2,0,2,3,1
    .byte   0,2,3,2,3,2,0,2,3,2,0,1,0,2,0,1,0,2,3,2,3,1,0,1,3,2,0,2,3,1


    .align  7

@: 32APSK, normal frame, FEC 34, no pilots
plheader_32apsk_n34:
ph32n34:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,25,12
    .byte   31,10,25,10,31,12,31,12,25,12,25,10,31,12,31,10,31,10,31,10,31,10,31,10,25,10,25,10,25,10
    .byte   31,12,31,10,31,10,25,10,31,10,31,10,31,12,25,12,25,10,25,12,25,10,31,10,25,12,25,10,31,12

    .align  7

@: 32APSK, normal frame, FEC 45, no pilots
plheader_32apsk_n45:
ph32n45:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,25,12
    .byte   31,10,25,10,31,12,31,12,25,12,25,10,31,12,31,10,31,10,31,10,31,10,31,10,25,10,25,10,31,12
    .byte   25,10,25,12,25,12,31,12,25,12,25,12,25,10,31,10,31,12,31,10,31,12,25,12,31,10,31,12,25,10

    .align  7

@: 32APSK, normal frame, FEC 56, no pilots
plheader_32apsk_n56:
ph32n56:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,25,12
    .byte   31,10,25,10,31,12,31,12,25,12,25,10,25,10,25,12,25,12,25,12,25,12,25,12,31,12,31,12,25,10
    .byte   31,12,31,10,31,10,25,10,31,10,31,10,31,12,31,10,31,12,31,10,31,12,25,12,31,10,31,12,25,10

    .align  7

@: 32APSK, normal frame, FEC 89, no pilots
plheader_32apsk_n89:
ph32n89:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,25,12
    .byte   31,10,25,10,31,12,31,12,25,12,25,10,25,10,25,12,25,12,25,12,25,12,25,12,31,12,31,12,31,12
    .byte   25,10,25,12,25,12,31,12,25,12,25,12,25,10,25,12,25,10,25,12,25,10,31,10,25,12,25,10,31,12

    .align  7

@: 32APSK, normal frame, FEC 910, no pilots
plheader_32apsk_n910:
ph32n910:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,25,12
    .byte   31,10,25,10,25,10,25,10,31,10,31,12,31,12,31,10,31,10,31,10,25,12,25,12,31,12,31,12,25,10
    .byte   31,12,31,10,31,10,31,12,25,12,25,12,25,10,25,12,25,10,25,12,25,10,25,12,31,10,31,12,25,10

    .align  7

@: 32APSK, normal frame, FEC 34, pilots
plheader_32apsk_n34_pilots:
ph32n34p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,12,25,10
    .byte   31,12,25,12,31,10,31,10,25,10,25,12,31,10,31,12,31,12,31,12,31,12,31,12,25,12,25,12,25,12
    .byte   31,10,31,12,31,12,25,12,31,12,31,12,31,10,25,10,25,12,25,10,25,12,31,12,25,10,25,12,31,10

    .align  7

@: 32APSK, normal frame, FEC 45, pilots
plheader_32apsk_n45_pilots:
ph32n45p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,12,25,10
    .byte   31,12,25,12,31,10,31,10,25,10,25,12,31,10,31,12,31,12,31,12,31,12,31,12,25,12,25,12,31,10
    .byte   25,12,25,10,25,10,31,10,25,10,25,10,25,12,31,12,31,10,31,12,31,10,25,10,31,12,31,10,25,12

    .align  7

@: 32APSK, normal frame, FEC 56, pilots
plheader_32apsk_n56_pilots:
ph32n56p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,12,25,10
    .byte   31,12,25,12,31,10,31,10,25,10,25,12,25,12,25,10,25,10,25,10,25,10,25,10,31,10,31,10,25,12
    .byte   31,10,31,12,31,12,25,12,31,12,31,12,31,10,31,12,31,10,31,12,31,10,25,10,31,12,31,10,25,12

    .align  7

@: 32APSK, normal frame, FEC 89, pilots
plheader_32apsk_n89_pilots:
ph32n89p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,12,25,10
    .byte   31,12,25,12,31,10,31,10,25,10,25,12,25,12,25,10,25,10,25,10,25,10,25,10,31,10,31,10,31,10
    .byte   25,12,25,10,25,10,31,10,25,10,25,10,25,12,25,10,25,12,25,10,25,12,31,12,25,10,25,12,31,10

    .align  7

@: 32APSK, normal frame, FEC 910, pilots
plheader_32apsk_n910_pilots:
ph32n910p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,12,25,10
    .byte   31,12,25,12,25,12,25,12,31,12,31,10,31,10,31,12,31,12,31,12,25,10,25,10,31,10,31,10,25,12
    .byte   31,10,31,12,31,12,31,10,25,10,25,10,25,12,25,10,25,12,25,10,25,12,25,10,31,12,31,10,25,12

    .align  7

@: 32APSK, short frame, FEC 34, no pilots
plheader_32apsk_s34:
ph32s34:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,12,31,10
    .byte   25,12,31,12,25,10,25,10,31,10,31,12,25,10,25,12,25,12,25,12,25,12,25,12,31,12,31,12,31,12
    .byte   25,10,25,12,25,12,31,12,25,12,25,12,25,10,31,10,31,12,31,10,31,12,25,12,31,10,31,12,25,10

    .align  7

@: 32APSK, short frame, FEC 45, no pilots
plheader_32apsk_s45:
ph32s45:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,12,31,10
    .byte   25,12,31,12,25,10,25,10,31,10,31,12,25,10,25,12,25,12,25,12,25,12,25,12,31,12,31,12,25,10
    .byte   31,12,31,10,31,10,25,10,31,10,31,10,31,12,25,12,25,10,25,12,25,10,31,10,25,12,25,10,31,12

    .align  7

@: 32APSK, short frame, FEC 56, no pilots
plheader_32apsk_s56:
ph32s56:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,12,31,10
    .byte   25,12,31,12,25,10,25,10,31,10,31,12,31,12,31,10,31,10,31,10,31,10,31,10,25,10,25,10,31,12
    .byte   25,10,25,12,25,12,31,12,25,12,25,12,25,10,25,12,25,10,25,12,25,10,31,10,25,12,25,10,31,12

    .align  7

@: 32APSK, short frame, FEC 89, no pilots
plheader_32apsk_s89:
ph32s89:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,12,31,10
    .byte   25,12,31,12,25,10,25,10,31,10,31,12,31,12,31,10,31,10,31,10,31,10,31,10,25,10,25,10,25,10
    .byte   31,12,31,10,31,10,25,10,31,10,31,10,31,12,31,10,31,12,31,10,31,12,25,12,31,10,31,12,25,10

    .align  7

@: 32APSK, short frame, FEC 34, pilots
plheader_32apsk_s34_pilots:
ph32s34p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,10,31,12
    .byte   25,10,31,10,25,12,25,12,31,12,31,10,25,12,25,10,25,10,25,10,25,10,25,10,31,10,31,10,31,10
    .byte   25,12,25,10,25,10,31,10,25,10,25,10,25,12,31,12,31,10,31,12,31,10,25,10,31,12,31,10,25,12

    .align  7

@: 32APSK, short frame, FEC 45, pilots
plheader_32apsk_s45_pilots:
ph32s45p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,10,31,12
    .byte   25,10,31,10,25,12,25,12,31,12,31,10,25,12,25,10,25,10,25,10,25,10,25,10,31,10,31,10,25,12
    .byte   31,10,31,12,31,12,25,12,31,12,31,12,31,10,25,10,25,12,25,10,25,12,31,12,25,10,25,12,31,10

    .align  7

@: 32APSK, short frame, FEC 56, pilots
plheader_32apsk_s56_pilots:
ph32s56p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,10,31,12
    .byte   25,10,31,10,25,12,25,12,31,12,31,10,31,10,31,12,31,12,31,12,31,12,31,12,25,12,25,12,31,10
    .byte   25,12,25,10,25,10,31,10,25,10,25,10,25,12,25,10,25,12,25,10,25,12,31,12,25,10,25,12,31,10

    .align  7

@: 32APSK, short frame, FEC 89, pilots
plheader_32apsk_s89_pilots:
ph32s89p:
    .byte   0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,31,10,31,12
    .byte   25,10,31,10,25,12,25,12,31,12,31,10,31,10,31,12,31,12,31,12,31,12,31,12,25,12,25,12,25,12
    .byte   31,10,31,12,31,12,25,12,31,12,31,12,31,10,31,12,31,10,31,12,31,10,25,10,31,12,31,10,25,12

	
	.align	8					@: 256 byte boundary

crc8_table: 
	.byte	0x00,0xD5,0x7F,0xAA,0xFE,0x2B,0x81,0x54,0x29,0xFC,0x56,0x83,0xD7,0x02,0xA8,0x7D
	.byte	0x52,0x87,0x2D,0xF8,0xAC,0x79,0xD3,0x06,0x7B,0xAE,0x04,0xD1,0x85,0x50,0xFA,0x2F
	.byte	0xA4,0x71,0xDB,0x0E,0x5A,0x8F,0x25,0xF0,0x8D,0x58,0xF2,0x27,0x73,0xA6,0x0C,0xD9
	.byte	0xF6,0x23,0x89,0x5C,0x08,0xDD,0x77,0xA2,0xDF,0x0A,0xA0,0x75,0x21,0xF4,0x5E,0x8B
	.byte	0x9D,0x48,0xE2,0x37,0x63,0xB6,0x1C,0xC9,0xB4,0x61,0xCB,0x1E,0x4A,0x9F,0x35,0xE0
	.byte	0xCF,0x1A,0xB0,0x65,0x31,0xE4,0x4E,0x9B,0xE6,0x33,0x99,0x4C,0x18,0xCD,0x67,0xB2
	.byte	0x39,0xEC,0x46,0x93,0xC7,0x12,0xB8,0x6D,0x10,0xC5,0x6F,0xBA,0xEE,0x3B,0x91,0x44
	.byte	0x6B,0xBE,0x14,0xC1,0x95,0x40,0xEA,0x3F,0x42,0x97,0x3D,0xE8,0xBC,0x69,0xC3,0x16
	.byte	0xEF,0x3A,0x90,0x45,0x11,0xC4,0x6E,0xBB,0xC6,0x13,0xB9,0x6C,0x38,0xED,0x47,0x92
	.byte	0xBD,0x68,0xC2,0x17,0x43,0x96,0x3C,0xE9,0x94,0x41,0xEB,0x3E,0x6A,0xBF,0x15,0xC0
	.byte	0x4B,0x9E,0x34,0xE1,0xB5,0x60,0xCA,0x1F,0x62,0xB7,0x1D,0xC8,0x9C,0x49,0xE3,0x36
	.byte	0x19,0xCC,0x66,0xB3,0xE7,0x32,0x98,0x4D,0x30,0xE5,0x4F,0x9A,0xCE,0x1B,0xB1,0x64
	.byte	0x72,0xA7,0x0D,0xD8,0x8C,0x59,0xF3,0x26,0x5B,0x8E,0x24,0xF1,0xA5,0x70,0xDA,0x0F
	.byte	0x20,0xF5,0x5F,0x8A,0xDE,0x0B,0xA1,0x74,0x09,0xDC,0x76,0xA3,0xF7,0x22,0x88,0x5D
	.byte	0xD6,0x03,0xA9,0x7C,0x28,0xFD,0x57,0x82,0xFF,0x2A,0x80,0x55,0x01,0xD4,0x7E,0xAB
	.byte	0x84,0x51,0xFB,0x2E,0x7A,0xAF,0x05,0xD0,0xAD,0x78,0xD2,0x07,0x53,0x86,0x2C,0xF9

	
   .align  8				   @: 256 byte boundary
	
bbframe_scramble_normal_table:	
	.word	0x3408F603,0x93A3B830,0x73B768C9,0xF5AA29B3,0x88043CFE,0xA15A301B,0x9AC0C4DF,0xC20B5F83	   @:  0x0000
	.word	0x2B938C38,0x1B7EFB6A,0xDC195A04,0xB4FAC954,0x9141B81F,0x5E1F6585,0x9D88C543,0xA7AB4E33	   @:  0x0020
	.word	0xE014D0F9,0x861D417A,0x7DAE154D,0x295E0CE5,0x3B9AF4C4,0x58CB9B5C,0xE998D3BB,0x30ED7752	   @:  0x0040
	.word	0xC767A16E,0x68E39350,0x25BB714B,0xCF5EDD9A,0xC397A0C6,0x3A238B70,0x47BF9ECA,0x66099183	   @:  0x0060
	.word	0xFBB35437,0x54F019A8,0x12C4F821,0x63516F98,0xB15348E7,0xD975A4E9,0xF78AD63C,0xAF84323E	   @:  0x0080
	.word	0x4D58E21B,0xEAE5ACD1,0x0CC97D5C,0xF9B42BB6,0x7D9C15BA,0x21B60F49,0x9DBAC5B4,0xAF434D9F	   @:  0x00A0
	.word	0x4634E189,0x719597B9,0xD202277F,0x6826EC0E,0x2EFF72D5,0x580EE402,0xE2DCD025,0xA7BD4ECA	   @:  0x00C0
	.word	0xE62CD18D,0xF57D56EA,0x84283E0C,0x5C2A1AF3,0xBC0CCAFD,0x32F9882B,0xE977AC16,0x37A17630	   @:  0x00E0
	.word	0xA397B0C6,0xBA24CB71,0x46D99EDB,0x76F196D7,0xBAD23427,0x45619EEF,0x41919F47,0x13518767	   @:  0x0100
	.word	0x715568E6,0xD80224FF,0xE026D00E,0x8EF542D6,0xDB8E243D,0xDED6DA26,0x9436C6F6,0x19B37BB7	   @:  0x0120
	.word	0xFCFD55AA,0x3028080C,0xCC23A2F0,0xFFB3AAC8,0x04F001A8,0x52C01820,0x6204EF81,0xA9574C19	   @:  0x0140
	.word	0x3824F4F1,0x6ED392D8,0x557B66EB,0x0558FE1B,0x4AE01CD0,0x8D85BD41,0xE54E2E1D,0xCCD55DA6	   @:  0x0160
	.word	0xFC0BAAFC,0x33900838,0xFB43AB60,0x56301988,0x30C4F7A1,0xCB53A398,0x9173B8E8,0x56F76629	   @:  0x0180
	.word	0x3BA8F433,0x502398F0,0x4FB8E2CB,0xC765A191,0x68CB935C,0x299B73BB,0x30DEF75A,0xCF9BA2C4	   @:  0x01A0
	.word	0xC8D3A358,0xAD73B2E8,0x66F4EE29,0xFB975439,0x5A201B70,0xC784DEC1,0x6D5F921A,0x6B8B6CC3	   @:  0x01C0
	.word	0x1F9B7A3B,0x88DD435A,0xAFAE32CD,0x4150E0E7,0x194584E1,0xFF45559E,0x0748019C,0x65A011B0	   @:  0x01E0
	.word	0xCB875CC1,0x9D63BA10,0xA1B74F49,0x9DA4C5B1,0xAADB4CDB,0x06D4FED9,0x741016F8,0x97463961	   @:  0x0200
	.word	0x27737197,0xEEFED22A,0x58156406,0xE600D17F,0xF80D5402,0x62E8102C,0xAE274D71,0x56E4E6D1	   @:  0x0220
	.word	0x3CD4F559,0x3C138AF8,0x377F896A,0xAC0FB202,0x72C4E821,0xE3562F99,0xB03548F6,0xC98DA3BD	   @:  0x0240
	.word	0xB6EBB62C,0xBE15B579,0x1E0D857D,0x9AE5442E,0xCCCF5D5D,0xF8C3ABA0,0x6A301388,0x00C77FA1	   @:  0x0260
	.word	0x0B6C0392,0x9B703B68,0xDECB5A23,0x9192C7B8,0x5363676F,0x79B8EB4B,0x7F661591,0x08FE0355	   @:  0x0280
	.word	0xA0183004,0x84E8C153,0x562A1973,0x340CF6FD,0x92F3B828,0x6AF76C29,0x0BAB7C33,0x901C38FA	   @:  0x02A0
	.word	0x45BB614B,0x4F599D9B,0xC2F1A0D7,0x2ADB8C24,0x06DEFEDA,0x779816C4,0xA8E63351,0x24F0F157	   @:  0x02C0
	.word	0xD2C2D820,0x6226EF8E,0xA6FF4ED5,0xF804D401,0x615C101A,0x9BB744C9,0xD5A759B1,0x0AE2FCD0	   @:  0x02E0
	.word	0x8DA83D4C,0xE82A2CF3,0x2C0572FE,0x7146E81E,0xDF7E2595,0x8C16C206,0xF6322977,0xB0E437AE	   @:  0x0300
	.word	0xC4D9A15B,0x5EFB9AD4,0x9958C41B,0xFAEB54D3,0x4E101D78,0xDF45A561,0x874AC19C,0x658211BF	   @:  0x0320
	.word	0xC42F5E0D,0x5D439AE0,0xAE38CD8B,0x5368E793,0x7A24EB71,0x46D61ED9,0x743D96F5,0x9A223B8F	   @:  0x0340
	.word	0xC7A35ECF,0x63B390C8,0xB4FB49AB,0x9155B819,0x580F64FD,0xE2C8D023,0xA1AD4FB2,0x996CC4ED	   @:  0x0360
	.word	0xF37B576B,0xFD502A18,0x294C0CE2,0x3CF2F5A8,0x32EB882C,0xEE1FAD7A,0x5D816540,0xA410CE07	   @:  0x0380
	.word	0xD748D963,0x25AEF1B2,0xC95ADCE4,0xBAC7B4DE,0x43659F91,0x38C18B5F,0x6A179386,0x0E2B7D73	   @:  0x03A0
	.word	0xD41C26FA,0x15BEF94A,0x0E197D84,0xDCF42556,0xB39EC83A,0xF991AB47,0x73581764,0xF2E628D1	   @:  0x03C0
	.word	0xECF42D56,0x739D683A,0xF9A22B4F,0x7BA414CE,0x52D618D9,0x643CEEF5,0xDA375B89,0xC1A2DFB0	   @:  0x03E0
	.word	0x1BA784CE,0xD2ED58D2,0x6F6AED6C,0x4A0F637D,0x8AC9BC23,0x81BE3FB5,0x1E120587,0x9F69456C	   @:  0x0400
	.word	0x8A3F4375,0x82063F81,0x29720C17,0x36EAF62C,0xBE0BB57C,0x1B958439,0xDA055B7E,0xC94ADC1C	   @:  0x0420
	.word	0xBD87B5BE,0x25658E11,0xC0C6DF5E,0x0B778396,0x9FAC3A32,0x817B40EB,0x15560619,0x08397CF4	   @:  0x0440
	.word	0xAB743396,0x1F98FA3B,0x88E14350,0xA59E3145,0xC190DF47,0x134F8762,0x74CD69A2,0x98E23BAF	   @:  0x0460
	.word	0xE5A3514F,0xCBB15CC8,0x94DBB9A4,0x1ED77AD9,0x942D46F2,0x1D6F7AED,0xA34D4F62,0xB4ECC9AD	   @:  0x0480
	.word	0x9779B96B,0x2D7F7215,0x640EEE02,0xD2DF5825,0x6782EEC0,0xEC2F520D,0x7D416AE0,0x2E120D87	   @:  0x04A0
	.word	0x5F6AE56C,0x8A0CC37D,0x8AFA3C2B,0x89423C1F,0xBE22358F,0x17A186CF,0x239570C6,0xBA06CB7E	   @:  0x04C0
	.word	0x49719C17,0xB6D1B627,0xB55DB6E5,0x8BADBCCD,0x916E38ED,0x53536767,0x7178E8EB,0xD5662611	   @:  0x04E0
	.word	0x00F6FF56,0x03B80034,0x37600990,0xA983B340,0x3434F609,0x9993BBB8,0xF3775769,0xFFA02A30	   @:  0x0500
	.word	0x038C00C2,0x3EF00A28,0x1AC38420,0xC23D5F8A,0x222B8F8C,0xA41ECEFA,0xD590D947,0x034EFF62	   @:  0x0520
	.word	0x34D809A4,0x9EE3BAD0,0x9DB74549,0xADA74DB1,0x6AE4ECD1,0x0CD77D59,0xFC2C2AF2,0x3D7C0AEA	   @:  0x0540
	.word	0x24338E08,0xD8FEDBAA,0xE016D006,0x86354176,0x718E17BD,0xD6DE2625,0x3796F6C6,0xAA3BB374	   @:  0x0560
	.word	0x0354FF99,0x301008F8,0xC743A160,0x66339188,0xF0FB57AB,0xC1502018,0x194F84E2,0xFCCD55A2	   @:  0x0580
	.word	0x38E80BAC,0x66239170,0xF7BB56CB,0xA7503198,0xE148D0E3,0x9DAD45B2,0xA96F4CED,0x3344F761	   @:  0x05A0
	.word	0xF753A998,0xA17030E8,0x96C8C623,0x31AB77B3,0xD81FA4FA,0xE582D140,0xC4255E0E,0x5ECB9ADC	   @:  0x05C0
	.word	0x9198C7BB,0x50EB6753,0x4618E17B,0x7CE59551,0x34C2095F,0x9A2BBB8C,0xC4175EF9,0x56239970	   @:  0x05E0
	.word	0x37B8F6CB,0xA763B190,0xE9B4D349,0x3D9D75BA,0x21A78F4E,0x9AEEC4D2,0xCF535D67,0xC173A0E8	   @:  0x0600
	.word	0x16F38628,0x3AFD742A,0x48279C0E,0xAEE9B2D3,0x5E3CE575,0x9234C789,0x619B6FBB,0x90DB475B	   @:  0x0620
	.word	0x4ED762D9,0xD429A6F3,0x1C3AFAF4,0xBB494B9C,0x55BD99B5,0x0E20FD8F,0xD78026C0,0x2C0EF202	   @:  0x0640
	.word	0x72DAE824,0xE6CE2EDD,0xF0D557A6,0xCC0822FC,0xF3AFA832,0xF14028E0,0xDE0C2582,0x9AFEC42A	   @:  0x0660
	.word	0xC8135C07,0xA773B168,0xEEF4D229,0x5B9D643A,0xD9A0DB4F,0xFB8ED4C2,0x5ED41A26,0x9414C6F9	   @:  0x0680
	.word	0x161B797B,0x3CDD755A,0x3FA78ACE,0x02EF80D2,0x2F4C0D62,0x44F2E1A8,0x52ED982D,0x6F60ED6F	   @:  0x06A0
	.word	0x49876341,0xB569B613,0x823DBF75,0x222E0F8D,0xA55ACEE4,0xCAC0DCDF,0x820FBF82,0x2AC60C21	   @:  0x06C0
	.word	0x037AFF94,0x3D480A1C,0x2DA38DB0,0x6BBEECCA,0x161F7985,0x3D8D7542,0x26E78E2E,0xFCEED552	   @:  0x06E0
	.word	0x37540966,0xA013B0F8,0x8774C169,0x6F9A123B,0x48CF635D,0xA8C9B3A3,0x29BCF3B5,0x3E32F588	   @:  0x0700
	.word	0x10EB87AC,0x461D617A,0x7DA1954F,0x2B920CC7,0x1B6AFB6C,0xDA095B7C,0xCBBADC34,0x9747B99E	   @:  0x0720
	.word	0x27677191,0xE8EED352,0x27557166,0xE006D0FE,0x81754016,0x178E063D,0x2ED97224,0x56F6E6D6	   @:  0x0740
	.word	0x3BBCF435,0x56339988,0x30F8F7AB,0xC163A010,0x11B38748,0x5CFD65AA,0xB020C80F,0xCF89A2C3	   @:  0x0760
	.word	0xCFBBA234,0xC753A198,0x617390E8,0x96FB462B,0x39577419,0x782F94F2,0x6D4A12E3,0x6D8F6DBD	   @:  0x0780
	.word	0x66CB6E23,0xF19B57BB,0xD0D02758,0x4D4EE2E2,0xECDDADA5,0x7FA96ACC,0x003200F7,0x08E803AC	   @:  0x07A0
	.word	0xA6203170,0xF788D6C3,0xAFAC3232,0x4178E0EB,0x15658611,0x00C57F5E,0x0B44039E,0x97503998	   @:  0x07C0
	.word	0x214B70E3,0x9D9EC5BA,0xA1934F47,0x9374C769,0x7F9B6A3B,0x08DA035B,0xAEC832DC,0x51A8E7B3	   @:  0x07E0
	.word	0x5824E4F1,0xEED4D2D9,0x541D66FA,0x15A0F94F,0x0B817CC0,0x9C143A06,0xB61B497B,0xBCD5B559	   @:  0x0800
	.word	0x3C0D8AFD,0x32E7882E,0xECEFAD52,0x77416960,0xA6123187,0xFF60D56F,0x098C0342,0xB6F03628	   @:  0x0820
	.word	0xBAC9B423,0x41BD9FB5,0x1E21858F,0x979546C6,0x2A0F737D,0x0ACEFC22,0x80D83FA4,0x0EEA02D3	   @:  0x0840
	.word	0xDE08257C,0x9BAEC432,0xD15358E7,0x5972E4E8,0xF6ECD62D,0xBF7C356A,0x0C39820B,0xFB742B96	   @:  0x0860
	.word	0x5F9C1A3A,0x89B4C349,0xBD9A35BB,0x20C18F5F,0x8A16C386,0x8E323D77,0xD0E227AF,0x45A6E14E	   @:  0x0880
	.word	0x4AFD9CD5,0x8821BC0F,0xAF9E32C5,0x4990E347,0xB345B761,0xF74DA99D,0xA4E831AC,0xD628D973	   @:  0x08A0
	.word	0x342EF6F2,0x9D5BBAE4,0xAAD74CD9,0x0424FEF1,0x5ED01AD8,0x9544C6E1,0x0F5B7D9B,0xC2DC20DA	   @:  0x08C0
	.word	0x27BF8ECA,0xE60ED182,0xFAD55426,0x44081EFC,0x53A59831,0x72C0E8DF,0xE2062F81,0xA9754C16	   @:  0x08E0
	.word	0x378CF63D,0xAEF3B228,0x5AF4E429,0xCB94DC39,0x9A1FBB7A,0xCD875D41,0xE563AE10,0xC1B15F48	   @:  0x0900
	.word	0x1CDB85A4,0xBEDD4ADA,0x17AD86CD,0x216570EE,0x90C6C75E,0x4B736397,0x9EF9BA2B,0x997F4415	   @:  0x0920
	.word	0xF4075601,0x91603810,0x518B6743,0x5798E63B,0x28E4F351,0x24D2F158,0xDD6ADAEC,0xA206CF7E	   @:  0x0940
	.word	0xA970CC17,0x36C8F623,0xB1A3B7B0,0xDBB5A4C9,0xD58AD9BC,0x0786FE3E,0x6D781214,0x65676E11	   @:  0x0960
	.word	0xC0EB5F53,0x06138178,0x7F7C156A,0x0C360209,0xF9B82BB4,0x7F6C1592,0x0B760369,0x9FB83A34	   @:  0x0980
	.word	0x876B4193,0x6A161379,0x0E3F7D75,0xD20C2782,0x6AFEEC2A,0x081F7C05,0xA58C3142,0xC6F8DE2B	   @:  0x09A0
	.word	0x796F9412,0x734A1763,0xF58E29BD,0x86D43E26,0x741A16FB,0x94CE395D,0x18D37BA7,0xED7D52EA	   @:  0x09C0
	.word	0x64296E0C,0xDC335AF7,0xB8F2CBA8,0x62E1902F,0xAD934D47,0x6374EF69,0xBF974A39,0x0A258371	   @:  0x09E0
	.word	0x86C43EDE,0x735A179B,0xF2CE28DD,0xE0D42FA6,0x8C1D42FA,0xF5AE294D,0x89543CE6,0xB81A34FB	   @:  0x0A00
	.word	0x64C1915F,0xDA135B87,0xCF72DD68,0xCEE7A22E,0xDCE3A550,0xB5B2C948,0x8CE1BDAF,0xF59E2945	   @:  0x0A20
	.word	0x81943F46,0x121A077B,0x6CC96D5C,0x79B36BB7,0x7CFA15AB,0x314E081D,0xDCDBA5A4,0xBED2CAD8	   @:  0x0A40
	.word	0x156186EF,0x01957F46,0x1204077E,0x69516C18,0x395374E7,0x797F94EA,0x740A1603,0x938E383D	   @:  0x0A60
	.word	0x7ED36A27,0x157A06EB,0x05497E1C,0x4DB41DB6,0xED95ADB9,0x62096F7C,0xABB34C37,0x14F4F9A9	   @:  0x0A80
	.word	0x13917838,0x7B556B66,0x500218FF,0x402CE00D,0x0D7582E9,0xE7842E3E,0xED5D521A,0x6BA96CCC	   @:  0x0AA0
	.word	0x103378F7,0x48FD63AA,0xA021B00F,0x8F9CC2C5,0xC9BA234B,0xBF47B59E,0x07658191,0x68C4135E	   @:  0x0AC0
	.word	0x2B577399,0x102EF8F2,0x4D5962E4,0xEAF1ACD7,0x0AD97C24,0x86F43ED6,0x7B9A143B,0x58CE1B5D	   @:  0x0AE0
	.word	0xE8DCD3A5,0x2FBD72CA,0x4626E18E,0x76FD96D5,0xB822340F,0x6FA192CF,0x439360C7,0x3B798B6B	   @:  0x0B00
	.word	0x5D779A16,0xA7A8CE33,0xE028D0F3,0x8C2D42F2,0xFD6E2AED,0x23540F66,0xB012C8F8,0xC761A16F	   @:  0x0B20
	.word	0x699B9344,0x30DB775B,0xCEDFA2DA,0xD783A6C0,0x2C32F208,0x78EAEBAC,0x660E117D,0xFADF5425	   @:  0x0B40
	.word	0x47801EC0,0x6C059201,0x7143681F,0xDE3A258B,0x9346C79E,0x77736997,0xAEFA322B,0x5940E41F	   @:  0x0B60
	.word	0xFE04D581,0x195C041A,0xFBB154C8,0x54D819A4,0x1EE4FAD1,0x9CD14558,0xBD5F4AE5,0x2B858CC1	   @:  0x0B80
	.word	0x1D46FA1E,0xAF794D94,0x4D7CE215,0xE435AE09,0xD9895BBC,0xF7BAD634,0xA744319E,0xE758D19B	   @:  0x0BA0
	.word	0xE2ED50D2,0xAF694D6C,0x4A3CE375,0x8235BF89,0x218E0FBD,0x96DAC624,0x36C376DF,0xB23FB78A	   @:  0x0BC0
	.word	0xE205AF81,0xA9494C1C,0x3DBCF5B5,0x2E338D88,0x50FEE7AA,0x401CE005,0x05B58149,0x4D841DBE	   @:  0x0BE0
	.word	0xE555AE19,0xC8095CFC,0xA3BBB034,0xB754C999,0xA019B0FB,0x84FCC155,0x503A180B,0x4B4CE39D	   @:  0x0C00
	.word	0x94F5B9A9,0x138F783D,0x7ECD6A22,0x10E207AF,0x45A9614C,0x48319CF7,0xA8D1B3A7,0x2D5CF2E5	   @:  0x0C20
	.word	0x6BB2ECC8,0x14EF79AD,0x174D7962,0x24E571AE,0xD4C6D95E,0x1B76FB96,0xDFB95A34,0x877AC194	   @:  0x0C40
	.word	0x6D42121F,0x6E2F6D8D,0x554B66E3,0x0D98FDBB,0xE0E02F50,0x858D4142,0x46EE1E2D,0x7F5D9565	   @:  0x0C60
	.word	0x03A200CF,0x33A808CC,0xF023A8F0,0xCFB022C8,0xC4CFA1A2,0x58C39BA0,0xEA38D38B,0x036D7F92	   @:  0x0C80
	.word	0x3B640B6E,0x58D39B58,0xED78D2EB,0x656D6E12,0xC3635F6F,0x39B38B48,0x7CFF95AA,0x300A0803	   @:  0x0CA0
	.word	0xC38BA03C,0x3F938A38,0x0B7F836A,0x9C0C3A02,0xB2FB482B,0xE955AC19,0x380974FC,0x63B79036	   @:  0x0CC0
	.word	0xB5AB49B3,0x8815BCF9,0xA60E317D,0xFAD0D427,0x454C1EE2,0x4CF59DA9,0xF381A83F,0xFC182A04	   @:  0x0CE0
	.word	0x34EC0952,0x9773B968,0x2EF77229,0x5BAEE432,0xD15CD8E5,0x5BBEE4CA,0xD61CD985,0x3DBEF54A	   @:  0x0D00
	.word	0x2E1B8D84,0x5CDEE55A,0xBF9CCAC5,0x09B9834B,0xBF743596,0x0F99823B,0xC8F42356,0xA39FB03A	   @:  0x0D20
	.word	0xB984CB41,0x7559961B,0x8AF23CD7,0x8AE23C2F,0x8DA23D4F,0xEBA22CCF,0x13A578CE,0x72C568DE	   @:  0x0D40
	.word	0xE3422F9F,0xB625498E,0xB6CDB6DD,0xB0EDB7AD,0xC76DA16D,0x6B6B936C,0x1A1B7B7B,0xCCDD5D5A	   @:  0x0D60
	.word	0xFFABAACC,0x001000F8,0x07400160,0x66001180,0xF8075401,0x61601010,0x91874741,0x55676611	   @:  0x0D80
	.word	0x00E8FF53,0x06200170,0x778016C0,0xAC063201,0x7170E817,0xD6C62621,0x3376F796,0xFFBBAA34	   @:  0x0DA0
	.word	0x07500198,0x614010E0,0x9E074581,0x99674411,0xF0E75751,0xC4E02150,0x558F9942,0x06C8FE23	   @:  0x0DC0
	.word	0x71A017B0,0xDB8624C1,0xDD76DA16,0xA7B6CE36,0xE5B0D1B7,0xCCCD5DA2,0xF8EBABAC,0x66101178	   @:  0x0DE0
	.word	0xFF475561,0x07600190,0x69801340,0x34077601,0x916FB812,0x53476761,0x7768E993,0xAA263371	   @:  0x0E00
	.word	0x06F0FED7,0x7AC01420,0x42061F81,0x297D8C15,0x3426F60E,0x9EFBBAD4,0x99574419,0xF82754F1	   @:  0x0E20
	.word	0x6EE012D0,0x5D876541,0xA568CE13,0xC228DF73,0x242F8EF2,0xDD4EDAE2,0xACD6CDA6,0x7C30EAF7	   @:  0x0E40
	.word	0x38C60BA1,0x6B7B9394,0x1D5B7A1B,0xAADD4CDA,0x07ACFECD,0x617010E8,0x96C74621,0x33677791	   @:  0x0E60
	.word	0xF8EFAB52,0x67401160,0xE6075181,0xF9615410,0x71981744,0xD0E62751,0x44F6E156,0x53BD9835	   @:  0x0E80
	.word	0x7620E98F,0xB78636C1,0xAD71B217,0x66DCEE25,0xF7B756C9,0xA5A031B0,0xCB88DCC3,0x9FAFBA32	   @:  0x0EA0
	.word	0x814740E1,0x1F660591,0x88F94354,0xA17E3015,0x9410C607,0x174B7963,0x259D71BA,0xC1A6DF4E	   @:  0x0EC0
	.word	0x1AF784D6,0xCBAD5C32,0x916BB8EC,0x52176779,0x6E28ED73,0x542766F1,0x1EE8FAD3,0x9E214570	   @:  0x0EE0
	.word	0x979F46C5,0x29877341,0x356EF612,0x835BBF64,0x32D608D9,0xE43BAEF4,0xDB515B98,0xD15AD8E4	   @:  0x0F00
	.word	0x5AC6E4DE,0xC37CDF95,0x3C3F8A0A,0x3A0F8B82,0x4ACF9C22,0x80C9BFA3,0x09BE03B5,0xBE183584	   @:  0x0F20
	.word	0x1CE98553,0xB6354976,0xB18DB7BD,0xD6EDA62D,0x3F6AF56C,0x0A0B837C,0x8B9C3C3A,0x99BA3B4B	   @:  0x0F40
	.word	0xFF43559F,0x06300188,0x70C017A0,0xCA062381,0x8977BC16,0xB7A63631,0xA2F1B0D7,0xAADCCC25	   @:  0x0F60
	.word	0x07B8FECB,0x67601190,0xE9875341,0x35617610,0x8197BF46,0x12260771,0x66F96ED4,0xF9735417	   @:  0x0F80
	.word	0x76F01628,0xBAC63421,0x43719F97,0x3ED18A27,0x155786E6,0x082D7CF2,0xAD6432EE,0x60D8EF5B	   @:  0x0FA0
	.word	0x8EE742D1,0xDCE62551,0xB4F6C956,0x93B1B837,0x74DF69A5,0x9F8A3AC3,0x8F83423F,0xCC362209	   @:  0x0FC0
	.word	0xF9B7ABB6,0x7DA015B0,0x2B860CC1,0x1D7AFA14,0xA5494E1C,0xCDBCDDB5,0xEE3FAD8A,0x52016780	   @:  0x0FE0
	.word	0x6810EC07,0x27477161,0xE76ED192,0xEB555366,0x100978FC,0x43B56036,0x358189BF,0x8417BE06	   @:  0x1000
	.word	0x56261971,0x36FCF6D5,0xB833B408,0x68F593A9,0x2383703F,0xBC3ECA0A,0x3A118B87,0x4F579D66	   @:  0x1020
	.word	0xC029A0F3,0x0C3B82F4,0xFB5C2B9A,0x53BC18CA,0x7634E989,0xB19637B9,0xD231A777,0x60DAEFA4	   @:  0x1040
	.word	0x8ECF42DD,0xD0C627A1,0x4B76E396,0x9FBDBA35,0x862F418D,0x754616E1,0x8F7E3D95,0xCC122207	   @:  0x1060
	.word	0xF767A96E,0xA8E03350,0x2588F143,0xC7A2DE30,0x63A790CE,0xB2EB48D3,0xEE15AD79,0x5E09657C	   @:  0x1080
	.word	0x9BB0C437,0xD4CB59A3,0x1992FBB8,0xF369576C,0xFA382B74,0x436C1F92,0x3B758B69,0x5F879A3E	   @:  0x10A0
	.word	0x8D68C213,0xE22A2F73,0xA4054EFE,0xD14CD81D,0x5CFEE5AA,0xB01CC805,0xC5B9A14B,0x4F7B9D94	   @:  0x10C0
	.word	0xCD59A21B,0xEAFBACD4,0x09517C18,0xB95434E6,0x781994FB,0x64F21157,0xD2EF582D,0x6F42ED60	   @:  0x10E0
	.word	0x462F618D,0x754996E3,0x8DB23DB7,0xECE22DAF,0x75A5694E,0x8AC23CDF,0x82223F8F,0x27A20ECF	   @:  0x1100
	.word	0xE3AAD0CC,0xB00548FE,0xC14DA01D,0x1CEB85AC,0xB61D497A,0xBDADB54D,0x296D8CED,0x3366F76E	   @:  0x1120
	.word	0xF8FBAB54,0x61501018,0x994744E1,0xFF675591,0x08E00350,0xA5803140,0xC408DE03,0x53AF9832	   @:  0x1140
	.word	0x7148E8E3,0xDDA625B1,0xAAF6CCD6,0x0BB0FC37,0x94C039A0,0x1A0B7B83,0xCB9D5C3A,0x99ABBB4C	   @:  0x1160
	.word	0xF81754F9,0x66201170,0xF78756C1,0xAD603210,0x6188EF43,0x97A74631,0x22E770D1,0xACEECD52	   @:  0x1180
	.word	0x7750E967,0xA14630E1,0x9F70C597,0x8ECB4223,0xD19627B9,0x5236E776,0x61BCEFB5,0x9E374589	   @:  0x11A0
	.word	0x91A747B1,0x5AE764D1,0xCCE8DD53,0xF62FA972,0xB54036E0,0x8E09BD83,0xDBBE2435,0xD616D986	   @:  0x11C0
	.word	0x3E36F576,0x11BB87B4,0x5F5D659A,0x83A0C0CF,0x338A08C3,0xFF8BAA3C,0x0F900238,0xCB402360	   @:  0x11E0
	.word	0x960FB982,0x3AC77421,0x436F9F92,0x3B498B63,0x55B799B6,0x0DA8FDB3,0xE8202CF0,0x2F8D72C2	   @:  0x1200
	.word	0x4EE6E22E,0xDCFDA555,0xB02AC80C,0xCC01A2FF,0xF01BA804,0xC4D02158,0x5D4F9AE2,0xACC8CDA3	   @:  0x1220
	.word	0x79A8EBB3,0x782614F1,0x6EFE12D5,0x581F6405,0xE588D143,0xC7AD5E32,0x616B90EC,0x921B477B	   @:  0x1240
	.word	0x6CD76D59,0x7C2B6AF3,0x3C1A0AFB,0x34CB895C,0x999FBBBA,0xF1875741,0xD5602610,0x018EFF42	   @:  0x1260
	.word	0x16D80624,0x36E176D0,0xBD97B546,0x22258F71,0xA6C6CEDE,0xF370D797,0xFECC2A22,0x10FC07AA	   @:  0x1280
	.word	0x40316008,0x08D183A7,0xAD5432E6,0x6818ECFB,0x24E77151,0xD4EED952,0x1756F966,0x203970F4	   @:  0x12A0
	.word	0x8B76C396,0x9FB23A37,0x84E341AF,0x55B61949,0x0DBCFDB5,0xEE302D88,0x50CD67A2,0x48E0E3AF	   @:  0x12C0
	.word	0xA585B141,0xC54CDE1D,0x4CFF9DAA,0xF009A803,0xC3B82034,0x376F8992,0xAB4FB362,0x14C4F9A1	   @:  0x12E0
	.word	0x1B517B98,0xD15558E6,0x580AE4FC,0xE38CD03D,0xBEFD4A2A,0x182D840D,0xED6552EE,0x60C96F5C	   @:  0x1300
	.word	0x89B343B7,0xBCF635A9,0x33B18837,0xF4D7A9A6,0x9C203AF0,0xBF8B4AC3,0x0F958239,0xCA04237E	   @:  0x1320
	.word	0x895FBC1A,0xBB8634C1,0x5D719A17,0xA6D0CE27,0xF548D6E3,0x8DAC3DB2,0xE97A2CEB,0x3545761E	   @:  0x1340
	.word	0x8F47BD9E,0xC7662191,0x68F79356,0x23AB7033,0xB01EC8FA,0xC591A147,0x435B9F64,0x32D988DB	   @:  0x1360
	.word	0xE6F7AED6,0xFBA15430,0x539818C4,0x78E4EB51,0x64D61159,0xDC3F5AF5,0xBA02CB80,0x48219C0F	   @:  0x1380
	.word	0xAF91B2C7,0x4B5CE365,0x93B5B8C9,0x758F69BD,0x86CA3E23,0x718217BF,0xD42E260D,0x1D56FAE6	   @:  0x13A0
	.word	0xA8394CF4,0x2B7CF395,0x1C32FA08,0xB8E94BAC,0x663D9175,0xF223578F,0xE7B02EC8,0xE4CD51A2	   @:  0x13C0
	.word	0xD8E95BAC,0xE63AD174,0xF345579E,0xF748299C,0xA5AC31B2,0xC978DCEB,0xB56FB612,0x8345BF61	   @:  0x13E0
	.word	0x374E099D,0xA4DBB1A4,0xDED4DAD9,0x941EC6FA,0x15937947,0x037D7F6A,0x3C240A0E,0x3ED38AD8	   @:  0x1400
	.word	0x157F86EA,0x040D7E02,0x52E4182E,0x6CD4ED59,0x7C176AF9,0x362A0973,0xB40BB6FC,0x9395B839	   @:  0x1420
	.word	0x7A0F6B7D,0x4ACA1C23,0x818DBFBD,0x16EE062D,0x3F597564,0x02F780D6,0x2BAC0C32,0x1172F8E8	   @:  0x1440
	.word	0x56E9662C,0x3E30F577,0x10C387A0,0x4A3D638A,0x8221BF8F,0x279E0EC5,0xE99AD344,0x30C5775E	   @:  0x1460
	.word	0xCB47A39E,0x9763B990,0x29B77349,0x3DAEF5B2,0x295B8CE4,0x3ADEF4DA,0x479B9EC4,0x68D9935B	   @:  0x1480
	.word	0x2EF372D7,0x5AFEE42A,0xC81CDC05,0xA5BFB14A,0xCE04DD81,0xD95FA41A,0xFB82D4C0,0x5C241A0E	   @:  0x14A0
	.word	0xBED4CAD9,0x141986FB,0x14F57956,0x1385783E,0x7D456A1E,0x2F420D9F,0x462AE18C,0x740D96FD	   @:  0x14C0
	.word	0x92E2382F,0x6DA36D4F,0x6BBB6CCB,0x175B799B,0x22DD70DA,0xA7A6CECE,0xE2F0D0D7,0xAACD4C22	   @:  0x14E0
	.word	0x00ECFFAD,0x07700168,0x6EC01220,0x52076781,0x6968EC13,0x32277771,0xE6EFAED2,0xFF415560	   @:  0x1500
	.word	0x06180184,0x7CE01550,0x35860941,0x857BBE14,0x45561E19,0x483D9CF5,0xAA21B38F,0x079CFEC5	   @:  0x1520
	.word	0x69B01348,0x3CC775A1,0x3B6F8B92,0x5B4F9B62,0xD4C8D9A3,0x19AEFBB2,0xF95954E4,0x7AF814D4	   @:  0x1540
	.word	0x49661C11,0xB0FDB755,0xC02DA00D,0x0D6B82EC,0xE21C2F7A,0xADBD4D4A,0x6E2CED8D,0x557766E9	   @:  0x1560
	.word	0x07A8FE33,0x602010F0,0x8F8742C1,0xCD662211,0xE0F7AF56,0x83A14030,0x339E08C5,0xF99BAB44	   @:  0x1580
	.word	0x70D01758,0xCD4622E1,0xEF77AD96,0x4FA16230,0xC391A0C7,0x3B5B8B64,0x52DF98DA,0x6788EEC3	   @:  0x15A0
	.word	0xEFA75231,0x42E160D0,0x2D918D47,0x6356EF66,0xB03F48F5,0xCA05A381,0x894BBC1C,0xBD9635B9	   @:  0x15C0
	.word	0x22318F77,0xA0D6CFA6,0x8C30C2F7,0xF8CA2BA3,0x698413BE,0x35577619,0x882FBCF2,0xAD4632E1	   @:  0x15E0
	.word	0x6F70ED97,0x4EC76221,0xD369A793,0x7A3AEB74,0x434E1F9D,0x34DD89A5,0x9FA7BACE,0x82E740D1	   @:  0x1600
	.word	0x2CE60D51,0x74FAE954,0x914E381D,0x5CD365A7,0xBD78CAEB,0x25698E13,0xC236DF76,0x21B78FB6	   @:  0x1620
	.word	0x9DAEC5B2,0xA9534CE7,0x3974F4E9,0x77939638,0xAB7A336B,0x1D40FA1F,0xAE014D80,0x581CE405	   @:  0x1640
	.word	0xE5B4D149,0xCD9D5DBA,0xE1ABAF4C,0x981144F8,0xE75F5165,0xE38150C0,0xBC194A04,0x34FD8955	   @:  0x1660
	.word	0x9027B80E,0x4EE762D1,0xDCE9A553,0xB63AC974,0xB341B79F,0xF61DA985,0xBDA8354C,0x28298CF3	   @:  0x1680
	.word	0x2C36F2F6,0x79BAEBB4,0x7F4E159D,0x04DE01A5,0x5F981AC4,0x88E4C351,0xA4DA315B,0xDEC0DADF	   @:  0x16A0
	.word	0x920EC782,0x6AD36C27,0x057B7EEB,0x455C1E1A,0x4BB59CC9,0x9581B9BF,0x041F7E05,0x558C1942	   @:  0x16C0
	.word	0x06F4FE29,0x7B901438,0x5B461B61,0xD77CD995,0x2C3EF20A,0x7A1AEB84,0x4CCE1D5D,0xF8DDABA5	   @:  0x16E0
	.word	0x6FA812CC,0x402760F1,0x0EE982D3,0xDE342576,0x919EC7BA,0x51936747,0x5378E76B,0x7D64EA11	   @:  0x1700
	.word	0x20D60F59,0x8C3AC2F4,0xFB422B9F,0x5624198E,0x36D4F6D9,0xB413B6F8,0x9775B969,0x2F8F723D	   @:  0x1720
	.word	0x4ECEE222,0xD0DDA7A5,0x4FAAE2CC,0xC00DA0FD,0x02EB802C,0x2E1C0D7A,0x5DB2E548,0xACECCDAD	   @:  0x1740
	.word	0x7778E96B,0xAD663211,0x60F0EF57,0x82C74021,0x23660F91,0xB8FACB54,0x6141901F,0x9E134587	   @:  0x1760
	.word	0x9F774569,0x8FA74231,0xC2E620D1,0x2CF78D56,0x73AEE832,0xF15E28E5,0xDB9424C6,0xDA1EDB7A	   @:  0x1780
	.word	0xCD96DD46,0xE237AF76,0xA1A14FB0,0x9B9CC4C5,0xD9BB5B4B,0xFF52D598,0x016400EE,0x10D00758	   @:  0x17A0
	.word	0x4D4162E0,0xEE11AD87,0x5F596564,0x82F0C0D7,0x2ACA0C23,0x018AFFBC,0x1788063C,0x2FA17230	   @:  0x17C0
	.word	0x4396E0C6,0x3A3D8B75,0x42279F8E,0x26E98ED3,0xFE36D576,0x11B407B6,0x5D9165B8,0xA350CF67	   @:  0x17E0
	.word	0xB148C8E3,0xDDA9A5B3,0xA83ACCF4,0x2B40F39F,0x1602F980,0x3829740C,0x6C3792F6,0x79AB6BB3	   @:  0x1800
	.word	0x781A14FB,0x64CE115D,0xD8DF5BA5,0xEF82D2C0,0x4C25620E,0xFEC1AADF,0x12180784,0x6CE16D50	   @:  0x1820
	.word	0x75936947,0x837A3F6B,0x3D420A1F,0x2E2B8D8C,0x541EE6FA,0x159CF945,0x01B17F48,0x1CD405A6	   @:  0x1840
	.word	0xBC114AF8,0x375D8965,0xA3A7B0CE,0xB2E4C8D1,0xECD9AD5B,0x7EF96AD4,0x19720417,0xF6E9562C	   @:  0x1860
	.word	0xBE383574,0x13698793,0x7A356B76,0x41821FBF,0x142D860D,0x1D657AEE,0xA0C54F5E,0x8B4CC39D	   @:  0x1880
	.word	0x94FA39AB,0x1143781F,0x5E3D658A,0x9220C78F,0x678B6EC3,0xEF9B523B,0x48D16358,0xAD51B2E7	   @:  0x18A0
	.word	0x695CECE5,0x3BB774C9,0x55AF99B2,0x0948FCE3,0xBDA035B0,0x2B898CC3,0x1FB6FA36,0x85B941B4	   @:  0x18C0
	.word	0x4F7E1D95,0xCC1DA205,0xF5ABA94C,0x88103CF8,0xA74A3163,0xE580D1BF,0xC40D5E02,0x52EB982C	   @:  0x18E0
	.word	0x6E18ED7B,0x5CE76551,0xB4E8C953,0x9629B973,0x343F76F5,0x9A0FBB82,0xCAC75C21,0x8363BF90	   @:  0x1900
	.word	0x39B60B49,0x7DBB95B4,0x2F5A0D9B,0x42CAE0DC,0x218D8FBD,0x96E6C62E,0x3CF37557,0x32FF882A	   @:  0x1920
	.word	0xE80FAC02,0x22C17020,0xA216CF86,0xAE30CD77,0x50C8E7A3,0x49A4E3B1,0xBAD5B4D9,0x440D9EFD	   @:  0x1940
	.word	0x52E1982F,0x6D90ED47,0x63476F61,0xB76B4993,0xAA15B379,0x0E0CFD7D,0xDAF02428,0xCACEDC22	   @:  0x1960
	.word	0x80D7BFA6,0x0C2602F1,0xFEF82AD4,0x196C0412,0xF3715768,0xFED82A24,0x16EC06D2,0x3F717568	   @:  0x1980
	.word	0x0ED78226,0xD42C26F2,0x1D7EFAEA,0xA4194E04,0xD4FCD955,0x103EF80A,0x4A196384,0x8CF1BD57	   @:  0x19A0
	.word	0xF2DE2825,0xE7942EC6,0xEA1D537A,0x0DA97D4C,0xE8342CF6,0x299D73BA,0x31A6F74E,0xDAFBA4D4	   @:  0x19C0
	.word	0xC952DC18,0xB967B4EE,0x70E59751,0xC4C2215F,0x5A279B8E,0xC6E8DED3,0x7E2F9572,0x154A06E3	   @:  0x19E0
	.word	0x0D897DBC,0xE7B42E36,0xE59D51BA,0xC1A95F4C,0x183B84F4,0xEB5D539A,0x13A978CC,0x703568F6	   @:  0x1A00
	.word	0xC98223BF,0xB427B60E,0x9EE5BAD1,0x9CCF455D,0xB8C74BA1,0x6B659391,0x18C37B5F,0xEA3D538A	   @:  0x1A20
	.word	0x02297F8C,0x24340EF6,0xD992DBB8,0xF366D76E,0xF8F42B56,0x639C103A,0xB9B74B49,0x7DA595B1	   @:  0x1A40
	.word	0x2AC20CDF,0x022AFF8C,0x24080EFC,0xD3A2D830,0x73A6E8CE,0xF2FE28D5,0xE8142C06,0x261D717A	   @:  0x1A60
	.word	0xFDA6D54E,0x2AF40CD6,0x0B92FC38,0x9B683B6C,0xDA2B5B73,0xC412DEF8,0x5767996E,0x28E8F353	   @:  0x1A80
	.word	0x2622F170,0xF7AAD6CC,0xA00430FE,0x8158C01B,0x1AEA04D3,0xCE095D7C,0xDBBBA434,0xD752D998	   @:  0x1AA0
	.word	0x2166F0EE,0x90FAC754,0x4143601F,0x1E39858B,0x93754796,0x7F8F6A3D,0x0ECA0223,0xD18827BC	   @:  0x1AC0
	.word	0x57AEE632,0x215CF0E5,0x9BB2C4C8,0xD4E359AF,0x15B2F948,0x0CE97DAC,0xF6342976,0xB19C37BA	   @:  0x1AE0
	.word	0xD1B9A74B,0x5F7AE594,0x8D4CC21D,0xECFA2DAB,0x7145681E,0xDF42259F,0x8626C18E,0x76F216D7	   @:  0x1B00
	.word	0xBAEE342D,0x4F519D67,0xC151A0E7,0x195B84E4,0xFADD54DA,0x47A81ECC,0x602590F1,0x8EC342DF	   @:  0x1B20
	.word	0xD2362789,0x61B6EFB6,0x9DBF45B5,0xAE074D81,0x5964E411,0xF0D4D759,0xCC1C22FA,0xF5BFA94A	   @:  0x1B40
	.word	0x8E003D80,0xD80A2403,0xE386D03E,0xBD754A16,0x278D8E3D,0xEEE6D22E,0x5CF56556,0xB380C83F	   @:  0x1B60
	.word	0xFC09AA03,0x33B80834,0xF763A990,0xA9B03348,0x3CC8F5A3,0x39A38BB0,0x7BBF94CA,0x560A1983	   @:  0x1B80
	.word	0x3B8CF43D,0x5EF39A28,0x9AF8C42B,0xC96B5C13,0xB213B778,0xEF75AD69,0x4F89623C,0xCFB1A237	   @:  0x1BA0
	.word	0xC4DBA1A4,0x5ED39AD8,0x9578C6EB,0x056B7E13,0x421C1F7A,0x2DB58D49,0x6D86EDBE,0x657F6E15	   @:  0x1BC0
	.word	0xC40B5E03,0x53939838,0x7B78EB6B,0x5D661A11,0xA0FCCF55,0x8038C00B,0x0B6A0393,0x9A083B7C	   @:  0x1BE0
	.word	0xCBAB5C33,0x9013B8F8,0x47776169,0x6FA99233,0x403360F7,0x08F983AB,0xA1743016,0x9798C63B	   @:  0x1C00
	.word	0x28EB7353,0x261EF17A,0xFD9AD544,0x20C40F5E,0x8B52C398,0x916238EF,0x51A3674F,0x5BB8E4CB	   @:  0x1C20
	.word	0xD764D991,0x28DEF35A,0x2F9AF2C4,0x48CAE35C,0xA98DB3BD,0x36ECF62D,0xBF73B568,0x0EF58229	   @:  0x1C40
	.word	0xDB84243E,0xDD5EDA1A,0xAB96CCC6,0x1A30FB77,0xC0C15FA0,0x0A1B8384,0x8CDC3D5A,0xFFBA2ACB	   @:  0x1C60
	.word	0x0744019E,0x67501198,0xE14750E1,0x9F614590,0x899F4345,0xB1863741,0xD571A617,0x06DAFE24	   @:  0x1C80
	.word	0x76C816DC,0xB1A637B1,0xDAF1A4D7,0xCADADC24,0x86C7BEDE,0x73661791,0xF8FE2B55,0x60141006	   @:  0x1CA0
	.word	0x86174179,0x7E261571,0x16FE06D5,0x38197404,0x64F79156,0xD3AB5833,0x7012E8F8,0xC76E216D	   @:  0x1CC0
	.word	0x6B579366,0x102B78F3,0x4C1D62FA,0xF5A1A94F,0x8B983CC4,0x98EA3B53,0xE603517F,0xF8315408	   @:  0x1CE0
	.word	0x68D813A4,0x2EE772D1,0x5CEEE552,0xB75CC965,0xA3B9B0CB,0xB77CC995,0xAC39B20B,0x7B7CEB95	   @:  0x1D00
	.word	0x5C361A09,0xB9BCCBB5,0x7E39958B,0x13720797,0x7EE96A2C,0x1E320577,0x90E947AC,0x463F6175	   @:  0x1D20
	.word	0x72099783,0xEBB22C37,0x14E579AE,0x14C5795E,0x1B457B9E,0xD745599E,0x274AF19C,0xE58AD1BC	   @:  0x1D40
	.word	0xC7855E3E,0x6D4B921C,0x6D9B6DBB,0x60DB6F5B,0x8EDB42DB,0xD6D626D9,0x3436F6F6,0x99BBBBB4	   @:  0x1D60
	.word	0xFF575599,0x002000F0,0x0F8002C0,0xCC002200,0xF00FA802,0xC2C02020,0x220F8F82,0xAACECC22	   @:  0x1D80
	.word	0x00D0FFA7,0x0D4002E0,0xEE002D80,0x580D6402,0xE2E0D02F,0xAD8D4D42,0x66ECEE2D,0xFF775569	   @:  0x1DA0
	.word	0x0FA00230,0xC38020C0,0x3C0F8A02,0x32CF8822,0xE0CFAFA2,0x88C143A0,0xAA1E3385,0x0D90FD47	   @:  0x1DC0
	.word	0xE3402F60,0xB60D4982,0xBAEDB42D,0x4F6D9D6D,0xCB61A36F,0x999BBB44,0xF0D75759,0xCC2022F0	   @:  0x1DE0
	.word	0xFF8FAAC2,0x0EC00220,0xD2002780,0x680EEC02,0x22DF7025,0xA78ECEC2,0xEED0D227,0x554D66E2	   @:  0x1E00
	.word	0x0CE0FDAF,0xF5802940,0x840C3E02,0x52FA182B,0x694CEC1D,0x3CF775A9,0x33AF8832,0xF14FA8E2	   @:  0x1E20
	.word	0xDCC025A0,0xBA0ECB82,0x4AD19C27,0x8551BEE7,0x495E1CE5,0xBB9DB4C5,0x59AD9B4D,0xF960D4EF	   @:  0x1E40
	.word	0x718C1742,0xD6F62629,0x3BB6F436,0x55BB99B4,0x0F58FD9B,0xC2E020D0,0x2D8F8D42,0x66CEEE22	   @:  0x1E60
	.word	0xF0DF57A5,0xCF8022C0,0xCC0FA202,0xF2C3A820,0xE2302F88,0xA0CD4FA2,0x88ECC3AD,0xA77A316B	   @:  0x1E80
	.word	0xED40D21F,0x6E0D6D82,0x5AE3642F,0xCDB8DD4B,0xEF6FAD92,0x4B416360,0x9611B987,0x3F5F7565	   @:  0x1EA0
	.word	0x038F80C2,0x3ECC0A22,0x10F387A8,0x42FD602A,0x28218C0F,0x2F96F2C6,0x4A3AE374,0x834DBF9D	   @:  0x1EC0
	.word	0x34EE09AD,0x975BB964,0x22D770D9,0xA42ECEF2,0xDD50DAE7,0xA94ECCE2,0x3CD0F5A7,0x3D438AE0	   @:  0x1EE0
	.word	0x2E3F8D8A,0x520EE782,0x6ADCEC25,0x07B77EC9,0x65AC11B2,0xC9775CE9,0xB7A3B630,0xA3B5B0C9	   @:  0x1F00
	.word	0xB58CC9BD,0x86F9BE2B,0x797E1415,0x741E1605,0x959E3945,0x01937F47,0x137C076A,0x7C316A08	   @:  0x1F20
	.word	0x38D20BA7,0x6D6B92EC,0x621B6F7B,0xACDB4D5B,0x7ED4EAD9,0x141606F9,0x16397974,0x33757796	   @:  0x1F40
	.word	0xFF87AA3E,0x0D600210,0xE1802F40,0x940D4602,0x12EF782D,0x6F4D6D62,0x44E361AF,0x55B9994B	   @:  0x1F60
	.word	0x0F70FD97,0xCEC02220,0xD20FA782,0x6AC2EC20,0x022F7F8D,0x254C0EE2,0xCCF2DDA8,0xF2E7A82E	   @:  0x1F80
	.word	0xECE02D50,0x758D6942,0x86E23E2F,0x7DA2154F,0x2BAE0CCD,0x115AF8E4,0x5AC964DC,0xC1B0DFB7	   @:  0x1FA0
	.word	0x1CCF85A2,0xB8CD4BA2,0x68ED93AD,0x2763716F,0xE9BED34A,0x3E157586,0x1E07857E,0x996D4412	   @:  0x1FC0
	.word	0xF36F576D,0xFB402B60,0x560C1982,0x3AF4F429,0x4B939C38,0x9B79BB6B,0xDD7F5A15,0xA402CE00	   @:  0x1FE0
	.space	128
	
	
	.align	8					@: 256 byte boundary

bch_s168_table_neon:
	.word	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0,0  @:	0x00
	.word	0xEADB6240,0x62B26998,0x90A323CD,0xE78F5269,0x0519D1D7,0x000000A5,0,0  @:	0x01
	.word	0xD5B7C580,0xC564D330,0x2047479A,0xCF1FA5D2,0x0B32A2AF,0x0000004A,0,0  @:	0x02
	.word	0x3F6CA7C0,0xA7D6BAA8,0xB0E46457,0x2890F7BB,0x0E2B7378,0x000000EF,0,0  @:	0x03
	.word	0x40B4E941,0xE97BCFF9,0xD12DADF9,0x78B018CC,0x137D9588,0x00000031,0,0  @:	0x04
	.word	0xAA6F8B01,0x8BC9A661,0x418E8E34,0x9F3F4AA5,0x1664445F,0x00000094,0,0  @:	0x05
	.word	0x95032CC1,0x2C1F1CC9,0xF16AEA63,0xB7AFBD1E,0x184F3727,0x0000007B,0,0  @:	0x06
	.word	0x7FD84E81,0x4EAD7551,0x61C9C9AE,0x5020EF77,0x1D56E6F0,0x000000DE,0,0  @:	0x07
	.word	0x8168D383,0xD3F79EF3,0xA35B5AF3,0xF1603198,0x26FA2A11,0x00000062,0,0  @:	0x08
	.word	0x6BB3B1C3,0xB145F76B,0x33F8793E,0x16EF63F1,0x23E3FBC6,0x000000C7,0,0  @:	0x09
	.word	0x54DF1603,0x16934DC3,0x831C1D69,0x3E7F944A,0x2DC888BE,0x00000028,0,0  @:	0x0A
	.word	0xBE047443,0x7421245B,0x13BF3EA4,0xD9F0C623,0x28D15969,0x0000008D,0,0  @:	0x0B
	.word	0xC1DC3AC2,0x3A8C510A,0x7276F70A,0x89D02954,0x3587BF99,0x00000053,0,0  @:	0x0C
	.word	0x2B075882,0x583E3892,0xE2D5D4C7,0x6E5F7B3D,0x309E6E4E,0x000000F6,0,0  @:	0x0D
	.word	0x146BFF42,0xFFE8823A,0x5231B090,0x46CF8C86,0x3EB51D36,0x00000019,0,0  @:	0x0E
	.word	0xFEB09D02,0x9D5AEBA2,0xC292935D,0xA140DEEF,0x3BACCCE1,0x000000BC,0,0  @:	0x0F
	.word	0xE90AC447,0xC55D547F,0xD714972B,0x054E3059,0x49ED84F5,0x00000061,0,0  @:	0x10
	.word	0x03D1A607,0xA7EF3DE7,0x47B7B4E6,0xE2C16230,0x4CF45522,0x000000C4,0,0  @:	0x11
	.word	0x3CBD01C7,0x0039874F,0xF753D0B1,0xCA51958B,0x42DF265A,0x0000002B,0,0  @:	0x12
	.word	0xD6666387,0x628BEED7,0x67F0F37C,0x2DDEC7E2,0x47C6F78D,0x0000008E,0,0  @:	0x13
	.word	0xA9BE2D06,0x2C269B86,0x06393AD2,0x7DFE2895,0x5A90117D,0x00000050,0,0  @:	0x14
	.word	0x43654F46,0x4E94F21E,0x969A191F,0x9A717AFC,0x5F89C0AA,0x000000F5,0,0  @:	0x15
	.word	0x7C09E886,0xE94248B6,0x267E7D48,0xB2E18D47,0x51A2B3D2,0x0000001A,0,0  @:	0x16
	.word	0x96D28AC6,0x8BF0212E,0xB6DD5E85,0x556EDF2E,0x54BB6205,0x000000BF,0,0  @:	0x17
	.word	0x686217C4,0x16AACA8C,0x744FCDD8,0xF42E01C1,0x6F17AEE4,0x00000003,0,0  @:	0x18
	.word	0x82B97584,0x7418A314,0xE4ECEE15,0x13A153A8,0x6A0E7F33,0x000000A6,0,0  @:	0x19
	.word	0xBDD5D244,0xD3CE19BC,0x54088A42,0x3B31A413,0x64250C4B,0x00000049,0,0  @:	0x1A
	.word	0x570EB004,0xB17C7024,0xC4ABA98F,0xDCBEF67A,0x613CDD9C,0x000000EC,0,0  @:	0x1B
	.word	0x28D6FE85,0xFFD10575,0xA5626021,0x8C9E190D,0x7C6A3B6C,0x00000032,0,0  @:	0x1C
	.word	0xC20D9CC5,0x9D636CED,0x35C143EC,0x6B114B64,0x7973EABB,0x00000097,0,0  @:	0x1D
	.word	0xFD613B05,0x3AB5D645,0x852527BB,0x4381BCDF,0x775899C3,0x00000078,0,0  @:	0x1E
	.word	0x17BA5945,0x5807BFDD,0x15860476,0xA40EEEB6,0x72414814,0x000000DD,0,0  @:	0x1F
	.word	0xD215888F,0x8ABBA8FE,0xAE292E57,0x0B9C60B2,0x92DA09EB,0x000000C2,0,0  @:	0x20
	.word	0x38CEEACF,0xE809C166,0x3E8A0D9A,0xEC1332DB,0x97C3D83C,0x00000067,0,0  @:	0x21
	.word	0x07A24D0F,0x4FDF7BCE,0x8E6E69CD,0xC483C560,0x99E8AB44,0x00000088,0,0  @:	0x22
	.word	0xED792F4F,0x2D6D1256,0x1ECD4A00,0x230C9709,0x9CF17A93,0x0000002D,0,0  @:	0x23
	.word	0x92A161CE,0x63C06707,0x7F0483AE,0x732C787E,0x81A79C63,0x000000F3,0,0  @:	0x24
	.word	0x787A038E,0x01720E9F,0xEFA7A063,0x94A32A17,0x84BE4DB4,0x00000056,0,0  @:	0x25
	.word	0x4716A44E,0xA6A4B437,0x5F43C434,0xBC33DDAC,0x8A953ECC,0x000000B9,0,0  @:	0x26
	.word	0xADCDC60E,0xC416DDAF,0xCFE0E7F9,0x5BBC8FC5,0x8F8CEF1B,0x0000001C,0,0  @:	0x27
	.word	0x537D5B0C,0x594C360D,0x0D7274A4,0xFAFC512A,0xB42023FA,0x000000A0,0,0  @:	0x28
	.word	0xB9A6394C,0x3BFE5F95,0x9DD15769,0x1D730343,0xB139F22D,0x00000005,0,0  @:	0x29
	.word	0x86CA9E8C,0x9C28E53D,0x2D35333E,0x35E3F4F8,0xBF128155,0x000000EA,0,0  @:	0x2A
	.word	0x6C11FCCC,0xFE9A8CA5,0xBD9610F3,0xD26CA691,0xBA0B5082,0x0000004F,0,0  @:	0x2B
	.word	0x13C9B24D,0xB037F9F4,0xDC5FD95D,0x824C49E6,0xA75DB672,0x00000091,0,0  @:	0x2C
	.word	0xF912D00D,0xD285906C,0x4CFCFA90,0x65C31B8F,0xA24467A5,0x00000034,0,0  @:	0x2D
	.word	0xC67E77CD,0x75532AC4,0xFC189EC7,0x4D53EC34,0xAC6F14DD,0x000000DB,0,0  @:	0x2E
	.word	0x2CA5158D,0x17E1435C,0x6CBBBD0A,0xAADCBE5D,0xA976C50A,0x0000007E,0,0  @:	0x2F
	.word	0x3B1F4CC8,0x4FE6FC81,0x793DB97C,0x0ED250EB,0xDB378D1E,0x000000A3,0,0  @:	0x30
	.word	0xD1C42E88,0x2D549519,0xE99E9AB1,0xE95D0282,0xDE2E5CC9,0x00000006,0,0  @:	0x31
	.word	0xEEA88948,0x8A822FB1,0x597AFEE6,0xC1CDF539,0xD0052FB1,0x000000E9,0,0  @:	0x32
	.word	0x0473EB08,0xE8304629,0xC9D9DD2B,0x2642A750,0xD51CFE66,0x0000004C,0,0  @:	0x33
	.word	0x7BABA589,0xA69D3378,0xA8101485,0x76624827,0xC84A1896,0x00000092,0,0  @:	0x34
	.word	0x9170C7C9,0xC42F5AE0,0x38B33748,0x91ED1A4E,0xCD53C941,0x00000037,0,0  @:	0x35
	.word	0xAE1C6009,0x63F9E048,0x8857531F,0xB97DEDF5,0xC378BA39,0x000000D8,0,0  @:	0x36
	.word	0x44C70249,0x014B89D0,0x18F470D2,0x5EF2BF9C,0xC6616BEE,0x0000007D,0,0  @:	0x37
	.word	0xBA779F4B,0x9C116272,0xDA66E38F,0xFFB26173,0xFDCDA70F,0x000000C1,0,0  @:	0x38
	.word	0x50ACFD0B,0xFEA30BEA,0x4AC5C042,0x183D331A,0xF8D476D8,0x00000064,0,0  @:	0x39
	.word	0x6FC05ACB,0x5975B142,0xFA21A415,0x30ADC4A1,0xF6FF05A0,0x0000008B,0,0  @:	0x3A
	.word	0x851B388B,0x3BC7D8DA,0x6A8287D8,0xD72296C8,0xF3E6D477,0x0000002E,0,0  @:	0x3B
	.word	0xFAC3760A,0x756AAD8B,0x0B4B4E76,0x870279BF,0xEEB03287,0x000000F0,0,0  @:	0x3C
	.word	0x1018144A,0x17D8C413,0x9BE86DBB,0x608D2BD6,0xEBA9E350,0x00000055,0,0  @:	0x3D
	.word	0x2F74B38A,0xB00E7EBB,0x2B0C09EC,0x481DDC6D,0xE5829028,0x000000BA,0,0  @:	0x3E
	.word	0xC5AFD1CA,0xD2BC1723,0xBBAF2A21,0xAF928E04,0xE09B41FF,0x0000001F,0,0  @:	0x3F
	.word	0x4FF0725F,0x76C53865,0xCDF07F63,0xF0B7930D,0x20ACC201,0x00000021,0,0  @:	0x40
	.word	0xA52B101F,0x147751FD,0x5D535CAE,0x1738C164,0x25B513D6,0x00000084,0,0  @:	0x41
	.word	0x9A47B7DF,0xB3A1EB55,0xEDB738F9,0x3FA836DF,0x2B9E60AE,0x0000006B,0,0  @:	0x42
	.word	0x709CD59F,0xD11382CD,0x7D141B34,0xD82764B6,0x2E87B179,0x000000CE,0,0  @:	0x43
	.word	0x0F449B1E,0x9FBEF79C,0x1CDDD29A,0x88078BC1,0x33D15789,0x00000010,0,0  @:	0x44
	.word	0xE59FF95E,0xFD0C9E04,0x8C7EF157,0x6F88D9A8,0x36C8865E,0x000000B5,0,0  @:	0x45
	.word	0xDAF35E9E,0x5ADA24AC,0x3C9A9500,0x47182E13,0x38E3F526,0x0000005A,0,0  @:	0x46
	.word	0x30283CDE,0x38684D34,0xAC39B6CD,0xA0977C7A,0x3DFA24F1,0x000000FF,0,0  @:	0x47
	.word	0xCE98A1DC,0xA532A696,0x6EAB2590,0x01D7A295,0x0656E810,0x00000043,0,0  @:	0x48
	.word	0x2443C39C,0xC780CF0E,0xFE08065D,0xE658F0FC,0x034F39C7,0x000000E6,0,0  @:	0x49
	.word	0x1B2F645C,0x605675A6,0x4EEC620A,0xCEC80747,0x0D644ABF,0x00000009,0,0  @:	0x4A
	.word	0xF1F4061C,0x02E41C3E,0xDE4F41C7,0x2947552E,0x087D9B68,0x000000AC,0,0  @:	0x4B
	.word	0x8E2C489D,0x4C49696F,0xBF868869,0x7967BA59,0x152B7D98,0x00000072,0,0  @:	0x4C
	.word	0x64F72ADD,0x2EFB00F7,0x2F25ABA4,0x9EE8E830,0x1032AC4F,0x000000D7,0,0  @:	0x4D
	.word	0x5B9B8D1D,0x892DBA5F,0x9FC1CFF3,0xB6781F8B,0x1E19DF37,0x00000038,0,0  @:	0x4E
	.word	0xB140EF5D,0xEB9FD3C7,0x0F62EC3E,0x51F74DE2,0x1B000EE0,0x0000009D,0,0  @:	0x4F
	.word	0xA6FAB618,0xB3986C1A,0x1AE4E848,0xF5F9A354,0x694146F4,0x00000040,0,0  @:	0x50
	.word	0x4C21D458,0xD12A0582,0x8A47CB85,0x1276F13D,0x6C589723,0x000000E5,0,0  @:	0x51
	.word	0x734D7398,0x76FCBF2A,0x3AA3AFD2,0x3AE60686,0x6273E45B,0x0000000A,0,0  @:	0x52
	.word	0x999611D8,0x144ED6B2,0xAA008C1F,0xDD6954EF,0x676A358C,0x000000AF,0,0  @:	0x53
	.word	0xE64E5F59,0x5AE3A3E3,0xCBC945B1,0x8D49BB98,0x7A3CD37C,0x00000071,0,0  @:	0x54
	.word	0x0C953D19,0x3851CA7B,0x5B6A667C,0x6AC6E9F1,0x7F2502AB,0x000000D4,0,0  @:	0x55
	.word	0x33F99AD9,0x9F8770D3,0xEB8E022B,0x42561E4A,0x710E71D3,0x0000003B,0,0  @:	0x56
	.word	0xD922F899,0xFD35194B,0x7B2D21E6,0xA5D94C23,0x7417A004,0x0000009E,0,0  @:	0x57
	.word	0x2792659B,0x606FF2E9,0xB9BFB2BB,0x049992CC,0x4FBB6CE5,0x00000022,0,0  @:	0x58
	.word	0xCD4907DB,0x02DD9B71,0x291C9176,0xE316C0A5,0x4AA2BD32,0x00000087,0,0  @:	0x59
	.word	0xF225A01B,0xA50B21D9,0x99F8F521,0xCB86371E,0x4489CE4A,0x00000068,0,0  @:	0x5A
	.word	0x18FEC25B,0xC7B94841,0x095BD6EC,0x2C096577,0x41901F9D,0x000000CD,0,0  @:	0x5B
	.word	0x67268CDA,0x89143D10,0x68921F42,0x7C298A00,0x5CC6F96D,0x00000013,0,0  @:	0x5C
	.word	0x8DFDEE9A,0xEBA65488,0xF8313C8F,0x9BA6D869,0x59DF28BA,0x000000B6,0,0  @:	0x5D
	.word	0xB291495A,0x4C70EE20,0x48D558D8,0xB3362FD2,0x57F45BC2,0x00000059,0,0  @:	0x5E
	.word	0x584A2B1A,0x2EC287B8,0xD8767B15,0x54B97DBB,0x52ED8A15,0x000000FC,0,0  @:	0x5F
	.word	0x9DE5FAD0,0xFC7E909B,0x63D95134,0xFB2BF3BF,0xB276CBEA,0x000000E3,0,0  @:	0x60
	.word	0x773E9890,0x9ECCF903,0xF37A72F9,0x1CA4A1D6,0xB76F1A3D,0x00000046,0,0  @:	0x61
	.word	0x48523F50,0x391A43AB,0x439E16AE,0x3434566D,0xB9446945,0x000000A9,0,0  @:	0x62
	.word	0xA2895D10,0x5BA82A33,0xD33D3563,0xD3BB0404,0xBC5DB892,0x0000000C,0,0  @:	0x63
	.word	0xDD511391,0x15055F62,0xB2F4FCCD,0x839BEB73,0xA10B5E62,0x000000D2,0,0  @:	0x64
	.word	0x378A71D1,0x77B736FA,0x2257DF00,0x6414B91A,0xA4128FB5,0x00000077,0,0  @:	0x65
	.word	0x08E6D611,0xD0618C52,0x92B3BB57,0x4C844EA1,0xAA39FCCD,0x00000098,0,0  @:	0x66
	.word	0xE23DB451,0xB2D3E5CA,0x0210989A,0xAB0B1CC8,0xAF202D1A,0x0000003D,0,0  @:	0x67
	.word	0x1C8D2953,0x2F890E68,0xC0820BC7,0x0A4BC227,0x948CE1FB,0x00000081,0,0  @:	0x68
	.word	0xF6564B13,0x4D3B67F0,0x5021280A,0xEDC4904E,0x9195302C,0x00000024,0,0  @:	0x69
	.word	0xC93AECD3,0xEAEDDD58,0xE0C54C5D,0xC55467F5,0x9FBE4354,0x000000CB,0,0  @:	0x6A
	.word	0x23E18E93,0x885FB4C0,0x70666F90,0x22DB359C,0x9AA79283,0x0000006E,0,0  @:	0x6B
	.word	0x5C39C012,0xC6F2C191,0x11AFA63E,0x72FBDAEB,0x87F17473,0x000000B0,0,0  @:	0x6C
	.word	0xB6E2A252,0xA440A809,0x810C85F3,0x95748882,0x82E8A5A4,0x00000015,0,0  @:	0x6D
	.word	0x898E0592,0x039612A1,0x31E8E1A4,0xBDE47F39,0x8CC3D6DC,0x000000FA,0,0  @:	0x6E
	.word	0x635567D2,0x61247B39,0xA14BC269,0x5A6B2D50,0x89DA070B,0x0000005F,0,0  @:	0x6F
	.word	0x74EF3E97,0x3923C4E4,0xB4CDC61F,0xFE65C3E6,0xFB9B4F1F,0x00000082,0,0  @:	0x70
	.word	0x9E345CD7,0x5B91AD7C,0x246EE5D2,0x19EA918F,0xFE829EC8,0x00000027,0,0  @:	0x71
	.word	0xA158FB17,0xFC4717D4,0x948A8185,0x317A6634,0xF0A9EDB0,0x000000C8,0,0  @:	0x72
	.word	0x4B839957,0x9EF57E4C,0x0429A248,0xD6F5345D,0xF5B03C67,0x0000006D,0,0  @:	0x73
	.word	0x345BD7D6,0xD0580B1D,0x65E06BE6,0x86D5DB2A,0xE8E6DA97,0x000000B3,0,0  @:	0x74
	.word	0xDE80B596,0xB2EA6285,0xF543482B,0x615A8943,0xEDFF0B40,0x00000016,0,0  @:	0x75
	.word	0xE1EC1256,0x153CD82D,0x45A72C7C,0x49CA7EF8,0xE3D47838,0x000000F9,0,0  @:	0x76
	.word	0x0B377016,0x778EB1B5,0xD5040FB1,0xAE452C91,0xE6CDA9EF,0x0000005C,0,0  @:	0x77
	.word	0xF587ED14,0xEAD45A17,0x17969CEC,0x0F05F27E,0xDD61650E,0x000000E0,0,0  @:	0x78
	.word	0x1F5C8F54,0x8866338F,0x8735BF21,0xE88AA017,0xD878B4D9,0x00000045,0,0  @:	0x79
	.word	0x20302894,0x2FB08927,0x37D1DB76,0xC01A57AC,0xD653C7A1,0x000000AA,0,0  @:	0x7A
	.word	0xCAEB4AD4,0x4D02E0BF,0xA772F8BB,0x279505C5,0xD34A1676,0x0000000F,0,0  @:	0x7B
	.word	0xB5330455,0x03AF95EE,0xC6BB3115,0x77B5EAB2,0xCE1CF086,0x000000D1,0,0  @:	0x7C
	.word	0x5FE86615,0x611DFC76,0x561812D8,0x903AB8DB,0xCB052151,0x00000074,0,0  @:	0x7D
	.word	0x6084C1D5,0xC6CB46DE,0xE6FC768F,0xB8AA4F60,0xC52E5229,0x0000009B,0,0  @:	0x7E
	.word	0x8A5FA395,0xA4792F46,0x765F5542,0x5F251D09,0xC03783FE,0x0000003E,0,0  @:	0x7F
	.word	0x9EE0E5BE,0xEC8A71CA,0x9AE1FFC6,0xE06F271B,0x40588503,0x00000042,0,0  @:	0x80
	.word	0x743B87FE,0x8E381852,0x0A42DC0B,0x07E07572,0x454154D4,0x000000E7,0,0  @:	0x81
	.word	0x4B57203E,0x29EEA2FA,0xBAA6B85C,0x2F7082C9,0x4B6A27AC,0x00000008,0,0  @:	0x82
	.word	0xA18C427E,0x4B5CCB62,0x2A059B91,0xC8FFD0A0,0x4E73F67B,0x000000AD,0,0  @:	0x83
	.word	0xDE540CFF,0x05F1BE33,0x4BCC523F,0x98DF3FD7,0x5325108B,0x00000073,0,0  @:	0x84
	.word	0x348F6EBF,0x6743D7AB,0xDB6F71F2,0x7F506DBE,0x563CC15C,0x000000D6,0,0  @:	0x85
	.word	0x0BE3C97F,0xC0956D03,0x6B8B15A5,0x57C09A05,0x5817B224,0x00000039,0,0  @:	0x86
	.word	0xE138AB3F,0xA227049B,0xFB283668,0xB04FC86C,0x5D0E63F3,0x0000009C,0,0  @:	0x87
	.word	0x1F88363D,0x3F7DEF39,0x39BAA535,0x110F1683,0x66A2AF12,0x00000020,0,0  @:	0x88
	.word	0xF553547D,0x5DCF86A1,0xA91986F8,0xF68044EA,0x63BB7EC5,0x00000085,0,0  @:	0x89
	.word	0xCA3FF3BD,0xFA193C09,0x19FDE2AF,0xDE10B351,0x6D900DBD,0x0000006A,0,0  @:	0x8A
	.word	0x20E491FD,0x98AB5591,0x895EC162,0x399FE138,0x6889DC6A,0x000000CF,0,0  @:	0x8B
	.word	0x5F3CDF7C,0xD60620C0,0xE89708CC,0x69BF0E4F,0x75DF3A9A,0x00000011,0,0  @:	0x8C
	.word	0xB5E7BD3C,0xB4B44958,0x78342B01,0x8E305C26,0x70C6EB4D,0x000000B4,0,0  @:	0x8D
	.word	0x8A8B1AFC,0x1362F3F0,0xC8D04F56,0xA6A0AB9D,0x7EED9835,0x0000005B,0,0  @:	0x8E
	.word	0x605078BC,0x71D09A68,0x58736C9B,0x412FF9F4,0x7BF449E2,0x000000FE,0,0  @:	0x8F
	.word	0x77EA21F9,0x29D725B5,0x4DF568ED,0xE5211742,0x09B501F6,0x00000023,0,0  @:	0x90
	.word	0x9D3143B9,0x4B654C2D,0xDD564B20,0x02AE452B,0x0CACD021,0x00000086,0,0  @:	0x91
	.word	0xA25DE479,0xECB3F685,0x6DB22F77,0x2A3EB290,0x0287A359,0x00000069,0,0  @:	0x92
	.word	0x48868639,0x8E019F1D,0xFD110CBA,0xCDB1E0F9,0x079E728E,0x000000CC,0,0  @:	0x93
	.word	0x375EC8B8,0xC0ACEA4C,0x9CD8C514,0x9D910F8E,0x1AC8947E,0x00000012,0,0  @:	0x94
	.word	0xDD85AAF8,0xA21E83D4,0x0C7BE6D9,0x7A1E5DE7,0x1FD145A9,0x000000B7,0,0  @:	0x95
	.word	0xE2E90D38,0x05C8397C,0xBC9F828E,0x528EAA5C,0x11FA36D1,0x00000058,0,0  @:	0x96
	.word	0x08326F78,0x677A50E4,0x2C3CA143,0xB501F835,0x14E3E706,0x000000FD,0,0  @:	0x97
	.word	0xF682F27A,0xFA20BB46,0xEEAE321E,0x144126DA,0x2F4F2BE7,0x00000041,0,0  @:	0x98
	.word	0x1C59903A,0x9892D2DE,0x7E0D11D3,0xF3CE74B3,0x2A56FA30,0x000000E4,0,0  @:	0x99
	.word	0x233537FA,0x3F446876,0xCEE97584,0xDB5E8308,0x247D8948,0x0000000B,0,0  @:	0x9A
	.word	0xC9EE55BA,0x5DF601EE,0x5E4A5649,0x3CD1D161,0x2164589F,0x000000AE,0,0  @:	0x9B
	.word	0xB6361B3B,0x135B74BF,0x3F839FE7,0x6CF13E16,0x3C32BE6F,0x00000070,0,0  @:	0x9C
	.word	0x5CED797B,0x71E91D27,0xAF20BC2A,0x8B7E6C7F,0x392B6FB8,0x000000D5,0,0  @:	0x9D
	.word	0x6381DEBB,0xD63FA78F,0x1FC4D87D,0xA3EE9BC4,0x37001CC0,0x0000003A,0,0  @:	0x9E
	.word	0x895ABCFB,0xB48DCE17,0x8F67FBB0,0x4461C9AD,0x3219CD17,0x0000009F,0,0  @:	0x9F
	.word	0x4CF56D31,0x6631D934,0x34C8D191,0xEBF347A9,0xD2828CE8,0x00000080,0,0  @:	0xA0
	.word	0xA62E0F71,0x0483B0AC,0xA46BF25C,0x0C7C15C0,0xD79B5D3F,0x00000025,0,0  @:	0xA1
	.word	0x9942A8B1,0xA3550A04,0x148F960B,0x24ECE27B,0xD9B02E47,0x000000CA,0,0  @:	0xA2
	.word	0x7399CAF1,0xC1E7639C,0x842CB5C6,0xC363B012,0xDCA9FF90,0x0000006F,0,0  @:	0xA3
	.word	0x0C418470,0x8F4A16CD,0xE5E57C68,0x93435F65,0xC1FF1960,0x000000B1,0,0  @:	0xA4
	.word	0xE69AE630,0xEDF87F55,0x75465FA5,0x74CC0D0C,0xC4E6C8B7,0x00000014,0,0  @:	0xA5
	.word	0xD9F641F0,0x4A2EC5FD,0xC5A23BF2,0x5C5CFAB7,0xCACDBBCF,0x000000FB,0,0  @:	0xA6
	.word	0x332D23B0,0x289CAC65,0x5501183F,0xBBD3A8DE,0xCFD46A18,0x0000005E,0,0  @:	0xA7
	.word	0xCD9DBEB2,0xB5C647C7,0x97938B62,0x1A937631,0xF478A6F9,0x000000E2,0,0  @:	0xA8
	.word	0x2746DCF2,0xD7742E5F,0x0730A8AF,0xFD1C2458,0xF161772E,0x00000047,0,0  @:	0xA9
	.word	0x182A7B32,0x70A294F7,0xB7D4CCF8,0xD58CD3E3,0xFF4A0456,0x000000A8,0,0  @:	0xAA
	.word	0xF2F11972,0x1210FD6F,0x2777EF35,0x3203818A,0xFA53D581,0x0000000D,0,0  @:	0xAB
	.word	0x8D2957F3,0x5CBD883E,0x46BE269B,0x62236EFD,0xE7053371,0x000000D3,0,0  @:	0xAC
	.word	0x67F235B3,0x3E0FE1A6,0xD61D0556,0x85AC3C94,0xE21CE2A6,0x00000076,0,0  @:	0xAD
	.word	0x589E9273,0x99D95B0E,0x66F96101,0xAD3CCB2F,0xEC3791DE,0x00000099,0,0  @:	0xAE
	.word	0xB245F033,0xFB6B3296,0xF65A42CC,0x4AB39946,0xE92E4009,0x0000003C,0,0  @:	0xAF
	.word	0xA5FFA976,0xA36C8D4B,0xE3DC46BA,0xEEBD77F0,0x9B6F081D,0x000000E1,0,0  @:	0xB0
	.word	0x4F24CB36,0xC1DEE4D3,0x737F6577,0x09322599,0x9E76D9CA,0x00000044,0,0  @:	0xB1
	.word	0x70486CF6,0x66085E7B,0xC39B0120,0x21A2D222,0x905DAAB2,0x000000AB,0,0  @:	0xB2
	.word	0x9A930EB6,0x04BA37E3,0x533822ED,0xC62D804B,0x95447B65,0x0000000E,0,0  @:	0xB3
	.word	0xE54B4037,0x4A1742B2,0x32F1EB43,0x960D6F3C,0x88129D95,0x000000D0,0,0  @:	0xB4
	.word	0x0F902277,0x28A52B2A,0xA252C88E,0x71823D55,0x8D0B4C42,0x00000075,0,0  @:	0xB5
	.word	0x30FC85B7,0x8F739182,0x12B6ACD9,0x5912CAEE,0x83203F3A,0x0000009A,0,0  @:	0xB6
	.word	0xDA27E7F7,0xEDC1F81A,0x82158F14,0xBE9D9887,0x8639EEED,0x0000003F,0,0  @:	0xB7
	.word	0x24977AF5,0x709B13B8,0x40871C49,0x1FDD4668,0xBD95220C,0x00000083,0,0  @:	0xB8
	.word	0xCE4C18B5,0x12297A20,0xD0243F84,0xF8521401,0xB88CF3DB,0x00000026,0,0  @:	0xB9
	.word	0xF120BF75,0xB5FFC088,0x60C05BD3,0xD0C2E3BA,0xB6A780A3,0x000000C9,0,0  @:	0xBA
	.word	0x1BFBDD35,0xD74DA910,0xF063781E,0x374DB1D3,0xB3BE5174,0x0000006C,0,0  @:	0xBB
	.word	0x642393B4,0x99E0DC41,0x91AAB1B0,0x676D5EA4,0xAEE8B784,0x000000B2,0,0  @:	0xBC
	.word	0x8EF8F1F4,0xFB52B5D9,0x0109927D,0x80E20CCD,0xABF16653,0x00000017,0,0  @:	0xBD
	.word	0xB1945634,0x5C840F71,0xB1EDF62A,0xA872FB76,0xA5DA152B,0x000000F8,0,0  @:	0xBE
	.word	0x5B4F3474,0x3E3666E9,0x214ED5E7,0x4FFDA91F,0xA0C3C4FC,0x0000005D,0,0  @:	0xBF
	.word	0xD11097E1,0x9A4F49AF,0x571180A5,0x10D8B416,0x60F44702,0x00000063,0,0  @:	0xC0
	.word	0x3BCBF5A1,0xF8FD2037,0xC7B2A368,0xF757E67F,0x65ED96D5,0x000000C6,0,0  @:	0xC1
	.word	0x04A75261,0x5F2B9A9F,0x7756C73F,0xDFC711C4,0x6BC6E5AD,0x00000029,0,0  @:	0xC2
	.word	0xEE7C3021,0x3D99F307,0xE7F5E4F2,0x384843AD,0x6EDF347A,0x0000008C,0,0  @:	0xC3
	.word	0x91A47EA0,0x73348656,0x863C2D5C,0x6868ACDA,0x7389D28A,0x00000052,0,0  @:	0xC4
	.word	0x7B7F1CE0,0x1186EFCE,0x169F0E91,0x8FE7FEB3,0x7690035D,0x000000F7,0,0  @:	0xC5
	.word	0x4413BB20,0xB6505566,0xA67B6AC6,0xA7770908,0x78BB7025,0x00000018,0,0  @:	0xC6
	.word	0xAEC8D960,0xD4E23CFE,0x36D8490B,0x40F85B61,0x7DA2A1F2,0x000000BD,0,0  @:	0xC7
	.word	0x50784462,0x49B8D75C,0xF44ADA56,0xE1B8858E,0x460E6D13,0x00000001,0,0  @:	0xC8
	.word	0xBAA32622,0x2B0ABEC4,0x64E9F99B,0x0637D7E7,0x4317BCC4,0x000000A4,0,0  @:	0xC9
	.word	0x85CF81E2,0x8CDC046C,0xD40D9DCC,0x2EA7205C,0x4D3CCFBC,0x0000004B,0,0  @:	0xCA
	.word	0x6F14E3A2,0xEE6E6DF4,0x44AEBE01,0xC9287235,0x48251E6B,0x000000EE,0,0  @:	0xCB
	.word	0x10CCAD23,0xA0C318A5,0x256777AF,0x99089D42,0x5573F89B,0x00000030,0,0  @:	0xCC
	.word	0xFA17CF63,0xC271713D,0xB5C45462,0x7E87CF2B,0x506A294C,0x00000095,0,0  @:	0xCD
	.word	0xC57B68A3,0x65A7CB95,0x05203035,0x56173890,0x5E415A34,0x0000007A,0,0  @:	0xCE
	.word	0x2FA00AE3,0x0715A20D,0x958313F8,0xB1986AF9,0x5B588BE3,0x000000DF,0,0  @:	0xCF
	.word	0x381A53A6,0x5F121DD0,0x8005178E,0x1596844F,0x2919C3F7,0x00000002,0,0  @:	0xD0
	.word	0xD2C131E6,0x3DA07448,0x10A63443,0xF219D626,0x2C001220,0x000000A7,0,0  @:	0xD1
	.word	0xEDAD9626,0x9A76CEE0,0xA0425014,0xDA89219D,0x222B6158,0x00000048,0,0  @:	0xD2
	.word	0x0776F466,0xF8C4A778,0x30E173D9,0x3D0673F4,0x2732B08F,0x000000ED,0,0  @:	0xD3
	.word	0x78AEBAE7,0xB669D229,0x5128BA77,0x6D269C83,0x3A64567F,0x00000033,0,0  @:	0xD4
	.word	0x9275D8A7,0xD4DBBBB1,0xC18B99BA,0x8AA9CEEA,0x3F7D87A8,0x00000096,0,0  @:	0xD5
	.word	0xAD197F67,0x730D0119,0x716FFDED,0xA2393951,0x3156F4D0,0x00000079,0,0  @:	0xD6
	.word	0x47C21D27,0x11BF6881,0xE1CCDE20,0x45B66B38,0x344F2507,0x000000DC,0,0  @:	0xD7
	.word	0xB9728025,0x8CE58323,0x235E4D7D,0xE4F6B5D7,0x0FE3E9E6,0x00000060,0,0  @:	0xD8
	.word	0x53A9E265,0xEE57EABB,0xB3FD6EB0,0x0379E7BE,0x0AFA3831,0x000000C5,0,0  @:	0xD9
	.word	0x6CC545A5,0x49815013,0x03190AE7,0x2BE91005,0x04D14B49,0x0000002A,0,0  @:	0xDA
	.word	0x861E27E5,0x2B33398B,0x93BA292A,0xCC66426C,0x01C89A9E,0x0000008F,0,0  @:	0xDB
	.word	0xF9C66964,0x659E4CDA,0xF273E084,0x9C46AD1B,0x1C9E7C6E,0x00000051,0,0  @:	0xDC
	.word	0x131D0B24,0x072C2542,0x62D0C349,0x7BC9FF72,0x1987ADB9,0x000000F4,0,0  @:	0xDD
	.word	0x2C71ACE4,0xA0FA9FEA,0xD234A71E,0x535908C9,0x17ACDEC1,0x0000001B,0,0  @:	0xDE
	.word	0xC6AACEA4,0xC248F672,0x429784D3,0xB4D65AA0,0x12B50F16,0x000000BE,0,0  @:	0xDF
	.word	0x03051F6E,0x10F4E151,0xF938AEF2,0x1B44D4A4,0xF22E4EE9,0x000000A1,0,0  @:	0xE0
	.word	0xE9DE7D2E,0x724688C9,0x699B8D3F,0xFCCB86CD,0xF7379F3E,0x00000004,0,0  @:	0xE1
	.word	0xD6B2DAEE,0xD5903261,0xD97FE968,0xD45B7176,0xF91CEC46,0x000000EB,0,0  @:	0xE2
	.word	0x3C69B8AE,0xB7225BF9,0x49DCCAA5,0x33D4231F,0xFC053D91,0x0000004E,0,0  @:	0xE3
	.word	0x43B1F62F,0xF98F2EA8,0x2815030B,0x63F4CC68,0xE153DB61,0x00000090,0,0  @:	0xE4
	.word	0xA96A946F,0x9B3D4730,0xB8B620C6,0x847B9E01,0xE44A0AB6,0x00000035,0,0  @:	0xE5
	.word	0x960633AF,0x3CEBFD98,0x08524491,0xACEB69BA,0xEA6179CE,0x000000DA,0,0  @:	0xE6
	.word	0x7CDD51EF,0x5E599400,0x98F1675C,0x4B643BD3,0xEF78A819,0x0000007F,0,0  @:	0xE7
	.word	0x826DCCED,0xC3037FA2,0x5A63F401,0xEA24E53C,0xD4D464F8,0x000000C3,0,0  @:	0xE8
	.word	0x68B6AEAD,0xA1B1163A,0xCAC0D7CC,0x0DABB755,0xD1CDB52F,0x00000066,0,0  @:	0xE9
	.word	0x57DA096D,0x0667AC92,0x7A24B39B,0x253B40EE,0xDFE6C657,0x00000089,0,0  @:	0xEA
	.word	0xBD016B2D,0x64D5C50A,0xEA879056,0xC2B41287,0xDAFF1780,0x0000002C,0,0  @:	0xEB
	.word	0xC2D925AC,0x2A78B05B,0x8B4E59F8,0x9294FDF0,0xC7A9F170,0x000000F2,0,0  @:	0xEC
	.word	0x280247EC,0x48CAD9C3,0x1BED7A35,0x751BAF99,0xC2B020A7,0x00000057,0,0  @:	0xED
	.word	0x176EE02C,0xEF1C636B,0xAB091E62,0x5D8B5822,0xCC9B53DF,0x000000B8,0,0  @:	0xEE
	.word	0xFDB5826C,0x8DAE0AF3,0x3BAA3DAF,0xBA040A4B,0xC9828208,0x0000001D,0,0  @:	0xEF
	.word	0xEA0FDB29,0xD5A9B52E,0x2E2C39D9,0x1E0AE4FD,0xBBC3CA1C,0x000000C0,0,0  @:	0xF0
	.word	0x00D4B969,0xB71BDCB6,0xBE8F1A14,0xF985B694,0xBEDA1BCB,0x00000065,0,0  @:	0xF1
	.word	0x3FB81EA9,0x10CD661E,0x0E6B7E43,0xD115412F,0xB0F168B3,0x0000008A,0,0  @:	0xF2
	.word	0xD5637CE9,0x727F0F86,0x9EC85D8E,0x369A1346,0xB5E8B964,0x0000002F,0,0  @:	0xF3
	.word	0xAABB3268,0x3CD27AD7,0xFF019420,0x66BAFC31,0xA8BE5F94,0x000000F1,0,0  @:	0xF4
	.word	0x40605028,0x5E60134F,0x6FA2B7ED,0x8135AE58,0xADA78E43,0x00000054,0,0  @:	0xF5
	.word	0x7F0CF7E8,0xF9B6A9E7,0xDF46D3BA,0xA9A559E3,0xA38CFD3B,0x000000BB,0,0  @:	0xF6
	.word	0x95D795A8,0x9B04C07F,0x4FE5F077,0x4E2A0B8A,0xA6952CEC,0x0000001E,0,0  @:	0xF7
	.word	0x6B6708AA,0x065E2BDD,0x8D77632A,0xEF6AD565,0x9D39E00D,0x000000A2,0,0  @:	0xF8
	.word	0x81BC6AEA,0x64EC4245,0x1DD440E7,0x08E5870C,0x982031DA,0x00000007,0,0  @:	0xF9
	.word	0xBED0CD2A,0xC33AF8ED,0xAD3024B0,0x207570B7,0x960B42A2,0x000000E8,0,0  @:	0xFA
	.word	0x540BAF6A,0xA1889175,0x3D93077D,0xC7FA22DE,0x93129375,0x0000004D,0,0  @:	0xFB
	.word	0x2BD3E1EB,0xEF25E424,0x5C5ACED3,0x97DACDA9,0x8E447585,0x00000093,0,0  @:	0xFC
	.word	0xC10883AB,0x8D978DBC,0xCCF9ED1E,0x70559FC0,0x8B5DA452,0x00000036,0,0  @:	0xFD
	.word	0xFE64246B,0x2A413714,0x7C1D8949,0x58C5687B,0x8576D72A,0x000000D9,0,0  @:	0xFE
	.word	0x14BF462B,0x48F35E8C,0xECBEAA84,0xBF4A3A12,0x806F06FD,0x0000007C,0,0  @:	0xFF

	.align		8

bch_n128_table_neon:
	.word	0x00000000,0x00000000,0x00000000,0x00000000,0,0,0,0	  @: 0x00
	.word	0x5F25071C,0xBD972771,0x756DFC19,0x2B66F904,0,0,0,0	  @: 0x01
	.word	0xBE4A0E38,0x7A2F4FE2,0xEADAF833,0x56CCF209,0,0,0,0	  @: 0x02
	.word	0xE16F0924,0xC7B86893,0x9FB7042A,0x7DAA0B0D,0,0,0,0	  @: 0x03
	.word	0x7D951C70,0xF45E9EC4,0xD4B5F167,0xAC98E513,0,0,0,0	  @: 0x04
	.word	0x22B01B6C,0x49C9B9B5,0xA1D80D7E,0x87FE1C17,0,0,0,0	  @: 0x05
	.word	0xC3DF1248,0x8E71D126,0x3E6F0954,0xFA54171A,0,0,0,0	  @: 0x06
	.word	0x9CFA1554,0x33E6F657,0x4B02F54D,0xD132EE1E,0,0,0,0	  @: 0x07
	.word	0xFB2A39E0,0xE8BD3C89,0xA86BE3CF,0x5831CB27,0,0,0,0	  @: 0x08
	.word	0xA40F3EFC,0x552A1BF8,0xDD061FD6,0x73573223,0,0,0,0	  @: 0x09
	.word	0x456037D8,0x9292736B,0x42B11BFC,0x0EFD392E,0,0,0,0	  @: 0x0A
	.word	0x1A4530C4,0x2F05541A,0x37DCE7E5,0x259BC02A,0,0,0,0	  @: 0x0B
	.word	0x86BF2590,0x1CE3A24D,0x7CDE12A8,0xF4A92E34,0,0,0,0	  @: 0x0C
	.word	0xD99A228C,0xA174853C,0x09B3EEB1,0xDFCFD730,0,0,0,0	  @: 0x0D
	.word	0x38F52BA8,0x66CCEDAF,0x9604EA9B,0xA265DC3D,0,0,0,0	  @: 0x0E
	.word	0x67D02CB4,0xDB5BCADE,0xE3691682,0x89032539,0,0,0,0	  @: 0x0F
	.word	0xA87075DC,0x6CEC5E63,0x25BA3A86,0x9B046F4B,0,0,0,0	  @: 0x10
	.word	0xF75572C0,0xD17B7912,0x50D7C69F,0xB062964F,0,0,0,0	  @: 0x11
	.word	0x163A7BE4,0x16C31181,0xCF60C2B5,0xCDC89D42,0,0,0,0	  @: 0x12
	.word	0x491F7CF8,0xAB5436F0,0xBA0D3EAC,0xE6AE6446,0,0,0,0	  @: 0x13
	.word	0xD5E569AC,0x98B2C0A7,0xF10FCBE1,0x379C8A58,0,0,0,0	  @: 0x14
	.word	0x8AC06EB0,0x2525E7D6,0x846237F8,0x1CFA735C,0,0,0,0	  @: 0x15
	.word	0x6BAF6794,0xE29D8F45,0x1BD533D2,0x61507851,0,0,0,0	  @: 0x16
	.word	0x348A6088,0x5F0AA834,0x6EB8CFCB,0x4A368155,0,0,0,0	  @: 0x17
	.word	0x535A4C3C,0x845162EA,0x8DD1D949,0xC335A46C,0,0,0,0	  @: 0x18
	.word	0x0C7F4B20,0x39C6459B,0xF8BC2550,0xE8535D68,0,0,0,0	  @: 0x19
	.word	0xED104204,0xFE7E2D08,0x670B217A,0x95F95665,0,0,0,0	  @: 0x1A
	.word	0xB2354518,0x43E90A79,0x1266DD63,0xBE9FAF61,0,0,0,0	  @: 0x1B
	.word	0x2ECF504C,0x700FFC2E,0x5964282E,0x6FAD417F,0,0,0,0	  @: 0x1C
	.word	0x71EA5750,0xCD98DB5F,0x2C09D437,0x44CBB87B,0,0,0,0	  @: 0x1D
	.word	0x90855E74,0x0A20B3CC,0xB3BED01D,0x3961B376,0,0,0,0	  @: 0x1E
	.word	0xCFA05968,0xB7B794BD,0xC6D32C04,0x12074A72,0,0,0,0	  @: 0x1F
	.word	0x0FC4EDA4,0x644F9AB7,0x3F198915,0x1D6F2792,0,0,0,0	  @: 0x20
	.word	0x50E1EAB8,0xD9D8BDC6,0x4A74750C,0x3609DE96,0,0,0,0	  @: 0x21
	.word	0xB18EE39C,0x1E60D555,0xD5C37126,0x4BA3D59B,0,0,0,0	  @: 0x22
	.word	0xEEABE480,0xA3F7F224,0xA0AE8D3F,0x60C52C9F,0,0,0,0	  @: 0x23
	.word	0x7251F1D4,0x90110473,0xEBAC7872,0xB1F7C281,0,0,0,0	  @: 0x24
	.word	0x2D74F6C8,0x2D862302,0x9EC1846B,0x9A913B85,0,0,0,0	  @: 0x25
	.word	0xCC1BFFEC,0xEA3E4B91,0x01768041,0xE73B3088,0,0,0,0	  @: 0x26
	.word	0x933EF8F0,0x57A96CE0,0x741B7C58,0xCC5DC98C,0,0,0,0	  @: 0x27
	.word	0xF4EED444,0x8CF2A63E,0x97726ADA,0x455EECB5,0,0,0,0	  @: 0x28
	.word	0xABCBD358,0x3165814F,0xE21F96C3,0x6E3815B1,0,0,0,0	  @: 0x29
	.word	0x4AA4DA7C,0xF6DDE9DC,0x7DA892E9,0x13921EBC,0,0,0,0	  @: 0x2A
	.word	0x1581DD60,0x4B4ACEAD,0x08C56EF0,0x38F4E7B8,0,0,0,0	  @: 0x2B
	.word	0x897BC834,0x78AC38FA,0x43C79BBD,0xE9C609A6,0,0,0,0	  @: 0x2C
	.word	0xD65ECF28,0xC53B1F8B,0x36AA67A4,0xC2A0F0A2,0,0,0,0	  @: 0x2D
	.word	0x3731C60C,0x02837718,0xA91D638E,0xBF0AFBAF,0,0,0,0	  @: 0x2E
	.word	0x6814C110,0xBF145069,0xDC709F97,0x946C02AB,0,0,0,0	  @: 0x2F
	.word	0xA7B49878,0x08A3C4D4,0x1AA3B393,0x866B48D9,0,0,0,0	  @: 0x30
	.word	0xF8919F64,0xB534E3A5,0x6FCE4F8A,0xAD0DB1DD,0,0,0,0	  @: 0x31
	.word	0x19FE9640,0x728C8B36,0xF0794BA0,0xD0A7BAD0,0,0,0,0	  @: 0x32
	.word	0x46DB915C,0xCF1BAC47,0x8514B7B9,0xFBC143D4,0,0,0,0	  @: 0x33
	.word	0xDA218408,0xFCFD5A10,0xCE1642F4,0x2AF3ADCA,0,0,0,0	  @: 0x34
	.word	0x85048314,0x416A7D61,0xBB7BBEED,0x019554CE,0,0,0,0	  @: 0x35
	.word	0x646B8A30,0x86D215F2,0x24CCBAC7,0x7C3F5FC3,0,0,0,0	  @: 0x36
	.word	0x3B4E8D2C,0x3B453283,0x51A146DE,0x5759A6C7,0,0,0,0	  @: 0x37
	.word	0x5C9EA198,0xE01EF85D,0xB2C8505C,0xDE5A83FE,0,0,0,0	  @: 0x38
	.word	0x03BBA684,0x5D89DF2C,0xC7A5AC45,0xF53C7AFA,0,0,0,0	  @: 0x39
	.word	0xE2D4AFA0,0x9A31B7BF,0x5812A86F,0x889671F7,0,0,0,0	  @: 0x3A
	.word	0xBDF1A8BC,0x27A690CE,0x2D7F5476,0xA3F088F3,0,0,0,0	  @: 0x3B
	.word	0x210BBDE8,0x14406699,0x667DA13B,0x72C266ED,0,0,0,0	  @: 0x3C
	.word	0x7E2EBAF4,0xA9D741E8,0x13105D22,0x59A49FE9,0,0,0,0	  @: 0x3D
	.word	0x9F41B3D0,0x6E6F297B,0x8CA75908,0x240E94E4,0,0,0,0	  @: 0x3E
	.word	0xC064B4CC,0xD3F80E0A,0xF9CAA511,0x0F686DE0,0,0,0,0	  @: 0x3F
	.word	0x40ADDC55,0x7509131E,0x0A5FEE32,0x11B8B720,0,0,0,0	  @: 0x40
	.word	0x1F88DB49,0xC89E346F,0x7F32122B,0x3ADE4E24,0,0,0,0	  @: 0x41
	.word	0xFEE7D26D,0x0F265CFC,0xE0851601,0x47744529,0,0,0,0	  @: 0x42
	.word	0xA1C2D571,0xB2B17B8D,0x95E8EA18,0x6C12BC2D,0,0,0,0	  @: 0x43
	.word	0x3D38C025,0x81578DDA,0xDEEA1F55,0xBD205233,0,0,0,0	  @: 0x44
	.word	0x621DC739,0x3CC0AAAB,0xAB87E34C,0x9646AB37,0,0,0,0	  @: 0x45
	.word	0x8372CE1D,0xFB78C238,0x3430E766,0xEBECA03A,0,0,0,0	  @: 0x46
	.word	0xDC57C901,0x46EFE549,0x415D1B7F,0xC08A593E,0,0,0,0	  @: 0x47
	.word	0xBB87E5B5,0x9DB42F97,0xA2340DFD,0x49897C07,0,0,0,0	  @: 0x48
	.word	0xE4A2E2A9,0x202308E6,0xD759F1E4,0x62EF8503,0,0,0,0	  @: 0x49
	.word	0x05CDEB8D,0xE79B6075,0x48EEF5CE,0x1F458E0E,0,0,0,0	  @: 0x4A
	.word	0x5AE8EC91,0x5A0C4704,0x3D8309D7,0x3423770A,0,0,0,0	  @: 0x4B
	.word	0xC612F9C5,0x69EAB153,0x7681FC9A,0xE5119914,0,0,0,0	  @: 0x4C
	.word	0x9937FED9,0xD47D9622,0x03EC0083,0xCE776010,0,0,0,0	  @: 0x4D
	.word	0x7858F7FD,0x13C5FEB1,0x9C5B04A9,0xB3DD6B1D,0,0,0,0	  @: 0x4E
	.word	0x277DF0E1,0xAE52D9C0,0xE936F8B0,0x98BB9219,0,0,0,0	  @: 0x4F
	.word	0xE8DDA989,0x19E54D7D,0x2FE5D4B4,0x8ABCD86B,0,0,0,0	  @: 0x50
	.word	0xB7F8AE95,0xA4726A0C,0x5A8828AD,0xA1DA216F,0,0,0,0	  @: 0x51
	.word	0x5697A7B1,0x63CA029F,0xC53F2C87,0xDC702A62,0,0,0,0	  @: 0x52
	.word	0x09B2A0AD,0xDE5D25EE,0xB052D09E,0xF716D366,0,0,0,0	  @: 0x53
	.word	0x9548B5F9,0xEDBBD3B9,0xFB5025D3,0x26243D78,0,0,0,0	  @: 0x54
	.word	0xCA6DB2E5,0x502CF4C8,0x8E3DD9CA,0x0D42C47C,0,0,0,0	  @: 0x55
	.word	0x2B02BBC1,0x97949C5B,0x118ADDE0,0x70E8CF71,0,0,0,0	  @: 0x56
	.word	0x7427BCDD,0x2A03BB2A,0x64E721F9,0x5B8E3675,0,0,0,0	  @: 0x57
	.word	0x13F79069,0xF15871F4,0x878E377B,0xD28D134C,0,0,0,0	  @: 0x58
	.word	0x4CD29775,0x4CCF5685,0xF2E3CB62,0xF9EBEA48,0,0,0,0	  @: 0x59
	.word	0xADBD9E51,0x8B773E16,0x6D54CF48,0x8441E145,0,0,0,0	  @: 0x5A
	.word	0xF298994D,0x36E01967,0x18393351,0xAF271841,0,0,0,0	  @: 0x5B
	.word	0x6E628C19,0x0506EF30,0x533BC61C,0x7E15F65F,0,0,0,0	  @: 0x5C
	.word	0x31478B05,0xB891C841,0x26563A05,0x55730F5B,0,0,0,0	  @: 0x5D
	.word	0xD0288221,0x7F29A0D2,0xB9E13E2F,0x28D90456,0,0,0,0	  @: 0x5E
	.word	0x8F0D853D,0xC2BE87A3,0xCC8CC236,0x03BFFD52,0,0,0,0	  @: 0x5F
	.word	0x4F6931F1,0x114689A9,0x35466727,0x0CD790B2,0,0,0,0	  @: 0x60
	.word	0x104C36ED,0xACD1AED8,0x402B9B3E,0x27B169B6,0,0,0,0	  @: 0x61
	.word	0xF1233FC9,0x6B69C64B,0xDF9C9F14,0x5A1B62BB,0,0,0,0	  @: 0x62
	.word	0xAE0638D5,0xD6FEE13A,0xAAF1630D,0x717D9BBF,0,0,0,0	  @: 0x63
	.word	0x32FC2D81,0xE518176D,0xE1F39640,0xA04F75A1,0,0,0,0	  @: 0x64
	.word	0x6DD92A9D,0x588F301C,0x949E6A59,0x8B298CA5,0,0,0,0	  @: 0x65
	.word	0x8CB623B9,0x9F37588F,0x0B296E73,0xF68387A8,0,0,0,0	  @: 0x66
	.word	0xD39324A5,0x22A07FFE,0x7E44926A,0xDDE57EAC,0,0,0,0	  @: 0x67
	.word	0xB4430811,0xF9FBB520,0x9D2D84E8,0x54E65B95,0,0,0,0	  @: 0x68
	.word	0xEB660F0D,0x446C9251,0xE84078F1,0x7F80A291,0,0,0,0	  @: 0x69
	.word	0x0A090629,0x83D4FAC2,0x77F77CDB,0x022AA99C,0,0,0,0	  @: 0x6A
	.word	0x552C0135,0x3E43DDB3,0x029A80C2,0x294C5098,0,0,0,0	  @: 0x6B
	.word	0xC9D61461,0x0DA52BE4,0x4998758F,0xF87EBE86,0,0,0,0	  @: 0x6C
	.word	0x96F3137D,0xB0320C95,0x3CF58996,0xD3184782,0,0,0,0	  @: 0x6D
	.word	0x779C1A59,0x778A6406,0xA3428DBC,0xAEB24C8F,0,0,0,0	  @: 0x6E
	.word	0x28B91D45,0xCA1D4377,0xD62F71A5,0x85D4B58B,0,0,0,0	  @: 0x6F
	.word	0xE719442D,0x7DAAD7CA,0x10FC5DA1,0x97D3FFF9,0,0,0,0	  @: 0x70
	.word	0xB83C4331,0xC03DF0BB,0x6591A1B8,0xBCB506FD,0,0,0,0	  @: 0x71
	.word	0x59534A15,0x07859828,0xFA26A592,0xC11F0DF0,0,0,0,0	  @: 0x72
	.word	0x06764D09,0xBA12BF59,0x8F4B598B,0xEA79F4F4,0,0,0,0	  @: 0x73
	.word	0x9A8C585D,0x89F4490E,0xC449ACC6,0x3B4B1AEA,0,0,0,0	  @: 0x74
	.word	0xC5A95F41,0x34636E7F,0xB12450DF,0x102DE3EE,0,0,0,0	  @: 0x75
	.word	0x24C65665,0xF3DB06EC,0x2E9354F5,0x6D87E8E3,0,0,0,0	  @: 0x76
	.word	0x7BE35179,0x4E4C219D,0x5BFEA8EC,0x46E111E7,0,0,0,0	  @: 0x77
	.word	0x1C337DCD,0x9517EB43,0xB897BE6E,0xCFE234DE,0,0,0,0	  @: 0x78
	.word	0x43167AD1,0x2880CC32,0xCDFA4277,0xE484CDDA,0,0,0,0	  @: 0x79
	.word	0xA27973F5,0xEF38A4A1,0x524D465D,0x992EC6D7,0,0,0,0	  @: 0x7A
	.word	0xFD5C74E9,0x52AF83D0,0x2720BA44,0xB2483FD3,0,0,0,0	  @: 0x7B
	.word	0x61A661BD,0x61497587,0x6C224F09,0x637AD1CD,0,0,0,0	  @: 0x7C
	.word	0x3E8366A1,0xDCDE52F6,0x194FB310,0x481C28C9,0,0,0,0	  @: 0x7D
	.word	0xDFEC6F85,0x1B663A65,0x86F8B73A,0x35B623C4,0,0,0,0	  @: 0x7E
	.word	0x80C96899,0xA6F11D14,0xF3954B23,0x1ED0DAC0,0,0,0,0	  @: 0x7F
	.word	0x805AB9AB,0xEA12263C,0x14BEDC65,0x22706F41,0,0,0,0	  @: 0x80
	.word	0xDF7FBEB7,0x5785014D,0x61D3207C,0x09169645,0,0,0,0	  @: 0x81
	.word	0x3E10B793,0x903D69DE,0xFE642456,0x74BC9D48,0,0,0,0	  @: 0x82
	.word	0x6135B08F,0x2DAA4EAF,0x8B09D84F,0x5FDA644C,0,0,0,0	  @: 0x83
	.word	0xFDCFA5DB,0x1E4CB8F8,0xC00B2D02,0x8EE88A52,0,0,0,0	  @: 0x84
	.word	0xA2EAA2C7,0xA3DB9F89,0xB566D11B,0xA58E7356,0,0,0,0	  @: 0x85
	.word	0x4385ABE3,0x6463F71A,0x2AD1D531,0xD824785B,0,0,0,0	  @: 0x86
	.word	0x1CA0ACFF,0xD9F4D06B,0x5FBC2928,0xF342815F,0,0,0,0	  @: 0x87
	.word	0x7B70804B,0x02AF1AB5,0xBCD53FAA,0x7A41A466,0,0,0,0	  @: 0x88
	.word	0x24558757,0xBF383DC4,0xC9B8C3B3,0x51275D62,0,0,0,0	  @: 0x89
	.word	0xC53A8E73,0x78805557,0x560FC799,0x2C8D566F,0,0,0,0	  @: 0x8A
	.word	0x9A1F896F,0xC5177226,0x23623B80,0x07EBAF6B,0,0,0,0	  @: 0x8B
	.word	0x06E59C3B,0xF6F18471,0x6860CECD,0xD6D94175,0,0,0,0	  @: 0x8C
	.word	0x59C09B27,0x4B66A300,0x1D0D32D4,0xFDBFB871,0,0,0,0	  @: 0x8D
	.word	0xB8AF9203,0x8CDECB93,0x82BA36FE,0x8015B37C,0,0,0,0	  @: 0x8E
	.word	0xE78A951F,0x3149ECE2,0xF7D7CAE7,0xAB734A78,0,0,0,0	  @: 0x8F
	.word	0x282ACC77,0x86FE785F,0x3104E6E3,0xB974000A,0,0,0,0	  @: 0x90
	.word	0x770FCB6B,0x3B695F2E,0x44691AFA,0x9212F90E,0,0,0,0	  @: 0x91
	.word	0x9660C24F,0xFCD137BD,0xDBDE1ED0,0xEFB8F203,0,0,0,0	  @: 0x92
	.word	0xC945C553,0x414610CC,0xAEB3E2C9,0xC4DE0B07,0,0,0,0	  @: 0x93
	.word	0x55BFD007,0x72A0E69B,0xE5B11784,0x15ECE519,0,0,0,0	  @: 0x94
	.word	0x0A9AD71B,0xCF37C1EA,0x90DCEB9D,0x3E8A1C1D,0,0,0,0	  @: 0x95
	.word	0xEBF5DE3F,0x088FA979,0x0F6BEFB7,0x43201710,0,0,0,0	  @: 0x96
	.word	0xB4D0D923,0xB5188E08,0x7A0613AE,0x6846EE14,0,0,0,0	  @: 0x97
	.word	0xD300F597,0x6E4344D6,0x996F052C,0xE145CB2D,0,0,0,0	  @: 0x98
	.word	0x8C25F28B,0xD3D463A7,0xEC02F935,0xCA233229,0,0,0,0	  @: 0x99
	.word	0x6D4AFBAF,0x146C0B34,0x73B5FD1F,0xB7893924,0,0,0,0	  @: 0x9A
	.word	0x326FFCB3,0xA9FB2C45,0x06D80106,0x9CEFC020,0,0,0,0	  @: 0x9B
	.word	0xAE95E9E7,0x9A1DDA12,0x4DDAF44B,0x4DDD2E3E,0,0,0,0	  @: 0x9C
	.word	0xF1B0EEFB,0x278AFD63,0x38B70852,0x66BBD73A,0,0,0,0	  @: 0x9D
	.word	0x10DFE7DF,0xE03295F0,0xA7000C78,0x1B11DC37,0,0,0,0	  @: 0x9E
	.word	0x4FFAE0C3,0x5DA5B281,0xD26DF061,0x30772533,0,0,0,0	  @: 0x9F
	.word	0x8F9E540F,0x8E5DBC8B,0x2BA75570,0x3F1F48D3,0,0,0,0	  @: 0xA0
	.word	0xD0BB5313,0x33CA9BFA,0x5ECAA969,0x1479B1D7,0,0,0,0	  @: 0xA1
	.word	0x31D45A37,0xF472F369,0xC17DAD43,0x69D3BADA,0,0,0,0	  @: 0xA2
	.word	0x6EF15D2B,0x49E5D418,0xB410515A,0x42B543DE,0,0,0,0	  @: 0xA3
	.word	0xF20B487F,0x7A03224F,0xFF12A417,0x9387ADC0,0,0,0,0	  @: 0xA4
	.word	0xAD2E4F63,0xC794053E,0x8A7F580E,0xB8E154C4,0,0,0,0	  @: 0xA5
	.word	0x4C414647,0x002C6DAD,0x15C85C24,0xC54B5FC9,0,0,0,0	  @: 0xA6
	.word	0x1364415B,0xBDBB4ADC,0x60A5A03D,0xEE2DA6CD,0,0,0,0	  @: 0xA7
	.word	0x74B46DEF,0x66E08002,0x83CCB6BF,0x672E83F4,0,0,0,0	  @: 0xA8
	.word	0x2B916AF3,0xDB77A773,0xF6A14AA6,0x4C487AF0,0,0,0,0	  @: 0xA9
	.word	0xCAFE63D7,0x1CCFCFE0,0x69164E8C,0x31E271FD,0,0,0,0	  @: 0xAA
	.word	0x95DB64CB,0xA158E891,0x1C7BB295,0x1A8488F9,0,0,0,0	  @: 0xAB
	.word	0x0921719F,0x92BE1EC6,0x577947D8,0xCBB666E7,0,0,0,0	  @: 0xAC
	.word	0x56047683,0x2F2939B7,0x2214BBC1,0xE0D09FE3,0,0,0,0	  @: 0xAD
	.word	0xB76B7FA7,0xE8915124,0xBDA3BFEB,0x9D7A94EE,0,0,0,0	  @: 0xAE
	.word	0xE84E78BB,0x55067655,0xC8CE43F2,0xB61C6DEA,0,0,0,0	  @: 0xAF
	.word	0x27EE21D3,0xE2B1E2E8,0x0E1D6FF6,0xA41B2798,0,0,0,0	  @: 0xB0
	.word	0x78CB26CF,0x5F26C599,0x7B7093EF,0x8F7DDE9C,0,0,0,0	  @: 0xB1
	.word	0x99A42FEB,0x989EAD0A,0xE4C797C5,0xF2D7D591,0,0,0,0	  @: 0xB2
	.word	0xC68128F7,0x25098A7B,0x91AA6BDC,0xD9B12C95,0,0,0,0	  @: 0xB3
	.word	0x5A7B3DA3,0x16EF7C2C,0xDAA89E91,0x0883C28B,0,0,0,0	  @: 0xB4
	.word	0x055E3ABF,0xAB785B5D,0xAFC56288,0x23E53B8F,0,0,0,0	  @: 0xB5
	.word	0xE431339B,0x6CC033CE,0x307266A2,0x5E4F3082,0,0,0,0	  @: 0xB6
	.word	0xBB143487,0xD15714BF,0x451F9ABB,0x7529C986,0,0,0,0	  @: 0xB7
	.word	0xDCC41833,0x0A0CDE61,0xA6768C39,0xFC2AECBF,0,0,0,0	  @: 0xB8
	.word	0x83E11F2F,0xB79BF910,0xD31B7020,0xD74C15BB,0,0,0,0	  @: 0xB9
	.word	0x628E160B,0x70239183,0x4CAC740A,0xAAE61EB6,0,0,0,0	  @: 0xBA
	.word	0x3DAB1117,0xCDB4B6F2,0x39C18813,0x8180E7B2,0,0,0,0	  @: 0xBB
	.word	0xA1510443,0xFE5240A5,0x72C37D5E,0x50B209AC,0,0,0,0	  @: 0xBC
	.word	0xFE74035F,0x43C567D4,0x07AE8147,0x7BD4F0A8,0,0,0,0	  @: 0xBD
	.word	0x1F1B0A7B,0x847D0F47,0x9819856D,0x067EFBA5,0,0,0,0	  @: 0xBE
	.word	0x403E0D67,0x39EA2836,0xED747974,0x2D1802A1,0,0,0,0	  @: 0xBF
	.word	0xC0F765FE,0x9F1B3522,0x1EE13257,0x33C8D861,0,0,0,0	  @: 0xC0
	.word	0x9FD262E2,0x228C1253,0x6B8CCE4E,0x18AE2165,0,0,0,0	  @: 0xC1
	.word	0x7EBD6BC6,0xE5347AC0,0xF43BCA64,0x65042A68,0,0,0,0	  @: 0xC2
	.word	0x21986CDA,0x58A35DB1,0x8156367D,0x4E62D36C,0,0,0,0	  @: 0xC3
	.word	0xBD62798E,0x6B45ABE6,0xCA54C330,0x9F503D72,0,0,0,0	  @: 0xC4
	.word	0xE2477E92,0xD6D28C97,0xBF393F29,0xB436C476,0,0,0,0	  @: 0xC5
	.word	0x032877B6,0x116AE404,0x208E3B03,0xC99CCF7B,0,0,0,0	  @: 0xC6
	.word	0x5C0D70AA,0xACFDC375,0x55E3C71A,0xE2FA367F,0,0,0,0	  @: 0xC7
	.word	0x3BDD5C1E,0x77A609AB,0xB68AD198,0x6BF91346,0,0,0,0	  @: 0xC8
	.word	0x64F85B02,0xCA312EDA,0xC3E72D81,0x409FEA42,0,0,0,0	  @: 0xC9
	.word	0x85975226,0x0D894649,0x5C5029AB,0x3D35E14F,0,0,0,0	  @: 0xCA
	.word	0xDAB2553A,0xB01E6138,0x293DD5B2,0x1653184B,0,0,0,0	  @: 0xCB
	.word	0x4648406E,0x83F8976F,0x623F20FF,0xC761F655,0,0,0,0	  @: 0xCC
	.word	0x196D4772,0x3E6FB01E,0x1752DCE6,0xEC070F51,0,0,0,0	  @: 0xCD
	.word	0xF8024E56,0xF9D7D88D,0x88E5D8CC,0x91AD045C,0,0,0,0	  @: 0xCE
	.word	0xA727494A,0x4440FFFC,0xFD8824D5,0xBACBFD58,0,0,0,0	  @: 0xCF
	.word	0x68871022,0xF3F76B41,0x3B5B08D1,0xA8CCB72A,0,0,0,0	  @: 0xD0
	.word	0x37A2173E,0x4E604C30,0x4E36F4C8,0x83AA4E2E,0,0,0,0	  @: 0xD1
	.word	0xD6CD1E1A,0x89D824A3,0xD181F0E2,0xFE004523,0,0,0,0	  @: 0xD2
	.word	0x89E81906,0x344F03D2,0xA4EC0CFB,0xD566BC27,0,0,0,0	  @: 0xD3
	.word	0x15120C52,0x07A9F585,0xEFEEF9B6,0x04545239,0,0,0,0	  @: 0xD4
	.word	0x4A370B4E,0xBA3ED2F4,0x9A8305AF,0x2F32AB3D,0,0,0,0	  @: 0xD5
	.word	0xAB58026A,0x7D86BA67,0x05340185,0x5298A030,0,0,0,0	  @: 0xD6
	.word	0xF47D0576,0xC0119D16,0x7059FD9C,0x79FE5934,0,0,0,0	  @: 0xD7
	.word	0x93AD29C2,0x1B4A57C8,0x9330EB1E,0xF0FD7C0D,0,0,0,0	  @: 0xD8
	.word	0xCC882EDE,0xA6DD70B9,0xE65D1707,0xDB9B8509,0,0,0,0	  @: 0xD9
	.word	0x2DE727FA,0x6165182A,0x79EA132D,0xA6318E04,0,0,0,0	  @: 0xDA
	.word	0x72C220E6,0xDCF23F5B,0x0C87EF34,0x8D577700,0,0,0,0	  @: 0xDB
	.word	0xEE3835B2,0xEF14C90C,0x47851A79,0x5C65991E,0,0,0,0	  @: 0xDC
	.word	0xB11D32AE,0x5283EE7D,0x32E8E660,0x7703601A,0,0,0,0	  @: 0xDD
	.word	0x50723B8A,0x953B86EE,0xAD5FE24A,0x0AA96B17,0,0,0,0	  @: 0xDE
	.word	0x0F573C96,0x28ACA19F,0xD8321E53,0x21CF9213,0,0,0,0	  @: 0xDF
	.word	0xCF33885A,0xFB54AF95,0x21F8BB42,0x2EA7FFF3,0,0,0,0	  @: 0xE0
	.word	0x90168F46,0x46C388E4,0x5495475B,0x05C106F7,0,0,0,0	  @: 0xE1
	.word	0x71798662,0x817BE077,0xCB224371,0x786B0DFA,0,0,0,0	  @: 0xE2
	.word	0x2E5C817E,0x3CECC706,0xBE4FBF68,0x530DF4FE,0,0,0,0	  @: 0xE3
	.word	0xB2A6942A,0x0F0A3151,0xF54D4A25,0x823F1AE0,0,0,0,0	  @: 0xE4
	.word	0xED839336,0xB29D1620,0x8020B63C,0xA959E3E4,0,0,0,0	  @: 0xE5
	.word	0x0CEC9A12,0x75257EB3,0x1F97B216,0xD4F3E8E9,0,0,0,0	  @: 0xE6
	.word	0x53C99D0E,0xC8B259C2,0x6AFA4E0F,0xFF9511ED,0,0,0,0	  @: 0xE7
	.word	0x3419B1BA,0x13E9931C,0x8993588D,0x769634D4,0,0,0,0	  @: 0xE8
	.word	0x6B3CB6A6,0xAE7EB46D,0xFCFEA494,0x5DF0CDD0,0,0,0,0	  @: 0xE9
	.word	0x8A53BF82,0x69C6DCFE,0x6349A0BE,0x205AC6DD,0,0,0,0	  @: 0xEA
	.word	0xD576B89E,0xD451FB8F,0x16245CA7,0x0B3C3FD9,0,0,0,0	  @: 0xEB
	.word	0x498CADCA,0xE7B70DD8,0x5D26A9EA,0xDA0ED1C7,0,0,0,0	  @: 0xEC
	.word	0x16A9AAD6,0x5A202AA9,0x284B55F3,0xF16828C3,0,0,0,0	  @: 0xED
	.word	0xF7C6A3F2,0x9D98423A,0xB7FC51D9,0x8CC223CE,0,0,0,0	  @: 0xEE
	.word	0xA8E3A4EE,0x200F654B,0xC291ADC0,0xA7A4DACA,0,0,0,0	  @: 0xEF
	.word	0x6743FD86,0x97B8F1F6,0x044281C4,0xB5A390B8,0,0,0,0	  @: 0xF0
	.word	0x3866FA9A,0x2A2FD687,0x712F7DDD,0x9EC569BC,0,0,0,0	  @: 0xF1
	.word	0xD909F3BE,0xED97BE14,0xEE9879F7,0xE36F62B1,0,0,0,0	  @: 0xF2
	.word	0x862CF4A2,0x50009965,0x9BF585EE,0xC8099BB5,0,0,0,0	  @: 0xF3
	.word	0x1AD6E1F6,0x63E66F32,0xD0F770A3,0x193B75AB,0,0,0,0	  @: 0xF4
	.word	0x45F3E6EA,0xDE714843,0xA59A8CBA,0x325D8CAF,0,0,0,0	  @: 0xF5
	.word	0xA49CEFCE,0x19C920D0,0x3A2D8890,0x4FF787A2,0,0,0,0	  @: 0xF6
	.word	0xFBB9E8D2,0xA45E07A1,0x4F407489,0x64917EA6,0,0,0,0	  @: 0xF7
	.word	0x9C69C466,0x7F05CD7F,0xAC29620B,0xED925B9F,0,0,0,0	  @: 0xF8
	.word	0xC34CC37A,0xC292EA0E,0xD9449E12,0xC6F4A29B,0,0,0,0	  @: 0xF9
	.word	0x2223CA5E,0x052A829D,0x46F39A38,0xBB5EA996,0,0,0,0	  @: 0xFA
	.word	0x7D06CD42,0xB8BDA5EC,0x339E6621,0x90385092,0,0,0,0	  @: 0xFB
	.word	0xE1FCD816,0x8B5B53BB,0x789C936C,0x410ABE8C,0,0,0,0	  @: 0xFC
	.word	0xBED9DF0A,0x36CC74CA,0x0DF16F75,0x6A6C4788,0,0,0,0	  @: 0xFD
	.word	0x5FB6D62E,0xF1741C59,0x92466B5F,0x17C64C85,0,0,0,0	  @: 0xFE
	.word	0x0093D132,0x4CE33B28,0xE72B9746,0x3CA0B581,0,0,0,0	  @: 0xFF

	.align		8

bch_n160_table_neon:
	.word	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0,0,0   @: 0x00
	.word	0xED0C1560,0x1F332AFC,0x0357786A,0x0123D1EF,0x9165BBB8,0,0,0   @: 0x01
	.word	0xDB192AC0,0x3E6654F8,0x07AEF0D4,0x0346A2DF,0x22CB7671,0,0,0   @: 0x02
	.word	0x36153FA0,0x21557E04,0x04F988BE,0x02657330,0xB3AECDC9,0,0,0   @: 0x03
	.word	0x5A3F41E0,0x62FF820C,0x0C0B99C3,0x07AF9550,0xD5F3565A,0,0,0   @: 0x04
	.word	0xB7335480,0x7DCCA8F0,0x0F5CE1A9,0x068C44BF,0x4496EDE2,0,0,0   @: 0x05
	.word	0x81266B20,0x5C99D6F4,0x0BA56917,0x04E9378F,0xF738202B,0,0,0   @: 0x06
	.word	0x6C2A7E40,0x43AAFC08,0x08F2117D,0x05CAE660,0x665D9B93,0,0,0   @: 0x07
	.word	0x597297A0,0xDACD2FE5,0x1B414AED,0x0F7DFA4E,0x3B82160C,0,0,0   @: 0x08
	.word	0xB47E82C0,0xC5FE0519,0x18163287,0x0E5E2BA1,0xAAE7ADB4,0,0,0   @: 0x09
	.word	0x826BBD60,0xE4AB7B1D,0x1CEFBA39,0x0C3B5891,0x1949607D,0,0,0   @: 0x0A
	.word	0x6F67A800,0xFB9851E1,0x1FB8C253,0x0D18897E,0x882CDBC5,0,0,0   @: 0x0B
	.word	0x034DD640,0xB832ADE9,0x174AD32E,0x08D26F1E,0xEE714056,0,0,0   @: 0x0C
	.word	0xEE41C320,0xA7018715,0x141DAB44,0x09F1BEF1,0x7F14FBEE,0,0,0   @: 0x0D
	.word	0xD854FC80,0x8654F911,0x10E423FA,0x0B94CDC1,0xCCBA3627,0,0,0   @: 0x0E
	.word	0x3558E9E0,0x9967D3ED,0x13B35B90,0x0AB71C2E,0x5DDF8D9F,0,0,0   @: 0x0F
	.word	0x5EE83B21,0xAAA87536,0x35D5ECB0,0x1FD92572,0xE76196A0,0,0,0   @: 0x10
	.word	0xB3E42E41,0xB59B5FCA,0x368294DA,0x1EFAF49D,0x76042D18,0,0,0   @: 0x11
	.word	0x85F111E1,0x94CE21CE,0x327B1C64,0x1C9F87AD,0xC5AAE0D1,0,0,0   @: 0x12
	.word	0x68FD0481,0x8BFD0B32,0x312C640E,0x1DBC5642,0x54CF5B69,0,0,0   @: 0x13
	.word	0x04D77AC1,0xC857F73A,0x39DE7573,0x1876B022,0x3292C0FA,0,0,0   @: 0x14
	.word	0xE9DB6FA1,0xD764DDC6,0x3A890D19,0x195561CD,0xA3F77B42,0,0,0   @: 0x15
	.word	0xDFCE5001,0xF631A3C2,0x3E7085A7,0x1B3012FD,0x1059B68B,0,0,0   @: 0x16
	.word	0x32C24561,0xE902893E,0x3D27FDCD,0x1A13C312,0x813C0D33,0,0,0   @: 0x17
	.word	0x079AAC81,0x70655AD3,0x2E94A65D,0x10A4DF3C,0xDCE380AC,0,0,0   @: 0x18
	.word	0xEA96B9E1,0x6F56702F,0x2DC3DE37,0x11870ED3,0x4D863B14,0,0,0   @: 0x19
	.word	0xDC838641,0x4E030E2B,0x293A5689,0x13E27DE3,0xFE28F6DD,0,0,0   @: 0x1A
	.word	0x318F9321,0x513024D7,0x2A6D2EE3,0x12C1AC0C,0x6F4D4D65,0,0,0   @: 0x1B
	.word	0x5DA5ED61,0x129AD8DF,0x229F3F9E,0x170B4A6C,0x0910D6F6,0,0,0   @: 0x1C
	.word	0xB0A9F801,0x0DA9F223,0x21C847F4,0x16289B83,0x98756D4E,0,0,0   @: 0x1D
	.word	0x86BCC7A1,0x2CFC8C27,0x2531CF4A,0x144DE8B3,0x2BDBA087,0,0,0   @: 0x1E
	.word	0x6BB0D2C1,0x33CFA6DB,0x2666B720,0x156E395C,0xBABE1B3F,0,0,0   @: 0x1F
	.word	0xBCD07742,0x5551EB6C,0x6AAAD961,0x3FB24BE4,0xCEC32C41,0,0,0   @: 0x20
	.word	0x51DC6222,0x4A62C190,0x69FDA10B,0x3E919A0B,0x5FA697F9,0,0,0   @: 0x21
	.word	0x67C95D82,0x6B37BF94,0x6D0429B5,0x3CF4E93B,0xEC085A30,0,0,0   @: 0x22
	.word	0x8AC548E2,0x74049568,0x6E5351DF,0x3DD738D4,0x7D6DE188,0,0,0   @: 0x23
	.word	0xE6EF36A2,0x37AE6960,0x66A140A2,0x381DDEB4,0x1B307A1B,0,0,0   @: 0x24
	.word	0x0BE323C2,0x289D439C,0x65F638C8,0x393E0F5B,0x8A55C1A3,0,0,0   @: 0x25
	.word	0x3DF61C62,0x09C83D98,0x610FB076,0x3B5B7C6B,0x39FB0C6A,0,0,0   @: 0x26
	.word	0xD0FA0902,0x16FB1764,0x6258C81C,0x3A78AD84,0xA89EB7D2,0,0,0   @: 0x27
	.word	0xE5A2E0E2,0x8F9CC489,0x71EB938C,0x30CFB1AA,0xF5413A4D,0,0,0   @: 0x28
	.word	0x08AEF582,0x90AFEE75,0x72BCEBE6,0x31EC6045,0x642481F5,0,0,0   @: 0x29
	.word	0x3EBBCA22,0xB1FA9071,0x76456358,0x33891375,0xD78A4C3C,0,0,0   @: 0x2A
	.word	0xD3B7DF42,0xAEC9BA8D,0x75121B32,0x32AAC29A,0x46EFF784,0,0,0   @: 0x2B
	.word	0xBF9DA102,0xED634685,0x7DE00A4F,0x376024FA,0x20B26C17,0,0,0   @: 0x2C
	.word	0x5291B462,0xF2506C79,0x7EB77225,0x3643F515,0xB1D7D7AF,0,0,0   @: 0x2D
	.word	0x64848BC2,0xD305127D,0x7A4EFA9B,0x34268625,0x02791A66,0,0,0   @: 0x2E
	.word	0x89889EA2,0xCC363881,0x791982F1,0x350557CA,0x931CA1DE,0,0,0   @: 0x2F
	.word	0xE2384C63,0xFFF99E5A,0x5F7F35D1,0x206B6E96,0x29A2BAE1,0,0,0   @: 0x30
	.word	0x0F345903,0xE0CAB4A6,0x5C284DBB,0x2148BF79,0xB8C70159,0,0,0   @: 0x31
	.word	0x392166A3,0xC19FCAA2,0x58D1C505,0x232DCC49,0x0B69CC90,0,0,0   @: 0x32
	.word	0xD42D73C3,0xDEACE05E,0x5B86BD6F,0x220E1DA6,0x9A0C7728,0,0,0   @: 0x33
	.word	0xB8070D83,0x9D061C56,0x5374AC12,0x27C4FBC6,0xFC51ECBB,0,0,0   @: 0x34
	.word	0x550B18E3,0x823536AA,0x5023D478,0x26E72A29,0x6D345703,0,0,0   @: 0x35
	.word	0x631E2743,0xA36048AE,0x54DA5CC6,0x24825919,0xDE9A9ACA,0,0,0   @: 0x36
	.word	0x8E123223,0xBC536252,0x578D24AC,0x25A188F6,0x4FFF2172,0,0,0   @: 0x37
	.word	0xBB4ADBC3,0x2534B1BF,0x443E7F3C,0x2F1694D8,0x1220ACED,0,0,0   @: 0x38
	.word	0x5646CEA3,0x3A079B43,0x47690756,0x2E354537,0x83451755,0,0,0   @: 0x39
	.word	0x6053F103,0x1B52E547,0x43908FE8,0x2C503607,0x30EBDA9C,0,0,0   @: 0x3A
	.word	0x8D5FE463,0x0461CFBB,0x40C7F782,0x2D73E7E8,0xA18E6124,0,0,0   @: 0x3B
	.word	0xE1759A23,0x47CB33B3,0x4835E6FF,0x28B90188,0xC7D3FAB7,0,0,0   @: 0x3C
	.word	0x0C798F43,0x58F8194F,0x4B629E95,0x299AD067,0x56B6410F,0,0,0   @: 0x3D
	.word	0x3A6CB0E3,0x79AD674B,0x4F9B162B,0x2BFFA357,0xE5188CC6,0,0,0   @: 0x3E
	.word	0xD760A583,0x669E4DB7,0x4CCC6E41,0x2ADC72B8,0x747D377E,0,0,0   @: 0x3F
	.word	0x78A1EF84,0xAAA2D6D9,0xD554B3C3,0x7E6497C8,0x9C875982,0,0,0   @: 0x40
	.word	0x95ADFAE4,0xB591FC25,0xD603CBA9,0x7F474627,0x0DE2E23A,0,0,0   @: 0x41
	.word	0xA3B8C544,0x94C48221,0xD2FA4317,0x7D223517,0xBE4C2FF3,0,0,0   @: 0x42
	.word	0x4EB4D024,0x8BF7A8DD,0xD1AD3B7D,0x7C01E4F8,0x2F29944B,0,0,0   @: 0x43
	.word	0x229EAE64,0xC85D54D5,0xD95F2A00,0x79CB0298,0x49740FD8,0,0,0   @: 0x44
	.word	0xCF92BB04,0xD76E7E29,0xDA08526A,0x78E8D377,0xD811B460,0,0,0   @: 0x45
	.word	0xF98784A4,0xF63B002D,0xDEF1DAD4,0x7A8DA047,0x6BBF79A9,0,0,0   @: 0x46
	.word	0x148B91C4,0xE9082AD1,0xDDA6A2BE,0x7BAE71A8,0xFADAC211,0,0,0   @: 0x47
	.word	0x21D37824,0x706FF93C,0xCE15F92E,0x71196D86,0xA7054F8E,0,0,0   @: 0x48
	.word	0xCCDF6D44,0x6F5CD3C0,0xCD428144,0x703ABC69,0x3660F436,0,0,0   @: 0x49
	.word	0xFACA52E4,0x4E09ADC4,0xC9BB09FA,0x725FCF59,0x85CE39FF,0,0,0   @: 0x4A
	.word	0x17C64784,0x513A8738,0xCAEC7190,0x737C1EB6,0x14AB8247,0,0,0   @: 0x4B
	.word	0x7BEC39C4,0x12907B30,0xC21E60ED,0x76B6F8D6,0x72F619D4,0,0,0   @: 0x4C
	.word	0x96E02CA4,0x0DA351CC,0xC1491887,0x77952939,0xE393A26C,0,0,0   @: 0x4D
	.word	0xA0F51304,0x2CF62FC8,0xC5B09039,0x75F05A09,0x503D6FA5,0,0,0   @: 0x4E
	.word	0x4DF90664,0x33C50534,0xC6E7E853,0x74D38BE6,0xC158D41D,0,0,0   @: 0x4F
	.word	0x2649D4A5,0x000AA3EF,0xE0815F73,0x61BDB2BA,0x7BE6CF22,0,0,0   @: 0x50
	.word	0xCB45C1C5,0x1F398913,0xE3D62719,0x609E6355,0xEA83749A,0,0,0   @: 0x51
	.word	0xFD50FE65,0x3E6CF717,0xE72FAFA7,0x62FB1065,0x592DB953,0,0,0   @: 0x52
	.word	0x105CEB05,0x215FDDEB,0xE478D7CD,0x63D8C18A,0xC84802EB,0,0,0   @: 0x53
	.word	0x7C769545,0x62F521E3,0xEC8AC6B0,0x661227EA,0xAE159978,0,0,0   @: 0x54
	.word	0x917A8025,0x7DC60B1F,0xEFDDBEDA,0x6731F605,0x3F7022C0,0,0,0   @: 0x55
	.word	0xA76FBF85,0x5C93751B,0xEB243664,0x65548535,0x8CDEEF09,0,0,0   @: 0x56
	.word	0x4A63AAE5,0x43A05FE7,0xE8734E0E,0x647754DA,0x1DBB54B1,0,0,0   @: 0x57
	.word	0x7F3B4305,0xDAC78C0A,0xFBC0159E,0x6EC048F4,0x4064D92E,0,0,0   @: 0x58
	.word	0x92375665,0xC5F4A6F6,0xF8976DF4,0x6FE3991B,0xD1016296,0,0,0   @: 0x59
	.word	0xA42269C5,0xE4A1D8F2,0xFC6EE54A,0x6D86EA2B,0x62AFAF5F,0,0,0   @: 0x5A
	.word	0x492E7CA5,0xFB92F20E,0xFF399D20,0x6CA53BC4,0xF3CA14E7,0,0,0   @: 0x5B
	.word	0x250402E5,0xB8380E06,0xF7CB8C5D,0x696FDDA4,0x95978F74,0,0,0   @: 0x5C
	.word	0xC8081785,0xA70B24FA,0xF49CF437,0x684C0C4B,0x04F234CC,0,0,0   @: 0x5D
	.word	0xFE1D2825,0x865E5AFE,0xF0657C89,0x6A297F7B,0xB75CF905,0,0,0   @: 0x5E
	.word	0x13113D45,0x996D7002,0xF33204E3,0x6B0AAE94,0x263942BD,0,0,0   @: 0x5F
	.word	0xC47198C6,0xFFF33DB5,0xBFFE6AA2,0x41D6DC2C,0x524475C3,0,0,0   @: 0x60
	.word	0x297D8DA6,0xE0C01749,0xBCA912C8,0x40F50DC3,0xC321CE7B,0,0,0   @: 0x61
	.word	0x1F68B206,0xC195694D,0xB8509A76,0x42907EF3,0x708F03B2,0,0,0   @: 0x62
	.word	0xF264A766,0xDEA643B1,0xBB07E21C,0x43B3AF1C,0xE1EAB80A,0,0,0   @: 0x63
	.word	0x9E4ED926,0x9D0CBFB9,0xB3F5F361,0x4679497C,0x87B72399,0,0,0   @: 0x64
	.word	0x7342CC46,0x823F9545,0xB0A28B0B,0x475A9893,0x16D29821,0,0,0   @: 0x65
	.word	0x4557F3E6,0xA36AEB41,0xB45B03B5,0x453FEBA3,0xA57C55E8,0,0,0   @: 0x66
	.word	0xA85BE686,0xBC59C1BD,0xB70C7BDF,0x441C3A4C,0x3419EE50,0,0,0   @: 0x67
	.word	0x9D030F66,0x253E1250,0xA4BF204F,0x4EAB2662,0x69C663CF,0,0,0   @: 0x68
	.word	0x700F1A06,0x3A0D38AC,0xA7E85825,0x4F88F78D,0xF8A3D877,0,0,0   @: 0x69
	.word	0x461A25A6,0x1B5846A8,0xA311D09B,0x4DED84BD,0x4B0D15BE,0,0,0   @: 0x6A
	.word	0xAB1630C6,0x046B6C54,0xA046A8F1,0x4CCE5552,0xDA68AE06,0,0,0   @: 0x6B
	.word	0xC73C4E86,0x47C1905C,0xA8B4B98C,0x4904B332,0xBC353595,0,0,0   @: 0x6C
	.word	0x2A305BE6,0x58F2BAA0,0xABE3C1E6,0x482762DD,0x2D508E2D,0,0,0   @: 0x6D
	.word	0x1C256446,0x79A7C4A4,0xAF1A4958,0x4A4211ED,0x9EFE43E4,0,0,0   @: 0x6E
	.word	0xF1297126,0x6694EE58,0xAC4D3132,0x4B61C002,0x0F9BF85C,0,0,0   @: 0x6F
	.word	0x9A99A3E7,0x555B4883,0x8A2B8612,0x5E0FF95E,0xB525E363,0,0,0   @: 0x70
	.word	0x7795B687,0x4A68627F,0x897CFE78,0x5F2C28B1,0x244058DB,0,0,0   @: 0x71
	.word	0x41808927,0x6B3D1C7B,0x8D8576C6,0x5D495B81,0x97EE9512,0,0,0   @: 0x72
	.word	0xAC8C9C47,0x740E3687,0x8ED20EAC,0x5C6A8A6E,0x068B2EAA,0,0,0   @: 0x73
	.word	0xC0A6E207,0x37A4CA8F,0x86201FD1,0x59A06C0E,0x60D6B539,0,0,0   @: 0x74
	.word	0x2DAAF767,0x2897E073,0x857767BB,0x5883BDE1,0xF1B30E81,0,0,0   @: 0x75
	.word	0x1BBFC8C7,0x09C29E77,0x818EEF05,0x5AE6CED1,0x421DC348,0,0,0   @: 0x76
	.word	0xF6B3DDA7,0x16F1B48B,0x82D9976F,0x5BC51F3E,0xD37878F0,0,0,0   @: 0x77
	.word	0xC3EB3447,0x8F966766,0x916ACCFF,0x51720310,0x8EA7F56F,0,0,0   @: 0x78
	.word	0x2EE72127,0x90A54D9A,0x923DB495,0x5051D2FF,0x1FC24ED7,0,0,0   @: 0x79
	.word	0x18F21E87,0xB1F0339E,0x96C43C2B,0x5234A1CF,0xAC6C831E,0,0,0   @: 0x7A
	.word	0xF5FE0BE7,0xAEC31962,0x95934441,0x53177020,0x3D0938A6,0,0,0   @: 0x7B
	.word	0x99D475A7,0xED69E56A,0x9D61553C,0x56DD9640,0x5B54A335,0,0,0   @: 0x7C
	.word	0x74D860C7,0xF25ACF96,0x9E362D56,0x57FE47AF,0xCA31188D,0,0,0   @: 0x7D
	.word	0x42CD5F67,0xD30FB192,0x9ACFA5E8,0x559B349F,0x799FD544,0,0,0   @: 0x7E
	.word	0xAFC14A07,0xCC3C9B6E,0x9998DD82,0x54B8E570,0xE8FA6EFC,0,0,0   @: 0x7F
	.word	0x1C4ECA69,0x4A76874F,0xA8FE1EED,0xFCEBFF7E,0xA96A08BC,0,0,0   @: 0x80
	.word	0xF142DF09,0x5545ADB3,0xABA96687,0xFDC82E91,0x380FB304,0,0,0   @: 0x81
	.word	0xC757E0A9,0x7410D3B7,0xAF50EE39,0xFFAD5DA1,0x8BA17ECD,0,0,0   @: 0x82
	.word	0x2A5BF5C9,0x6B23F94B,0xAC079653,0xFE8E8C4E,0x1AC4C575,0,0,0   @: 0x83
	.word	0x46718B89,0x28890543,0xA4F5872E,0xFB446A2E,0x7C995EE6,0,0,0   @: 0x84
	.word	0xAB7D9EE9,0x37BA2FBF,0xA7A2FF44,0xFA67BBC1,0xEDFCE55E,0,0,0   @: 0x85
	.word	0x9D68A149,0x16EF51BB,0xA35B77FA,0xF802C8F1,0x5E522897,0,0,0   @: 0x86
	.word	0x7064B429,0x09DC7B47,0xA00C0F90,0xF921191E,0xCF37932F,0,0,0   @: 0x87
	.word	0x453C5DC9,0x90BBA8AA,0xB3BF5400,0xF3960530,0x92E81EB0,0,0,0   @: 0x88
	.word	0xA83048A9,0x8F888256,0xB0E82C6A,0xF2B5D4DF,0x038DA508,0,0,0   @: 0x89
	.word	0x9E257709,0xAEDDFC52,0xB411A4D4,0xF0D0A7EF,0xB02368C1,0,0,0   @: 0x8A
	.word	0x73296269,0xB1EED6AE,0xB746DCBE,0xF1F37600,0x2146D379,0,0,0   @: 0x8B
	.word	0x1F031C29,0xF2442AA6,0xBFB4CDC3,0xF4399060,0x471B48EA,0,0,0   @: 0x8C
	.word	0xF20F0949,0xED77005A,0xBCE3B5A9,0xF51A418F,0xD67EF352,0,0,0   @: 0x8D
	.word	0xC41A36E9,0xCC227E5E,0xB81A3D17,0xF77F32BF,0x65D03E9B,0,0,0   @: 0x8E
	.word	0x29162389,0xD31154A2,0xBB4D457D,0xF65CE350,0xF4B58523,0,0,0   @: 0x8F
	.word	0x42A6F148,0xE0DEF279,0x9D2BF25D,0xE332DA0C,0x4E0B9E1C,0,0,0   @: 0x90
	.word	0xAFAAE428,0xFFEDD885,0x9E7C8A37,0xE2110BE3,0xDF6E25A4,0,0,0   @: 0x91
	.word	0x99BFDB88,0xDEB8A681,0x9A850289,0xE07478D3,0x6CC0E86D,0,0,0   @: 0x92
	.word	0x74B3CEE8,0xC18B8C7D,0x99D27AE3,0xE157A93C,0xFDA553D5,0,0,0   @: 0x93
	.word	0x1899B0A8,0x82217075,0x91206B9E,0xE49D4F5C,0x9BF8C846,0,0,0   @: 0x94
	.word	0xF595A5C8,0x9D125A89,0x927713F4,0xE5BE9EB3,0x0A9D73FE,0,0,0   @: 0x95
	.word	0xC3809A68,0xBC47248D,0x968E9B4A,0xE7DBED83,0xB933BE37,0,0,0   @: 0x96
	.word	0x2E8C8F08,0xA3740E71,0x95D9E320,0xE6F83C6C,0x2856058F,0,0,0   @: 0x97
	.word	0x1BD466E8,0x3A13DD9C,0x866AB8B0,0xEC4F2042,0x75898810,0,0,0   @: 0x98
	.word	0xF6D87388,0x2520F760,0x853DC0DA,0xED6CF1AD,0xE4EC33A8,0,0,0   @: 0x99
	.word	0xC0CD4C28,0x04758964,0x81C44864,0xEF09829D,0x5742FE61,0,0,0   @: 0x9A
	.word	0x2DC15948,0x1B46A398,0x8293300E,0xEE2A5372,0xC62745D9,0,0,0   @: 0x9B
	.word	0x41EB2708,0x58EC5F90,0x8A612173,0xEBE0B512,0xA07ADE4A,0,0,0   @: 0x9C
	.word	0xACE73268,0x47DF756C,0x89365919,0xEAC364FD,0x311F65F2,0,0,0   @: 0x9D
	.word	0x9AF20DC8,0x668A0B68,0x8DCFD1A7,0xE8A617CD,0x82B1A83B,0,0,0   @: 0x9E
	.word	0x77FE18A8,0x79B92194,0x8E98A9CD,0xE985C622,0x13D41383,0,0,0   @: 0x9F
	.word	0xA09EBD2B,0x1F276C23,0xC254C78C,0xC359B49A,0x67A924FD,0,0,0   @: 0xA0
	.word	0x4D92A84B,0x001446DF,0xC103BFE6,0xC27A6575,0xF6CC9F45,0,0,0   @: 0xA1
	.word	0x7B8797EB,0x214138DB,0xC5FA3758,0xC01F1645,0x4562528C,0,0,0   @: 0xA2
	.word	0x968B828B,0x3E721227,0xC6AD4F32,0xC13CC7AA,0xD407E934,0,0,0   @: 0xA3
	.word	0xFAA1FCCB,0x7DD8EE2F,0xCE5F5E4F,0xC4F621CA,0xB25A72A7,0,0,0   @: 0xA4
	.word	0x17ADE9AB,0x62EBC4D3,0xCD082625,0xC5D5F025,0x233FC91F,0,0,0   @: 0xA5
	.word	0x21B8D60B,0x43BEBAD7,0xC9F1AE9B,0xC7B08315,0x909104D6,0,0,0   @: 0xA6
	.word	0xCCB4C36B,0x5C8D902B,0xCAA6D6F1,0xC69352FA,0x01F4BF6E,0,0,0   @: 0xA7
	.word	0xF9EC2A8B,0xC5EA43C6,0xD9158D61,0xCC244ED4,0x5C2B32F1,0,0,0   @: 0xA8
	.word	0x14E03FEB,0xDAD9693A,0xDA42F50B,0xCD079F3B,0xCD4E8949,0,0,0   @: 0xA9
	.word	0x22F5004B,0xFB8C173E,0xDEBB7DB5,0xCF62EC0B,0x7EE04480,0,0,0   @: 0xAA
	.word	0xCFF9152B,0xE4BF3DC2,0xDDEC05DF,0xCE413DE4,0xEF85FF38,0,0,0   @: 0xAB
	.word	0xA3D36B6B,0xA715C1CA,0xD51E14A2,0xCB8BDB84,0x89D864AB,0,0,0   @: 0xAC
	.word	0x4EDF7E0B,0xB826EB36,0xD6496CC8,0xCAA80A6B,0x18BDDF13,0,0,0   @: 0xAD
	.word	0x78CA41AB,0x99739532,0xD2B0E476,0xC8CD795B,0xAB1312DA,0,0,0   @: 0xAE
	.word	0x95C654CB,0x8640BFCE,0xD1E79C1C,0xC9EEA8B4,0x3A76A962,0,0,0   @: 0xAF
	.word	0xFE76860A,0xB58F1915,0xF7812B3C,0xDC8091E8,0x80C8B25D,0,0,0   @: 0xB0
	.word	0x137A936A,0xAABC33E9,0xF4D65356,0xDDA34007,0x11AD09E5,0,0,0   @: 0xB1
	.word	0x256FACCA,0x8BE94DED,0xF02FDBE8,0xDFC63337,0xA203C42C,0,0,0   @: 0xB2
	.word	0xC863B9AA,0x94DA6711,0xF378A382,0xDEE5E2D8,0x33667F94,0,0,0   @: 0xB3
	.word	0xA449C7EA,0xD7709B19,0xFB8AB2FF,0xDB2F04B8,0x553BE407,0,0,0   @: 0xB4
	.word	0x4945D28A,0xC843B1E5,0xF8DDCA95,0xDA0CD557,0xC45E5FBF,0,0,0   @: 0xB5
	.word	0x7F50ED2A,0xE916CFE1,0xFC24422B,0xD869A667,0x77F09276,0,0,0   @: 0xB6
	.word	0x925CF84A,0xF625E51D,0xFF733A41,0xD94A7788,0xE69529CE,0,0,0   @: 0xB7
	.word	0xA70411AA,0x6F4236F0,0xECC061D1,0xD3FD6BA6,0xBB4AA451,0,0,0   @: 0xB8
	.word	0x4A0804CA,0x70711C0C,0xEF9719BB,0xD2DEBA49,0x2A2F1FE9,0,0,0   @: 0xB9
	.word	0x7C1D3B6A,0x51246208,0xEB6E9105,0xD0BBC979,0x9981D220,0,0,0   @: 0xBA
	.word	0x91112E0A,0x4E1748F4,0xE839E96F,0xD1981896,0x08E46998,0,0,0   @: 0xBB
	.word	0xFD3B504A,0x0DBDB4FC,0xE0CBF812,0xD452FEF6,0x6EB9F20B,0,0,0   @: 0xBC
	.word	0x1037452A,0x128E9E00,0xE39C8078,0xD5712F19,0xFFDC49B3,0,0,0   @: 0xBD
	.word	0x26227A8A,0x33DBE004,0xE76508C6,0xD7145C29,0x4C72847A,0,0,0   @: 0xBE
	.word	0xCB2E6FEA,0x2CE8CAF8,0xE43270AC,0xD6378DC6,0xDD173FC2,0,0,0   @: 0xBF
	.word	0x64EF25ED,0xE0D45196,0x7DAAAD2E,0x828F68B6,0x35ED513E,0,0,0   @: 0xC0
	.word	0x89E3308D,0xFFE77B6A,0x7EFDD544,0x83ACB959,0xA488EA86,0,0,0   @: 0xC1
	.word	0xBFF60F2D,0xDEB2056E,0x7A045DFA,0x81C9CA69,0x1726274F,0,0,0   @: 0xC2
	.word	0x52FA1A4D,0xC1812F92,0x79532590,0x80EA1B86,0x86439CF7,0,0,0   @: 0xC3
	.word	0x3ED0640D,0x822BD39A,0x71A134ED,0x8520FDE6,0xE01E0764,0,0,0   @: 0xC4
	.word	0xD3DC716D,0x9D18F966,0x72F64C87,0x84032C09,0x717BBCDC,0,0,0   @: 0xC5
	.word	0xE5C94ECD,0xBC4D8762,0x760FC439,0x86665F39,0xC2D57115,0,0,0   @: 0xC6
	.word	0x08C55BAD,0xA37EAD9E,0x7558BC53,0x87458ED6,0x53B0CAAD,0,0,0   @: 0xC7
	.word	0x3D9DB24D,0x3A197E73,0x66EBE7C3,0x8DF292F8,0x0E6F4732,0,0,0   @: 0xC8
	.word	0xD091A72D,0x252A548F,0x65BC9FA9,0x8CD14317,0x9F0AFC8A,0,0,0   @: 0xC9
	.word	0xE684988D,0x047F2A8B,0x61451717,0x8EB43027,0x2CA43143,0,0,0   @: 0xCA
	.word	0x0B888DED,0x1B4C0077,0x62126F7D,0x8F97E1C8,0xBDC18AFB,0,0,0   @: 0xCB
	.word	0x67A2F3AD,0x58E6FC7F,0x6AE07E00,0x8A5D07A8,0xDB9C1168,0,0,0   @: 0xCC
	.word	0x8AAEE6CD,0x47D5D683,0x69B7066A,0x8B7ED647,0x4AF9AAD0,0,0,0   @: 0xCD
	.word	0xBCBBD96D,0x6680A887,0x6D4E8ED4,0x891BA577,0xF9576719,0,0,0   @: 0xCE
	.word	0x51B7CC0D,0x79B3827B,0x6E19F6BE,0x88387498,0x6832DCA1,0,0,0   @: 0xCF
	.word	0x3A071ECC,0x4A7C24A0,0x487F419E,0x9D564DC4,0xD28CC79E,0,0,0   @: 0xD0
	.word	0xD70B0BAC,0x554F0E5C,0x4B2839F4,0x9C759C2B,0x43E97C26,0,0,0   @: 0xD1
	.word	0xE11E340C,0x741A7058,0x4FD1B14A,0x9E10EF1B,0xF047B1EF,0,0,0   @: 0xD2
	.word	0x0C12216C,0x6B295AA4,0x4C86C920,0x9F333EF4,0x61220A57,0,0,0   @: 0xD3
	.word	0x60385F2C,0x2883A6AC,0x4474D85D,0x9AF9D894,0x077F91C4,0,0,0   @: 0xD4
	.word	0x8D344A4C,0x37B08C50,0x4723A037,0x9BDA097B,0x961A2A7C,0,0,0   @: 0xD5
	.word	0xBB2175EC,0x16E5F254,0x43DA2889,0x99BF7A4B,0x25B4E7B5,0,0,0   @: 0xD6
	.word	0x562D608C,0x09D6D8A8,0x408D50E3,0x989CABA4,0xB4D15C0D,0,0,0   @: 0xD7
	.word	0x6375896C,0x90B10B45,0x533E0B73,0x922BB78A,0xE90ED192,0,0,0   @: 0xD8
	.word	0x8E799C0C,0x8F8221B9,0x50697319,0x93086665,0x786B6A2A,0,0,0   @: 0xD9
	.word	0xB86CA3AC,0xAED75FBD,0x5490FBA7,0x916D1555,0xCBC5A7E3,0,0,0   @: 0xDA
	.word	0x5560B6CC,0xB1E47541,0x57C783CD,0x904EC4BA,0x5AA01C5B,0,0,0   @: 0xDB
	.word	0x394AC88C,0xF24E8949,0x5F3592B0,0x958422DA,0x3CFD87C8,0,0,0   @: 0xDC
	.word	0xD446DDEC,0xED7DA3B5,0x5C62EADA,0x94A7F335,0xAD983C70,0,0,0   @: 0xDD
	.word	0xE253E24C,0xCC28DDB1,0x589B6264,0x96C28005,0x1E36F1B9,0,0,0   @: 0xDE
	.word	0x0F5FF72C,0xD31BF74D,0x5BCC1A0E,0x97E151EA,0x8F534A01,0,0,0   @: 0xDF
	.word	0xD83F52AF,0xB585BAFA,0x1700744F,0xBD3D2352,0xFB2E7D7F,0,0,0   @: 0xE0
	.word	0x353347CF,0xAAB69006,0x14570C25,0xBC1EF2BD,0x6A4BC6C7,0,0,0   @: 0xE1
	.word	0x0326786F,0x8BE3EE02,0x10AE849B,0xBE7B818D,0xD9E50B0E,0,0,0   @: 0xE2
	.word	0xEE2A6D0F,0x94D0C4FE,0x13F9FCF1,0xBF585062,0x4880B0B6,0,0,0   @: 0xE3
	.word	0x8200134F,0xD77A38F6,0x1B0BED8C,0xBA92B602,0x2EDD2B25,0,0,0   @: 0xE4
	.word	0x6F0C062F,0xC849120A,0x185C95E6,0xBBB167ED,0xBFB8909D,0,0,0   @: 0xE5
	.word	0x5919398F,0xE91C6C0E,0x1CA51D58,0xB9D414DD,0x0C165D54,0,0,0   @: 0xE6
	.word	0xB4152CEF,0xF62F46F2,0x1FF26532,0xB8F7C532,0x9D73E6EC,0,0,0   @: 0xE7
	.word	0x814DC50F,0x6F48951F,0x0C413EA2,0xB240D91C,0xC0AC6B73,0,0,0   @: 0xE8
	.word	0x6C41D06F,0x707BBFE3,0x0F1646C8,0xB36308F3,0x51C9D0CB,0,0,0   @: 0xE9
	.word	0x5A54EFCF,0x512EC1E7,0x0BEFCE76,0xB1067BC3,0xE2671D02,0,0,0   @: 0xEA
	.word	0xB758FAAF,0x4E1DEB1B,0x08B8B61C,0xB025AA2C,0x7302A6BA,0,0,0   @: 0xEB
	.word	0xDB7284EF,0x0DB71713,0x004AA761,0xB5EF4C4C,0x155F3D29,0,0,0   @: 0xEC
	.word	0x367E918F,0x12843DEF,0x031DDF0B,0xB4CC9DA3,0x843A8691,0,0,0   @: 0xED
	.word	0x006BAE2F,0x33D143EB,0x07E457B5,0xB6A9EE93,0x37944B58,0,0,0   @: 0xEE
	.word	0xED67BB4F,0x2CE26917,0x04B32FDF,0xB78A3F7C,0xA6F1F0E0,0,0,0   @: 0xEF
	.word	0x86D7698E,0x1F2DCFCC,0x22D598FF,0xA2E40620,0x1C4FEBDF,0,0,0   @: 0xF0
	.word	0x6BDB7CEE,0x001EE530,0x2182E095,0xA3C7D7CF,0x8D2A5067,0,0,0   @: 0xF1
	.word	0x5DCE434E,0x214B9B34,0x257B682B,0xA1A2A4FF,0x3E849DAE,0,0,0   @: 0xF2
	.word	0xB0C2562E,0x3E78B1C8,0x262C1041,0xA0817510,0xAFE12616,0,0,0   @: 0xF3
	.word	0xDCE8286E,0x7DD24DC0,0x2EDE013C,0xA54B9370,0xC9BCBD85,0,0,0   @: 0xF4
	.word	0x31E43D0E,0x62E1673C,0x2D897956,0xA468429F,0x58D9063D,0,0,0   @: 0xF5
	.word	0x07F102AE,0x43B41938,0x2970F1E8,0xA60D31AF,0xEB77CBF4,0,0,0   @: 0xF6
	.word	0xEAFD17CE,0x5C8733C4,0x2A278982,0xA72EE040,0x7A12704C,0,0,0   @: 0xF7
	.word	0xDFA5FE2E,0xC5E0E029,0x3994D212,0xAD99FC6E,0x27CDFDD3,0,0,0   @: 0xF8
	.word	0x32A9EB4E,0xDAD3CAD5,0x3AC3AA78,0xACBA2D81,0xB6A8466B,0,0,0   @: 0xF9
	.word	0x04BCD4EE,0xFB86B4D1,0x3E3A22C6,0xAEDF5EB1,0x05068BA2,0,0,0   @: 0xFA
	.word	0xE9B0C18E,0xE4B59E2D,0x3D6D5AAC,0xAFFC8F5E,0x9463301A,0,0,0   @: 0xFB
	.word	0x859ABFCE,0xA71F6225,0x359F4BD1,0xAA36693E,0xF23EAB89,0,0,0   @: 0xFC
	.word	0x6896AAAE,0xB82C48D9,0x36C833BB,0xAB15B8D1,0x635B1031,0,0,0   @: 0xFD
	.word	0x5E83950E,0x997936DD,0x3231BB05,0xA970CBE1,0xD0F5DDF8,0,0,0   @: 0xFE
	.word	0xB38F806E,0x864A1C21,0x3166C36F,0xA8531A0E,0x41906640,0,0,0   @: 0xFF

	.align	8
	
bch_n192_table_neon3:
	.word	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0,0  @:	0x00
	.word	0x830E264E,0x1C515C84,0xD82CCF50,0x890835DC,0xF7854703,0xE7550266,0,0  @:	0x01
	.word	0x071D4C9C,0x38A2B808,0xB1599EA1,0x12116AB8,0xEE0B8F06,0xCEAB04CC,0,0  @:	0x02
	.word	0x84136AD2,0x24F3E48C,0x697551F1,0x9B195F64,0x198EC805,0x29FE06AA,0,0  @:	0x03
	.word	0x8D34BE76,0x6D152D95,0xBB9FF313,0xAD2AE1AC,0x2A92590E,0x7B020BFE,0,0  @:	0x04
	.word	0x0E3A9838,0x71447111,0x63B33C43,0x2422D470,0xDD171E0D,0x9C570998,0,0  @:	0x05
	.word	0x8A29F2EA,0x55B7959D,0x0AC66DB2,0xBF3B8B14,0xC499D608,0xB5A90F32,0,0  @:	0x06
	.word	0x0927D4A4,0x49E6C919,0xD2EAA2E2,0x3633BEC8,0x331C910B,0x52FC0D54,0,0  @:	0x07
	.word	0x1B697CED,0xDA2A5A2A,0x773FE727,0x5A55C259,0x5524B31C,0xF60416FC,0,0  @:	0x08
	.word	0x98675AA3,0xC67B06AE,0xAF132877,0xD35DF785,0xA2A1F41F,0x1151149A,0,0  @:	0x09
	.word	0x1C743071,0xE288E222,0xC6667986,0x4844A8E1,0xBB2F3C1A,0x38AF1230,0,0  @:	0x0A
	.word	0x9F7A163F,0xFED9BEA6,0x1E4AB6D6,0xC14C9D3D,0x4CAA7B19,0xDFFA1056,0,0  @:	0x0B
	.word	0x965DC29B,0xB73F77BF,0xCCA01434,0xF77F23F5,0x7FB6EA12,0x8D061D02,0,0  @:	0x0C
	.word	0x1553E4D5,0xAB6E2B3B,0x148CDB64,0x7E771629,0x8833AD11,0x6A531F64,0,0  @:	0x0D
	.word	0x91408E07,0x8F9DCFB7,0x7DF98A95,0xE56E494D,0x91BD6514,0x43AD19CE,0,0  @:	0x0E
	.word	0x124EA849,0x93CC9333,0xA5D545C5,0x6C667C91,0x66382217,0xA4F81BA8,0,0  @:	0x0F
	.word	0xB5DCDE94,0xA804E8D0,0x3652011F,0x3DA2B16F,0x5CCD213A,0x0B5C2E9E,0,0  @:	0x10
	.word	0x36D2F8DA,0xB455B454,0xEE7ECE4F,0xB4AA84B3,0xAB486639,0xEC092CF8,0,0  @:	0x11
	.word	0xB2C19208,0x90A650D8,0x870B9FBE,0x2FB3DBD7,0xB2C6AE3C,0xC5F72A52,0,0  @:	0x12
	.word	0x31CFB446,0x8CF70C5C,0x5F2750EE,0xA6BBEE0B,0x4543E93F,0x22A22834,0,0  @:	0x13
	.word	0x38E860E2,0xC511C545,0x8DCDF20C,0x908850C3,0x765F7834,0x705E2560,0,0  @:	0x14
	.word	0xBBE646AC,0xD94099C1,0x55E13D5C,0x1980651F,0x81DA3F37,0x970B2706,0,0  @:	0x15
	.word	0x3FF52C7E,0xFDB37D4D,0x3C946CAD,0x82993A7B,0x9854F732,0xBEF521AC,0,0  @:	0x16
	.word	0xBCFB0A30,0xE1E221C9,0xE4B8A3FD,0x0B910FA7,0x6FD1B031,0x59A023CA,0,0  @:	0x17
	.word	0xAEB5A279,0x722EB2FA,0x416DE638,0x67F77336,0x09E99226,0xFD583862,0,0  @:	0x18
	.word	0x2DBB8437,0x6E7FEE7E,0x99412968,0xEEFF46EA,0xFE6CD525,0x1A0D3A04,0,0  @:	0x19
	.word	0xA9A8EEE5,0x4A8C0AF2,0xF0347899,0x75E6198E,0xE7E21D20,0x33F33CAE,0,0  @:	0x1A
	.word	0x2AA6C8AB,0x56DD5676,0x2818B7C9,0xFCEE2C52,0x10675A23,0xD4A63EC8,0,0  @:	0x1B
	.word	0x23811C0F,0x1F3B9F6F,0xFAF2152B,0xCADD929A,0x237BCB28,0x865A339C,0,0  @:	0x1C
	.word	0xA08F3A41,0x036AC3EB,0x22DEDA7B,0x43D5A746,0xD4FE8C2B,0x610F31FA,0,0  @:	0x1D
	.word	0x249C5093,0x27992767,0x4BAB8B8A,0xD8CCF822,0xCD70442E,0x48F13750,0,0  @:	0x1E
	.word	0xA79276DD,0x3BC87BE3,0x938744DA,0x51C4CDFE,0x3AF5032D,0xAFA43536,0,0  @:	0x1F
	.word	0xE8B79B67,0x4C588C25,0xB488CD6E,0xF34C5603,0x4E1F0477,0xF1ED5E5A,0,0  @:	0x20
	.word	0x6BB9BD29,0x5009D0A1,0x6CA4023E,0x7A4463DF,0xB99A4374,0x16B85C3C,0,0  @:	0x21
	.word	0xEFAAD7FB,0x74FA342D,0x05D153CF,0xE15D3CBB,0xA0148B71,0x3F465A96,0,0  @:	0x22
	.word	0x6CA4F1B5,0x68AB68A9,0xDDFD9C9F,0x68550967,0x5791CC72,0xD81358F0,0,0  @:	0x23
	.word	0x65832511,0x214DA1B0,0x0F173E7D,0x5E66B7AF,0x648D5D79,0x8AEF55A4,0,0  @:	0x24
	.word	0xE68D035F,0x3D1CFD34,0xD73BF12D,0xD76E8273,0x93081A7A,0x6DBA57C2,0,0  @:	0x25
	.word	0x629E698D,0x19EF19B8,0xBE4EA0DC,0x4C77DD17,0x8A86D27F,0x44445168,0,0  @:	0x26
	.word	0xE1904FC3,0x05BE453C,0x66626F8C,0xC57FE8CB,0x7D03957C,0xA311530E,0,0  @:	0x27
	.word	0xF3DEE78A,0x9672D60F,0xC3B72A49,0xA919945A,0x1B3BB76B,0x07E948A6,0,0  @:	0x28
	.word	0x70D0C1C4,0x8A238A8B,0x1B9BE519,0x2011A186,0xECBEF068,0xE0BC4AC0,0,0  @:	0x29
	.word	0xF4C3AB16,0xAED06E07,0x72EEB4E8,0xBB08FEE2,0xF530386D,0xC9424C6A,0,0  @:	0x2A
	.word	0x77CD8D58,0xB2813283,0xAAC27BB8,0x3200CB3E,0x02B57F6E,0x2E174E0C,0,0  @:	0x2B
	.word	0x7EEA59FC,0xFB67FB9A,0x7828D95A,0x043375F6,0x31A9EE65,0x7CEB4358,0,0  @:	0x2C
	.word	0xFDE47FB2,0xE736A71E,0xA004160A,0x8D3B402A,0xC62CA966,0x9BBE413E,0,0  @:	0x2D
	.word	0x79F71560,0xC3C54392,0xC97147FB,0x16221F4E,0xDFA26163,0xB2404794,0,0  @:	0x2E
	.word	0xFAF9332E,0xDF941F16,0x115D88AB,0x9F2A2A92,0x28272660,0x551545F2,0,0  @:	0x2F
	.word	0x5D6B45F3,0xE45C64F5,0x82DACC71,0xCEEEE76C,0x12D2254D,0xFAB170C4,0,0  @:	0x30
	.word	0xDE6563BD,0xF80D3871,0x5AF60321,0x47E6D2B0,0xE557624E,0x1DE472A2,0,0  @:	0x31
	.word	0x5A76096F,0xDCFEDCFD,0x338352D0,0xDCFF8DD4,0xFCD9AA4B,0x341A7408,0,0  @:	0x32
	.word	0xD9782F21,0xC0AF8079,0xEBAF9D80,0x55F7B808,0x0B5CED48,0xD34F766E,0,0  @:	0x33
	.word	0xD05FFB85,0x89494960,0x39453F62,0x63C406C0,0x38407C43,0x81B37B3A,0,0  @:	0x34
	.word	0x5351DDCB,0x951815E4,0xE169F032,0xEACC331C,0xCFC53B40,0x66E6795C,0,0  @:	0x35
	.word	0xD742B719,0xB1EBF168,0x881CA1C3,0x71D56C78,0xD64BF345,0x4F187FF6,0,0  @:	0x36
	.word	0x544C9157,0xADBAADEC,0x50306E93,0xF8DD59A4,0x21CEB446,0xA84D7D90,0,0  @:	0x37
	.word	0x4602391E,0x3E763EDF,0xF5E52B56,0x94BB2535,0x47F69651,0x0CB56638,0,0  @:	0x38
	.word	0xC50C1F50,0x2227625B,0x2DC9E406,0x1DB310E9,0xB073D152,0xEBE0645E,0,0  @:	0x39
	.word	0x411F7582,0x06D486D7,0x44BCB5F7,0x86AA4F8D,0xA9FD1957,0xC21E62F4,0,0  @:	0x3A
	.word	0xC21153CC,0x1A85DA53,0x9C907AA7,0x0FA27A51,0x5E785E54,0x254B6092,0,0  @:	0x3B
	.word	0xCB368768,0x5363134A,0x4E7AD845,0x3991C499,0x6D64CF5F,0x77B76DC6,0,0  @:	0x3C
	.word	0x4838A126,0x4F324FCE,0x96561715,0xB099F145,0x9AE1885C,0x90E26FA0,0,0  @:	0x3D
	.word	0xCC2BCBF4,0x6BC1AB42,0xFF2346E4,0x2B80AE21,0x836F4059,0xB91C690A,0,0  @:	0x3E
	.word	0x4F25EDBA,0x7790F7C6,0x270F89B4,0xA2889BFD,0x74EA075A,0x5E496B6C,0,0  @:	0x3F
	.word	0xD06F37CF,0x98B0184B,0x68119BDD,0xE699AC06,0x9C3E08EE,0xE2DBBDB4,0,0  @:	0x40
	.word	0x53611181,0x84E144CF,0xB03D548D,0x6F9199DA,0x6BBB4FED,0x058EBFD2,0,0  @:	0x41
	.word	0xD7727B53,0xA012A043,0xD948057C,0xF488C6BE,0x723587E8,0x2C70B978,0,0  @:	0x42
	.word	0x547C5D1D,0xBC43FCC7,0x0164CA2C,0x7D80F362,0x85B0C0EB,0xCB25BB1E,0,0  @:	0x43
	.word	0x5D5B89B9,0xF5A535DE,0xD38E68CE,0x4BB34DAA,0xB6AC51E0,0x99D9B64A,0,0  @:	0x44
	.word	0xDE55AFF7,0xE9F4695A,0x0BA2A79E,0xC2BB7876,0x412916E3,0x7E8CB42C,0,0  @:	0x45
	.word	0x5A46C525,0xCD078DD6,0x62D7F66F,0x59A22712,0x58A7DEE6,0x5772B286,0,0  @:	0x46
	.word	0xD948E36B,0xD156D152,0xBAFB393F,0xD0AA12CE,0xAF2299E5,0xB027B0E0,0,0  @:	0x47
	.word	0xCB064B22,0x429A4261,0x1F2E7CFA,0xBCCC6E5F,0xC91ABBF2,0x14DFAB48,0,0  @:	0x48
	.word	0x48086D6C,0x5ECB1EE5,0xC702B3AA,0x35C45B83,0x3E9FFCF1,0xF38AA92E,0,0  @:	0x49
	.word	0xCC1B07BE,0x7A38FA69,0xAE77E25B,0xAEDD04E7,0x271134F4,0xDA74AF84,0,0  @:	0x4A
	.word	0x4F1521F0,0x6669A6ED,0x765B2D0B,0x27D5313B,0xD09473F7,0x3D21ADE2,0,0  @:	0x4B
	.word	0x4632F554,0x2F8F6FF4,0xA4B18FE9,0x11E68FF3,0xE388E2FC,0x6FDDA0B6,0,0  @:	0x4C
	.word	0xC53CD31A,0x33DE3370,0x7C9D40B9,0x98EEBA2F,0x140DA5FF,0x8888A2D0,0,0  @:	0x4D
	.word	0x412FB9C8,0x172DD7FC,0x15E81148,0x03F7E54B,0x0D836DFA,0xA176A47A,0,0  @:	0x4E
	.word	0xC2219F86,0x0B7C8B78,0xCDC4DE18,0x8AFFD097,0xFA062AF9,0x4623A61C,0,0  @:	0x4F
	.word	0x65B3E95B,0x30B4F09B,0x5E439AC2,0xDB3B1D69,0xC0F329D4,0xE987932A,0,0  @:	0x50
	.word	0xE6BDCF15,0x2CE5AC1F,0x866F5592,0x523328B5,0x37766ED7,0x0ED2914C,0,0  @:	0x51
	.word	0x62AEA5C7,0x08164893,0xEF1A0463,0xC92A77D1,0x2EF8A6D2,0x272C97E6,0,0  @:	0x52
	.word	0xE1A08389,0x14471417,0x3736CB33,0x4022420D,0xD97DE1D1,0xC0799580,0,0  @:	0x53
	.word	0xE887572D,0x5DA1DD0E,0xE5DC69D1,0x7611FCC5,0xEA6170DA,0x928598D4,0,0  @:	0x54
	.word	0x6B897163,0x41F0818A,0x3DF0A681,0xFF19C919,0x1DE437D9,0x75D09AB2,0,0  @:	0x55
	.word	0xEF9A1BB1,0x65036506,0x5485F770,0x6400967D,0x046AFFDC,0x5C2E9C18,0,0  @:	0x56
	.word	0x6C943DFF,0x79523982,0x8CA93820,0xED08A3A1,0xF3EFB8DF,0xBB7B9E7E,0,0  @:	0x57
	.word	0x7EDA95B6,0xEA9EAAB1,0x297C7DE5,0x816EDF30,0x95D79AC8,0x1F8385D6,0,0  @:	0x58
	.word	0xFDD4B3F8,0xF6CFF635,0xF150B2B5,0x0866EAEC,0x6252DDCB,0xF8D687B0,0,0  @:	0x59
	.word	0x79C7D92A,0xD23C12B9,0x9825E344,0x937FB588,0x7BDC15CE,0xD128811A,0,0  @:	0x5A
	.word	0xFAC9FF64,0xCE6D4E3D,0x40092C14,0x1A778054,0x8C5952CD,0x367D837C,0,0  @:	0x5B
	.word	0xF3EE2BC0,0x878B8724,0x92E38EF6,0x2C443E9C,0xBF45C3C6,0x64818E28,0,0  @:	0x5C
	.word	0x70E00D8E,0x9BDADBA0,0x4ACF41A6,0xA54C0B40,0x48C084C5,0x83D48C4E,0,0  @:	0x5D
	.word	0xF4F3675C,0xBF293F2C,0x23BA1057,0x3E555424,0x514E4CC0,0xAA2A8AE4,0,0  @:	0x5E
	.word	0x77FD4112,0xA37863A8,0xFB96DF07,0xB75D61F8,0xA6CB0BC3,0x4D7F8882,0,0  @:	0x5F
	.word	0x38D8ACA8,0xD4E8946E,0xDC9956B3,0x15D5FA05,0xD2210C99,0x1336E3EE,0,0  @:	0x60
	.word	0xBBD68AE6,0xC8B9C8EA,0x04B599E3,0x9CDDCFD9,0x25A44B9A,0xF463E188,0,0  @:	0x61
	.word	0x3FC5E034,0xEC4A2C66,0x6DC0C812,0x07C490BD,0x3C2A839F,0xDD9DE722,0,0  @:	0x62
	.word	0xBCCBC67A,0xF01B70E2,0xB5EC0742,0x8ECCA561,0xCBAFC49C,0x3AC8E544,0,0  @:	0x63
	.word	0xB5EC12DE,0xB9FDB9FB,0x6706A5A0,0xB8FF1BA9,0xF8B35597,0x6834E810,0,0  @:	0x64
	.word	0x36E23490,0xA5ACE57F,0xBF2A6AF0,0x31F72E75,0x0F361294,0x8F61EA76,0,0  @:	0x65
	.word	0xB2F15E42,0x815F01F3,0xD65F3B01,0xAAEE7111,0x16B8DA91,0xA69FECDC,0,0  @:	0x66
	.word	0x31FF780C,0x9D0E5D77,0x0E73F451,0x23E644CD,0xE13D9D92,0x41CAEEBA,0,0  @:	0x67
	.word	0x23B1D045,0x0EC2CE44,0xABA6B194,0x4F80385C,0x8705BF85,0xE532F512,0,0  @:	0x68
	.word	0xA0BFF60B,0x129392C0,0x738A7EC4,0xC6880D80,0x7080F886,0x0267F774,0,0  @:	0x69
	.word	0x24AC9CD9,0x3660764C,0x1AFF2F35,0x5D9152E4,0x690E3083,0x2B99F1DE,0,0  @:	0x6A
	.word	0xA7A2BA97,0x2A312AC8,0xC2D3E065,0xD4996738,0x9E8B7780,0xCCCCF3B8,0,0  @:	0x6B
	.word	0xAE856E33,0x63D7E3D1,0x10394287,0xE2AAD9F0,0xAD97E68B,0x9E30FEEC,0,0  @:	0x6C
	.word	0x2D8B487D,0x7F86BF55,0xC8158DD7,0x6BA2EC2C,0x5A12A188,0x7965FC8A,0,0  @:	0x6D
	.word	0xA99822AF,0x5B755BD9,0xA160DC26,0xF0BBB348,0x439C698D,0x509BFA20,0,0  @:	0x6E
	.word	0x2A9604E1,0x4724075D,0x794C1376,0x79B38694,0xB4192E8E,0xB7CEF846,0,0  @:	0x6F
	.word	0x8D04723C,0x7CEC7CBE,0xEACB57AC,0x28774B6A,0x8EEC2DA3,0x186ACD70,0,0  @:	0x70
	.word	0x0E0A5472,0x60BD203A,0x32E798FC,0xA17F7EB6,0x79696AA0,0xFF3FCF16,0,0  @:	0x71
	.word	0x8A193EA0,0x444EC4B6,0x5B92C90D,0x3A6621D2,0x60E7A2A5,0xD6C1C9BC,0,0  @:	0x72
	.word	0x091718EE,0x581F9832,0x83BE065D,0xB36E140E,0x9762E5A6,0x3194CBDA,0,0  @:	0x73
	.word	0x0030CC4A,0x11F9512B,0x5154A4BF,0x855DAAC6,0xA47E74AD,0x6368C68E,0,0  @:	0x74
	.word	0x833EEA04,0x0DA80DAF,0x89786BEF,0x0C559F1A,0x53FB33AE,0x843DC4E8,0,0  @:	0x75
	.word	0x072D80D6,0x295BE923,0xE00D3A1E,0x974CC07E,0x4A75FBAB,0xADC3C242,0,0  @:	0x76
	.word	0x8423A698,0x350AB5A7,0x3821F54E,0x1E44F5A2,0xBDF0BCA8,0x4A96C024,0,0  @:	0x77
	.word	0x966D0ED1,0xA6C62694,0x9DF4B08B,0x72228933,0xDBC89EBF,0xEE6EDB8C,0,0  @:	0x78
	.word	0x1563289F,0xBA977A10,0x45D87FDB,0xFB2ABCEF,0x2C4DD9BC,0x093BD9EA,0,0  @:	0x79
	.word	0x9170424D,0x9E649E9C,0x2CAD2E2A,0x6033E38B,0x35C311B9,0x20C5DF40,0,0  @:	0x7A
	.word	0x127E6403,0x8235C218,0xF481E17A,0xE93BD657,0xC24656BA,0xC790DD26,0,0  @:	0x7B
	.word	0x1B59B0A7,0xCBD30B01,0x266B4398,0xDF08689F,0xF15AC7B1,0x956CD072,0,0  @:	0x7C
	.word	0x985796E9,0xD7825785,0xFE478CC8,0x56005D43,0x06DF80B2,0x7239D214,0,0  @:	0x7D
	.word	0x1C44FC3B,0xF371B309,0x9732DD39,0xCD190227,0x1F5148B7,0x5BC7D4BE,0,0  @:	0x7E
	.word	0x9F4ADA75,0xEF20EF8D,0x4F1E1269,0x441137FB,0xE8D40FB4,0xBC92D6D8,0,0  @:	0x7F
	.word	0x23D148D0,0x2D306D12,0x080EF9EB,0x443B6CD1,0xCEF857DF,0x23E2790F,0,0  @:	0x80
	.word	0xA0DF6E9E,0x31613196,0xD02236BB,0xCD33590D,0x397D10DC,0xC4B77B69,0,0  @:	0x81
	.word	0x24CC044C,0x1592D51A,0xB957674A,0x562A0669,0x20F3D8D9,0xED497DC3,0,0  @:	0x82
	.word	0xA7C22202,0x09C3899E,0x617BA81A,0xDF2233B5,0xD7769FDA,0x0A1C7FA5,0,0  @:	0x83
	.word	0xAEE5F6A6,0x40254087,0xB3910AF8,0xE9118D7D,0xE46A0ED1,0x58E072F1,0,0  @:	0x84
	.word	0x2DEBD0E8,0x5C741C03,0x6BBDC5A8,0x6019B8A1,0x13EF49D2,0xBFB57097,0,0  @:	0x85
	.word	0xA9F8BA3A,0x7887F88F,0x02C89459,0xFB00E7C5,0x0A6181D7,0x964B763D,0,0  @:	0x86
	.word	0x2AF69C74,0x64D6A40B,0xDAE45B09,0x7208D219,0xFDE4C6D4,0x711E745B,0,0  @:	0x87
	.word	0x38B8343D,0xF71A3738,0x7F311ECC,0x1E6EAE88,0x9BDCE4C3,0xD5E66FF3,0,0  @:	0x88
	.word	0xBBB61273,0xEB4B6BBC,0xA71DD19C,0x97669B54,0x6C59A3C0,0x32B36D95,0,0  @:	0x89
	.word	0x3FA578A1,0xCFB88F30,0xCE68806D,0x0C7FC430,0x75D76BC5,0x1B4D6B3F,0,0  @:	0x8A
	.word	0xBCAB5EEF,0xD3E9D3B4,0x16444F3D,0x8577F1EC,0x82522CC6,0xFC186959,0,0  @:	0x8B
	.word	0xB58C8A4B,0x9A0F1AAD,0xC4AEEDDF,0xB3444F24,0xB14EBDCD,0xAEE4640D,0,0  @:	0x8C
	.word	0x3682AC05,0x865E4629,0x1C82228F,0x3A4C7AF8,0x46CBFACE,0x49B1666B,0,0  @:	0x8D
	.word	0xB291C6D7,0xA2ADA2A5,0x75F7737E,0xA155259C,0x5F4532CB,0x604F60C1,0,0  @:	0x8E
	.word	0x319FE099,0xBEFCFE21,0xADDBBC2E,0x285D1040,0xA8C075C8,0x871A62A7,0,0  @:	0x8F
	.word	0x960D9644,0x853485C2,0x3E5CF8F4,0x7999DDBE,0x923576E5,0x28BE5791,0,0  @:	0x90
	.word	0x1503B00A,0x9965D946,0xE67037A4,0xF091E862,0x65B031E6,0xCFEB55F7,0,0  @:	0x91
	.word	0x9110DAD8,0xBD963DCA,0x8F056655,0x6B88B706,0x7C3EF9E3,0xE615535D,0,0  @:	0x92
	.word	0x121EFC96,0xA1C7614E,0x5729A905,0xE28082DA,0x8BBBBEE0,0x0140513B,0,0  @:	0x93
	.word	0x1B392832,0xE821A857,0x85C30BE7,0xD4B33C12,0xB8A72FEB,0x53BC5C6F,0,0  @:	0x94
	.word	0x98370E7C,0xF470F4D3,0x5DEFC4B7,0x5DBB09CE,0x4F2268E8,0xB4E95E09,0,0  @:	0x95
	.word	0x1C2464AE,0xD083105F,0x349A9546,0xC6A256AA,0x56ACA0ED,0x9D1758A3,0,0  @:	0x96
	.word	0x9F2A42E0,0xCCD24CDB,0xECB65A16,0x4FAA6376,0xA129E7EE,0x7A425AC5,0,0  @:	0x97
	.word	0x8D64EAA9,0x5F1EDFE8,0x49631FD3,0x23CC1FE7,0xC711C5F9,0xDEBA416D,0,0  @:	0x98
	.word	0x0E6ACCE7,0x434F836C,0x914FD083,0xAAC42A3B,0x309482FA,0x39EF430B,0,0  @:	0x99
	.word	0x8A79A635,0x67BC67E0,0xF83A8172,0x31DD755F,0x291A4AFF,0x101145A1,0,0  @:	0x9A
	.word	0x0977807B,0x7BED3B64,0x20164E22,0xB8D54083,0xDE9F0DFC,0xF74447C7,0,0  @:	0x9B
	.word	0x005054DF,0x320BF27D,0xF2FCECC0,0x8EE6FE4B,0xED839CF7,0xA5B84A93,0,0  @:	0x9C
	.word	0x835E7291,0x2E5AAEF9,0x2AD02390,0x07EECB97,0x1A06DBF4,0x42ED48F5,0,0  @:	0x9D
	.word	0x074D1843,0x0AA94A75,0x43A57261,0x9CF794F3,0x038813F1,0x6B134E5F,0,0  @:	0x9E
	.word	0x84433E0D,0x16F816F1,0x9B89BD31,0x15FFA12F,0xF40D54F2,0x8C464C39,0,0  @:	0x9F
	.word	0xCB66D3B7,0x6168E137,0xBC863485,0xB7773AD2,0x80E753A8,0xD20F2755,0,0  @:	0xA0
	.word	0x4868F5F9,0x7D39BDB3,0x64AAFBD5,0x3E7F0F0E,0x776214AB,0x355A2533,0,0  @:	0xA1
	.word	0xCC7B9F2B,0x59CA593F,0x0DDFAA24,0xA566506A,0x6EECDCAE,0x1CA42399,0,0  @:	0xA2
	.word	0x4F75B965,0x459B05BB,0xD5F36574,0x2C6E65B6,0x99699BAD,0xFBF121FF,0,0  @:	0xA3
	.word	0x46526DC1,0x0C7DCCA2,0x0719C796,0x1A5DDB7E,0xAA750AA6,0xA90D2CAB,0,0  @:	0xA4
	.word	0xC55C4B8F,0x102C9026,0xDF3508C6,0x9355EEA2,0x5DF04DA5,0x4E582ECD,0,0  @:	0xA5
	.word	0x414F215D,0x34DF74AA,0xB6405937,0x084CB1C6,0x447E85A0,0x67A62867,0,0  @:	0xA6
	.word	0xC2410713,0x288E282E,0x6E6C9667,0x8144841A,0xB3FBC2A3,0x80F32A01,0,0  @:	0xA7
	.word	0xD00FAF5A,0xBB42BB1D,0xCBB9D3A2,0xED22F88B,0xD5C3E0B4,0x240B31A9,0,0  @:	0xA8
	.word	0x53018914,0xA713E799,0x13951CF2,0x642ACD57,0x2246A7B7,0xC35E33CF,0,0  @:	0xA9
	.word	0xD712E3C6,0x83E00315,0x7AE04D03,0xFF339233,0x3BC86FB2,0xEAA03565,0,0  @:	0xAA
	.word	0x541CC588,0x9FB15F91,0xA2CC8253,0x763BA7EF,0xCC4D28B1,0x0DF53703,0,0  @:	0xAB
	.word	0x5D3B112C,0xD6579688,0x702620B1,0x40081927,0xFF51B9BA,0x5F093A57,0,0  @:	0xAC
	.word	0xDE353762,0xCA06CA0C,0xA80AEFE1,0xC9002CFB,0x08D4FEB9,0xB85C3831,0,0  @:	0xAD
	.word	0x5A265DB0,0xEEF52E80,0xC17FBE10,0x5219739F,0x115A36BC,0x91A23E9B,0,0  @:	0xAE
	.word	0xD9287BFE,0xF2A47204,0x19537140,0xDB114643,0xE6DF71BF,0x76F73CFD,0,0  @:	0xAF
	.word	0x7EBA0D23,0xC96C09E7,0x8AD4359A,0x8AD58BBD,0xDC2A7292,0xD95309CB,0,0  @:	0xB0
	.word	0xFDB42B6D,0xD53D5563,0x52F8FACA,0x03DDBE61,0x2BAF3591,0x3E060BAD,0,0  @:	0xB1
	.word	0x79A741BF,0xF1CEB1EF,0x3B8DAB3B,0x98C4E105,0x3221FD94,0x17F80D07,0,0  @:	0xB2
	.word	0xFAA967F1,0xED9FED6B,0xE3A1646B,0x11CCD4D9,0xC5A4BA97,0xF0AD0F61,0,0  @:	0xB3
	.word	0xF38EB355,0xA4792472,0x314BC689,0x27FF6A11,0xF6B82B9C,0xA2510235,0,0  @:	0xB4
	.word	0x7080951B,0xB82878F6,0xE96709D9,0xAEF75FCD,0x013D6C9F,0x45040053,0,0  @:	0xB5
	.word	0xF493FFC9,0x9CDB9C7A,0x80125828,0x35EE00A9,0x18B3A49A,0x6CFA06F9,0,0  @:	0xB6
	.word	0x779DD987,0x808AC0FE,0x583E9778,0xBCE63575,0xEF36E399,0x8BAF049F,0,0  @:	0xB7
	.word	0x65D371CE,0x134653CD,0xFDEBD2BD,0xD08049E4,0x890EC18E,0x2F571F37,0,0  @:	0xB8
	.word	0xE6DD5780,0x0F170F49,0x25C71DED,0x59887C38,0x7E8B868D,0xC8021D51,0,0  @:	0xB9
	.word	0x62CE3D52,0x2BE4EBC5,0x4CB24C1C,0xC291235C,0x67054E88,0xE1FC1BFB,0,0  @:	0xBA
	.word	0xE1C01B1C,0x37B5B741,0x949E834C,0x4B991680,0x9080098B,0x06A9199D,0,0  @:	0xBB
	.word	0xE8E7CFB8,0x7E537E58,0x467421AE,0x7DAAA848,0xA39C9880,0x545514C9,0,0  @:	0xBC
	.word	0x6BE9E9F6,0x620222DC,0x9E58EEFE,0xF4A29D94,0x5419DF83,0xB30016AF,0,0  @:	0xBD
	.word	0xEFFA8324,0x46F1C650,0xF72DBF0F,0x6FBBC2F0,0x4D971786,0x9AFE1005,0,0  @:	0xBE
	.word	0x6CF4A56A,0x5AA09AD4,0x2F01705F,0xE6B3F72C,0xBA125085,0x7DAB1263,0,0  @:	0xBF
	.word	0xF3BE7F1F,0xB5807559,0x601F6236,0xA2A2C0D7,0x52C65F31,0xC139C4BB,0,0  @:	0xC0
	.word	0x70B05951,0xA9D129DD,0xB833AD66,0x2BAAF50B,0xA5431832,0x266CC6DD,0,0  @:	0xC1
	.word	0xF4A33383,0x8D22CD51,0xD146FC97,0xB0B3AA6F,0xBCCDD037,0x0F92C077,0,0  @:	0xC2
	.word	0x77AD15CD,0x917391D5,0x096A33C7,0x39BB9FB3,0x4B489734,0xE8C7C211,0,0  @:	0xC3
	.word	0x7E8AC169,0xD89558CC,0xDB809125,0x0F88217B,0x7854063F,0xBA3BCF45,0,0  @:	0xC4
	.word	0xFD84E727,0xC4C40448,0x03AC5E75,0x868014A7,0x8FD1413C,0x5D6ECD23,0,0  @:	0xC5
	.word	0x79978DF5,0xE037E0C4,0x6AD90F84,0x1D994BC3,0x965F8939,0x7490CB89,0,0  @:	0xC6
	.word	0xFA99ABBB,0xFC66BC40,0xB2F5C0D4,0x94917E1F,0x61DACE3A,0x93C5C9EF,0,0  @:	0xC7
	.word	0xE8D703F2,0x6FAA2F73,0x17208511,0xF8F7028E,0x07E2EC2D,0x373DD247,0,0  @:	0xC8
	.word	0x6BD925BC,0x73FB73F7,0xCF0C4A41,0x71FF3752,0xF067AB2E,0xD068D021,0,0  @:	0xC9
	.word	0xEFCA4F6E,0x5708977B,0xA6791BB0,0xEAE66836,0xE9E9632B,0xF996D68B,0,0  @:	0xCA
	.word	0x6CC46920,0x4B59CBFF,0x7E55D4E0,0x63EE5DEA,0x1E6C2428,0x1EC3D4ED,0,0  @:	0xCB
	.word	0x65E3BD84,0x02BF02E6,0xACBF7602,0x55DDE322,0x2D70B523,0x4C3FD9B9,0,0  @:	0xCC
	.word	0xE6ED9BCA,0x1EEE5E62,0x7493B952,0xDCD5D6FE,0xDAF5F220,0xAB6ADBDF,0,0  @:	0xCD
	.word	0x62FEF118,0x3A1DBAEE,0x1DE6E8A3,0x47CC899A,0xC37B3A25,0x8294DD75,0,0  @:	0xCE
	.word	0xE1F0D756,0x264CE66A,0xC5CA27F3,0xCEC4BC46,0x34FE7D26,0x65C1DF13,0,0  @:	0xCF
	.word	0x4662A18B,0x1D849D89,0x564D6329,0x9F0071B8,0x0E0B7E0B,0xCA65EA25,0,0  @:	0xD0
	.word	0xC56C87C5,0x01D5C10D,0x8E61AC79,0x16084464,0xF98E3908,0x2D30E843,0,0  @:	0xD1
	.word	0x417FED17,0x25262581,0xE714FD88,0x8D111B00,0xE000F10D,0x04CEEEE9,0,0  @:	0xD2
	.word	0xC271CB59,0x39777905,0x3F3832D8,0x04192EDC,0x1785B60E,0xE39BEC8F,0,0  @:	0xD3
	.word	0xCB561FFD,0x7091B01C,0xEDD2903A,0x322A9014,0x24992705,0xB167E1DB,0,0  @:	0xD4
	.word	0x485839B3,0x6CC0EC98,0x35FE5F6A,0xBB22A5C8,0xD31C6006,0x5632E3BD,0,0  @:	0xD5
	.word	0xCC4B5361,0x48330814,0x5C8B0E9B,0x203BFAAC,0xCA92A803,0x7FCCE517,0,0  @:	0xD6
	.word	0x4F45752F,0x54625490,0x84A7C1CB,0xA933CF70,0x3D17EF00,0x9899E771,0,0  @:	0xD7
	.word	0x5D0BDD66,0xC7AEC7A3,0x2172840E,0xC555B3E1,0x5B2FCD17,0x3C61FCD9,0,0  @:	0xD8
	.word	0xDE05FB28,0xDBFF9B27,0xF95E4B5E,0x4C5D863D,0xACAA8A14,0xDB34FEBF,0,0  @:	0xD9
	.word	0x5A1691FA,0xFF0C7FAB,0x902B1AAF,0xD744D959,0xB5244211,0xF2CAF815,0,0  @:	0xDA
	.word	0xD918B7B4,0xE35D232F,0x4807D5FF,0x5E4CEC85,0x42A10512,0x159FFA73,0,0  @:	0xDB
	.word	0xD03F6310,0xAABBEA36,0x9AED771D,0x687F524D,0x71BD9419,0x4763F727,0,0  @:	0xDC
	.word	0x5331455E,0xB6EAB6B2,0x42C1B84D,0xE1776791,0x8638D31A,0xA036F541,0,0  @:	0xDD
	.word	0xD7222F8C,0x9219523E,0x2BB4E9BC,0x7A6E38F5,0x9FB61B1F,0x89C8F3EB,0,0  @:	0xDE
	.word	0x542C09C2,0x8E480EBA,0xF39826EC,0xF3660D29,0x68335C1C,0x6E9DF18D,0,0  @:	0xDF
	.word	0x1B09E478,0xF9D8F97C,0xD497AF58,0x51EE96D4,0x1CD95B46,0x30D49AE1,0,0  @:	0xE0
	.word	0x9807C236,0xE589A5F8,0x0CBB6008,0xD8E6A308,0xEB5C1C45,0xD7819887,0,0  @:	0xE1
	.word	0x1C14A8E4,0xC17A4174,0x65CE31F9,0x43FFFC6C,0xF2D2D440,0xFE7F9E2D,0,0  @:	0xE2
	.word	0x9F1A8EAA,0xDD2B1DF0,0xBDE2FEA9,0xCAF7C9B0,0x05579343,0x192A9C4B,0,0  @:	0xE3
	.word	0x963D5A0E,0x94CDD4E9,0x6F085C4B,0xFCC47778,0x364B0248,0x4BD6911F,0,0  @:	0xE4
	.word	0x15337C40,0x889C886D,0xB724931B,0x75CC42A4,0xC1CE454B,0xAC839379,0,0  @:	0xE5
	.word	0x91201692,0xAC6F6CE1,0xDE51C2EA,0xEED51DC0,0xD8408D4E,0x857D95D3,0,0  @:	0xE6
	.word	0x122E30DC,0xB03E3065,0x067D0DBA,0x67DD281C,0x2FC5CA4D,0x622897B5,0,0  @:	0xE7
	.word	0x00609895,0x23F2A356,0xA3A8487F,0x0BBB548D,0x49FDE85A,0xC6D08C1D,0,0  @:	0xE8
	.word	0x836EBEDB,0x3FA3FFD2,0x7B84872F,0x82B36151,0xBE78AF59,0x21858E7B,0,0  @:	0xE9
	.word	0x077DD409,0x1B501B5E,0x12F1D6DE,0x19AA3E35,0xA7F6675C,0x087B88D1,0,0  @:	0xEA
	.word	0x8473F247,0x070147DA,0xCADD198E,0x90A20BE9,0x5073205F,0xEF2E8AB7,0,0  @:	0xEB
	.word	0x8D5426E3,0x4EE78EC3,0x1837BB6C,0xA691B521,0x636FB154,0xBDD287E3,0,0  @:	0xEC
	.word	0x0E5A00AD,0x52B6D247,0xC01B743C,0x2F9980FD,0x94EAF657,0x5A878585,0,0  @:	0xED
	.word	0x8A496A7F,0x764536CB,0xA96E25CD,0xB480DF99,0x8D643E52,0x7379832F,0,0  @:	0xEE
	.word	0x09474C31,0x6A146A4F,0x7142EA9D,0x3D88EA45,0x7AE17951,0x942C8149,0,0  @:	0xEF
	.word	0xAED53AEC,0x51DC11AC,0xE2C5AE47,0x6C4C27BB,0x40147A7C,0x3B88B47F,0,0  @:	0xF0
	.word	0x2DDB1CA2,0x4D8D4D28,0x3AE96117,0xE5441267,0xB7913D7F,0xDCDDB619,0,0  @:	0xF1
	.word	0xA9C87670,0x697EA9A4,0x539C30E6,0x7E5D4D03,0xAE1FF57A,0xF523B0B3,0,0  @:	0xF2
	.word	0x2AC6503E,0x752FF520,0x8BB0FFB6,0xF75578DF,0x599AB279,0x1276B2D5,0,0  @:	0xF3
	.word	0x23E1849A,0x3CC93C39,0x595A5D54,0xC166C617,0x6A862372,0x408ABF81,0,0  @:	0xF4
	.word	0xA0EFA2D4,0x209860BD,0x81769204,0x486EF3CB,0x9D036471,0xA7DFBDE7,0,0  @:	0xF5
	.word	0x24FCC806,0x046B8431,0xE803C3F5,0xD377ACAF,0x848DAC74,0x8E21BB4D,0,0  @:	0xF6
	.word	0xA7F2EE48,0x183AD8B5,0x302F0CA5,0x5A7F9973,0x7308EB77,0x6974B92B,0,0  @:	0xF7
	.word	0xB5BC4601,0x8BF64B86,0x95FA4960,0x3619E5E2,0x1530C960,0xCD8CA283,0,0  @:	0xF8
	.word	0x36B2604F,0x97A71702,0x4DD68630,0xBF11D03E,0xE2B58E63,0x2AD9A0E5,0,0  @:	0xF9
	.word	0xB2A10A9D,0xB354F38E,0x24A3D7C1,0x24088F5A,0xFB3B4666,0x0327A64F,0,0  @:	0xFA
	.word	0x31AF2CD3,0xAF05AF0A,0xFC8F1891,0xAD00BA86,0x0CBE0165,0xE472A429,0,0  @:	0xFB
	.word	0x3888F877,0xE6E36613,0x2E65BA73,0x9B33044E,0x3FA2906E,0xB68EA97D,0,0  @:	0xFC
	.word	0xBB86DE39,0xFAB23A97,0xF6497523,0x123B3192,0xC827D76D,0x51DBAB1B,0,0  @:	0xFD
	.word	0x3F95B4EB,0xDE41DE1B,0x9F3C24D2,0x89226EF6,0xD1A91F68,0x7825ADB1,0,0  @:	0xFE
	.word	0xBC9B92A5,0xC210829F,0x4710EB82,0x002A5B2A,0x262C586B,0x9F70AFD7,0,0  @:	0xFF


// lookup table to do the final LDPC XOR step

	.align	8					@: 256 byte boundary

ldpc_xor_table:
	.byte	0x00,0x01,0x03,0x02,0x07,0x06,0x04,0x05,0x0F,0x0E,0x0C,0x0D,0x08,0x09,0x0B,0x0A	   @: 0x000
	.byte	0x1F,0x1E,0x1C,0x1D,0x18,0x19,0x1B,0x1A,0x10,0x11,0x13,0x12,0x17,0x16,0x14,0x15	   @: 0x010
	.byte	0x3F,0x3E,0x3C,0x3D,0x38,0x39,0x3B,0x3A,0x30,0x31,0x33,0x32,0x37,0x36,0x34,0x35	   @: 0x020
	.byte	0x20,0x21,0x23,0x22,0x27,0x26,0x24,0x25,0x2F,0x2E,0x2C,0x2D,0x28,0x29,0x2B,0x2A	   @: 0x030
	.byte	0x7F,0x7E,0x7C,0x7D,0x78,0x79,0x7B,0x7A,0x70,0x71,0x73,0x72,0x77,0x76,0x74,0x75	   @: 0x040
	.byte	0x60,0x61,0x63,0x62,0x67,0x66,0x64,0x65,0x6F,0x6E,0x6C,0x6D,0x68,0x69,0x6B,0x6A	   @: 0x050
	.byte	0x40,0x41,0x43,0x42,0x47,0x46,0x44,0x45,0x4F,0x4E,0x4C,0x4D,0x48,0x49,0x4B,0x4A	   @: 0x060
	.byte	0x5F,0x5E,0x5C,0x5D,0x58,0x59,0x5B,0x5A,0x50,0x51,0x53,0x52,0x57,0x56,0x54,0x55	   @: 0x070
	.byte	0xFF,0xFE,0xFC,0xFD,0xF8,0xF9,0xFB,0xFA,0xF0,0xF1,0xF3,0xF2,0xF7,0xF6,0xF4,0xF5	   @: 0x080
	.byte	0xE0,0xE1,0xE3,0xE2,0xE7,0xE6,0xE4,0xE5,0xEF,0xEE,0xEC,0xED,0xE8,0xE9,0xEB,0xEA	   @: 0x090
	.byte	0xC0,0xC1,0xC3,0xC2,0xC7,0xC6,0xC4,0xC5,0xCF,0xCE,0xCC,0xCD,0xC8,0xC9,0xCB,0xCA	   @: 0x0A0
	.byte	0xDF,0xDE,0xDC,0xDD,0xD8,0xD9,0xDB,0xDA,0xD0,0xD1,0xD3,0xD2,0xD7,0xD6,0xD4,0xD5	   @: 0x0B0
	.byte	0x80,0x81,0x83,0x82,0x87,0x86,0x84,0x85,0x8F,0x8E,0x8C,0x8D,0x88,0x89,0x8B,0x8A	   @: 0x0C0
	.byte	0x9F,0x9E,0x9C,0x9D,0x98,0x99,0x9B,0x9A,0x90,0x91,0x93,0x92,0x97,0x96,0x94,0x95	   @: 0x0D0
	.byte	0xBF,0xBE,0xBC,0xBD,0xB8,0xB9,0xBB,0xBA,0xB0,0xB1,0xB3,0xB2,0xB7,0xB6,0xB4,0xB5	   @: 0x0E0
	.byte	0xA0,0xA1,0xA3,0xA2,0xA7,0xA6,0xA4,0xA5,0xAF,0xAE,0xAC,0xAD,0xA8,0xA9,0xAB,0xAA	   @: 0x0F0
	.byte	0xFF,0xFE,0xFC,0xFD,0xF8,0xF9,0xFB,0xFA,0xF0,0xF1,0xF3,0xF2,0xF7,0xF6,0xF4,0xF5	   @: 0x100
	.byte	0xE0,0xE1,0xE3,0xE2,0xE7,0xE6,0xE4,0xE5,0xEF,0xEE,0xEC,0xED,0xE8,0xE9,0xEB,0xEA	   @: 0x110
	.byte	0xC0,0xC1,0xC3,0xC2,0xC7,0xC6,0xC4,0xC5,0xCF,0xCE,0xCC,0xCD,0xC8,0xC9,0xCB,0xCA	   @: 0x120
	.byte	0xDF,0xDE,0xDC,0xDD,0xD8,0xD9,0xDB,0xDA,0xD0,0xD1,0xD3,0xD2,0xD7,0xD6,0xD4,0xD5	   @: 0x130
	.byte	0x80,0x81,0x83,0x82,0x87,0x86,0x84,0x85,0x8F,0x8E,0x8C,0x8D,0x88,0x89,0x8B,0x8A	   @: 0x140
	.byte	0x9F,0x9E,0x9C,0x9D,0x98,0x99,0x9B,0x9A,0x90,0x91,0x93,0x92,0x97,0x96,0x94,0x95	   @: 0x150
	.byte	0xBF,0xBE,0xBC,0xBD,0xB8,0xB9,0xBB,0xBA,0xB0,0xB1,0xB3,0xB2,0xB7,0xB6,0xB4,0xB5	   @: 0x160
	.byte	0xA0,0xA1,0xA3,0xA2,0xA7,0xA6,0xA4,0xA5,0xAF,0xAE,0xAC,0xAD,0xA8,0xA9,0xAB,0xAA	   @: 0x170
	.byte	0x00,0x01,0x03,0x02,0x07,0x06,0x04,0x05,0x0F,0x0E,0x0C,0x0D,0x08,0x09,0x0B,0x0A	   @: 0x180
	.byte	0x1F,0x1E,0x1C,0x1D,0x18,0x19,0x1B,0x1A,0x10,0x11,0x13,0x12,0x17,0x16,0x14,0x15	   @: 0x190
	.byte	0x3F,0x3E,0x3C,0x3D,0x38,0x39,0x3B,0x3A,0x30,0x31,0x33,0x32,0x37,0x36,0x34,0x35	   @: 0x1A0
	.byte	0x20,0x21,0x23,0x22,0x27,0x26,0x24,0x25,0x2F,0x2E,0x2C,0x2D,0x28,0x29,0x2B,0x2A	   @: 0x1B0
	.byte	0x7F,0x7E,0x7C,0x7D,0x78,0x79,0x7B,0x7A,0x70,0x71,0x73,0x72,0x77,0x76,0x74,0x75	   @: 0x1C0
	.byte	0x60,0x61,0x63,0x62,0x67,0x66,0x64,0x65,0x6F,0x6E,0x6C,0x6D,0x68,0x69,0x6B,0x6A	   @: 0x1D0
	.byte	0x40,0x41,0x43,0x42,0x47,0x46,0x44,0x45,0x4F,0x4E,0x4C,0x4D,0x48,0x49,0x4B,0x4A	   @: 0x1E0
	.byte	0x5F,0x5E,0x5C,0x5D,0x58,0x59,0x5B,0x5A,0x50,0x51,0x53,0x52,0x57,0x56,0x54,0x55	   @: 0x1F0

	.align	8
	
symbols_scramble_table6_neon:	
	.byte	0x0,0x4,0x4,0x4,0x4,0x8,0x0,0xc,0xc,0x0,0xc,0x0,0xc,0xc,0x0,0xff	@: 0x0000	 0
	.byte	0x4,0xc,0xc,0xc,0xc,0x8,0x0,0xc,0xc,0x4,0x8,0xc,0x4,0x8,0x4,0xff	@: 0x0010	15
	.byte	0x4,0x4,0x4,0xc,0x4,0x8,0x4,0x8,0x0,0x4,0xc,0xc,0x8,0x0,0x0,0xff	@: 0x0020	30
	.byte	0x4,0xc,0xc,0xc,0x8,0x0,0xc,0xc,0x8,0xc,0x4,0x0,0x8,0x8,0x4,0xff	@: 0x0030	45
	.byte	0xc,0x0,0x8,0xc,0x8,0xc,0x8,0x8,0x0,0xc,0x8,0xc,0x8,0x0,0x8,0xff	@: 0x0040	60
	.byte	0x0,0x8,0x8,0x0,0x4,0x4,0x0,0x8,0xc,0x8,0x4,0x0,0x4,0xc,0x8,0xff	@: 0x0050	75
	.byte	0x0,0x8,0x0,0x8,0xc,0x8,0x4,0x8,0x8,0x8,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x0060	90
	.byte	0x0,0x4,0x0,0xc,0x8,0x0,0x8,0x0,0x4,0x8,0x4,0x4,0xc,0xc,0x0,0xff	@: 0x0070  105
	.byte	0xc,0x0,0xc,0xc,0x0,0x0,0x0,0xc,0x8,0x0,0x4,0xc,0x8,0x8,0x0,0xff	@: 0x0080  120
	.byte	0x8,0xc,0x8,0x4,0xc,0x8,0xc,0x8,0x0,0x8,0x8,0xc,0x8,0xc,0xc,0xff	@: 0x0090  135
	.byte	0x8,0x0,0x4,0xc,0x4,0x0,0x0,0xc,0x8,0x8,0xc,0xc,0xc,0x8,0x8,0xff	@: 0x00A0  150
	.byte	0x0,0x4,0xc,0x4,0x4,0x4,0x4,0xc,0x4,0xc,0x0,0x4,0x4,0x8,0x8,0xff	@: 0x00B0  165
	.byte	0xc,0x4,0x0,0x0,0x0,0xc,0x4,0x4,0x8,0x4,0x8,0x0,0x0,0xc,0x4,0xff	@: 0x00C0  180
	.byte	0x8,0xc,0x4,0x4,0xc,0x8,0x8,0xc,0xc,0x8,0xc,0xc,0x0,0xc,0x8,0xff	@: 0x00D0  195
	.byte	0x0,0xc,0x4,0x8,0x8,0x8,0x0,0x4,0xc,0xc,0x0,0xc,0xc,0x4,0x8,0xff	@: 0x00E0  210
	.byte	0x8,0x0,0x8,0x0,0x8,0x0,0x8,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0xc,0xff	@: 0x00F0  225
	.byte	0x4,0x8,0xc,0x0,0x0,0xc,0x4,0x8,0x0,0x4,0xc,0x0,0x8,0xc,0xc,0xff	@: 0x0100  240
	.byte	0x4,0x4,0x0,0x8,0x4,0xc,0x8,0xc,0xc,0x4,0x8,0x8,0x0,0x0,0xc,0xff	@: 0x0110  255
	.byte	0x8,0x4,0x4,0x0,0x8,0xc,0xc,0x8,0x0,0x8,0x8,0x0,0xc,0x4,0xc,0xff	@: 0x0120  270
	.byte	0x4,0x0,0x8,0x4,0x0,0xc,0x0,0x0,0x8,0x0,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x0130  285
	.byte	0x8,0x4,0x4,0xc,0x8,0x0,0xc,0x0,0xc,0x4,0x0,0x4,0x4,0x0,0x4,0xff	@: 0x0140  300
	.byte	0xc,0x8,0x4,0x8,0xc,0x0,0x8,0x0,0x4,0xc,0xc,0x0,0x8,0x8,0x0,0xff	@: 0x0150  315
	.byte	0x4,0x0,0x8,0x0,0x4,0x4,0xc,0x8,0x4,0x0,0x0,0x0,0xc,0x0,0x8,0xff	@: 0x0160  330
	.byte	0x0,0x4,0x4,0x4,0x4,0xc,0x0,0x4,0x0,0xc,0x4,0x0,0x4,0xc,0x0,0xff	@: 0x0170  345
	.byte	0x0,0x4,0x0,0xc,0x8,0xc,0x8,0x4,0xc,0x0,0x8,0x8,0xc,0x8,0xc,0xff	@: 0x0180  360
	.byte	0xc,0x0,0x4,0x0,0x4,0x0,0x4,0xc,0x4,0xc,0x8,0x8,0x0,0xc,0xc,0xff	@: 0x0190  375
	.byte	0x0,0xc,0xc,0x0,0x8,0x8,0x0,0x0,0x8,0x0,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x01A0  390
	.byte	0x4,0xc,0x4,0x4,0xc,0x0,0x4,0x0,0x0,0x8,0x0,0xc,0x8,0x0,0x8,0xff	@: 0x01B0  405
	.byte	0x0,0x4,0xc,0xc,0x8,0x8,0xc,0xc,0x0,0x0,0x8,0x8,0x4,0xc,0x8,0xff	@: 0x01C0  420
	.byte	0x0,0x4,0x0,0x0,0x8,0x8,0x4,0x4,0x0,0x0,0x4,0x0,0x8,0x8,0x8,0xff	@: 0x01D0  435
	.byte	0x4,0x4,0x0,0xc,0x8,0x8,0xc,0x8,0x4,0x0,0xc,0x0,0xc,0xc,0x4,0xff	@: 0x01E0  450
	.byte	0x0,0x8,0x0,0x4,0x8,0x0,0x8,0x8,0x4,0xc,0xc,0x0,0x8,0x4,0x8,0xff	@: 0x01F0  465
	.byte	0x4,0x8,0xc,0x4,0x0,0x0,0x4,0x8,0x4,0xc,0x8,0x4,0x8,0x4,0x8,0xff	@: 0x0200  480
	.byte	0x4,0x0,0xc,0x4,0x0,0x4,0x0,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0x0,0xff	@: 0x0210  495
	.byte	0x4,0xc,0x0,0x4,0xc,0x8,0x8,0x8,0x0,0x4,0x4,0x4,0x8,0x4,0x0,0xff	@: 0x0220  510
	.byte	0x0,0x0,0xc,0x0,0x8,0x0,0x4,0x4,0x8,0x4,0xc,0x4,0x0,0x4,0x4,0xff	@: 0x0230  525
	.byte	0x4,0x8,0x8,0x4,0xc,0x8,0x0,0x8,0x8,0x4,0x8,0x0,0x8,0x0,0x0,0xff	@: 0x0240  540
	.byte	0x8,0x0,0x4,0x8,0xc,0xc,0x8,0x8,0xc,0xc,0x8,0x4,0x0,0x4,0x8,0xff	@: 0x0250  555
	.byte	0xc,0xc,0x0,0xc,0xc,0xc,0xc,0x0,0x8,0x0,0x4,0xc,0x0,0x4,0x8,0xff	@: 0x0260  570
	.byte	0xc,0x4,0xc,0x8,0x4,0xc,0xc,0x4,0x0,0x8,0x4,0x0,0x0,0x4,0x0,0xff	@: 0x0270  585
	.byte	0xc,0xc,0x4,0x0,0x8,0xc,0xc,0x8,0x4,0xc,0x4,0x0,0x4,0x0,0xc,0xff	@: 0x0280  600
	.byte	0x4,0x0,0x8,0x0,0x8,0x8,0x4,0xc,0xc,0x8,0x8,0x8,0x0,0x0,0x8,0xff	@: 0x0290  615
	.byte	0x4,0x0,0x8,0xc,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0x4,0x8,0x4,0xc,0xff	@: 0x02A0  630
	.byte	0xc,0x4,0x8,0xc,0x0,0x4,0x0,0x8,0x4,0x4,0x0,0x4,0x0,0x0,0xc,0xff	@: 0x02B0  645
	.byte	0xc,0x4,0x8,0x4,0x8,0x0,0xc,0x4,0x4,0xc,0x4,0xc,0x0,0x0,0x0,0xff	@: 0x02C0  660
	.byte	0x8,0xc,0x0,0x4,0x4,0xc,0x0,0xc,0xc,0x0,0xc,0x8,0x4,0x0,0x8,0xff	@: 0x02D0  675
	.byte	0x4,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x4,0x4,0x8,0x4,0x8,0xff	@: 0x02E0  690
	.byte	0x8,0x8,0x8,0x4,0x0,0x0,0x8,0x4,0x4,0x0,0xc,0x0,0x8,0x0,0x4,0xff	@: 0x02F0  705
	.byte	0x8,0x8,0x4,0x0,0x8,0x4,0x0,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x8,0xff	@: 0x0300  720
	.byte	0x0,0x8,0x0,0xc,0x0,0x4,0x0,0x8,0x8,0x8,0x4,0xc,0xc,0xc,0xc,0xff	@: 0x0310  735
	.byte	0x0,0x0,0x0,0x4,0xc,0xc,0x8,0x0,0x4,0x0,0x8,0x8,0xc,0x8,0x8,0xff	@: 0x0320  750
	.byte	0x4,0x0,0x0,0x0,0xc,0x4,0x8,0x8,0xc,0x8,0x4,0x0,0x4,0x8,0x0,0xff	@: 0x0330  765
	.byte	0xc,0x4,0x4,0xc,0xc,0x8,0x8,0x0,0x0,0xc,0x8,0x8,0xc,0x8,0x8,0xff	@: 0x0340  780
	.byte	0x8,0x0,0xc,0xc,0xc,0x8,0x0,0xc,0x4,0x0,0x8,0x8,0x0,0x0,0x8,0xff	@: 0x0350  795
	.byte	0x4,0x0,0x8,0x8,0x0,0x8,0xc,0x4,0x8,0x8,0x8,0x8,0x0,0x0,0x0,0xff	@: 0x0360  810
	.byte	0xc,0x8,0x8,0x8,0x8,0x0,0xc,0xc,0x4,0x8,0x0,0xc,0x8,0xc,0x8,0xff	@: 0x0370  825
	.byte	0x4,0x4,0x0,0xc,0x8,0x4,0x8,0xc,0xc,0x8,0x8,0x4,0x0,0x8,0x4,0xff	@: 0x0380  840
	.byte	0xc,0xc,0xc,0x4,0xc,0xc,0x8,0x4,0x0,0x0,0x4,0x0,0x8,0x4,0x0,0xff	@: 0x0390  855
	.byte	0xc,0x4,0x0,0x8,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x4,0x8,0xc,0x4,0xff	@: 0x03A0  870
	.byte	0x8,0x4,0x8,0x8,0x0,0x4,0x0,0x4,0x4,0x8,0x8,0x4,0x4,0x4,0x4,0xff	@: 0x03B0  885
	.byte	0xc,0x4,0xc,0x4,0x0,0x0,0xc,0x8,0x8,0x4,0x4,0xc,0x4,0x8,0xc,0xff	@: 0x03C0  900
	.byte	0xc,0xc,0xc,0x4,0x8,0x8,0x8,0x0,0x0,0x8,0x0,0x8,0x4,0x0,0x8,0xff	@: 0x03D0  915
	.byte	0x8,0x0,0x4,0x0,0x8,0x8,0x8,0x4,0x0,0x8,0x8,0xc,0x4,0x4,0x4,0xff	@: 0x03E0  930
	.byte	0x8,0x8,0x4,0x0,0x0,0x4,0x4,0x8,0x0,0x8,0x4,0x0,0x8,0x8,0x4,0xff	@: 0x03F0  945
	.byte	0x8,0x0,0xc,0xc,0xc,0xc,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x0400  960
	.byte	0x0,0x0,0xc,0x0,0x4,0x8,0x0,0x8,0x4,0x0,0x4,0x0,0x4,0x0,0x8,0xff	@: 0x0410  975
	.byte	0xc,0x0,0x0,0xc,0xc,0x8,0x0,0x8,0xc,0xc,0x8,0x8,0x4,0xc,0x8,0xff	@: 0x0420  990
	.byte	0xc,0x4,0x8,0xc,0x0,0x8,0x8,0x0,0xc,0x4,0x0,0xc,0xc,0xc,0x4,0xff	@: 0x0430 1005
	.byte	0x8,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x8,0xc,0x0,0xc,0x0,0x0,0x0,0xff	@: 0x0440 1020
	.byte	0xc,0x8,0x0,0x0,0x4,0x4,0x0,0x4,0xc,0x8,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x0450 1035
	.byte	0x0,0x8,0x0,0x8,0x4,0x0,0x8,0x4,0x4,0x0,0xc,0xc,0x0,0x0,0x0,0xff	@: 0x0460 1050
	.byte	0x0,0xc,0x0,0xc,0x0,0xc,0xc,0x4,0x4,0x4,0x0,0x4,0xc,0x8,0xc,0xff	@: 0x0470 1065
	.byte	0x4,0x4,0x0,0x0,0x4,0x8,0x4,0x4,0xc,0x0,0x8,0x8,0x0,0x8,0x0,0xff	@: 0x0480 1080
	.byte	0x4,0x8,0x4,0x0,0x0,0x0,0x8,0x8,0xc,0xc,0x0,0x4,0xc,0x4,0x8,0xff	@: 0x0490 1095
	.byte	0x0,0x0,0x0,0xc,0xc,0xc,0x4,0xc,0x4,0x0,0x0,0xc,0x0,0xc,0x4,0xff	@: 0x04A0 1110
	.byte	0x0,0x0,0x8,0x0,0xc,0x4,0x0,0x8,0xc,0x4,0x8,0x4,0xc,0x0,0x4,0xff	@: 0x04B0 1125
	.byte	0x4,0x8,0xc,0x4,0x0,0x0,0xc,0x8,0xc,0x8,0xc,0x8,0xc,0x4,0x8,0xff	@: 0x04C0 1140
	.byte	0x4,0xc,0x0,0xc,0x8,0x4,0x4,0x4,0x4,0x0,0xc,0x8,0xc,0x4,0x8,0xff	@: 0x04D0 1155
	.byte	0xc,0x4,0xc,0x0,0x4,0xc,0x4,0x4,0x4,0x8,0x0,0x0,0x0,0xc,0x8,0xff	@: 0x04E0 1170
	.byte	0xc,0xc,0x8,0x8,0xc,0x8,0x8,0xc,0xc,0x4,0xc,0x8,0x8,0xc,0xc,0xff	@: 0x04F0 1185
	.byte	0xc,0x0,0x8,0x0,0x4,0x8,0x0,0x0,0xc,0x4,0x0,0x4,0x0,0x8,0x4,0xff	@: 0x0500 1200
	.byte	0x0,0x8,0x8,0x4,0xc,0x4,0x0,0x0,0x0,0x8,0x4,0x8,0x8,0xc,0x0,0xff	@: 0x0510 1215
	.byte	0x8,0x8,0xc,0x8,0x0,0xc,0xc,0x8,0x0,0x0,0x4,0x8,0xc,0xc,0x4,0xff	@: 0x0520 1230
	.byte	0x8,0x0,0x8,0xc,0xc,0x8,0xc,0x8,0xc,0x8,0x0,0x8,0x4,0xc,0x0,0xff	@: 0x0530 1245
	.byte	0x0,0xc,0x8,0x4,0x8,0x4,0x0,0x4,0x4,0x8,0x8,0x0,0xc,0x8,0xc,0xff	@: 0x0540 1260
	.byte	0xc,0xc,0x4,0x8,0x4,0xc,0xc,0x8,0xc,0x4,0x0,0x8,0x0,0x4,0x4,0xff	@: 0x0550 1275
	.byte	0x4,0x4,0x4,0x0,0x4,0x8,0x8,0x8,0x8,0xc,0x0,0xc,0x8,0x8,0xc,0xff	@: 0x0560 1290
	.byte	0x0,0xc,0x8,0x0,0xc,0x4,0x4,0xc,0xc,0x4,0x8,0xc,0x4,0x0,0x4,0xff	@: 0x0570 1305
	.byte	0x0,0xc,0xc,0xc,0x8,0x0,0x4,0xc,0x0,0x4,0xc,0x8,0x8,0x8,0x0,0xff	@: 0x0580 1320
	.byte	0x0,0xc,0x8,0x8,0x4,0xc,0x4,0x8,0x8,0x8,0x4,0x8,0xc,0xc,0x8,0xff	@: 0x0590 1335
	.byte	0x8,0x8,0x4,0x0,0xc,0x8,0xc,0x4,0x4,0x8,0x4,0xc,0x0,0x0,0x8,0xff	@: 0x05A0 1350
	.byte	0x8,0x4,0xc,0x4,0x0,0x8,0x0,0x8,0x4,0x8,0x4,0x4,0x4,0x8,0x4,0xff	@: 0x05B0 1365
	.byte	0xc,0x8,0x0,0x4,0x0,0x4,0x8,0xc,0x8,0x4,0x0,0x8,0x0,0x4,0x0,0xff	@: 0x05C0 1380
	.byte	0x4,0x8,0xc,0x4,0x4,0x4,0x8,0x4,0x0,0x4,0x4,0x0,0x8,0x8,0x0,0xff	@: 0x05D0 1395
	.byte	0xc,0x0,0x0,0x0,0x4,0x4,0x8,0x0,0x4,0x8,0x0,0xc,0xc,0x4,0x0,0xff	@: 0x05E0 1410
	.byte	0x4,0x8,0xc,0x0,0x0,0xc,0xc,0x4,0x0,0xc,0x4,0x8,0x0,0x4,0x8,0xff	@: 0x05F0 1425
	.byte	0xc,0x4,0x8,0x4,0xc,0x4,0x8,0x4,0xc,0x0,0x0,0xc,0x0,0x0,0x8,0xff	@: 0x0600 1440
	.byte	0x8,0x4,0x0,0x8,0x0,0x8,0x8,0x8,0x4,0x4,0x8,0x0,0x4,0x0,0x8,0xff	@: 0x0610 1455
	.byte	0x8,0x8,0x4,0x0,0x0,0x8,0xc,0xc,0x4,0x8,0xc,0x0,0x0,0x0,0x4,0xff	@: 0x0620 1470
	.byte	0x8,0xc,0xc,0x0,0x0,0xc,0xc,0x8,0x0,0x8,0x4,0x4,0x8,0x4,0x0,0xff	@: 0x0630 1485
	.byte	0x0,0x4,0x8,0xc,0xc,0x8,0xc,0xc,0x4,0x0,0x4,0x4,0xc,0x8,0x0,0xff	@: 0x0640 1500
	.byte	0x4,0x0,0x0,0x0,0x4,0x8,0x8,0x4,0x8,0xc,0x0,0x0,0x4,0xc,0x0,0xff	@: 0x0650 1515
	.byte	0xc,0xc,0xc,0x0,0xc,0x8,0x4,0x4,0x4,0x8,0x4,0x4,0x8,0x8,0x0,0xff	@: 0x0660 1530
	.byte	0xc,0x4,0x8,0x8,0xc,0x8,0xc,0x8,0x4,0xc,0x4,0x8,0x8,0x8,0xc,0xff	@: 0x0670 1545
	.byte	0x4,0x4,0x4,0x4,0x4,0x4,0x4,0xc,0xc,0x8,0x8,0x0,0x4,0xc,0x0,0xff	@: 0x0680 1560
	.byte	0xc,0x4,0x8,0x4,0x4,0x4,0x0,0x4,0xc,0x4,0x8,0xc,0xc,0x4,0xc,0xff	@: 0x0690 1575
	.byte	0x8,0x0,0x4,0x4,0x0,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x06A0 1590
	.byte	0xc,0x4,0x8,0x4,0x0,0x4,0xc,0x4,0xc,0x4,0x8,0x4,0x4,0xc,0x0,0xff	@: 0x06B0 1605
	.byte	0x0,0x0,0x0,0xc,0x0,0x4,0x4,0xc,0x0,0x4,0xc,0x4,0x0,0x8,0xc,0xff	@: 0x06C0 1620
	.byte	0x4,0x0,0xc,0x0,0xc,0x0,0x8,0x4,0xc,0x8,0x8,0x8,0x0,0xc,0x0,0xff	@: 0x06D0 1635
	.byte	0x0,0x8,0x8,0x4,0x8,0x0,0xc,0x4,0x8,0x0,0xc,0x4,0x0,0x8,0xc,0xff	@: 0x06E0 1650
	.byte	0x8,0x4,0x0,0xc,0x0,0x4,0xc,0x4,0x0,0x4,0x4,0xc,0xc,0xc,0x8,0xff	@: 0x06F0 1665
	.byte	0x0,0x8,0x8,0x4,0xc,0xc,0x4,0x8,0x0,0xc,0xc,0xc,0xc,0x4,0x4,0xff	@: 0x0700 1680
	.byte	0x0,0x8,0x0,0x4,0x4,0xc,0xc,0x0,0x8,0x4,0x4,0x4,0x4,0x4,0x0,0xff	@: 0x0710 1695
	.byte	0xc,0xc,0xc,0xc,0x0,0x4,0x8,0x0,0xc,0x4,0x0,0x0,0x0,0x8,0x8,0xff	@: 0x0720 1710
	.byte	0x0,0x4,0xc,0x4,0x4,0xc,0x8,0x8,0x8,0x0,0x0,0x8,0x8,0x4,0x4,0xff	@: 0x0730 1725
	.byte	0x8,0x0,0x0,0x4,0x4,0x4,0x8,0x4,0x0,0xc,0xc,0x4,0x0,0xc,0xc,0xff	@: 0x0740 1740
	.byte	0x8,0xc,0xc,0xc,0x8,0x0,0x0,0xc,0x8,0x4,0xc,0x4,0x0,0x0,0x0,0xff	@: 0x0750 1755
	.byte	0x8,0xc,0xc,0xc,0x4,0xc,0x8,0x4,0x4,0xc,0x0,0x8,0xc,0x0,0xc,0xff	@: 0x0760 1770
	.byte	0x0,0x4,0x0,0xc,0x8,0x0,0xc,0x8,0x0,0xc,0xc,0x8,0x8,0x8,0x4,0xff	@: 0x0770 1785
	.byte	0x8,0xc,0x8,0xc,0x8,0x0,0x4,0x8,0x8,0x4,0x0,0x8,0xc,0xc,0x4,0xff	@: 0x0780 1800
	.byte	0xc,0x0,0x8,0xc,0xc,0x0,0x8,0x4,0x0,0x8,0x8,0x4,0xc,0x8,0x8,0xff	@: 0x0790 1815
	.byte	0x0,0x8,0xc,0xc,0x0,0x4,0x8,0x8,0xc,0x0,0x4,0xc,0xc,0x8,0x0,0xff	@: 0x07A0 1830
	.byte	0x8,0x4,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x4,0x4,0xc,0x0,0x4,0x8,0xff	@: 0x07B0 1845
	.byte	0x0,0xc,0x8,0xc,0x8,0xc,0x0,0x4,0xc,0xc,0x4,0x8,0x8,0x8,0x4,0xff	@: 0x07C0 1860
	.byte	0xc,0x8,0x8,0xc,0xc,0x0,0x4,0x8,0x8,0xc,0xc,0x4,0xc,0x4,0x4,0xff	@: 0x07D0 1875
	.byte	0x8,0x0,0x0,0x0,0x8,0x4,0xc,0x0,0xc,0xc,0x4,0x0,0x4,0x0,0xc,0xff	@: 0x07E0 1890
	.byte	0x4,0x4,0xc,0x0,0x0,0x0,0xc,0x4,0xc,0x8,0x8,0x0,0x4,0xc,0xc,0xff	@: 0x07F0 1905
	.byte	0x0,0x4,0xc,0x0,0xc,0x4,0xc,0x8,0x8,0x0,0xc,0xc,0x4,0xc,0xc,0xff	@: 0x0800 1920
	.byte	0x4,0x4,0xc,0x4,0x4,0x4,0x4,0xc,0x4,0x0,0xc,0x8,0x0,0x4,0x0,0xff	@: 0x0810 1935
	.byte	0x8,0xc,0xc,0x4,0xc,0xc,0x0,0xc,0xc,0x8,0x4,0x4,0xc,0x8,0x8,0xff	@: 0x0820 1950
	.byte	0x8,0xc,0xc,0xc,0xc,0x0,0xc,0x4,0x0,0x8,0x0,0xc,0xc,0x4,0x8,0xff	@: 0x0830 1965
	.byte	0x8,0x4,0x8,0x8,0x0,0x8,0xc,0x0,0xc,0x8,0x4,0x4,0xc,0x0,0xc,0xff	@: 0x0840 1980
	.byte	0x4,0xc,0xc,0x8,0x4,0x0,0x4,0xc,0x0,0x8,0xc,0x0,0x4,0xc,0x4,0xff	@: 0x0850 1995
	.byte	0x8,0x8,0xc,0x4,0x8,0x8,0x8,0x0,0x4,0x8,0x0,0x8,0x4,0xc,0xc,0xff	@: 0x0860 2010
	.byte	0x4,0x4,0x8,0xc,0xc,0x8,0xc,0x0,0x4,0xc,0xc,0xc,0x8,0x8,0x0,0xff	@: 0x0870 2025
	.byte	0x4,0x8,0x0,0x0,0x8,0x0,0x4,0xc,0x8,0x0,0xc,0x8,0xc,0x4,0xc,0xff	@: 0x0880 2040
	.byte	0x4,0x8,0x4,0x8,0x8,0x8,0xc,0xc,0x0,0x4,0x4,0xc,0x4,0x4,0xc,0xff	@: 0x0890 2055
	.byte	0x8,0x8,0xc,0x8,0x8,0x8,0x0,0x8,0xc,0xc,0x0,0x0,0x0,0x4,0x0,0xff	@: 0x08A0 2070
	.byte	0x0,0x8,0x4,0x4,0x8,0xc,0x8,0xc,0x8,0x8,0x4,0xc,0xc,0x0,0xc,0xff	@: 0x08B0 2085
	.byte	0x4,0x0,0x4,0x0,0x8,0x8,0x8,0x4,0x0,0x8,0x0,0x8,0xc,0xc,0x4,0xff	@: 0x08C0 2100
	.byte	0x8,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0xc,0x0,0xc,0xc,0x0,0x4,0xc,0xff	@: 0x08D0 2115
	.byte	0x8,0xc,0x8,0x4,0x4,0xc,0xc,0x8,0xc,0xc,0x4,0xc,0x0,0x8,0x0,0xff	@: 0x08E0 2130
	.byte	0x0,0x4,0x4,0xc,0xc,0x4,0x4,0xc,0x4,0x0,0xc,0x8,0x8,0x0,0xc,0xff	@: 0x08F0 2145
	.byte	0x8,0x0,0x8,0xc,0xc,0x0,0x0,0x8,0xc,0xc,0x8,0x0,0xc,0x4,0x0,0xff	@: 0x0900 2160
	.byte	0x8,0x0,0x4,0x4,0x8,0x0,0x4,0x8,0x4,0x4,0xc,0x8,0x8,0x4,0xc,0xff	@: 0x0910 2175
	.byte	0x0,0xc,0x0,0x4,0x0,0x8,0xc,0xc,0x8,0xc,0x0,0x8,0x8,0xc,0xc,0xff	@: 0x0920 2190
	.byte	0x0,0x0,0xc,0x0,0x0,0xc,0x8,0xc,0xc,0x4,0x4,0xc,0x0,0x0,0x8,0xff	@: 0x0930 2205
	.byte	0x4,0x0,0xc,0x0,0x0,0xc,0x4,0x4,0x8,0xc,0x8,0x8,0x0,0x8,0x4,0xff	@: 0x0940 2220
	.byte	0xc,0xc,0xc,0x4,0x0,0x4,0xc,0x4,0x8,0x0,0x8,0x0,0x8,0x4,0x8,0xff	@: 0x0950 2235
	.byte	0x8,0xc,0xc,0x8,0xc,0x4,0x4,0x0,0x4,0xc,0x8,0x0,0x8,0x4,0xc,0xff	@: 0x0960 2250
	.byte	0x0,0x8,0x0,0x8,0x8,0x4,0xc,0x4,0x8,0xc,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x0970 2265
	.byte	0x4,0x8,0x4,0x4,0x0,0x4,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0xff	@: 0x0980 2280
	.byte	0x4,0xc,0x4,0x0,0x0,0xc,0x0,0x8,0x8,0xc,0x8,0xc,0x0,0x8,0x0,0xff	@: 0x0990 2295
	.byte	0xc,0x8,0x8,0x8,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0xc,0xc,0xc,0x8,0xff	@: 0x09A0 2310
	.byte	0x0,0x8,0xc,0x4,0x4,0x4,0x8,0x4,0x0,0x0,0x0,0x0,0x8,0x0,0xc,0xff	@: 0x09B0 2325
	.byte	0x4,0xc,0xc,0x0,0x8,0xc,0x0,0x4,0x0,0x0,0x8,0xc,0xc,0x8,0x4,0xff	@: 0x09C0 2340
	.byte	0x0,0x0,0x0,0xc,0x0,0xc,0x4,0xc,0xc,0x8,0x4,0x0,0x4,0x8,0x4,0xff	@: 0x09D0 2355
	.byte	0x0,0xc,0x0,0x8,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x8,0xc,0x0,0x4,0xff	@: 0x09E0 2370
	.byte	0x8,0x0,0xc,0x8,0xc,0x8,0x8,0xc,0x8,0x8,0x0,0x8,0x4,0x8,0x4,0xff	@: 0x09F0 2385
	.byte	0x8,0x0,0x8,0x0,0x4,0x8,0x4,0x0,0x8,0xc,0x8,0x8,0x8,0xc,0x4,0xff	@: 0x0A00 2400
	.byte	0x0,0x4,0xc,0xc,0x0,0x8,0x4,0x8,0x8,0x8,0xc,0xc,0x4,0xc,0x8,0xff	@: 0x0A10 2415
	.byte	0x8,0x0,0x8,0x0,0xc,0xc,0x4,0x4,0xc,0x8,0x8,0x4,0x8,0x4,0xc,0xff	@: 0x0A20 2430
	.byte	0x4,0x0,0x4,0x0,0x4,0x8,0xc,0xc,0x4,0x0,0x8,0x8,0x0,0x0,0x0,0xff	@: 0x0A30 2445
	.byte	0xc,0x8,0xc,0x0,0x0,0x4,0x4,0x8,0x0,0x0,0xc,0xc,0x8,0x4,0x4,0xff	@: 0x0A40 2460
	.byte	0x0,0x0,0x0,0x4,0x0,0x8,0x0,0x0,0x4,0x0,0x4,0x4,0x4,0x0,0x4,0xff	@: 0x0A50 2475
	.byte	0xc,0x0,0xc,0xc,0x0,0xc,0x0,0x0,0x8,0x0,0x4,0x8,0xc,0xc,0x0,0xff	@: 0x0A60 2490
	.byte	0x0,0x4,0xc,0xc,0x4,0x4,0x0,0xc,0xc,0xc,0x0,0xc,0x8,0x0,0x8,0xff	@: 0x0A70 2505
	.byte	0x0,0xc,0x4,0xc,0x4,0x0,0xc,0x8,0x0,0x0,0xc,0x0,0x0,0x0,0x4,0xff	@: 0x0A80 2520
	.byte	0xc,0x8,0x8,0x0,0x0,0x8,0xc,0x0,0x0,0xc,0x8,0x4,0x4,0x8,0x8,0xff	@: 0x0A90 2535
	.byte	0x8,0x4,0xc,0x8,0x8,0xc,0x0,0x4,0x4,0x8,0x4,0x0,0x0,0x4,0x8,0xff	@: 0x0AA0 2550
	.byte	0x8,0x0,0x0,0x0,0x8,0x8,0x4,0xc,0x0,0x0,0x4,0x4,0x4,0x8,0x4,0xff	@: 0x0AB0 2565
	.byte	0xc,0xc,0x8,0x8,0x4,0x8,0xc,0xc,0x0,0xc,0x0,0x8,0x8,0x8,0xc,0xff	@: 0x0AC0 2580
	.byte	0x8,0x0,0x0,0x4,0x8,0x0,0xc,0xc,0x8,0x8,0x4,0x4,0x4,0x4,0x8,0xff	@: 0x0AD0 2595
	.byte	0xc,0x8,0x4,0x4,0x0,0x8,0x4,0x4,0x4,0x8,0x8,0x0,0x4,0x4,0xc,0xff	@: 0x0AE0 2610
	.byte	0x8,0x4,0x8,0x4,0x0,0xc,0xc,0x4,0x4,0x0,0x8,0x4,0x0,0xc,0x4,0xff	@: 0x0AF0 2625
	.byte	0x8,0xc,0x8,0x8,0xc,0x8,0x8,0x4,0x8,0x4,0x8,0x0,0x0,0x4,0x8,0xff	@: 0x0B00 2640
	.byte	0x0,0x4,0x0,0x8,0xc,0xc,0xc,0x4,0x8,0x0,0x8,0x0,0x0,0x4,0xc,0xff	@: 0x0B10 2655
	.byte	0xc,0xc,0x0,0x4,0xc,0xc,0xc,0xc,0xc,0x4,0x4,0x4,0x0,0xc,0x0,0xff	@: 0x0B20 2670
	.byte	0x0,0x8,0x4,0x0,0x0,0xc,0x4,0x0,0x0,0x8,0x4,0x4,0xc,0x0,0x0,0xff	@: 0x0B30 2685
	.byte	0x8,0x0,0x0,0xc,0x0,0x4,0x4,0xc,0x0,0x8,0x8,0x8,0x8,0x0,0x0,0xff	@: 0x0B40 2700
	.byte	0x8,0x0,0xc,0x8,0x8,0x8,0xc,0x8,0x8,0x4,0x4,0x0,0x4,0x8,0x8,0xff	@: 0x0B50 2715
	.byte	0xc,0x0,0xc,0xc,0xc,0x4,0x4,0x4,0x0,0x0,0xc,0xc,0x0,0xc,0x4,0xff	@: 0x0B60 2730
	.byte	0xc,0x4,0x4,0x0,0x0,0x8,0xc,0x8,0x8,0x4,0x0,0x0,0xc,0x8,0x8,0xff	@: 0x0B70 2745
	.byte	0x0,0xc,0x0,0x4,0x4,0x4,0x0,0xc,0xc,0xc,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x0B80 2760
	.byte	0xc,0xc,0x4,0x0,0x8,0xc,0x4,0x0,0x8,0x4,0x4,0x8,0x4,0x8,0x8,0xff	@: 0x0B90 2775
	.byte	0x4,0xc,0x8,0x0,0xc,0x8,0x4,0xc,0x8,0x0,0x8,0xc,0x8,0x4,0x8,0xff	@: 0x0BA0 2790
	.byte	0x8,0x8,0x8,0x0,0x4,0x8,0x0,0x8,0x4,0x8,0x4,0x0,0x8,0x0,0x8,0xff	@: 0x0BB0 2805
	.byte	0xc,0x0,0x4,0x8,0x8,0xc,0xc,0x8,0x0,0x8,0x0,0x0,0x8,0xc,0x0,0xff	@: 0x0BC0 2820
	.byte	0x4,0x8,0x4,0x0,0x4,0x0,0xc,0x4,0xc,0xc,0xc,0x4,0x8,0x4,0xc,0xff	@: 0x0BD0 2835
	.byte	0x4,0x0,0xc,0x0,0x0,0x4,0x4,0x8,0x0,0x8,0x4,0x0,0xc,0x4,0x4,0xff	@: 0x0BE0 2850
	.byte	0xc,0x4,0x0,0x0,0xc,0x4,0xc,0x8,0xc,0xc,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x0BF0 2865
	.byte	0xc,0x0,0x4,0x8,0xc,0x4,0x4,0xc,0x0,0x0,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x0C00 2880
	.byte	0x0,0x8,0x4,0x8,0xc,0x0,0x4,0xc,0x8,0xc,0xc,0x4,0x8,0x4,0x4,0xff	@: 0x0C10 2895
	.byte	0xc,0x4,0x8,0x0,0x4,0x4,0xc,0x8,0xc,0x4,0x4,0x4,0xc,0xc,0xc,0xff	@: 0x0C20 2910
	.byte	0x4,0x4,0x8,0x4,0x4,0x4,0x0,0x4,0x0,0xc,0x8,0x8,0x4,0xc,0x0,0xff	@: 0x0C30 2925
	.byte	0xc,0x0,0xc,0x8,0xc,0x4,0x4,0xc,0x8,0x0,0x8,0x4,0x4,0x4,0x4,0xff	@: 0x0C40 2940
	.byte	0x4,0x0,0x8,0xc,0x0,0xc,0x4,0x4,0x8,0x8,0x0,0x0,0x4,0x4,0x4,0xff	@: 0x0C50 2955
	.byte	0xc,0x8,0x8,0x0,0x8,0x4,0x4,0x4,0x4,0x8,0x0,0x4,0xc,0x8,0x0,0xff	@: 0x0C60 2970
	.byte	0x4,0x0,0x8,0x8,0x0,0x0,0x0,0x8,0x4,0x4,0x0,0x0,0xc,0x0,0x8,0xff	@: 0x0C70 2985
	.byte	0x8,0xc,0xc,0xc,0xc,0x4,0x4,0x4,0x4,0xc,0x0,0x0,0x0,0xc,0x8,0xff	@: 0x0C80 3000
	.byte	0x8,0x0,0x0,0x0,0x0,0xc,0x4,0x8,0xc,0x4,0x8,0x0,0xc,0x4,0xc,0xff	@: 0x0C90 3015
	.byte	0x0,0x8,0xc,0x4,0xc,0xc,0x8,0x4,0x0,0xc,0x0,0x4,0xc,0x4,0x0,0xff	@: 0x0CA0 3030
	.byte	0xc,0xc,0x0,0x4,0x4,0x4,0x0,0x0,0x4,0x8,0xc,0xc,0x8,0x4,0x0,0xff	@: 0x0CB0 3045
	.byte	0x4,0x4,0x8,0xc,0x8,0xc,0x4,0x4,0x4,0x0,0x4,0x0,0x0,0x8,0x0,0xff	@: 0x0CC0 3060
	.byte	0xc,0x0,0x8,0xc,0x8,0xc,0x0,0x0,0x8,0x4,0xc,0x4,0x0,0x0,0x0,0xff	@: 0x0CD0 3075
	.byte	0xc,0x8,0x4,0x0,0x8,0x0,0xc,0x8,0x8,0x0,0xc,0x4,0x8,0x0,0x4,0xff	@: 0x0CE0 3090
	.byte	0x8,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x8,0x4,0xc,0xc,0x4,0x0,0x4,0xff	@: 0x0CF0 3105
	.byte	0x4,0x4,0xc,0x0,0xc,0x8,0x0,0xc,0xc,0x0,0x8,0xc,0x8,0xc,0xc,0xff	@: 0x0D00 3120
	.byte	0xc,0x0,0x8,0x4,0x4,0x4,0xc,0x4,0x0,0x4,0xc,0xc,0x8,0x8,0x8,0xff	@: 0x0D10 3135
	.byte	0x4,0x0,0x8,0x0,0x4,0x8,0xc,0x8,0xc,0xc,0x4,0x4,0xc,0x4,0xc,0xff	@: 0x0D20 3150
	.byte	0x0,0x0,0x8,0x4,0x0,0x4,0x4,0xc,0x4,0x0,0xc,0x8,0xc,0x4,0x8,0xff	@: 0x0D30 3165
	.byte	0xc,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0xff	@: 0x0D40 3180
	.byte	0x0,0x8,0x4,0xc,0x0,0x8,0xc,0x0,0x0,0x0,0x8,0x0,0xc,0xc,0x4,0xff	@: 0x0D50 3195
	.byte	0x4,0x0,0xc,0xc,0x4,0x8,0xc,0x4,0x4,0x8,0x0,0x4,0x4,0x0,0x0,0xff	@: 0x0D60 3210
	.byte	0x4,0x4,0x4,0xc,0x8,0x4,0xc,0xc,0x8,0x8,0x4,0x0,0x8,0x8,0x0,0xff	@: 0x0D70 3225
	.byte	0x8,0x0,0x8,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x4,0x8,0x0,0x0,0x0,0xff	@: 0x0D80 3240
	.byte	0x4,0x0,0xc,0xc,0xc,0x0,0xc,0x0,0x8,0x0,0x0,0xc,0x4,0x0,0x8,0xff	@: 0x0D90 3255
	.byte	0xc,0x0,0x8,0x4,0x8,0xc,0x0,0xc,0x8,0xc,0x8,0x0,0x0,0x8,0x8,0xff	@: 0x0DA0 3270
	.byte	0x0,0xc,0x4,0x0,0x8,0x8,0x8,0x8,0x8,0xc,0x0,0x4,0x0,0x0,0x4,0xff	@: 0x0DB0 3285
	.byte	0x4,0xc,0x4,0x8,0x4,0x0,0x8,0x0,0xc,0x4,0xc,0x0,0x4,0x0,0xc,0xff	@: 0x0DC0 3300
	.byte	0xc,0xc,0x0,0x8,0x4,0x0,0xc,0x8,0xc,0x8,0x0,0xc,0x4,0xc,0x0,0xff	@: 0x0DD0 3315
	.byte	0xc,0xc,0x8,0xc,0x4,0x8,0x0,0x4,0x0,0xc,0x0,0xc,0x4,0x8,0x4,0xff	@: 0x0DE0 3330
	.byte	0x8,0x8,0x0,0x4,0x0,0x4,0x0,0x8,0xc,0xc,0x4,0x0,0x4,0x0,0x8,0xff	@: 0x0DF0 3345
	.byte	0x8,0x8,0x4,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0x4,0x8,0xc,0x4,0x0,0xff	@: 0x0E00 3360
	.byte	0x8,0xc,0x8,0x4,0x0,0x4,0x8,0xc,0x0,0x8,0x0,0x8,0x8,0x8,0xc,0xff	@: 0x0E10 3375
	.byte	0x4,0xc,0x4,0xc,0x4,0x0,0x0,0x0,0x0,0x8,0xc,0x4,0x8,0x8,0xc,0xff	@: 0x0E20 3390
	.byte	0xc,0x0,0x0,0x8,0x8,0x4,0x0,0x8,0x8,0x4,0x8,0x0,0x8,0xc,0x4,0xff	@: 0x0E30 3405
	.byte	0xc,0x8,0xc,0x0,0x4,0xc,0xc,0xc,0x8,0x0,0x8,0x8,0x4,0x8,0x8,0xff	@: 0x0E40 3420
	.byte	0x4,0xc,0x4,0xc,0x8,0xc,0x8,0x8,0x4,0x8,0x0,0x8,0x8,0xc,0x8,0xff	@: 0x0E50 3435
	.byte	0x8,0xc,0x8,0x4,0x0,0x0,0x8,0x4,0x0,0xc,0xc,0x0,0x0,0x0,0xc,0xff	@: 0x0E60 3450
	.byte	0xc,0xc,0x8,0x0,0x4,0x8,0x0,0xc,0x8,0xc,0xc,0x0,0x4,0x4,0xc,0xff	@: 0x0E70 3465
	.byte	0x0,0x4,0x8,0x0,0x8,0x0,0x4,0x8,0x4,0xc,0x8,0xc,0xc,0x0,0x0,0xff	@: 0x0E80 3480
	.byte	0x4,0x8,0x0,0x0,0x4,0x4,0x4,0xc,0x0,0x0,0x4,0x8,0x4,0x8,0xc,0xff	@: 0x0E90 3495
	.byte	0x4,0x0,0x8,0xc,0x0,0xc,0x4,0xc,0x4,0x4,0x8,0x4,0x0,0xc,0x0,0xff	@: 0x0EA0 3510
	.byte	0x0,0x0,0x4,0x8,0xc,0xc,0x8,0x0,0x0,0x0,0x4,0xc,0xc,0xc,0x4,0xff	@: 0x0EB0 3525
	.byte	0xc,0x8,0x0,0x4,0x8,0x4,0x8,0x8,0x4,0xc,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x0EC0 3540
	.byte	0x4,0x0,0x0,0xc,0x0,0x8,0x0,0x8,0x0,0xc,0x0,0x4,0x0,0xc,0x4,0xff	@: 0x0ED0 3555
	.byte	0x8,0x4,0x8,0x0,0x4,0xc,0x8,0x8,0x0,0x4,0x0,0x0,0x8,0x8,0x8,0xff	@: 0x0EE0 3570
	.byte	0x8,0x0,0x0,0x4,0x8,0x4,0x8,0x4,0xc,0x8,0x8,0x4,0x8,0x4,0x4,0xff	@: 0x0EF0 3585
	.byte	0x4,0x0,0x0,0x0,0x4,0xc,0x8,0x8,0x8,0x4,0xc,0xc,0x0,0x0,0x4,0xff	@: 0x0F00 3600
	.byte	0x0,0x4,0x4,0x8,0xc,0x4,0x0,0xc,0x4,0x4,0x0,0x8,0x0,0x0,0x0,0xff	@: 0x0F10 3615
	.byte	0x4,0xc,0x4,0x8,0x0,0x4,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0xc,0x0,0xff	@: 0x0F20 3630
	.byte	0xc,0x4,0x0,0x4,0x0,0xc,0x8,0x8,0x0,0x8,0xc,0xc,0xc,0x4,0xc,0xff	@: 0x0F30 3645
	.byte	0x8,0x0,0x0,0x0,0xc,0xc,0xc,0x4,0x4,0xc,0xc,0xc,0xc,0x8,0x8,0xff	@: 0x0F40 3660
	.byte	0x0,0x0,0xc,0x4,0xc,0x0,0x8,0x4,0x4,0x8,0x8,0x8,0x4,0x4,0x4,0xff	@: 0x0F50 3675
	.byte	0x4,0x0,0x4,0xc,0x8,0xc,0xc,0xc,0xc,0x4,0x8,0x4,0x0,0x8,0x4,0xff	@: 0x0F60 3690
	.byte	0x4,0x8,0xc,0x0,0xc,0x4,0xc,0x4,0x4,0x8,0xc,0xc,0x0,0xc,0x0,0xff	@: 0x0F70 3705
	.byte	0x0,0x0,0x4,0x8,0x4,0x4,0xc,0x8,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0xff	@: 0x0F80 3720
	.byte	0x0,0xc,0x0,0xc,0x0,0x4,0x8,0x4,0xc,0x4,0x0,0x8,0xc,0x8,0x8,0xff	@: 0x0F90 3735
	.byte	0xc,0xc,0x8,0xc,0x8,0x4,0x4,0x0,0x0,0x0,0xc,0x0,0x8,0x4,0x0,0xff	@: 0x0FA0 3750
	.byte	0x0,0x0,0x4,0x0,0x4,0x8,0x8,0x8,0x0,0x0,0x4,0xc,0x8,0x8,0x0,0xff	@: 0x0FB0 3765
	.byte	0x4,0x8,0x4,0x8,0x8,0x8,0x4,0x0,0x0,0x4,0x8,0x0,0x8,0x8,0x4,0xff	@: 0x0FC0 3780
	.byte	0x8,0x8,0xc,0x8,0xc,0xc,0xc,0x4,0xc,0x0,0x8,0xc,0xc,0x8,0x8,0xff	@: 0x0FD0 3795
	.byte	0x0,0x8,0x0,0x4,0xc,0x4,0x8,0x0,0x4,0x0,0x4,0x8,0x0,0xc,0x0,0xff	@: 0x0FE0 3810
	.byte	0x0,0x0,0x8,0xc,0x8,0x8,0x0,0x4,0x8,0x8,0xc,0x4,0x0,0x4,0xc,0xff	@: 0x0FF0 3825
	.byte	0x4,0x8,0x0,0x0,0xc,0xc,0x8,0x0,0x0,0x4,0x8,0x4,0xc,0xc,0x4,0xff	@: 0x1000 3840
	.byte	0x8,0x4,0x4,0x0,0x0,0x0,0x8,0xc,0x4,0x8,0x8,0x0,0x8,0xc,0x0,0xff	@: 0x1010 3855
	.byte	0xc,0x8,0x8,0x8,0x0,0x0,0x4,0x8,0xc,0xc,0x4,0x0,0x8,0x0,0xc,0xff	@: 0x1020 3870
	.byte	0x4,0x0,0x8,0x4,0x4,0x4,0x0,0x4,0x4,0xc,0x0,0x8,0x0,0x8,0x4,0xff	@: 0x1030 3885
	.byte	0xc,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x8,0xc,0x0,0x4,0x4,0x4,0x8,0xff	@: 0x1040 3900
	.byte	0x4,0x8,0x8,0x8,0x8,0x0,0x4,0x0,0x4,0x8,0x8,0x0,0x8,0x8,0xc,0xff	@: 0x1050 3915
	.byte	0x8,0xc,0x0,0x4,0x8,0x0,0x4,0x0,0x4,0x4,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x1060 3930
	.byte	0x8,0x0,0x4,0x0,0xc,0x4,0xc,0x8,0xc,0x0,0xc,0x0,0x8,0x8,0x4,0xff	@: 0x1070 3945
	.byte	0x4,0x0,0x8,0xc,0x0,0x0,0x0,0x0,0xc,0x0,0x4,0x4,0xc,0x4,0xc,0xff	@: 0x1080 3960
	.byte	0xc,0x0,0x0,0x4,0xc,0xc,0xc,0x8,0x4,0x4,0x4,0x0,0xc,0x8,0x4,0xff	@: 0x1090 3975
	.byte	0x8,0x4,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x4,0xc,0xc,0x8,0xc,0xff	@: 0x10A0 3990
	.byte	0x0,0x8,0x4,0x4,0x0,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0x4,0x4,0x0,0xff	@: 0x10B0 4005
	.byte	0x0,0xc,0xc,0xc,0x0,0x4,0x0,0x0,0xc,0x8,0x8,0x4,0xc,0x8,0x8,0xff	@: 0x10C0 4020
	.byte	0x8,0xc,0x0,0xc,0x0,0xc,0x4,0xc,0xc,0x8,0x8,0x4,0xc,0x8,0x0,0xff	@: 0x10D0 4035
	.byte	0x0,0x8,0x4,0xc,0xc,0x8,0x4,0xc,0xc,0xc,0x4,0xc,0x8,0x0,0xc,0xff	@: 0x10E0 4050
	.byte	0xc,0x0,0x4,0x0,0x4,0x0,0x4,0x8,0x8,0x4,0x0,0x4,0x8,0x4,0x0,0xff	@: 0x10F0 4065
	.byte	0x0,0x8,0x0,0x8,0x8,0x8,0x8,0xc,0xc,0x0,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x1100 4080
	.byte	0xc,0x8,0xc,0x4,0x8,0x0,0x8,0x8,0x8,0x0,0x8,0x0,0x4,0x4,0x8,0xff	@: 0x1110 4095
	.byte	0xc,0xc,0x8,0x4,0x0,0xc,0xc,0xc,0xc,0xc,0xc,0xc,0x0,0xc,0xc,0xff	@: 0x1120 4110
	.byte	0x4,0x0,0xc,0x8,0x0,0x8,0x4,0x0,0xc,0x4,0x8,0x0,0xc,0x4,0x0,0xff	@: 0x1130 4125
	.byte	0x8,0x0,0xc,0xc,0x0,0x0,0x4,0x0,0x0,0x8,0x8,0x4,0x8,0x4,0xc,0xff	@: 0x1140 4140
	.byte	0x8,0x4,0xc,0x4,0x8,0x4,0x0,0x4,0x0,0xc,0x4,0x4,0x4,0x0,0x4,0xff	@: 0x1150 4155
	.byte	0x0,0xc,0x4,0x8,0x8,0x0,0x0,0x8,0xc,0x8,0xc,0x0,0x4,0xc,0x8,0xff	@: 0x1160 4170
	.byte	0x8,0x0,0xc,0x8,0x4,0xc,0x0,0xc,0x4,0xc,0xc,0x4,0x8,0x8,0x4,0xff	@: 0x1170 4185
	.byte	0x8,0xc,0x0,0x8,0x8,0x0,0x4,0x8,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x1180 4200
	.byte	0x8,0xc,0x4,0x0,0x4,0x8,0x4,0x0,0x8,0x0,0x0,0x0,0xc,0x4,0x4,0xff	@: 0x1190 4215
	.byte	0x0,0x0,0x0,0xc,0x4,0x0,0x4,0x8,0x0,0x0,0x0,0x4,0x4,0x8,0x8,0xff	@: 0x11A0 4230
	.byte	0xc,0x8,0x8,0x0,0x8,0x4,0x8,0x8,0x4,0x4,0xc,0x4,0x8,0x0,0xc,0xff	@: 0x11B0 4245
	.byte	0x0,0x8,0x0,0x0,0x0,0xc,0x4,0xc,0xc,0x8,0xc,0x8,0xc,0x0,0x8,0xff	@: 0x11C0 4260
	.byte	0x0,0x0,0x4,0x8,0xc,0x8,0x0,0xc,0x0,0x0,0x0,0x4,0x0,0xc,0x8,0xff	@: 0x11D0 4275
	.byte	0xc,0x4,0x8,0xc,0x0,0xc,0x8,0x4,0x8,0x8,0xc,0x4,0x4,0xc,0x8,0xff	@: 0x11E0 4290
	.byte	0x0,0x0,0xc,0x8,0xc,0xc,0x8,0x8,0x0,0x0,0x8,0xc,0xc,0x4,0x4,0xff	@: 0x11F0 4305
	.byte	0xc,0x4,0x4,0x8,0x0,0xc,0xc,0x0,0x8,0x8,0x4,0x4,0x4,0xc,0x4,0xff	@: 0x1200 4320
	.byte	0x8,0x0,0xc,0xc,0x0,0x8,0x0,0xc,0x8,0x4,0x4,0xc,0xc,0x4,0x0,0xff	@: 0x1210 4335
	.byte	0x8,0x4,0x4,0x0,0x4,0x4,0x0,0x8,0x4,0xc,0xc,0xc,0x0,0x8,0x4,0xff	@: 0x1220 4350
	.byte	0xc,0x8,0x0,0x0,0xc,0x8,0x8,0x8,0xc,0x0,0xc,0x4,0x0,0xc,0x0,0xff	@: 0x1230 4365
	.byte	0xc,0x4,0x4,0x4,0x0,0x0,0x4,0xc,0x4,0x8,0x0,0x0,0x0,0xc,0xc,0xff	@: 0x1240 4380
	.byte	0xc,0x0,0x8,0x4,0x8,0x0,0x0,0x8,0x8,0x4,0xc,0x0,0x0,0x8,0x0,0xff	@: 0x1250 4395
	.byte	0x0,0xc,0x8,0x4,0x0,0x4,0x8,0x4,0xc,0x0,0xc,0xc,0xc,0x8,0x0,0xff	@: 0x1260 4410
	.byte	0x8,0x8,0xc,0x0,0xc,0x8,0xc,0xc,0xc,0x4,0x4,0x0,0x4,0x0,0xc,0xff	@: 0x1270 4425
	.byte	0x8,0x0,0x8,0x0,0x8,0x0,0x8,0xc,0x8,0x4,0x0,0x0,0x8,0x4,0x4,0xff	@: 0x1280 4440
	.byte	0xc,0x8,0x0,0x4,0xc,0xc,0x0,0x4,0x4,0xc,0x0,0x4,0xc,0x4,0x4,0xff	@: 0x1290 4455
	.byte	0x0,0xc,0x0,0x4,0x0,0x0,0x8,0x4,0x8,0x0,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x12A0 4470
	.byte	0x8,0x8,0x8,0xc,0x0,0x0,0x8,0x8,0x0,0x4,0x4,0xc,0xc,0x8,0x0,0xff	@: 0x12B0 4485
	.byte	0x8,0x4,0x0,0x8,0xc,0x4,0x4,0x4,0x4,0x8,0x4,0x8,0x4,0xc,0x4,0xff	@: 0x12C0 4500
	.byte	0x0,0x4,0x0,0x4,0xc,0x4,0x0,0x8,0x4,0x4,0xc,0x8,0xc,0xc,0x8,0xff	@: 0x12D0 4515
	.byte	0x4,0xc,0x0,0x0,0x0,0x4,0x4,0x4,0x8,0x4,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x12E0 4530
	.byte	0xc,0xc,0xc,0xc,0xc,0x4,0xc,0x4,0x8,0xc,0x8,0x0,0x4,0x4,0xc,0xff	@: 0x12F0 4545
	.byte	0x8,0x4,0x0,0x4,0x8,0x0,0xc,0x0,0xc,0xc,0x4,0x8,0x8,0xc,0x8,0xff	@: 0x1300 4560
	.byte	0x0,0x8,0x0,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0x8,0x4,0x0,0x0,0xc,0xff	@: 0x1310 4575
	.byte	0xc,0xc,0xc,0x8,0xc,0xc,0x4,0x8,0x4,0xc,0x0,0x8,0x0,0x8,0x4,0xff	@: 0x1320 4590
	.byte	0x4,0x8,0xc,0x0,0x4,0x0,0x0,0x4,0x0,0x8,0x0,0x8,0x0,0x0,0x4,0xff	@: 0x1330 4605
	.byte	0x4,0xc,0x8,0xc,0x4,0x8,0x8,0xc,0x8,0xc,0xc,0x0,0xc,0x4,0xc,0xff	@: 0x1340 4620
	.byte	0x8,0xc,0x8,0x8,0x0,0x0,0x4,0xc,0x8,0x4,0x0,0xc,0x4,0x0,0x8,0xff	@: 0x1350 4635
	.byte	0xc,0x8,0x4,0x8,0x8,0x4,0x4,0x0,0x0,0x4,0xc,0xc,0x0,0x0,0x8,0xff	@: 0x1360 4650
	.byte	0x4,0x0,0x4,0x4,0xc,0x8,0x4,0xc,0x8,0x0,0x0,0x0,0xc,0xc,0xc,0xff	@: 0x1370 4665
	.byte	0x8,0xc,0xc,0xc,0x4,0x8,0x8,0x4,0xc,0xc,0x4,0x8,0xc,0x0,0x0,0xff	@: 0x1380 4680
	.byte	0x8,0xc,0x4,0x4,0xc,0x4,0x4,0x0,0x8,0x8,0x0,0x0,0xc,0x4,0x4,0xff	@: 0x1390 4695
	.byte	0x8,0x0,0xc,0x8,0x8,0x4,0x0,0x0,0x4,0x4,0xc,0x4,0x8,0x8,0xc,0xff	@: 0x13A0 4710
	.byte	0x4,0xc,0x4,0x0,0x4,0x8,0x0,0xc,0x4,0x4,0x0,0xc,0x4,0x4,0xc,0xff	@: 0x13B0 4725
	.byte	0x8,0x4,0x4,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x4,0x0,0xc,0x4,0xc,0xff	@: 0x13C0 4740
	.byte	0x8,0x0,0x0,0x0,0x8,0x4,0xc,0x4,0x0,0x8,0xc,0x4,0x0,0x0,0x4,0xff	@: 0x13D0 4755
	.byte	0x4,0x0,0x4,0xc,0x0,0xc,0xc,0x8,0xc,0xc,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x13E0 4770
	.byte	0x4,0x8,0x8,0xc,0x8,0x0,0x8,0x4,0x4,0xc,0x0,0x8,0x0,0x0,0x0,0xff	@: 0x13F0 4785
	.byte	0x4,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x0,0x4,0xc,0x8,0xc,0x4,0x0,0xff	@: 0x1400 4800
	.byte	0x8,0x8,0x8,0x4,0x0,0xc,0x4,0x8,0x0,0x8,0x4,0x4,0x4,0x4,0xc,0xff	@: 0x1410 4815
	.byte	0x8,0xc,0x0,0xc,0x0,0xc,0x4,0x4,0x0,0x4,0xc,0x4,0x4,0x8,0xc,0xff	@: 0x1420 4830
	.byte	0xc,0x8,0x8,0x0,0x8,0x8,0x8,0x0,0xc,0xc,0x8,0x8,0x4,0x8,0x8,0xff	@: 0x1430 4845
	.byte	0x8,0xc,0xc,0xc,0xc,0x8,0x4,0x4,0x4,0x4,0x8,0x8,0xc,0x0,0x0,0xff	@: 0x1440 4860
	.byte	0xc,0x4,0x8,0x8,0x0,0x4,0x8,0x0,0x0,0xc,0x0,0xc,0x4,0x8,0x8,0xff	@: 0x1450 4875
	.byte	0xc,0x0,0x8,0x4,0xc,0x4,0x0,0x8,0x0,0x8,0x8,0xc,0x0,0xc,0xc,0xff	@: 0x1460 4890
	.byte	0xc,0x0,0xc,0xc,0x0,0xc,0x8,0x0,0x8,0xc,0xc,0x8,0x4,0x0,0xc,0xff	@: 0x1470 4905
	.byte	0x0,0x4,0x0,0x4,0x4,0x4,0x0,0xc,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0xff	@: 0x1480 4920
	.byte	0x4,0x4,0x4,0x4,0xc,0xc,0x8,0xc,0x8,0x8,0x0,0x0,0xc,0x8,0x4,0xff	@: 0x1490 4935
	.byte	0x0,0x4,0x8,0x8,0xc,0xc,0x4,0x8,0x8,0xc,0x4,0x4,0x0,0x0,0x8,0xff	@: 0x14A0 4950
	.byte	0x4,0x8,0x8,0x4,0xc,0x0,0x4,0x0,0xc,0x8,0x4,0x4,0x8,0x8,0x4,0xff	@: 0x14B0 4965
	.byte	0xc,0x4,0x8,0x4,0x0,0x0,0x4,0xc,0x0,0x0,0x8,0xc,0x0,0x0,0x0,0xff	@: 0x14C0 4980
	.byte	0x8,0x8,0x4,0x8,0x4,0x0,0x0,0x4,0x4,0x4,0x4,0x4,0x0,0x4,0x4,0xff	@: 0x14D0 4995
	.byte	0x8,0x4,0x0,0x4,0x4,0x4,0xc,0xc,0x8,0xc,0x0,0x4,0x8,0x8,0xc,0xff	@: 0x14E0 5010
	.byte	0x4,0x8,0x0,0x4,0x0,0xc,0x8,0xc,0x0,0x4,0x0,0xc,0x4,0x4,0x8,0xff	@: 0x14F0 5025
	.byte	0xc,0xc,0x4,0x8,0x0,0x4,0x4,0x4,0xc,0x0,0xc,0xc,0x8,0x0,0x8,0xff	@: 0x1500 5040
	.byte	0x8,0xc,0x0,0x4,0x4,0x8,0x4,0x4,0x0,0x0,0x0,0x0,0xc,0x4,0x0,0xff	@: 0x1510 5055
	.byte	0xc,0xc,0x8,0x4,0x8,0x8,0x0,0x8,0x4,0x4,0x4,0x4,0x8,0x8,0x8,0xff	@: 0x1520 5070
	.byte	0xc,0xc,0x0,0x8,0x4,0x4,0x8,0xc,0x0,0x8,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x1530 5085
	.byte	0x0,0xc,0x0,0x8,0x8,0x4,0xc,0x0,0x4,0x8,0x8,0xc,0x4,0x8,0x4,0xff	@: 0x1540 5100
	.byte	0xc,0xc,0x8,0x0,0xc,0x0,0xc,0x4,0x0,0x4,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x1550 5115
	.byte	0x0,0x0,0x0,0x4,0xc,0x0,0xc,0x0,0x8,0xc,0x4,0xc,0x8,0x0,0xc,0xff	@: 0x1560 5130
	.byte	0x4,0x8,0xc,0x0,0xc,0x4,0x8,0x0,0xc,0x0,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x1570 5145
	.byte	0x4,0x0,0x4,0x8,0x0,0x4,0x8,0x0,0x8,0xc,0x0,0x0,0x8,0x0,0x0,0xff	@: 0x1580 5160
	.byte	0xc,0xc,0x0,0x8,0x4,0x4,0xc,0xc,0x8,0x0,0xc,0x4,0x4,0xc,0xc,0xff	@: 0x1590 5175
	.byte	0x8,0xc,0x0,0x4,0x4,0x4,0x8,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0x8,0xff	@: 0x15A0 5190
	.byte	0xc,0xc,0x8,0x0,0x8,0xc,0xc,0x8,0xc,0x0,0xc,0xc,0x4,0x8,0x8,0xff	@: 0x15B0 5205
	.byte	0x0,0x4,0x4,0xc,0xc,0x4,0x0,0x4,0x0,0x4,0x8,0x0,0x8,0x0,0x4,0xff	@: 0x15C0 5220
	.byte	0x4,0x4,0x0,0xc,0x4,0xc,0x4,0x8,0xc,0x0,0xc,0x8,0x4,0xc,0x4,0xff	@: 0x15D0 5235
	.byte	0xc,0x4,0x8,0x4,0xc,0xc,0x0,0xc,0x4,0x0,0x4,0x8,0x8,0xc,0xc,0xff	@: 0x15E0 5250
	.byte	0x0,0x0,0x8,0x0,0x0,0x0,0x4,0xc,0xc,0x4,0x4,0x8,0x8,0x0,0xc,0xff	@: 0x15F0 5265
	.byte	0xc,0x0,0x4,0x0,0x0,0x0,0xc,0x4,0x0,0x0,0x8,0x8,0x0,0x8,0x0,0xff	@: 0x1600 5280
	.byte	0x0,0xc,0x4,0xc,0x8,0xc,0xc,0x4,0x8,0x0,0x4,0x0,0xc,0x4,0x0,0xff	@: 0x1610 5295
	.byte	0xc,0x4,0x0,0x0,0x4,0x4,0x0,0x4,0xc,0x0,0xc,0x8,0xc,0x8,0x4,0xff	@: 0x1620 5310
	.byte	0x4,0x0,0x8,0xc,0x4,0xc,0x4,0xc,0xc,0x4,0x4,0x8,0x4,0xc,0x8,0xff	@: 0x1630 5325
	.byte	0x0,0xc,0xc,0x0,0x4,0xc,0xc,0x8,0x4,0x0,0xc,0x8,0x4,0x8,0xc,0xff	@: 0x1640 5340
	.byte	0x8,0xc,0x0,0x8,0x8,0x8,0xc,0x8,0x0,0x8,0x0,0x4,0x0,0xc,0x0,0xff	@: 0x1650 5355
	.byte	0x4,0xc,0x8,0x8,0x8,0xc,0x4,0x8,0x8,0x0,0x0,0x4,0x8,0x8,0xc,0xff	@: 0x1660 5370
	.byte	0xc,0xc,0x0,0x8,0x0,0xc,0x8,0x8,0xc,0x8,0x4,0x4,0x8,0x8,0x0,0xff	@: 0x1670 5385
	.byte	0x0,0x4,0x8,0x0,0xc,0x4,0x4,0x0,0x4,0x4,0xc,0x0,0x0,0x4,0x0,0xff	@: 0x1680 5400
	.byte	0x0,0x0,0x0,0xc,0x0,0xc,0x8,0xc,0x8,0x4,0x0,0x0,0x0,0x8,0xc,0xff	@: 0x1690 5415
	.byte	0xc,0x4,0xc,0xc,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x0,0x0,0x4,0x8,0xff	@: 0x16A0 5430
	.byte	0x4,0x4,0x0,0x0,0x0,0x4,0x4,0xc,0x4,0xc,0xc,0x4,0x8,0x8,0x8,0xff	@: 0x16B0 5445
	.byte	0xc,0xc,0x0,0x8,0x0,0x0,0x0,0x4,0x4,0xc,0x8,0x8,0x0,0x4,0x8,0xff	@: 0x16C0 5460
	.byte	0xc,0x0,0x8,0x4,0x4,0x4,0x0,0xc,0x4,0x8,0xc,0x8,0x8,0xc,0x0,0xff	@: 0x16D0 5475
	.byte	0xc,0xc,0x0,0x4,0x8,0x0,0x0,0x8,0xc,0x0,0x8,0xc,0x8,0x4,0x4,0xff	@: 0x16E0 5490
	.byte	0x0,0x8,0x0,0x8,0x0,0xc,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x4,0x8,0xff	@: 0x16F0 5505
	.byte	0x4,0x0,0x8,0x0,0x4,0x8,0x8,0x4,0x8,0x4,0x4,0x4,0x8,0x0,0xc,0xff	@: 0x1700 5520
	.byte	0xc,0x4,0x0,0xc,0xc,0x8,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0xc,0x4,0xff	@: 0x1710 5535
	.byte	0x0,0x0,0x8,0x4,0x4,0x4,0xc,0x8,0xc,0xc,0x0,0xc,0x0,0x8,0x8,0xff	@: 0x1720 5550
	.byte	0x4,0xc,0x4,0x8,0x8,0x0,0x0,0xc,0x0,0xc,0x0,0xc,0x4,0x0,0xc,0xff	@: 0x1730 5565
	.byte	0x4,0x0,0x4,0x4,0x8,0xc,0xc,0xc,0x8,0x8,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x1740 5580
	.byte	0x0,0xc,0x8,0x8,0x0,0x0,0x4,0x0,0x0,0x4,0xc,0xc,0x8,0x8,0x0,0xff	@: 0x1750 5595
	.byte	0x4,0x0,0x4,0x4,0xc,0x0,0x4,0x4,0x4,0xc,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x1760 5610
	.byte	0x4,0x0,0x4,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0x4,0x8,0xff	@: 0x1770 5625
	.byte	0xc,0x0,0xc,0xc,0x8,0xc,0xc,0x0,0xc,0x4,0x4,0x8,0x0,0x4,0x0,0xff	@: 0x1780 5640
	.byte	0x8,0x0,0x4,0x0,0x8,0x4,0x4,0x4,0xc,0x0,0x4,0xc,0xc,0x4,0x8,0xff	@: 0x1790 5655
	.byte	0xc,0x8,0x4,0x0,0xc,0x8,0x4,0x0,0x8,0x8,0x0,0x4,0x8,0xc,0x8,0xff	@: 0x17A0 5670
	.byte	0x8,0x8,0x4,0x0,0xc,0x8,0xc,0xc,0x4,0x8,0xc,0x4,0x8,0x4,0x8,0xff	@: 0x17B0 5685
	.byte	0x8,0x4,0x0,0x4,0x8,0x0,0x4,0x4,0x4,0x0,0x4,0x4,0x8,0x4,0x0,0xff	@: 0x17C0 5700
	.byte	0xc,0x4,0x4,0x0,0x0,0xc,0x8,0xc,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0xff	@: 0x17D0 5715
	.byte	0xc,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x8,0xc,0x0,0x8,0x4,0x8,0x0,0xff	@: 0x17E0 5730
	.byte	0x8,0x8,0x0,0x4,0xc,0xc,0x4,0xc,0x4,0x4,0xc,0x8,0x0,0x0,0x0,0xff	@: 0x17F0 5745
	.byte	0x8,0x4,0x8,0x8,0x0,0xc,0x4,0xc,0xc,0xc,0x8,0x0,0x0,0x8,0xc,0xff	@: 0x1800 5760
	.byte	0x0,0x8,0x4,0x8,0x0,0x0,0x8,0x0,0x8,0xc,0x0,0xc,0x0,0x4,0x0,0xff	@: 0x1810 5775
	.byte	0xc,0xc,0x4,0x4,0x8,0xc,0x4,0x4,0x8,0xc,0x8,0x8,0x0,0x0,0xc,0xff	@: 0x1820 5790
	.byte	0xc,0x0,0x0,0x4,0x0,0x8,0x8,0xc,0xc,0xc,0x4,0x8,0xc,0xc,0x0,0xff	@: 0x1830 5805
	.byte	0xc,0x4,0x0,0x4,0x4,0x0,0x8,0x0,0xc,0xc,0x0,0x4,0x4,0x0,0xc,0xff	@: 0x1840 5820
	.byte	0xc,0x0,0x4,0xc,0x0,0x8,0x8,0x0,0x4,0x8,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x1850 5835
	.byte	0x4,0x8,0x4,0x8,0x0,0xc,0x4,0xc,0xc,0x4,0x4,0xc,0xc,0x8,0x8,0xff	@: 0x1860 5850
	.byte	0x8,0x8,0xc,0x4,0x4,0x8,0x8,0x0,0x0,0x4,0x4,0x8,0x8,0x8,0x0,0xff	@: 0x1870 5865
	.byte	0x8,0x8,0x0,0xc,0x8,0x4,0xc,0x0,0x0,0xc,0xc,0x0,0xc,0x0,0x4,0xff	@: 0x1880 5880
	.byte	0x8,0xc,0xc,0x8,0xc,0xc,0x0,0x0,0x0,0x0,0xc,0x0,0x8,0x0,0x8,0xff	@: 0x1890 5895
	.byte	0x8,0xc,0x4,0x4,0x0,0x4,0x4,0x0,0x8,0x0,0x4,0x4,0x4,0xc,0xc,0xff	@: 0x18A0 5910
	.byte	0x4,0x0,0x4,0x4,0x8,0x8,0x8,0x4,0xc,0x0,0x4,0x0,0xc,0x8,0x0,0xff	@: 0x18B0 5925
	.byte	0x4,0x0,0x4,0xc,0x0,0x4,0x4,0x4,0x0,0x4,0x4,0xc,0x8,0xc,0xc,0xff	@: 0x18C0 5940
	.byte	0x4,0xc,0x0,0x4,0x0,0x4,0xc,0x8,0x4,0xc,0x4,0x8,0x0,0x8,0xc,0xff	@: 0x18D0 5955
	.byte	0x0,0x8,0x4,0x8,0x4,0x4,0x8,0x8,0x4,0x8,0x0,0x0,0x4,0x4,0x0,0xff	@: 0x18E0 5970
	.byte	0x8,0x0,0xc,0x0,0x8,0x8,0xc,0x0,0x0,0x4,0xc,0x8,0x8,0xc,0x8,0xff	@: 0x18F0 5985
	.byte	0x4,0x0,0x8,0xc,0x0,0x4,0x0,0x4,0x8,0x4,0x8,0xc,0x8,0x8,0x8,0xff	@: 0x1900 6000
	.byte	0xc,0x0,0x4,0xc,0xc,0x8,0x4,0xc,0x8,0x0,0x4,0x8,0x8,0xc,0x8,0xff	@: 0x1910 6015
	.byte	0x8,0x0,0x8,0x4,0xc,0x4,0x4,0x0,0x8,0x0,0x8,0x8,0xc,0x8,0x4,0xff	@: 0x1920 6030
	.byte	0x4,0x0,0xc,0xc,0x4,0x8,0x4,0x4,0xc,0x4,0x0,0x0,0xc,0x8,0x4,0xff	@: 0x1930 6045
	.byte	0xc,0x0,0x8,0x4,0x8,0xc,0x8,0x0,0x0,0x4,0x4,0x4,0x8,0x0,0x0,0xff	@: 0x1940 6060
	.byte	0x0,0xc,0x4,0x4,0x4,0x0,0x8,0x8,0xc,0xc,0x4,0x0,0x4,0x4,0x4,0xff	@: 0x1950 6075
	.byte	0xc,0x8,0x8,0xc,0x0,0x8,0x8,0xc,0x0,0xc,0x8,0xc,0x4,0x8,0x8,0xff	@: 0x1960 6090
	.byte	0x4,0x8,0xc,0xc,0xc,0x0,0x4,0x0,0xc,0x4,0xc,0x8,0x4,0x4,0x0,0xff	@: 0x1970 6105
	.byte	0x4,0x8,0x8,0xc,0x8,0x4,0x0,0x8,0x4,0x8,0x0,0xc,0xc,0x0,0x4,0xff	@: 0x1980 6120
	.byte	0x4,0xc,0x4,0xc,0x8,0x4,0xc,0xc,0x0,0x0,0x4,0xc,0x4,0x0,0xc,0xff	@: 0x1990 6135
	.byte	0x4,0xc,0x0,0x0,0x4,0xc,0xc,0x0,0x4,0x8,0x0,0xc,0xc,0x8,0x0,0xff	@: 0x19A0 6150
	.byte	0xc,0xc,0x0,0xc,0x8,0xc,0x0,0x0,0x4,0x4,0x0,0x4,0x4,0x8,0x8,0xff	@: 0x19B0 6165
	.byte	0x8,0xc,0x0,0x4,0x8,0xc,0x0,0x8,0x8,0xc,0x4,0x0,0x4,0x4,0xc,0xff	@: 0x19C0 6180
	.byte	0x0,0x8,0x8,0xc,0x0,0x0,0x0,0x4,0xc,0xc,0xc,0xc,0x0,0xc,0x0,0xff	@: 0x19D0 6195
	.byte	0x0,0xc,0x4,0xc,0xc,0xc,0xc,0x8,0x0,0xc,0xc,0x4,0xc,0x4,0x4,0xff	@: 0x19E0 6210
	.byte	0xc,0xc,0x4,0x0,0x8,0x8,0x0,0xc,0x0,0xc,0x8,0x0,0x4,0xc,0x4,0xff	@: 0x19F0 6225
	.byte	0xc,0x4,0xc,0x0,0xc,0xc,0x4,0x8,0x4,0x8,0x4,0x8,0x0,0x0,0x0,0xff	@: 0x1A00 6240
	.byte	0xc,0xc,0x8,0x0,0x4,0xc,0x4,0xc,0x8,0x4,0x8,0x0,0xc,0xc,0xc,0xff	@: 0x1A10 6255
	.byte	0x8,0x8,0x0,0x0,0x8,0x8,0x4,0x0,0x8,0x8,0xc,0x8,0x0,0x4,0x4,0xff	@: 0x1A20 6270
	.byte	0x4,0xc,0xc,0xc,0x4,0x4,0x4,0x4,0x4,0xc,0x0,0x0,0x0,0x4,0x8,0xff	@: 0x1A30 6285
	.byte	0x8,0x0,0xc,0xc,0xc,0x8,0x0,0xc,0x4,0xc,0x4,0x0,0x0,0x0,0xc,0xff	@: 0x1A40 6300
	.byte	0x8,0x4,0x8,0xc,0x4,0xc,0x0,0xc,0x4,0x0,0x0,0x0,0xc,0xc,0xc,0xff	@: 0x1A50 6315
	.byte	0xc,0xc,0x4,0x8,0x0,0x8,0x4,0x4,0x4,0xc,0xc,0xc,0x4,0x4,0x8,0xff	@: 0x1A60 6330
	.byte	0xc,0x8,0x4,0x0,0x4,0x8,0x0,0xc,0xc,0x8,0x0,0xc,0xc,0xc,0x8,0xff	@: 0x1A70 6345
	.byte	0x4,0xc,0x0,0xc,0xc,0xc,0xc,0xc,0x8,0x4,0x8,0x0,0xc,0xc,0x8,0xff	@: 0x1A80 6360
	.byte	0x0,0x0,0xc,0x0,0x8,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x0,0x4,0x0,0xff	@: 0x1A90 6375
	.byte	0x4,0x8,0x4,0xc,0x4,0x4,0xc,0x0,0x0,0x8,0x4,0x0,0x8,0xc,0x0,0xff	@: 0x1AA0 6390
	.byte	0x4,0xc,0x4,0x0,0x4,0x0,0xc,0x0,0x8,0xc,0x0,0x8,0x4,0x8,0x4,0xff	@: 0x1AB0 6405
	.byte	0xc,0x0,0x0,0x4,0x4,0xc,0xc,0x4,0x8,0x0,0xc,0x0,0x8,0x8,0xc,0xff	@: 0x1AC0 6420
	.byte	0x8,0x8,0xc,0x8,0x0,0x8,0x8,0x0,0x0,0x8,0xc,0x8,0xc,0x4,0x8,0xff	@: 0x1AD0 6435
	.byte	0x4,0x8,0x0,0x8,0x8,0x0,0xc,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x8,0xff	@: 0x1AE0 6450
	.byte	0x4,0x4,0x0,0x4,0x4,0xc,0x4,0x4,0x0,0xc,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x1AF0 6465
	.byte	0xc,0x4,0x8,0x0,0x0,0x4,0x4,0x8,0xc,0xc,0x8,0x0,0x0,0x0,0x4,0xff	@: 0x1B00 6480
	.byte	0x4,0x4,0x4,0x0,0x4,0xc,0x4,0xc,0x0,0x0,0x0,0xc,0xc,0x8,0xc,0xff	@: 0x1B10 6495
	.byte	0xc,0x4,0xc,0xc,0x8,0x0,0xc,0x8,0x4,0x4,0xc,0x0,0xc,0x4,0x8,0xff	@: 0x1B20 6510
	.byte	0xc,0x8,0x4,0x4,0x0,0x8,0xc,0xc,0x8,0x0,0x4,0x8,0x8,0xc,0x8,0xff	@: 0x1B30 6525
	.byte	0xc,0x8,0xc,0x8,0xc,0x8,0xc,0x0,0x0,0xc,0x4,0x4,0x8,0x8,0x0,0xff	@: 0x1B40 6540
	.byte	0x0,0x0,0xc,0x8,0x0,0x0,0x4,0x4,0x8,0xc,0x0,0xc,0x4,0x8,0x0,0xff	@: 0x1B50 6555
	.byte	0xc,0xc,0xc,0xc,0x0,0x8,0x4,0xc,0x4,0x4,0x0,0xc,0xc,0x8,0x0,0xff	@: 0x1B60 6570
	.byte	0x0,0x4,0x0,0x0,0xc,0x8,0x0,0x8,0x0,0x0,0x0,0x4,0xc,0xc,0x8,0xff	@: 0x1B70 6585
	.byte	0x8,0x8,0x4,0xc,0x8,0x0,0x0,0x8,0xc,0x8,0x8,0x4,0x4,0x0,0x0,0xff	@: 0x1B80 6600
	.byte	0x4,0x4,0xc,0x4,0x0,0x8,0x4,0x0,0xc,0xc,0xc,0x8,0x8,0x8,0x4,0xff	@: 0x1B90 6615
	.byte	0xc,0x0,0x4,0x0,0xc,0xc,0x4,0x8,0x0,0x8,0x8,0x8,0xc,0x8,0xc,0xff	@: 0x1BA0 6630
	.byte	0x8,0x0,0x8,0x8,0xc,0x4,0xc,0x8,0x8,0xc,0x8,0xc,0xc,0x4,0x8,0xff	@: 0x1BB0 6645
	.byte	0x0,0x8,0x8,0xc,0x8,0xc,0x0,0x4,0xc,0x0,0x8,0xc,0x8,0x0,0xc,0xff	@: 0x1BC0 6660
	.byte	0x0,0x4,0x4,0x0,0x4,0x8,0xc,0x8,0x4,0x4,0x4,0x0,0xc,0xc,0x8,0xff	@: 0x1BD0 6675
	.byte	0xc,0xc,0x0,0x0,0x0,0xc,0x4,0x4,0x4,0x0,0xc,0xc,0x8,0x4,0x8,0xff	@: 0x1BE0 6690
	.byte	0x0,0x8,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0xc,0xc,0x8,0x0,0x8,0x0,0xff	@: 0x1BF0 6705
	.byte	0x0,0x8,0x0,0xc,0x8,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x4,0xc,0x8,0xff	@: 0x1C00 6720
	.byte	0x0,0xc,0x4,0x4,0x8,0xc,0x0,0xc,0x4,0x0,0x8,0x4,0x4,0xc,0xc,0xff	@: 0x1C10 6735
	.byte	0x0,0x8,0x8,0xc,0x8,0x4,0x8,0x0,0xc,0xc,0x0,0x4,0x8,0x4,0xc,0xff	@: 0x1C20 6750
	.byte	0x4,0xc,0x8,0x0,0x8,0x0,0x0,0x8,0xc,0x8,0x0,0x4,0x0,0xc,0xc,0xff	@: 0x1C30 6765
	.byte	0xc,0x4,0x0,0x4,0x0,0x4,0xc,0x0,0x8,0x4,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x1C40 6780
	.byte	0xc,0x4,0x4,0xc,0x0,0xc,0x4,0xc,0x8,0x0,0x0,0xc,0x0,0x8,0x4,0xff	@: 0x1C50 6795
	.byte	0x0,0x4,0x8,0x8,0x4,0x4,0xc,0xc,0x4,0xc,0x4,0xc,0xc,0xc,0x0,0xff	@: 0x1C60 6810
	.byte	0x4,0x8,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0x0,0x8,0x4,0xc,0xc,0xc,0xff	@: 0x1C70 6825
	.byte	0x4,0xc,0x0,0xc,0xc,0xc,0x4,0x0,0x4,0xc,0xc,0x0,0x8,0x8,0x0,0xff	@: 0x1C80 6840
	.byte	0xc,0x4,0xc,0x0,0x4,0x0,0x8,0x0,0x8,0x0,0x4,0x8,0x8,0x4,0x8,0xff	@: 0x1C90 6855
	.byte	0x4,0x0,0xc,0x4,0xc,0x8,0x0,0x4,0xc,0x4,0x8,0xc,0xc,0x8,0xc,0xff	@: 0x1CA0 6870
	.byte	0xc,0x0,0x4,0x0,0x8,0xc,0xc,0xc,0x0,0x8,0x0,0x8,0x8,0x4,0xc,0xff	@: 0x1CB0 6885
	.byte	0x4,0x8,0x8,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0x8,0x0,0x8,0xc,0x8,0xff	@: 0x1CC0 6900
	.byte	0x0,0xc,0x0,0x0,0x4,0x4,0x4,0x0,0x8,0x8,0x0,0xc,0x8,0x8,0xc,0xff	@: 0x1CD0 6915
	.byte	0x8,0x0,0x8,0xc,0x8,0xc,0x4,0x0,0x4,0xc,0x8,0x4,0x4,0x0,0xc,0xff	@: 0x1CE0 6930
	.byte	0xc,0x0,0xc,0x4,0x8,0x0,0x4,0x4,0x4,0x8,0x4,0xc,0x0,0x8,0x0,0xff	@: 0x1CF0 6945
	.byte	0x0,0x8,0x4,0x8,0xc,0x8,0x8,0xc,0xc,0x8,0xc,0x4,0x4,0x4,0x0,0xff	@: 0x1D00 6960
	.byte	0x8,0xc,0x4,0x8,0x4,0x8,0x8,0x4,0xc,0x8,0x8,0x0,0x8,0x0,0xc,0xff	@: 0x1D10 6975
	.byte	0x8,0xc,0x4,0x4,0x8,0x8,0x8,0x0,0x0,0x4,0xc,0xc,0xc,0x0,0x8,0xff	@: 0x1D20 6990
	.byte	0x8,0x4,0xc,0xc,0x0,0x4,0x4,0x0,0x8,0xc,0x0,0x4,0x4,0x0,0x0,0xff	@: 0x1D30 7005
	.byte	0x8,0x0,0x0,0x4,0x4,0x8,0xc,0xc,0x0,0x4,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x1D40 7020
	.byte	0xc,0x4,0xc,0x0,0x4,0x0,0x8,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0x0,0xff	@: 0x1D50 7035
	.byte	0x0,0x0,0x8,0x4,0x0,0xc,0x0,0x0,0x8,0x0,0xc,0x4,0x8,0x8,0x4,0xff	@: 0x1D60 7050
	.byte	0xc,0x4,0x8,0x0,0x8,0x8,0xc,0x8,0x0,0x8,0x0,0x0,0x4,0x4,0xc,0xff	@: 0x1D70 7065
	.byte	0x8,0x4,0x4,0x4,0x4,0x8,0x8,0x8,0x0,0x4,0x0,0x8,0x4,0x4,0x4,0xff	@: 0x1D80 7080
	.byte	0x0,0xc,0x8,0x4,0x0,0xc,0xc,0x8,0xc,0x0,0x4,0xc,0x4,0x0,0xc,0xff	@: 0x1D90 7095
	.byte	0x4,0xc,0xc,0x0,0x0,0x4,0x0,0x8,0x8,0x8,0x4,0x4,0x0,0x4,0x8,0xff	@: 0x1DA0 7110
	.byte	0x0,0x0,0x4,0xc,0x8,0x0,0x4,0xc,0x4,0x8,0x4,0x8,0x8,0x0,0xc,0xff	@: 0x1DB0 7125
	.byte	0xc,0x8,0x0,0x4,0x0,0x0,0x8,0x8,0x8,0x8,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x1DC0 7140
	.byte	0x8,0x4,0x8,0xc,0x0,0x4,0x0,0x8,0x4,0x0,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x1DD0 7155
	.byte	0x4,0x0,0x8,0x4,0x8,0x0,0xc,0x8,0x8,0xc,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x1DE0 7170
	.byte	0x0,0x8,0x8,0x4,0x8,0x0,0xc,0x4,0x4,0x0,0x4,0xc,0x0,0xc,0x4,0xff	@: 0x1DF0 7185
	.byte	0x8,0x4,0x0,0x0,0x4,0xc,0xc,0xc,0x0,0x0,0x0,0x8,0xc,0x8,0xc,0xff	@: 0x1E00 7200
	.byte	0xc,0x0,0x0,0x8,0x0,0x4,0xc,0x4,0xc,0x8,0x0,0x8,0x4,0xc,0xc,0xff	@: 0x1E10 7215
	.byte	0x8,0x0,0x4,0x8,0xc,0x0,0x4,0x4,0xc,0x0,0x8,0xc,0x0,0x0,0x4,0xff	@: 0x1E20 7230
	.byte	0x8,0xc,0xc,0x4,0x0,0x8,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0x8,0xc,0xff	@: 0x1E30 7245
	.byte	0x4,0xc,0xc,0xc,0x8,0x4,0x4,0x8,0x0,0x8,0xc,0x8,0xc,0x0,0x4,0xff	@: 0x1E40 7260
	.byte	0x8,0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x0,0x8,0x4,0x4,0x0,0x8,0x4,0xff	@: 0x1E50 7275
	.byte	0xc,0x4,0x4,0x0,0xc,0x0,0xc,0x0,0x8,0x0,0x8,0x4,0x0,0xc,0xc,0xff	@: 0x1E60 7290
	.byte	0x8,0x4,0x0,0x4,0x4,0x4,0x4,0x4,0xc,0xc,0x4,0x0,0x8,0x4,0x8,0xff	@: 0x1E70 7305
	.byte	0x0,0x4,0x8,0x0,0x0,0x0,0x8,0xc,0x4,0x8,0x8,0x4,0x4,0x8,0x8,0xff	@: 0x1E80 7320
	.byte	0xc,0x4,0x8,0x0,0x4,0x0,0x0,0x4,0xc,0x0,0xc,0x4,0x4,0xc,0x0,0xff	@: 0x1E90 7335
	.byte	0x4,0x4,0xc,0x4,0x0,0x0,0x4,0x8,0x0,0xc,0xc,0x4,0x8,0x4,0x4,0xff	@: 0x1EA0 7350
	.byte	0x8,0x0,0x0,0x4,0x4,0xc,0x4,0x4,0x0,0x0,0x0,0x0,0xc,0x4,0xc,0xff	@: 0x1EB0 7365
	.byte	0xc,0x8,0x4,0x4,0x8,0x8,0x0,0x0,0xc,0x8,0x8,0x0,0xc,0x8,0xc,0xff	@: 0x1EC0 7380
	.byte	0xc,0x4,0x8,0x8,0x8,0x4,0x8,0x8,0xc,0x4,0xc,0xc,0xc,0x4,0xc,0xff	@: 0x1ED0 7395
	.byte	0xc,0x0,0x4,0x0,0x4,0x4,0x0,0x8,0xc,0x8,0x8,0xc,0x8,0xc,0x4,0xff	@: 0x1EE0 7410
	.byte	0x4,0x8,0x0,0xc,0x0,0x8,0xc,0x4,0x4,0x0,0xc,0x0,0x0,0x0,0x0,0xff	@: 0x1EF0 7425
	.byte	0x0,0x4,0x0,0xc,0x4,0x4,0x4,0xc,0x0,0x8,0x0,0xc,0xc,0x8,0x8,0xff	@: 0x1F00 7440
	.byte	0x0,0xc,0x0,0x0,0x4,0x8,0x4,0x0,0x8,0x0,0xc,0xc,0x8,0x4,0x0,0xff	@: 0x1F10 7455
	.byte	0x0,0xc,0x0,0x4,0xc,0x0,0x0,0x0,0x4,0xc,0x0,0x0,0x0,0x8,0xc,0xff	@: 0x1F20 7470
	.byte	0x0,0x0,0x0,0x4,0x4,0x4,0x0,0x8,0x0,0xc,0x0,0x8,0x8,0x0,0x8,0xff	@: 0x1F30 7485
	.byte	0x8,0x4,0xc,0x0,0xc,0x4,0x4,0xc,0xc,0xc,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x1F40 7500
	.byte	0x0,0xc,0x8,0x4,0x0,0x0,0x8,0x4,0x4,0x8,0x8,0xc,0x8,0x4,0x8,0xff	@: 0x1F50 7515
	.byte	0xc,0xc,0xc,0x4,0x8,0x4,0x0,0x4,0xc,0xc,0xc,0xc,0x4,0x8,0x8,0xff	@: 0x1F60 7530
	.byte	0xc,0xc,0x4,0xc,0x8,0xc,0x0,0x4,0xc,0x8,0x8,0x4,0xc,0xc,0x0,0xff	@: 0x1F70 7545
	.byte	0x8,0x8,0x8,0x8,0x4,0x4,0x8,0x0,0x8,0xc,0x4,0x0,0x0,0x4,0x0,0xff	@: 0x1F80 7560
	.byte	0x0,0xc,0xc,0x8,0xc,0x0,0x4,0x4,0xc,0x4,0x0,0x4,0x0,0x0,0xc,0xff	@: 0x1F90 7575
	.byte	0xc,0xc,0x8,0x0,0xc,0x0,0x4,0x8,0x8,0xc,0x8,0x4,0x4,0x4,0xc,0xff	@: 0x1FA0 7590
	.byte	0xc,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x8,0x0,0xc,0xc,0xc,0xc,0x8,0xff	@: 0x1FB0 7605
	.byte	0xc,0x4,0x0,0x0,0xc,0x8,0x0,0x4,0xc,0x4,0x8,0x4,0x4,0x8,0x8,0xff	@: 0x1FC0 7620
	.byte	0x8,0xc,0x8,0x8,0x4,0x8,0x8,0xc,0x4,0x0,0x8,0x4,0x4,0xc,0x8,0xff	@: 0x1FD0 7635
	.byte	0x8,0xc,0x4,0x8,0x4,0xc,0xc,0x4,0x4,0xc,0x4,0x4,0x0,0x8,0x4,0xff	@: 0x1FE0 7650
	.byte	0x4,0x8,0x8,0xc,0x4,0x8,0x0,0x0,0x4,0x0,0x0,0xc,0x0,0x0,0x0,0xff	@: 0x1FF0 7665
	.byte	0xc,0xc,0x0,0xc,0x4,0x8,0xc,0x4,0x4,0x8,0x8,0x0,0x4,0xc,0x8,0xff	@: 0x2000 7680
	.byte	0x4,0x4,0xc,0xc,0x4,0x0,0xc,0x4,0x0,0xc,0x0,0x8,0x4,0x4,0x0,0xff	@: 0x2010 7695
	.byte	0x0,0xc,0x8,0x8,0xc,0x0,0x4,0x0,0x4,0x4,0xc,0x4,0x4,0xc,0x0,0xff	@: 0x2020 7710
	.byte	0x0,0x4,0xc,0x0,0xc,0xc,0xc,0xc,0x8,0x8,0x4,0x0,0x8,0xc,0x8,0xff	@: 0x2030 7725
	.byte	0xc,0xc,0x4,0xc,0x4,0x8,0x8,0x8,0x4,0xc,0xc,0xc,0x4,0x4,0x8,0xff	@: 0x2040 7740
	.byte	0xc,0x4,0x8,0x8,0x0,0x4,0xc,0x8,0x4,0x4,0x4,0x4,0x4,0x8,0x8,0xff	@: 0x2050 7755
	.byte	0x0,0x8,0x4,0x4,0xc,0x0,0x4,0x0,0x8,0x0,0xc,0x4,0x4,0x0,0x4,0xff	@: 0x2060 7770
	.byte	0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x4,0x0,0x0,0x0,0x8,0xc,0x0,0xc,0xff	@: 0x2070 7785
	.byte	0xc,0xc,0xc,0x4,0x4,0x8,0x4,0x8,0x0,0x4,0x4,0x4,0xc,0x0,0x0,0xff	@: 0x2080 7800
	.byte	0x8,0xc,0xc,0x8,0x0,0x4,0x4,0xc,0x4,0x0,0x0,0xc,0x0,0xc,0xc,0xff	@: 0x2090 7815
	.byte	0x4,0x8,0x4,0x4,0xc,0x8,0x4,0x0,0x0,0x8,0x0,0x0,0xc,0x4,0xc,0xff	@: 0x20A0 7830
	.byte	0x8,0x0,0xc,0x0,0xc,0x8,0xc,0xc,0x8,0xc,0x0,0x4,0x4,0xc,0xc,0xff	@: 0x20B0 7845
	.byte	0x0,0x8,0x8,0xc,0x0,0x0,0x8,0x0,0xc,0x8,0x8,0x4,0x4,0x4,0x0,0xff	@: 0x20C0 7860
	.byte	0x0,0xc,0x8,0x8,0x8,0x8,0x4,0x8,0x0,0x4,0x4,0xc,0x8,0xc,0x4,0xff	@: 0x20D0 7875
	.byte	0x4,0xc,0x8,0x8,0x8,0xc,0xc,0xc,0x4,0x8,0x4,0xc,0x0,0x8,0x4,0xff	@: 0x20E0 7890
	.byte	0x4,0x0,0xc,0x4,0x0,0x0,0xc,0xc,0x8,0x8,0x0,0xc,0x0,0xc,0x8,0xff	@: 0x20F0 7905
	.byte	0x8,0x8,0x8,0x8,0x4,0x0,0xc,0x8,0x0,0x0,0x0,0x8,0xc,0x4,0x0,0xff	@: 0x2100 7920
	.byte	0x0,0xc,0x8,0x8,0xc,0x4,0x4,0x0,0xc,0x0,0xc,0x8,0xc,0x8,0xc,0xff	@: 0x2110 7935
	.byte	0x8,0x8,0xc,0xc,0xc,0x4,0x8,0x8,0xc,0x4,0xc,0x4,0x0,0x4,0x8,0xff	@: 0x2120 7950
	.byte	0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x4,0x8,0x8,0xc,0x8,0x4,0x8,0x4,0xff	@: 0x2130 7965
	.byte	0x4,0x0,0x0,0x8,0x0,0x4,0x0,0x0,0x4,0xc,0x8,0x8,0xc,0x4,0x8,0xff	@: 0x2140 7980
	.byte	0x4,0x8,0x0,0x4,0x4,0x0,0xc,0xc,0x4,0x8,0x4,0x4,0xc,0x4,0x8,0xff	@: 0x2150 7995
	.byte	0xc,0xc,0x0,0x0,0x8,0x8,0xc,0xc,0x4,0xc,0x8,0xc,0xc,0x4,0x0,0xff	@: 0x2160 8010
	.byte	0x4,0x0,0xc,0xc,0x8,0xc,0x4,0x8,0x0,0x8,0x8,0x0,0xc,0xc,0x8,0xff	@: 0x2170 8025
	.byte	0x8,0x8,0x8,0x0,0xc,0x4,0x4,0x0,0xc,0xc,0x8,0x0,0x8,0x4,0xc,0xff	@: 0x2180 8040
	.byte	0x0,0xc,0x0,0x0,0x4,0x0,0x8,0x8,0x0,0x0,0xc,0x0,0x8,0xc,0xc,0xff	@: 0x2190 8055
	.byte	0xc,0x0,0xc,0xc,0x8,0x0,0x8,0x0,0xc,0xc,0x0,0x8,0x4,0xc,0xc,0xff	@: 0x21A0 8070
	.byte	0xc,0xc,0x8,0xc,0x4,0xc,0x4,0x0,0x0,0x0,0x8,0xc,0x4,0x8,0x8,0xff	@: 0x21B0 8085
	.byte	0x4,0xc,0x0,0xc,0x0,0x0,0xc,0x4,0xc,0x0,0x0,0x8,0x4,0x4,0xc,0xff	@: 0x21C0 8100
	.byte	0xc,0x0,0xc,0x8,0x8,0xc,0x8,0x8,0x0,0x4,0x4,0xc,0x0,0xc,0xc,0xff	@: 0x21D0 8115
	.byte	0xc,0x4,0x8,0xc,0x8,0x0,0xc,0x8,0x4,0xc,0xc,0x8,0x4,0xc,0x4,0xff	@: 0x21E0 8130
	.byte	0x8,0x4,0xc,0x4,0x4,0x0,0x4,0x0,0x8,0x0,0x4,0x8,0x4,0x4,0x4,0xff	@: 0x21F0 8145
	.byte	0x4,0x0,0x4,0x4,0x8,0x0,0x8,0xc,0x4,0x4,0x0,0xc,0xc,0x0,0x8,0xff	@: 0x2200 8160
	.byte	0x8,0xc,0xc,0x0,0x8,0x8,0x8,0x4,0x8,0x0,0x4,0x0,0x8,0x8,0x0,0xff	@: 0x2210 8175
	.byte	0x8,0x4,0x0,0x4,0x8,0x8,0x4,0x4,0xc,0x4,0x8,0xc,0x0,0x4,0x8,0xff	@: 0x2220 8190
	.byte	0x0,0x0,0xc,0x4,0x8,0x8,0x4,0x4,0x0,0x8,0x0,0x4,0xc,0x0,0xc,0xff	@: 0x2230 8205
	.byte	0x0,0xc,0x4,0x8,0x0,0x0,0xc,0x0,0x4,0x4,0x8,0xc,0xc,0x0,0x0,0xff	@: 0x2240 8220
	.byte	0x8,0x8,0x8,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0xc,0x8,0xc,0x8,0xff	@: 0x2250 8235
	.byte	0xc,0x4,0x8,0x4,0xc,0xc,0x8,0xc,0x8,0xc,0xc,0x8,0x4,0x4,0x4,0xff	@: 0x2260 8250
	.byte	0x0,0x0,0x4,0xc,0x4,0x8,0x0,0xc,0x4,0x8,0x8,0x8,0x8,0x4,0x4,0xff	@: 0x2270 8265
	.byte	0x0,0xc,0x0,0x4,0x8,0xc,0x0,0x8,0x8,0x4,0x0,0x0,0xc,0x0,0x8,0xff	@: 0x2280 8280
	.byte	0x8,0xc,0xc,0xc,0x8,0xc,0x8,0x8,0x4,0x0,0x4,0xc,0x4,0x4,0x4,0xff	@: 0x2290 8295
	.byte	0x0,0x0,0x8,0x0,0x0,0xc,0x4,0x8,0x8,0xc,0x0,0x0,0x8,0x8,0x4,0xff	@: 0x22A0 8310
	.byte	0x4,0x4,0x0,0xc,0x4,0x4,0xc,0x0,0x0,0x4,0x8,0xc,0x0,0x0,0x8,0xff	@: 0x22B0 8325
	.byte	0x0,0x4,0xc,0xc,0x8,0x8,0xc,0x4,0xc,0x4,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x22C0 8340
	.byte	0xc,0xc,0xc,0xc,0xc,0x0,0x0,0xc,0x4,0x0,0x8,0x8,0x8,0x8,0xc,0xff	@: 0x22D0 8355
	.byte	0x8,0x4,0xc,0x8,0x4,0x4,0x4,0x8,0xc,0x8,0x4,0x0,0x4,0x4,0x8,0xff	@: 0x22E0 8370
	.byte	0xc,0x8,0xc,0xc,0xc,0x8,0xc,0x8,0x0,0x8,0x0,0xc,0x0,0xc,0x4,0xff	@: 0x22F0 8385
	.byte	0xc,0x4,0x4,0xc,0x8,0x0,0x0,0x8,0x0,0x8,0x8,0x8,0x8,0x4,0x0,0xff	@: 0x2300 8400
	.byte	0x0,0x4,0x0,0xc,0x0,0x0,0x0,0x0,0xc,0x0,0x4,0xc,0xc,0xc,0xc,0xff	@: 0x2310 8415
	.byte	0x0,0x8,0x0,0xc,0x8,0x8,0x4,0xc,0x8,0x8,0x4,0xc,0x0,0xc,0xc,0xff	@: 0x2320 8430
	.byte	0xc,0x0,0xc,0x0,0xc,0x8,0x0,0x8,0x0,0x8,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x2330 8445
	.byte	0xc,0x8,0x0,0x0,0x4,0xc,0x4,0xc,0x0,0x0,0x0,0x8,0x4,0xc,0x4,0xff	@: 0x2340 8460
	.byte	0x4,0xc,0x4,0x4,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0xff	@: 0x2350 8475
	.byte	0x8,0xc,0xc,0x0,0x4,0x8,0x0,0xc,0x4,0x8,0x8,0x8,0x8,0x8,0x8,0xff	@: 0x2360 8490
	.byte	0x4,0xc,0x0,0x0,0x4,0x0,0xc,0xc,0x4,0x0,0x4,0xc,0x0,0x4,0x0,0xff	@: 0x2370 8505
	.byte	0x4,0x8,0x8,0xc,0x4,0x0,0x0,0x0,0xc,0x8,0x0,0xc,0xc,0x4,0xc,0xff	@: 0x2380 8520
	.byte	0x4,0x0,0x8,0x8,0x4,0xc,0x0,0xc,0x8,0xc,0xc,0x0,0x8,0x0,0x8,0xff	@: 0x2390 8535
	.byte	0x8,0xc,0x0,0x0,0x4,0x0,0x0,0x4,0x8,0x0,0x8,0x8,0x4,0x4,0x4,0xff	@: 0x23A0 8550
	.byte	0x8,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x8,0xc,0xc,0xc,0xc,0x8,0xc,0xff	@: 0x23B0 8565
	.byte	0x8,0x0,0x4,0x8,0x8,0x4,0x0,0x4,0x8,0xc,0xc,0x8,0x0,0x0,0x0,0xff	@: 0x23C0 8580
	.byte	0x8,0xc,0x8,0xc,0xc,0x8,0xc,0x4,0x0,0x8,0x0,0x8,0x8,0xc,0x4,0xff	@: 0x23D0 8595
	.byte	0x8,0x0,0x0,0x0,0x8,0xc,0x4,0x0,0x8,0xc,0xc,0xc,0x0,0x4,0x4,0xff	@: 0x23E0 8610
	.byte	0x0,0xc,0xc,0xc,0x4,0x8,0x4,0x0,0x4,0x8,0x0,0xc,0x0,0xc,0x0,0xff	@: 0x23F0 8625
	.byte	0x0,0x0,0xc,0xc,0x0,0x4,0x8,0xc,0xc,0x4,0x4,0xc,0x8,0x8,0x4,0xff	@: 0x2400 8640
	.byte	0x8,0xc,0x0,0x8,0x8,0x0,0x0,0x8,0xc,0xc,0x4,0xc,0x4,0xc,0x4,0xff	@: 0x2410 8655
	.byte	0x4,0x8,0x4,0x0,0xc,0x0,0xc,0x0,0x4,0xc,0x0,0xc,0x4,0x4,0x8,0xff	@: 0x2420 8670
	.byte	0x8,0x0,0x8,0x0,0x4,0x4,0x4,0x4,0x4,0x8,0xc,0xc,0x4,0x4,0x0,0xff	@: 0x2430 8685
	.byte	0xc,0x4,0xc,0x8,0xc,0x4,0x8,0x4,0x8,0x0,0x4,0x8,0x4,0xc,0x4,0xff	@: 0x2440 8700
	.byte	0x4,0xc,0x8,0x4,0x0,0x8,0xc,0xc,0x4,0x8,0x8,0x8,0x8,0x4,0x8,0xff	@: 0x2450 8715
	.byte	0x8,0x4,0xc,0x0,0x4,0x4,0x8,0xc,0x8,0x4,0xc,0x8,0x8,0x4,0x0,0xff	@: 0x2460 8730
	.byte	0x4,0x8,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0x4,0xc,0x0,0x8,0x4,0xc,0xff	@: 0x2470 8745
	.byte	0xc,0x8,0xc,0xc,0x0,0x4,0x4,0xc,0xc,0xc,0xc,0x8,0x0,0x4,0x4,0xff	@: 0x2480 8760
	.byte	0x0,0x8,0x8,0x4,0x8,0x8,0x4,0xc,0xc,0xc,0x4,0x4,0x8,0x8,0x4,0xff	@: 0x2490 8775
	.byte	0x0,0x8,0x8,0x4,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0xc,0x4,0xc,0x4,0xff	@: 0x24A0 8790
	.byte	0x8,0x8,0x0,0x4,0x4,0xc,0x0,0xc,0x4,0xc,0x0,0x4,0x4,0x0,0x0,0xff	@: 0x24B0 8805
	.byte	0x4,0xc,0xc,0x4,0x8,0x8,0x8,0x0,0x8,0xc,0x4,0xc,0x0,0x8,0x8,0xff	@: 0x24C0 8820
	.byte	0xc,0xc,0x0,0x4,0xc,0xc,0x8,0x0,0xc,0xc,0x0,0x0,0x4,0xc,0x0,0xff	@: 0x24D0 8835
	.byte	0x0,0xc,0xc,0x0,0xc,0x8,0x8,0x0,0x8,0x8,0xc,0x0,0xc,0x0,0x4,0xff	@: 0x24E0 8850
	.byte	0x4,0xc,0x4,0x8,0x0,0x0,0x8,0xc,0x4,0x4,0x4,0x4,0x4,0xc,0x4,0xff	@: 0x24F0 8865
	.byte	0x8,0x0,0x4,0x8,0x0,0x8,0xc,0x4,0xc,0x8,0xc,0x8,0xc,0xc,0xc,0xff	@: 0x2500 8880
	.byte	0x4,0x0,0x4,0xc,0x4,0x8,0x0,0x4,0xc,0x0,0x0,0xc,0xc,0x0,0xc,0xff	@: 0x2510 8895
	.byte	0x4,0xc,0x0,0xc,0xc,0xc,0xc,0xc,0x0,0x4,0x0,0x4,0x0,0xc,0xc,0xff	@: 0x2520 8910
	.byte	0x4,0x0,0x8,0x8,0x8,0x4,0xc,0x0,0x4,0x4,0x8,0x4,0x8,0x0,0x8,0xff	@: 0x2530 8925
	.byte	0xc,0x8,0x0,0x0,0x0,0xc,0x4,0x4,0x4,0x0,0x4,0x8,0x4,0x0,0x4,0xff	@: 0x2540 8940
	.byte	0x0,0xc,0x4,0xc,0xc,0x0,0xc,0xc,0x0,0xc,0x4,0x0,0x0,0x4,0x0,0xff	@: 0x2550 8955
	.byte	0x4,0x4,0x4,0x8,0x8,0x0,0x0,0x4,0x0,0x0,0x8,0x4,0x0,0xc,0x0,0xff	@: 0x2560 8970
	.byte	0xc,0x4,0x0,0x4,0x0,0x4,0xc,0xc,0x4,0x8,0xc,0x4,0xc,0x8,0x4,0xff	@: 0x2570 8985
	.byte	0x8,0x0,0xc,0x4,0xc,0xc,0x8,0x0,0x4,0x0,0x0,0x8,0xc,0x8,0x4,0xff	@: 0x2580 9000
	.byte	0x0,0x8,0xc,0x0,0xc,0x8,0xc,0xc,0x4,0xc,0x8,0x8,0x0,0x8,0xc,0xff	@: 0x2590 9015
	.byte	0x8,0x4,0x4,0x4,0xc,0x4,0xc,0x4,0xc,0x0,0xc,0x8,0x8,0xc,0x0,0xff	@: 0x25A0 9030
	.byte	0x8,0x8,0xc,0xc,0x4,0x8,0x4,0xc,0x8,0x8,0x8,0x8,0x8,0xc,0x8,0xff	@: 0x25B0 9045
	.byte	0x0,0xc,0x8,0x8,0x0,0x8,0x4,0xc,0x8,0x8,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x25C0 9060
	.byte	0xc,0x4,0xc,0x8,0xc,0xc,0x4,0x4,0x8,0x0,0x8,0x8,0x8,0xc,0x8,0xff	@: 0x25D0 9075
	.byte	0x4,0x8,0x8,0xc,0x0,0x4,0x8,0x0,0x0,0xc,0x4,0xc,0xc,0x0,0x4,0xff	@: 0x25E0 9090
	.byte	0x0,0xc,0x0,0xc,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x4,0xff	@: 0x25F0 9105
	.byte	0x8,0xc,0x4,0x0,0x8,0xc,0xc,0xc,0xc,0x4,0x8,0x8,0x8,0xc,0xc,0xff	@: 0x2600 9120
	.byte	0x8,0xc,0xc,0xc,0x8,0x8,0x4,0x8,0x4,0x4,0x0,0x8,0xc,0x8,0xc,0xff	@: 0x2610 9135
	.byte	0xc,0x4,0xc,0x8,0x0,0xc,0x0,0xc,0x8,0x4,0x0,0xc,0x0,0x0,0x8,0xff	@: 0x2620 9150
	.byte	0xc,0xc,0x0,0x0,0xc,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0xc,0xff	@: 0x2630 9165
	.byte	0x0,0x4,0x8,0x0,0xc,0x4,0x0,0x8,0x8,0xc,0xc,0x0,0x8,0x8,0x4,0xff	@: 0x2640 9180
	.byte	0xc,0xc,0x8,0x0,0xc,0xc,0x8,0x8,0x0,0x4,0x4,0x8,0x0,0x8,0xc,0xff	@: 0x2650 9195
	.byte	0x4,0xc,0x8,0x8,0x8,0x8,0x8,0x4,0x0,0x0,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x2660 9210
	.byte	0x4,0x8,0xc,0x8,0x4,0x4,0x8,0x8,0x0,0xc,0x8,0x4,0x4,0x0,0x4,0xff	@: 0x2670 9225
	.byte	0xc,0x0,0x8,0x4,0xc,0x8,0x0,0xc,0x4,0xc,0x4,0x4,0x4,0x8,0x0,0xff	@: 0x2680 9240
	.byte	0x8,0x8,0x4,0x4,0x4,0x0,0x0,0xc,0x8,0x8,0x0,0x4,0x4,0x4,0x4,0xff	@: 0x2690 9255
	.byte	0x0,0x4,0x8,0x8,0x8,0x8,0x8,0x8,0x0,0x4,0x4,0xc,0x4,0xc,0xc,0xff	@: 0x26A0 9270
	.byte	0x0,0x4,0x4,0x0,0x8,0x4,0x8,0xc,0xc,0x4,0x8,0x4,0x4,0xc,0x8,0xff	@: 0x26B0 9285
	.byte	0x8,0x0,0x0,0xc,0x8,0xc,0x0,0x8,0xc,0x8,0x4,0x8,0x0,0xc,0x4,0xff	@: 0x26C0 9300
	.byte	0xc,0x0,0xc,0xc,0x0,0x4,0x0,0x4,0xc,0x0,0x0,0x4,0x0,0x8,0x0,0xff	@: 0x26D0 9315
	.byte	0x8,0xc,0x0,0x8,0xc,0x4,0x4,0x8,0xc,0x0,0x4,0x8,0x8,0x8,0xc,0xff	@: 0x26E0 9330
	.byte	0xc,0xc,0x4,0x0,0x0,0xc,0xc,0x8,0xc,0x0,0x0,0x0,0x8,0xc,0x0,0xff	@: 0x26F0 9345
	.byte	0xc,0xc,0x8,0xc,0x8,0x0,0x4,0x4,0x0,0x8,0x4,0x4,0x4,0x4,0x8,0xff	@: 0x2700 9360
	.byte	0x8,0xc,0xc,0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x8,0x8,0x8,0x8,0xc,0xff	@: 0x2710 9375
	.byte	0x8,0x8,0xc,0x8,0x4,0xc,0x0,0x0,0x4,0x8,0x4,0x0,0x0,0x0,0x4,0xff	@: 0x2720 9390
	.byte	0xc,0xc,0x0,0x8,0x0,0xc,0x4,0x8,0x4,0x8,0xc,0x8,0x0,0x0,0xc,0xff	@: 0x2730 9405
	.byte	0xc,0xc,0x0,0xc,0x0,0x8,0x8,0x4,0x0,0x0,0x4,0x8,0x0,0x0,0x8,0xff	@: 0x2740 9420
	.byte	0x0,0x8,0xc,0x4,0x4,0x4,0xc,0x8,0x4,0x8,0xc,0xc,0x0,0x0,0x0,0xff	@: 0x2750 9435
	.byte	0x8,0x4,0x8,0x0,0xc,0x8,0x4,0x4,0xc,0x0,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x2760 9450
	.byte	0x4,0x4,0xc,0x8,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0x4,0x8,0x8,0xff	@: 0x2770 9465
	.byte	0x0,0xc,0x0,0x4,0xc,0xc,0x4,0x0,0x8,0x8,0x0,0x8,0xc,0x4,0x8,0xff	@: 0x2780 9480
	.byte	0x4,0x8,0x4,0xc,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0x0,0x8,0x4,0xc,0xff	@: 0x2790 9495
	.byte	0x0,0x4,0xc,0x8,0xc,0xc,0x0,0x4,0x8,0x0,0x8,0x8,0x8,0xc,0x4,0xff	@: 0x27A0 9510
	.byte	0x8,0x8,0x4,0x0,0x4,0xc,0x4,0x8,0xc,0xc,0x4,0x4,0xc,0x8,0x0,0xff	@: 0x27B0 9525
	.byte	0x0,0x8,0x0,0xc,0x0,0x0,0x4,0x8,0xc,0x0,0x8,0x8,0x4,0x4,0x4,0xff	@: 0x27C0 9540
	.byte	0xc,0x4,0x8,0x0,0x8,0xc,0xc,0xc,0x8,0x8,0x0,0x0,0x8,0x8,0x8,0xff	@: 0x27D0 9555
	.byte	0x0,0xc,0x8,0xc,0x0,0x0,0x8,0xc,0x4,0x8,0x4,0x4,0x8,0x8,0x0,0xff	@: 0x27E0 9570
	.byte	0xc,0x0,0xc,0xc,0x8,0xc,0x4,0x4,0x8,0x4,0x0,0x8,0xc,0x0,0xc,0xff	@: 0x27F0 9585
	.byte	0x8,0xc,0xc,0x0,0xc,0x4,0x0,0xc,0xc,0xc,0x4,0x0,0xc,0x4,0xc,0xff	@: 0x2800 9600
	.byte	0xc,0x4,0x8,0x4,0x4,0x8,0x0,0x8,0x0,0x0,0x8,0x4,0x4,0x8,0x4,0xff	@: 0x2810 9615
	.byte	0xc,0x0,0x0,0xc,0xc,0x4,0xc,0x4,0x0,0x0,0x8,0x4,0x0,0xc,0xc,0xff	@: 0x2820 9630
	.byte	0x4,0x4,0x0,0xc,0xc,0x4,0x8,0x8,0xc,0x4,0xc,0x8,0x8,0x0,0xc,0xff	@: 0x2830 9645
	.byte	0x0,0x0,0x4,0x8,0x0,0x8,0xc,0x8,0xc,0x4,0x0,0x0,0x4,0x8,0x8,0xff	@: 0x2840 9660
	.byte	0x0,0xc,0xc,0xc,0xc,0xc,0x0,0xc,0xc,0x4,0x0,0x0,0xc,0x4,0x0,0xff	@: 0x2850 9675
	.byte	0x8,0x8,0x8,0xc,0xc,0x4,0x0,0x4,0x0,0x4,0x0,0x0,0x4,0x8,0x0,0xff	@: 0x2860 9690
	.byte	0x8,0x8,0x0,0xc,0x4,0x0,0xc,0xc,0x4,0x4,0x8,0x0,0x4,0x0,0x0,0xff	@: 0x2870 9705
	.byte	0x8,0xc,0xc,0xc,0xc,0xc,0x8,0xc,0x8,0x8,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x2880 9720
	.byte	0x0,0x8,0xc,0x4,0x0,0xc,0x8,0x0,0x0,0x4,0x0,0xc,0x4,0x4,0x4,0xff	@: 0x2890 9735
	.byte	0x0,0x4,0x4,0x0,0x4,0xc,0xc,0x4,0xc,0x0,0x4,0xc,0xc,0x8,0x8,0xff	@: 0x28A0 9750
	.byte	0x4,0xc,0x4,0xc,0x0,0xc,0xc,0x4,0xc,0x4,0xc,0x4,0x0,0x4,0x4,0xff	@: 0x28B0 9765
	.byte	0x0,0x0,0xc,0x0,0xc,0x8,0x8,0xc,0x0,0xc,0x0,0x4,0x0,0x4,0x0,0xff	@: 0x28C0 9780
	.byte	0x8,0x4,0x4,0xc,0x0,0x4,0x8,0xc,0xc,0xc,0xc,0x8,0x4,0xc,0xc,0xff	@: 0x28D0 9795
	.byte	0x0,0xc,0x0,0x0,0x4,0x0,0x8,0x8,0xc,0xc,0xc,0x8,0x8,0xc,0x0,0xff	@: 0x28E0 9810
	.byte	0x4,0x8,0x4,0x0,0x8,0x4,0x8,0xc,0xc,0x8,0x8,0x8,0x0,0x4,0xc,0xff	@: 0x28F0 9825
	.byte	0x8,0x8,0x4,0x8,0x8,0x0,0x0,0x8,0x8,0x4,0xc,0xc,0x0,0x8,0xc,0xff	@: 0x2900 9840
	.byte	0x8,0xc,0x8,0x4,0xc,0x0,0x8,0xc,0xc,0xc,0xc,0x4,0x4,0xc,0x8,0xff	@: 0x2910 9855
	.byte	0x4,0x8,0x0,0xc,0xc,0xc,0xc,0x0,0x4,0x4,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x2920 9870
	.byte	0x8,0xc,0x4,0xc,0x8,0x0,0xc,0x0,0x4,0x4,0x4,0xc,0xc,0x0,0x8,0xff	@: 0x2930 9885
	.byte	0x0,0x8,0x8,0xc,0xc,0x4,0xc,0x0,0xc,0xc,0x8,0x0,0x4,0x0,0xc,0xff	@: 0x2940 9900
	.byte	0x8,0x0,0xc,0x8,0x8,0x8,0x0,0x0,0x4,0x8,0x8,0xc,0x4,0x8,0x4,0xff	@: 0x2950 9915
	.byte	0x0,0x0,0xc,0xc,0xc,0x0,0x0,0x8,0x4,0xc,0x0,0x8,0x4,0x4,0x0,0xff	@: 0x2960 9930
	.byte	0x0,0x0,0x8,0x0,0x8,0x8,0x4,0x4,0x4,0x8,0x4,0x8,0x4,0x0,0x4,0xff	@: 0x2970 9945
	.byte	0x8,0x4,0x0,0x4,0x4,0x4,0xc,0x0,0x4,0x0,0xc,0xc,0x8,0x0,0x8,0xff	@: 0x2980 9960
	.byte	0x0,0xc,0x0,0x0,0x8,0x0,0x8,0x0,0x8,0x8,0x4,0x8,0x4,0x4,0xc,0xff	@: 0x2990 9975
	.byte	0x8,0x4,0x8,0xc,0x0,0x0,0xc,0x0,0xc,0x8,0xc,0xc,0x0,0x8,0x8,0xff	@: 0x29A0 9990
	.byte	0x4,0xc,0x8,0x8,0x8,0xc,0x4,0x0,0x8,0xc,0xc,0x8,0x0,0x8,0x4,0xff	@: 0x29B0 10005
	.byte	0x4,0x0,0x8,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x29C0 10020
	.byte	0x4,0x8,0x0,0xc,0xc,0x4,0x4,0x0,0x8,0x4,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x29D0 10035
	.byte	0x8,0x0,0xc,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0x4,0x8,0xff	@: 0x29E0 10050
	.byte	0x4,0x4,0xc,0x4,0xc,0xc,0x4,0x8,0x0,0x8,0x8,0x4,0x4,0x0,0xc,0xff	@: 0x29F0 10065
	.byte	0x8,0x4,0xc,0x0,0x0,0xc,0x8,0x0,0x4,0x8,0x8,0x0,0x8,0x8,0x8,0xff	@: 0x2A00 10080
	.byte	0xc,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0xc,0xc,0x8,0xc,0xc,0x8,0xff	@: 0x2A10 10095
	.byte	0x4,0x0,0xc,0x4,0x0,0x4,0x4,0xc,0x8,0x8,0x4,0x4,0x4,0x0,0xc,0xff	@: 0x2A20 10110
	.byte	0x4,0x4,0x8,0x8,0x8,0x8,0xc,0xc,0x8,0xc,0x8,0x4,0x4,0x0,0x0,0xff	@: 0x2A30 10125
	.byte	0x0,0x4,0x4,0x4,0x0,0x0,0xc,0x0,0xc,0xc,0xc,0x8,0x4,0x4,0xc,0xff	@: 0x2A40 10140
	.byte	0xc,0x4,0x8,0x0,0x0,0x4,0x8,0x0,0xc,0x8,0x8,0x8,0x8,0xc,0x4,0xff	@: 0x2A50 10155
	.byte	0x4,0xc,0x0,0x4,0x4,0x8,0x0,0x0,0xc,0x0,0x8,0x4,0x0,0x4,0x0,0xff	@: 0x2A60 10170
	.byte	0x0,0x0,0x4,0x4,0xc,0x8,0x8,0x4,0x8,0x4,0x8,0x8,0x0,0x4,0xc,0xff	@: 0x2A70 10185
	.byte	0x8,0xc,0x4,0x8,0x8,0x0,0x0,0x0,0xc,0xc,0xc,0xc,0x0,0x4,0x8,0xff	@: 0x2A80 10200
	.byte	0xc,0xc,0x4,0x0,0xc,0x0,0x4,0xc,0xc,0x4,0x4,0xc,0x4,0x8,0xc,0xff	@: 0x2A90 10215
	.byte	0x0,0x0,0x4,0x0,0x8,0x8,0x4,0x0,0x8,0x4,0x8,0x4,0x4,0x4,0x8,0xff	@: 0x2AA0 10230
	.byte	0xc,0xc,0x4,0x8,0xc,0x8,0x8,0x0,0x8,0x8,0xc,0x0,0xc,0x8,0xc,0xff	@: 0x2AB0 10245
	.byte	0xc,0x4,0x8,0x8,0xc,0x4,0x8,0x0,0x8,0x8,0xc,0x4,0x8,0xc,0x0,0xff	@: 0x2AC0 10260
	.byte	0x0,0x8,0x4,0x4,0x4,0x0,0xc,0xc,0x0,0xc,0x4,0x8,0x8,0x0,0xc,0xff	@: 0x2AD0 10275
	.byte	0xc,0x0,0x4,0x0,0x0,0xc,0xc,0x0,0xc,0x4,0x0,0x8,0xc,0xc,0x4,0xff	@: 0x2AE0 10290
	.byte	0xc,0x0,0xc,0x0,0x0,0x4,0x8,0x4,0xc,0x8,0x8,0xc,0x8,0x4,0x8,0xff	@: 0x2AF0 10305
	.byte	0x0,0x8,0x4,0x0,0xc,0xc,0x0,0x8,0x8,0xc,0x4,0x8,0x0,0x8,0x0,0xff	@: 0x2B00 10320
	.byte	0xc,0xc,0x8,0x0,0x4,0x4,0x4,0x8,0x4,0x4,0x4,0x8,0xc,0x0,0x0,0xff	@: 0x2B10 10335
	.byte	0x4,0xc,0x0,0x0,0x8,0x0,0x8,0x8,0xc,0xc,0x4,0x4,0xc,0xc,0x4,0xff	@: 0x2B20 10350
	.byte	0xc,0x4,0x8,0xc,0xc,0xc,0xc,0x0,0x0,0x4,0x0,0x8,0x4,0x0,0x0,0xff	@: 0x2B30 10365
	.byte	0x0,0xc,0x8,0xc,0x8,0x4,0x8,0x8,0x0,0x0,0x4,0xc,0x8,0x8,0x0,0xff	@: 0x2B40 10380
	.byte	0x8,0x8,0xc,0x4,0x0,0x4,0xc,0x4,0x8,0x4,0xc,0x8,0x8,0x4,0xc,0xff	@: 0x2B50 10395
	.byte	0xc,0xc,0xc,0xc,0xc,0x0,0x8,0x4,0x0,0xc,0x4,0x8,0xc,0xc,0x8,0xff	@: 0x2B60 10410
	.byte	0x4,0xc,0x0,0x4,0xc,0xc,0x8,0x4,0x4,0x4,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x2B70 10425
	.byte	0x4,0x8,0x0,0x0,0x4,0xc,0x8,0x4,0x8,0x8,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x2B80 10440
	.byte	0x4,0x0,0x4,0xc,0x0,0x0,0x0,0x4,0xc,0xc,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x2B90 10455
	.byte	0x0,0x0,0x8,0xc,0x4,0xc,0x8,0x8,0x4,0x8,0xc,0xc,0x0,0xc,0x4,0xff	@: 0x2BA0 10470
	.byte	0xc,0x8,0xc,0x0,0x0,0xc,0x8,0x8,0x0,0xc,0x8,0x8,0x8,0x4,0xc,0xff	@: 0x2BB0 10485
	.byte	0x4,0x8,0xc,0x0,0xc,0x8,0x8,0x8,0x0,0xc,0xc,0xc,0x0,0x8,0x0,0xff	@: 0x2BC0 10500
	.byte	0x8,0x0,0x0,0x8,0x4,0xc,0x8,0x0,0x8,0x0,0x4,0x0,0xc,0x0,0x0,0xff	@: 0x2BD0 10515
	.byte	0x4,0x4,0x4,0x8,0xc,0x8,0xc,0x0,0x0,0xc,0x8,0x4,0xc,0x8,0x0,0xff	@: 0x2BE0 10530
	.byte	0x0,0x4,0xc,0xc,0x0,0x8,0x0,0x0,0x4,0x8,0x0,0xc,0x0,0x8,0x4,0xff	@: 0x2BF0 10545
	.byte	0x8,0x8,0xc,0xc,0x8,0xc,0x0,0x8,0x8,0x4,0x4,0x4,0x8,0xc,0x4,0xff	@: 0x2C00 10560
	.byte	0xc,0x0,0x8,0x8,0x8,0x0,0xc,0xc,0x0,0x0,0x4,0x8,0xc,0x4,0x4,0xff	@: 0x2C10 10575
	.byte	0x4,0x0,0x4,0xc,0x4,0xc,0x8,0x8,0x0,0x8,0x0,0x8,0x4,0x8,0x8,0xff	@: 0x2C20 10590
	.byte	0x4,0x4,0x4,0x8,0x4,0x8,0xc,0xc,0x0,0x8,0xc,0x8,0x4,0x8,0x8,0xff	@: 0x2C30 10605
	.byte	0x0,0xc,0x0,0x4,0x8,0x8,0x8,0x0,0x0,0x8,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x2C40 10620
	.byte	0x0,0xc,0x4,0x4,0x4,0x8,0x0,0x8,0x0,0x0,0x8,0x8,0x0,0x8,0x4,0xff	@: 0x2C50 10635
	.byte	0x4,0xc,0x8,0x0,0x4,0x4,0x4,0xc,0x8,0x8,0x8,0x4,0x4,0xc,0x8,0xff	@: 0x2C60 10650
	.byte	0x0,0x0,0xc,0x0,0xc,0xc,0x0,0xc,0x4,0x0,0x4,0x8,0xc,0x8,0xc,0xff	@: 0x2C70 10665
	.byte	0x8,0x8,0x4,0x4,0x0,0x0,0xc,0xc,0x8,0x0,0x4,0x4,0x4,0x0,0x0,0xff	@: 0x2C80 10680
	.byte	0x0,0xc,0x8,0x4,0x8,0x0,0xc,0x0,0xc,0x4,0xc,0x0,0x8,0x0,0x8,0xff	@: 0x2C90 10695
	.byte	0xc,0xc,0x8,0x4,0x4,0x8,0x8,0xc,0xc,0x4,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x2CA0 10710
	.byte	0xc,0x8,0xc,0x8,0x0,0x8,0xc,0x4,0x0,0x0,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x2CB0 10725
	.byte	0x0,0x0,0xc,0xc,0xc,0xc,0x0,0x0,0x4,0xc,0x8,0x8,0x8,0xc,0xc,0xff	@: 0x2CC0 10740
	.byte	0x0,0xc,0x8,0x0,0x4,0x4,0x0,0x4,0x0,0x8,0x4,0x0,0x0,0x4,0xc,0xff	@: 0x2CD0 10755
	.byte	0x8,0x8,0xc,0xc,0x8,0x0,0x8,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0x4,0xff	@: 0x2CE0 10770
	.byte	0x8,0x8,0x0,0xc,0xc,0x8,0x8,0xc,0x4,0x4,0xc,0xc,0x4,0x0,0xc,0xff	@: 0x2CF0 10785
	.byte	0x4,0x4,0x0,0x0,0x4,0xc,0xc,0xc,0xc,0x0,0x4,0x8,0x4,0xc,0x8,0xff	@: 0x2D00 10800
	.byte	0x0,0x4,0x4,0x4,0x4,0x0,0x0,0x4,0x4,0x0,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x2D10 10815
	.byte	0xc,0xc,0xc,0xc,0xc,0x0,0x0,0xc,0xc,0xc,0x4,0x8,0xc,0x0,0x0,0xff	@: 0x2D20 10830
	.byte	0x4,0xc,0xc,0x0,0x8,0x8,0xc,0xc,0xc,0x4,0xc,0x4,0x8,0x8,0x8,0xff	@: 0x2D30 10845
	.byte	0xc,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0x0,0x4,0x0,0xc,0xc,0x4,0xc,0xff	@: 0x2D40 10860
	.byte	0x8,0x4,0x8,0xc,0x0,0xc,0x0,0x0,0x4,0x0,0x4,0x4,0x8,0x0,0xc,0xff	@: 0x2D50 10875
	.byte	0x4,0x0,0xc,0x4,0x4,0xc,0x0,0x8,0x0,0xc,0xc,0x0,0x4,0xc,0xc,0xff	@: 0x2D60 10890
	.byte	0x4,0x4,0xc,0xc,0x0,0x4,0xc,0x4,0x8,0x8,0x0,0xc,0x4,0x4,0x4,0xff	@: 0x2D70 10905
	.byte	0x4,0x0,0x8,0xc,0x0,0x8,0x4,0x0,0xc,0x8,0x0,0xc,0x8,0x8,0xc,0xff	@: 0x2D80 10920
	.byte	0x8,0x4,0x0,0x0,0x8,0xc,0x0,0x4,0x8,0x0,0x8,0xc,0x0,0x4,0x8,0xff	@: 0x2D90 10935
	.byte	0x8,0x0,0x8,0xc,0xc,0x0,0x4,0x4,0xc,0x4,0x8,0x0,0x0,0xc,0x4,0xff	@: 0x2DA0 10950
	.byte	0xc,0x4,0xc,0x8,0xc,0x8,0x0,0x8,0x8,0x0,0x8,0x4,0x4,0x8,0xc,0xff	@: 0x2DB0 10965
	.byte	0x4,0x0,0x4,0x0,0x4,0x4,0x8,0x4,0xc,0x4,0x4,0xc,0xc,0x0,0x8,0xff	@: 0x2DC0 10980
	.byte	0x8,0x8,0x8,0x8,0xc,0x8,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x4,0xff	@: 0x2DD0 10995
	.byte	0x4,0xc,0x0,0x0,0x0,0x0,0x4,0x8,0xc,0x4,0xc,0x4,0x4,0xc,0x4,0xff	@: 0x2DE0 11010
	.byte	0x0,0x4,0xc,0x0,0x0,0x0,0xc,0x8,0x8,0x8,0x8,0x8,0x0,0x0,0x4,0xff	@: 0x2DF0 11025
	.byte	0xc,0x0,0xc,0xc,0xc,0x8,0x0,0x8,0x0,0x0,0xc,0x4,0x4,0x0,0x0,0xff	@: 0x2E00 11040
	.byte	0x8,0xc,0x0,0x0,0x0,0x4,0xc,0x0,0x0,0x8,0x8,0x8,0x0,0xc,0xc,0xff	@: 0x2E10 11055
	.byte	0xc,0x8,0x8,0x4,0x0,0x8,0x4,0xc,0x4,0x4,0x8,0xc,0x0,0x0,0x8,0xff	@: 0x2E20 11070
	.byte	0x8,0x0,0x8,0x0,0xc,0x8,0x0,0x4,0x8,0xc,0x0,0x4,0x0,0x4,0x0,0xff	@: 0x2E30 11085
	.byte	0xc,0x0,0x0,0xc,0x4,0xc,0xc,0x4,0x8,0x0,0x0,0x8,0x4,0x8,0x0,0xff	@: 0x2E40 11100
	.byte	0xc,0x0,0x4,0x8,0x0,0x0,0x8,0xc,0x4,0xc,0x4,0x4,0xc,0x8,0x4,0xff	@: 0x2E50 11115
	.byte	0x8,0x4,0x0,0xc,0xc,0xc,0x4,0x4,0x0,0x4,0x8,0x8,0x4,0x0,0x8,0xff	@: 0x2E60 11130
	.byte	0xc,0x0,0xc,0xc,0x4,0x8,0x8,0x4,0x0,0x4,0x0,0x8,0x0,0x4,0xc,0xff	@: 0x2E70 11145
	.byte	0x0,0x8,0x4,0x0,0xc,0x0,0xc,0x4,0x4,0xc,0xc,0x0,0x0,0x4,0x0,0xff	@: 0x2E80 11160
	.byte	0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x8,0x8,0x8,0x0,0x8,0x4,0x8,0x4,0xff	@: 0x2E90 11175
	.byte	0x8,0xc,0xc,0x4,0x0,0x8,0x4,0x8,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0xff	@: 0x2EA0 11190
	.byte	0x4,0xc,0x4,0xc,0x4,0x0,0x8,0x8,0xc,0x0,0x0,0x0,0x8,0x4,0x8,0xff	@: 0x2EB0 11205
	.byte	0x8,0x8,0x8,0x4,0xc,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x2EC0 11220
	.byte	0xc,0x8,0x8,0xc,0x0,0x8,0x8,0x0,0xc,0x4,0x4,0x8,0x8,0xc,0x4,0xff	@: 0x2ED0 11235
	.byte	0x8,0x8,0x4,0x0,0x8,0x8,0x8,0x4,0x4,0xc,0xc,0x8,0x0,0x8,0xc,0xff	@: 0x2EE0 11250
	.byte	0x4,0x4,0xc,0x8,0x4,0x0,0x4,0x4,0x8,0xc,0x0,0x8,0x0,0x8,0x0,0xff	@: 0x2EF0 11265
	.byte	0xc,0xc,0xc,0x8,0x8,0x8,0xc,0xc,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0xff	@: 0x2F00 11280
	.byte	0x8,0x8,0x8,0x4,0x0,0x4,0x0,0x8,0x4,0x4,0x8,0x4,0xc,0x4,0x8,0xff	@: 0x2F10 11295
	.byte	0x8,0x0,0x8,0x0,0x4,0x0,0x4,0x4,0x4,0xc,0x8,0x8,0xc,0xc,0x0,0xff	@: 0x2F20 11310
	.byte	0x0,0x4,0xc,0x4,0x4,0xc,0x8,0x0,0xc,0x0,0x8,0x4,0x8,0xc,0x8,0xff	@: 0x2F30 11325
	.byte	0x0,0x0,0x4,0x4,0xc,0x4,0x4,0x4,0xc,0x4,0x0,0x4,0x4,0xc,0x4,0xff	@: 0x2F40 11340
	.byte	0x0,0x8,0x8,0x8,0x8,0x8,0x4,0x4,0x4,0x4,0x8,0x8,0xc,0xc,0xc,0xff	@: 0x2F50 11355
	.byte	0x0,0x4,0xc,0x4,0xc,0xc,0x0,0x4,0x0,0x0,0xc,0xc,0x8,0xc,0x4,0xff	@: 0x2F60 11370
	.byte	0x4,0x4,0x4,0x0,0x8,0xc,0x8,0xc,0x4,0x8,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x2F70 11385
	.byte	0x4,0xc,0x8,0x0,0x4,0x8,0x0,0x0,0xc,0x4,0x4,0xc,0x0,0x8,0xc,0xff	@: 0x2F80 11400
	.byte	0xc,0x4,0x4,0x0,0x4,0x0,0x0,0x8,0x0,0x8,0x0,0x4,0x0,0x8,0x8,0xff	@: 0x2F90 11415
	.byte	0x4,0x4,0x0,0x8,0x4,0x8,0xc,0x0,0x0,0x0,0x0,0x8,0x0,0x4,0x0,0xff	@: 0x2FA0 11430
	.byte	0x0,0x0,0xc,0x0,0x8,0x8,0x8,0x4,0xc,0xc,0x0,0xc,0x4,0xc,0x4,0xff	@: 0x2FB0 11445
	.byte	0x8,0x8,0x4,0x8,0x0,0x8,0x8,0x0,0x4,0x4,0x4,0xc,0x4,0x8,0xc,0xff	@: 0x2FC0 11460
	.byte	0x0,0xc,0x4,0x0,0x4,0xc,0xc,0x4,0xc,0x0,0x0,0xc,0x4,0xc,0x0,0xff	@: 0x2FD0 11475
	.byte	0xc,0x0,0x8,0x4,0xc,0x8,0x8,0x8,0x8,0xc,0x0,0x0,0x4,0x0,0x4,0xff	@: 0x2FE0 11490
	.byte	0x0,0x4,0x8,0x8,0xc,0x0,0x8,0xc,0x0,0x4,0x8,0x4,0x0,0x0,0x8,0xff	@: 0x2FF0 11505
	.byte	0x0,0x4,0xc,0x4,0x8,0xc,0xc,0x0,0x8,0x8,0xc,0xc,0x4,0x4,0x8,0xff	@: 0x3000 11520
	.byte	0x8,0x8,0x0,0x8,0xc,0x0,0x0,0x8,0x4,0x4,0x0,0x0,0x4,0xc,0x8,0xff	@: 0x3010 11535
	.byte	0x4,0xc,0x0,0x8,0x0,0x0,0xc,0x4,0x8,0xc,0xc,0x0,0x4,0x4,0x0,0xff	@: 0x3020 11550
	.byte	0x0,0x0,0x4,0x8,0x8,0x0,0x0,0xc,0x8,0xc,0x0,0x8,0x8,0x8,0xc,0xff	@: 0x3030 11565
	.byte	0x4,0x8,0x4,0x0,0x4,0xc,0xc,0x0,0x8,0x0,0x4,0xc,0xc,0xc,0xc,0xff	@: 0x3040 11580
	.byte	0x0,0x0,0xc,0xc,0x8,0x8,0x0,0xc,0x0,0x8,0xc,0x0,0x4,0x0,0x0,0xff	@: 0x3050 11595
	.byte	0x8,0x4,0x4,0x4,0x4,0xc,0x8,0x8,0x8,0xc,0xc,0x8,0x0,0x8,0x4,0xff	@: 0x3060 11610
	.byte	0x0,0x8,0xc,0x8,0x4,0xc,0x4,0x0,0x4,0xc,0xc,0x8,0x4,0x0,0x8,0xff	@: 0x3070 11625
	.byte	0xc,0xc,0x0,0xc,0x8,0x0,0xc,0x8,0x4,0x4,0x0,0x4,0x8,0x4,0x4,0xff	@: 0x3080 11640
	.byte	0x8,0xc,0xc,0x4,0x4,0xc,0x8,0x0,0x8,0x8,0x4,0xc,0x0,0x4,0x8,0xff	@: 0x3090 11655
	.byte	0x0,0x4,0x8,0xc,0x0,0x0,0x8,0x0,0xc,0x8,0xc,0x8,0xc,0x4,0xc,0xff	@: 0x30A0 11670
	.byte	0x8,0xc,0xc,0x0,0x4,0x0,0xc,0xc,0x4,0xc,0x4,0x8,0xc,0xc,0x8,0xff	@: 0x30B0 11685
	.byte	0x4,0x0,0x4,0x0,0x0,0x0,0xc,0x4,0x4,0xc,0x8,0x0,0x0,0x8,0xc,0xff	@: 0x30C0 11700
	.byte	0x8,0x4,0x0,0x4,0x4,0x4,0x0,0xc,0x0,0xc,0x0,0x4,0x0,0xc,0x8,0xff	@: 0x30D0 11715
	.byte	0x8,0xc,0x8,0x4,0x4,0x0,0xc,0x4,0x8,0x8,0x8,0x8,0xc,0x8,0x0,0xff	@: 0x30E0 11730
	.byte	0xc,0x0,0x4,0xc,0x0,0x0,0x8,0x8,0x0,0x0,0x8,0xc,0xc,0x0,0x4,0xff	@: 0x30F0 11745
	.byte	0x8,0x8,0x0,0x8,0x4,0x4,0x8,0x4,0x4,0x4,0x4,0x4,0x4,0x8,0xc,0xff	@: 0x3100 11760
	.byte	0xc,0x4,0x4,0x0,0x4,0xc,0x4,0x4,0x8,0x4,0x0,0x4,0xc,0x8,0x0,0xff	@: 0x3110 11775
	.byte	0x8,0x4,0xc,0xc,0x4,0x4,0x4,0x4,0x0,0x8,0x0,0x8,0x4,0x8,0x0,0xff	@: 0x3120 11790
	.byte	0xc,0x4,0x4,0x0,0x4,0x0,0xc,0x0,0x0,0x8,0xc,0x4,0x8,0x0,0xc,0xff	@: 0x3130 11805
	.byte	0xc,0x0,0xc,0x8,0xc,0x8,0xc,0xc,0x8,0x4,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x3140 11820
	.byte	0x0,0x0,0x4,0x0,0xc,0x4,0x0,0x4,0x4,0x8,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x3150 11835
	.byte	0x4,0x8,0xc,0x4,0x8,0x4,0x8,0xc,0x4,0x4,0x8,0x0,0x0,0xc,0xc,0xff	@: 0x3160 11850
	.byte	0x4,0xc,0x4,0x4,0x0,0x8,0x8,0xc,0xc,0xc,0x0,0x0,0xc,0xc,0x8,0xff	@: 0x3170 11865
	.byte	0xc,0x0,0x0,0x0,0x4,0x0,0xc,0x0,0xc,0xc,0x4,0x8,0xc,0x4,0xc,0xff	@: 0x3180 11880
	.byte	0x8,0x8,0x0,0xc,0xc,0x8,0x4,0x0,0x0,0xc,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x3190 11895
	.byte	0x0,0xc,0xc,0x8,0xc,0x8,0xc,0x8,0x4,0x4,0x4,0xc,0x0,0x0,0xc,0xff	@: 0x31A0 11910
	.byte	0x0,0xc,0x4,0x0,0x8,0x0,0x0,0x8,0xc,0x4,0x8,0xc,0x4,0x8,0xc,0xff	@: 0x31B0 11925
	.byte	0x0,0x8,0x0,0x8,0xc,0x0,0xc,0x8,0x0,0x4,0x4,0xc,0x0,0x4,0x0,0xff	@: 0x31C0 11940
	.byte	0x8,0xc,0x0,0x4,0x4,0x8,0x8,0x0,0x8,0x4,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x31D0 11955
	.byte	0x8,0x4,0x0,0x0,0x0,0x4,0xc,0xc,0x0,0x0,0x8,0x4,0xc,0x8,0xc,0xff	@: 0x31E0 11970
	.byte	0xc,0x0,0xc,0xc,0x8,0xc,0x8,0x0,0xc,0xc,0x0,0x8,0xc,0x8,0x8,0xff	@: 0x31F0 11985
	.byte	0xc,0x4,0x8,0x0,0xc,0x8,0xc,0xc,0xc,0x0,0x0,0x4,0x8,0xc,0x4,0xff	@: 0x3200 12000
	.byte	0x0,0x0,0x8,0x4,0x0,0xc,0x4,0xc,0xc,0x0,0x4,0x0,0xc,0xc,0x8,0xff	@: 0x3210 12015
	.byte	0xc,0xc,0x0,0xc,0x4,0xc,0x8,0x8,0x8,0x8,0x0,0xc,0x8,0x4,0x0,0xff	@: 0x3220 12030
	.byte	0x0,0x8,0x4,0x8,0x0,0xc,0x8,0xc,0xc,0x8,0xc,0x0,0x8,0x0,0x4,0xff	@: 0x3230 12045
	.byte	0x8,0x4,0x0,0x4,0xc,0xc,0xc,0x4,0x8,0x0,0x8,0x8,0x8,0x4,0x8,0xff	@: 0x3240 12060
	.byte	0xc,0xc,0x8,0x4,0x0,0x8,0xc,0x4,0x4,0xc,0x0,0xc,0x0,0x0,0x0,0xff	@: 0x3250 12075
	.byte	0x8,0xc,0x8,0x8,0xc,0xc,0x8,0xc,0xc,0x8,0x4,0x0,0x0,0x0,0x4,0xff	@: 0x3260 12090
	.byte	0x4,0xc,0x8,0x4,0xc,0x4,0xc,0xc,0x8,0xc,0x4,0x0,0x8,0x8,0x0,0xff	@: 0x3270 12105
	.byte	0x8,0x8,0x8,0x0,0xc,0xc,0x4,0x4,0x0,0x4,0x4,0xc,0x8,0x0,0x8,0xff	@: 0x3280 12120
	.byte	0x4,0x4,0x8,0xc,0x4,0x0,0x0,0xc,0x8,0x0,0x4,0x4,0x4,0xc,0xc,0xff	@: 0x3290 12135
	.byte	0x0,0x4,0x8,0x8,0x4,0x8,0xc,0x0,0x4,0x8,0x8,0x4,0x0,0xc,0x8,0xff	@: 0x32A0 12150
	.byte	0x4,0xc,0x8,0x8,0x0,0x8,0x4,0xc,0x4,0x0,0x8,0xc,0xc,0xc,0xc,0xff	@: 0x32B0 12165
	.byte	0x8,0x8,0x0,0x4,0x0,0x0,0x4,0x0,0xc,0x0,0x0,0x8,0x8,0x0,0xc,0xff	@: 0x32C0 12180
	.byte	0x8,0xc,0x0,0x4,0xc,0x4,0x8,0x8,0x0,0x4,0x0,0x4,0x0,0x4,0x4,0xff	@: 0x32D0 12195
	.byte	0x8,0xc,0xc,0x0,0xc,0x0,0x4,0xc,0x0,0xc,0xc,0x8,0xc,0xc,0xc,0xff	@: 0x32E0 12210
	.byte	0x0,0x8,0x4,0x0,0xc,0x0,0xc,0x8,0x8,0x4,0x8,0xc,0x4,0x8,0x0,0xff	@: 0x32F0 12225
	.byte	0xc,0xc,0x0,0x4,0xc,0xc,0xc,0x0,0x8,0xc,0x0,0x4,0x8,0x8,0x4,0xff	@: 0x3300 12240
	.byte	0xc,0x8,0x0,0x8,0x0,0x8,0xc,0x0,0x0,0x8,0x8,0x4,0xc,0xc,0x8,0xff	@: 0x3310 12255
	.byte	0x4,0x4,0x8,0x0,0x0,0xc,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x0,0x4,0xff	@: 0x3320 12270
	.byte	0xc,0x0,0x0,0x4,0x0,0x4,0x0,0xc,0x4,0x8,0xc,0xc,0x8,0x8,0x8,0xff	@: 0x3330 12285
	.byte	0xc,0x8,0xc,0x0,0x4,0x4,0xc,0x4,0x8,0x4,0xc,0x8,0x0,0xc,0x0,0xff	@: 0x3340 12300
	.byte	0xc,0xc,0xc,0x8,0xc,0x0,0x4,0x0,0x0,0xc,0x0,0xc,0x0,0x0,0x4,0xff	@: 0x3350 12315
	.byte	0x0,0x4,0x4,0xc,0x8,0x8,0x4,0x4,0xc,0x0,0xc,0x4,0x0,0x0,0x0,0xff	@: 0x3360 12330
	.byte	0x4,0x0,0x8,0x0,0x8,0x4,0x0,0x8,0x0,0x4,0xc,0x0,0x4,0x4,0x0,0xff	@: 0x3370 12345
	.byte	0x8,0xc,0x8,0xc,0xc,0xc,0x4,0x4,0x4,0x4,0x8,0xc,0x0,0xc,0x4,0xff	@: 0x3380 12360
	.byte	0x4,0x8,0x4,0x4,0xc,0x8,0x4,0x0,0x0,0x0,0x4,0x8,0x4,0x8,0x8,0xff	@: 0x3390 12375
	.byte	0x8,0xc,0xc,0xc,0x4,0xc,0x4,0x8,0x4,0xc,0xc,0x0,0x8,0xc,0xc,0xff	@: 0x33A0 12390
	.byte	0xc,0xc,0x0,0xc,0x8,0x0,0x8,0x4,0x4,0xc,0x4,0xc,0x0,0xc,0x8,0xff	@: 0x33B0 12405
	.byte	0xc,0x0,0x0,0x8,0xc,0x8,0x4,0x4,0xc,0x4,0x4,0x4,0x4,0x4,0xc,0xff	@: 0x33C0 12420
	.byte	0x0,0xc,0x0,0x8,0xc,0x8,0x4,0xc,0x8,0x4,0x8,0xc,0x8,0x4,0x0,0xff	@: 0x33D0 12435
	.byte	0xc,0xc,0x0,0xc,0x0,0x4,0x0,0x0,0x8,0x4,0x4,0xc,0x4,0xc,0x4,0xff	@: 0x33E0 12450
	.byte	0xc,0xc,0x0,0x8,0x8,0x8,0x0,0x0,0x8,0x8,0x4,0xc,0x4,0x4,0x4,0xff	@: 0x33F0 12465
	.byte	0x0,0xc,0x8,0xc,0x0,0x8,0x0,0x4,0x0,0x8,0xc,0x8,0x8,0x0,0x4,0xff	@: 0x3400 12480
	.byte	0x4,0x8,0x4,0x4,0xc,0x0,0x8,0x0,0x4,0x0,0x8,0xc,0x4,0xc,0xc,0xff	@: 0x3410 12495
	.byte	0x4,0x0,0xc,0x4,0xc,0xc,0x8,0x4,0xc,0x0,0xc,0x4,0x0,0xc,0xc,0xff	@: 0x3420 12510
	.byte	0xc,0x8,0x8,0x4,0x8,0xc,0xc,0xc,0x0,0x4,0x4,0x0,0xc,0x4,0x8,0xff	@: 0x3430 12525
	.byte	0xc,0x4,0xc,0xc,0x0,0xc,0x0,0x4,0x0,0xc,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x3440 12540
	.byte	0x0,0xc,0x8,0x8,0x8,0x4,0x4,0xc,0x8,0x4,0x0,0x8,0x4,0x0,0x8,0xff	@: 0x3450 12555
	.byte	0xc,0xc,0x0,0x4,0x0,0xc,0x0,0x0,0xc,0x4,0xc,0x8,0x4,0xc,0x8,0xff	@: 0x3460 12570
	.byte	0xc,0x8,0x4,0x8,0xc,0x8,0xc,0x0,0x8,0x4,0xc,0x0,0x8,0x8,0x8,0xff	@: 0x3470 12585
	.byte	0x8,0x4,0x8,0x0,0xc,0x0,0x4,0x8,0xc,0x8,0x0,0x0,0x0,0x4,0x4,0xff	@: 0x3480 12600
	.byte	0xc,0x8,0x0,0x8,0x4,0x8,0x4,0x4,0x4,0x0,0x4,0xc,0x0,0x0,0x4,0xff	@: 0x3490 12615
	.byte	0xc,0x0,0xc,0x4,0xc,0x8,0x8,0x4,0x8,0xc,0x0,0x4,0x0,0x4,0xc,0xff	@: 0x34A0 12630
	.byte	0xc,0x0,0x0,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x0,0xc,0xc,0x0,0xc,0xff	@: 0x34B0 12645
	.byte	0x0,0x4,0x8,0x0,0xc,0x8,0xc,0xc,0xc,0x8,0x4,0xc,0xc,0x8,0x0,0xff	@: 0x34C0 12660
	.byte	0x4,0xc,0x8,0x8,0xc,0x4,0xc,0x0,0x4,0x4,0x8,0x0,0x8,0x8,0x8,0xff	@: 0x34D0 12675
	.byte	0x0,0x0,0x4,0xc,0xc,0x8,0x0,0x0,0x0,0x8,0x4,0x0,0xc,0x8,0x8,0xff	@: 0x34E0 12690
	.byte	0xc,0x0,0x0,0x8,0x4,0xc,0xc,0x4,0x0,0x4,0x0,0x0,0x4,0x4,0x0,0xff	@: 0x34F0 12705
	.byte	0xc,0x4,0x0,0xc,0xc,0x4,0x0,0xc,0x4,0x0,0x4,0xc,0x8,0x0,0xc,0xff	@: 0x3500 12720
	.byte	0xc,0xc,0xc,0x4,0x0,0x4,0x0,0x0,0x4,0x8,0xc,0x0,0x4,0x0,0xc,0xff	@: 0x3510 12735
	.byte	0x0,0xc,0x8,0x4,0x0,0x4,0x4,0x4,0xc,0x8,0x4,0xc,0x0,0x0,0x4,0xff	@: 0x3520 12750
	.byte	0xc,0x0,0x0,0xc,0x8,0xc,0x4,0x8,0x0,0xc,0x4,0x8,0x4,0x8,0x0,0xff	@: 0x3530 12765
	.byte	0x0,0x8,0x4,0x0,0x0,0x4,0x4,0x0,0x4,0x8,0x0,0x0,0x4,0x8,0x8,0xff	@: 0x3540 12780
	.byte	0xc,0x8,0x0,0xc,0x0,0xc,0x0,0x4,0x4,0x8,0xc,0x0,0x8,0xc,0x8,0xff	@: 0x3550 12795
	.byte	0x0,0x4,0x0,0x4,0x8,0x8,0xc,0x0,0x8,0x0,0x0,0x4,0xc,0x0,0x0,0xff	@: 0x3560 12810
	.byte	0xc,0x8,0x0,0x4,0xc,0x4,0xc,0x4,0x0,0xc,0xc,0xc,0x0,0x8,0xc,0xff	@: 0x3570 12825
	.byte	0x8,0xc,0x0,0x4,0x8,0xc,0x0,0x8,0x8,0x4,0x8,0x8,0x4,0x8,0xc,0xff	@: 0x3580 12840
	.byte	0xc,0x4,0xc,0x0,0xc,0x4,0x4,0xc,0xc,0x4,0x4,0xc,0x8,0x4,0xc,0xff	@: 0x3590 12855
	.byte	0x4,0x0,0x8,0x8,0xc,0x4,0xc,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0xc,0xff	@: 0x35A0 12870
	.byte	0x4,0x4,0x8,0x0,0x4,0x8,0x8,0xc,0x0,0x4,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x35B0 12885
	.byte	0x4,0x0,0x0,0x8,0x0,0xc,0x8,0x0,0x0,0x0,0xc,0xc,0x4,0x0,0xc,0xff	@: 0x35C0 12900
	.byte	0x0,0x4,0x4,0x0,0x8,0x8,0x8,0x0,0x8,0x8,0xc,0x4,0x8,0x4,0x8,0xff	@: 0x35D0 12915
	.byte	0xc,0x8,0x4,0x4,0x8,0xc,0xc,0x8,0x8,0xc,0xc,0xc,0x0,0x0,0x4,0xff	@: 0x35E0 12930
	.byte	0x4,0x4,0x8,0x8,0x8,0x0,0xc,0xc,0x0,0x8,0x4,0x8,0x8,0x0,0x8,0xff	@: 0x35F0 12945
	.byte	0x8,0x4,0x4,0xc,0x8,0x0,0x4,0xc,0x4,0x4,0x0,0xc,0x8,0xc,0x8,0xff	@: 0x3600 12960
	.byte	0xc,0xc,0xc,0x8,0x0,0x4,0x0,0x8,0x8,0xc,0xc,0x0,0x4,0x0,0x0,0xff	@: 0x3610 12975
	.byte	0xc,0xc,0x8,0xc,0x4,0x8,0x0,0xc,0x0,0xc,0xc,0x4,0x4,0xc,0x0,0xff	@: 0x3620 12990
	.byte	0xc,0xc,0x0,0xc,0x8,0x4,0x8,0x8,0x0,0x4,0x4,0x0,0x0,0xc,0x8,0xff	@: 0x3630 13005
	.byte	0x4,0xc,0x0,0x4,0x8,0x0,0x0,0xc,0x0,0x4,0x8,0x0,0x8,0xc,0xc,0xff	@: 0x3640 13020
	.byte	0x0,0xc,0xc,0x0,0x4,0xc,0x0,0x4,0x4,0x4,0x4,0xc,0x0,0x4,0x8,0xff	@: 0x3650 13035
	.byte	0xc,0xc,0x8,0x8,0x8,0x0,0xc,0x4,0x0,0x8,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x3660 13050
	.byte	0xc,0x8,0x4,0x0,0xc,0x0,0xc,0xc,0x8,0x8,0x4,0x4,0x4,0xc,0x0,0xff	@: 0x3670 13065
	.byte	0x4,0x0,0x8,0x4,0x4,0x8,0x4,0x8,0x0,0x0,0xc,0x8,0x8,0x4,0xc,0xff	@: 0x3680 13080
	.byte	0x0,0x0,0xc,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0xc,0x8,0xc,0xc,0x8,0xff	@: 0x3690 13095
	.byte	0x4,0x4,0x0,0x0,0xc,0xc,0x0,0x4,0xc,0x8,0x0,0x8,0x0,0x4,0x8,0xff	@: 0x36A0 13110
	.byte	0x8,0x8,0x0,0x8,0xc,0x8,0x4,0xc,0x8,0x4,0x4,0xc,0x4,0x4,0x8,0xff	@: 0x36B0 13125
	.byte	0x4,0x0,0x0,0x8,0x0,0x8,0x4,0xc,0x4,0x4,0x8,0x4,0x0,0x0,0x0,0xff	@: 0x36C0 13140
	.byte	0xc,0x4,0x4,0xc,0x4,0x4,0xc,0x8,0x0,0xc,0x4,0x4,0x8,0x0,0x0,0xff	@: 0x36D0 13155
	.byte	0x4,0x0,0x8,0x8,0x4,0xc,0x4,0x8,0xc,0xc,0x0,0xc,0xc,0x8,0x8,0xff	@: 0x36E0 13170
	.byte	0xc,0x8,0xc,0x8,0x4,0x4,0x0,0x0,0x0,0x0,0x8,0x0,0x4,0xc,0x4,0xff	@: 0x36F0 13185
	.byte	0xc,0x8,0x8,0xc,0x8,0x8,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x4,0x8,0xff	@: 0x3700 13200
	.byte	0x8,0x4,0x4,0x0,0x4,0x4,0x0,0x4,0x4,0x4,0xc,0x4,0xc,0x0,0x0,0xff	@: 0x3710 13215
	.byte	0xc,0xc,0xc,0x0,0x4,0x0,0xc,0x0,0x4,0x8,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x3720 13230
	.byte	0x8,0x0,0x4,0x4,0x0,0xc,0x8,0x4,0xc,0x0,0x0,0x0,0x8,0x4,0x0,0xff	@: 0x3730 13245
	.byte	0x0,0x4,0x8,0x0,0xc,0x4,0x8,0x8,0x0,0x4,0x8,0x8,0x8,0x8,0x0,0xff	@: 0x3740 13260
	.byte	0x8,0xc,0x4,0x0,0x0,0x8,0x4,0x0,0x0,0xc,0x4,0xc,0xc,0x4,0x4,0xff	@: 0x3750 13275
	.byte	0xc,0x4,0x4,0x8,0x8,0x4,0x8,0x0,0x0,0xc,0x8,0xc,0xc,0x0,0x8,0xff	@: 0x3760 13290
	.byte	0x8,0x0,0x0,0x0,0x0,0xc,0xc,0x8,0x4,0x4,0x4,0x0,0x4,0xc,0xc,0xff	@: 0x3770 13305
	.byte	0xc,0xc,0xc,0xc,0x0,0x8,0x0,0x8,0xc,0x0,0x8,0xc,0x0,0xc,0xc,0xff	@: 0x3780 13320
	.byte	0xc,0x4,0x4,0x4,0x4,0x4,0xc,0x0,0x8,0x8,0x0,0x4,0x0,0xc,0x0,0xff	@: 0x3790 13335
	.byte	0x8,0x0,0x0,0x4,0x8,0x4,0x0,0x8,0x8,0x8,0x0,0x4,0x0,0x8,0xc,0xff	@: 0x37A0 13350
	.byte	0x8,0x4,0x4,0xc,0x8,0xc,0x4,0xc,0x4,0xc,0xc,0xc,0x4,0x0,0x8,0xff	@: 0x37B0 13365
	.byte	0x0,0xc,0xc,0xc,0x4,0x4,0x8,0x0,0xc,0x0,0x4,0x4,0xc,0x8,0x8,0xff	@: 0x37C0 13380
	.byte	0x8,0x0,0x0,0x8,0xc,0x0,0xc,0x0,0x4,0xc,0x4,0x4,0x8,0x0,0x8,0xff	@: 0x37D0 13395
	.byte	0x8,0x4,0x0,0x4,0xc,0x4,0x4,0x8,0x0,0x4,0x8,0x8,0xc,0x0,0x8,0xff	@: 0x37E0 13410
	.byte	0x0,0x4,0x4,0x8,0x0,0x4,0x8,0x0,0x0,0x0,0x4,0x8,0x4,0xc,0x4,0xff	@: 0x37F0 13425
	.byte	0x8,0x4,0x8,0xc,0xc,0x0,0x8,0x8,0xc,0x4,0x0,0xc,0x0,0x0,0x0,0xff	@: 0x3800 13440
	.byte	0xc,0x8,0x0,0x0,0x8,0x8,0xc,0x4,0x0,0x4,0x0,0x0,0x4,0x8,0xc,0xff	@: 0x3810 13455
	.byte	0x8,0x0,0x4,0x8,0x8,0x4,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x8,0x0,0xff	@: 0x3820 13470
	.byte	0x8,0xc,0x8,0x4,0xc,0x4,0xc,0x0,0xc,0xc,0x4,0xc,0x8,0x8,0xc,0xff	@: 0x3830 13485
	.byte	0x8,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x8,0x4,0xc,0x4,0x0,0x4,0x0,0xff	@: 0x3840 13500
	.byte	0xc,0xc,0x4,0x8,0xc,0xc,0x4,0xc,0xc,0x4,0xc,0x4,0x8,0x8,0x0,0xff	@: 0x3850 13515
	.byte	0xc,0x8,0x4,0x8,0x0,0x0,0x0,0x8,0x8,0x4,0xc,0x4,0xc,0x4,0x8,0xff	@: 0x3860 13530
	.byte	0xc,0x4,0x8,0xc,0x0,0x8,0xc,0x4,0xc,0x8,0x0,0x8,0xc,0x4,0x0,0xff	@: 0x3870 13545
	.byte	0x4,0x8,0x8,0x0,0x4,0x4,0x4,0xc,0x0,0xc,0x0,0xc,0x0,0x4,0xc,0xff	@: 0x3880 13560
	.byte	0x8,0x0,0x0,0x4,0x8,0x4,0xc,0xc,0x8,0x8,0x8,0xc,0x0,0x4,0x0,0xff	@: 0x3890 13575
	.byte	0x4,0x8,0x8,0x8,0xc,0x4,0x4,0x0,0x8,0x8,0xc,0x8,0xc,0xc,0x4,0xff	@: 0x38A0 13590
	.byte	0x8,0xc,0x0,0x8,0x0,0xc,0xc,0xc,0x0,0x8,0x4,0xc,0xc,0x0,0x4,0xff	@: 0x38B0 13605
	.byte	0x4,0xc,0x4,0xc,0x8,0x8,0x0,0x4,0x0,0x4,0x4,0x8,0xc,0x0,0x8,0xff	@: 0x38C0 13620
	.byte	0x4,0xc,0x0,0x0,0x0,0x4,0x8,0x0,0x4,0x0,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x38D0 13635
	.byte	0x4,0xc,0xc,0xc,0x0,0x0,0x8,0x8,0x4,0x8,0x8,0xc,0xc,0x8,0x8,0xff	@: 0x38E0 13650
	.byte	0x4,0x8,0x4,0xc,0xc,0x4,0x8,0x8,0xc,0x4,0x8,0x0,0x4,0xc,0x4,0xff	@: 0x38F0 13665
	.byte	0x8,0x0,0x0,0x4,0x8,0x4,0x8,0x0,0x0,0x4,0x8,0xc,0x0,0x8,0x8,0xff	@: 0x3900 13680
	.byte	0x4,0x0,0xc,0x4,0x8,0xc,0x8,0x4,0x4,0x0,0x0,0x4,0x0,0xc,0x0,0xff	@: 0x3910 13695
	.byte	0x0,0x0,0x8,0x8,0x4,0x0,0x4,0x0,0x4,0x8,0xc,0x8,0x4,0x0,0xc,0xff	@: 0x3920 13710
	.byte	0x4,0xc,0x4,0xc,0x8,0x0,0xc,0x4,0xc,0x0,0x0,0xc,0x0,0x0,0x8,0xff	@: 0x3930 13725
	.byte	0x0,0x4,0x8,0x8,0xc,0x8,0x4,0x4,0x4,0x8,0x0,0xc,0xc,0x4,0x8,0xff	@: 0x3940 13740
	.byte	0x4,0x0,0xc,0x0,0x0,0x4,0x8,0x4,0x0,0xc,0x4,0xc,0xc,0x4,0x8,0xff	@: 0x3950 13755
	.byte	0x4,0x8,0x4,0x8,0xc,0xc,0x4,0xc,0xc,0x8,0xc,0xc,0x8,0xc,0x4,0xff	@: 0x3960 13770
	.byte	0x4,0xc,0xc,0x0,0x8,0x8,0x0,0xc,0xc,0xc,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x3970 13785
	.byte	0xc,0x0,0x4,0x4,0x4,0xc,0x4,0x4,0xc,0x0,0x4,0xc,0x8,0x8,0x8,0xff	@: 0x3980 13800
	.byte	0xc,0xc,0x4,0x4,0x8,0xc,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0xc,0x0,0xff	@: 0x3990 13815
	.byte	0x4,0x0,0x4,0x8,0x0,0x0,0x0,0xc,0xc,0xc,0x8,0x8,0x8,0x4,0x0,0xff	@: 0x39A0 13830
	.byte	0x4,0x4,0x8,0x4,0x8,0x4,0xc,0x0,0x4,0x4,0x0,0x8,0x4,0xc,0xc,0xff	@: 0x39B0 13845
	.byte	0xc,0x8,0x8,0x8,0xc,0x8,0xc,0x8,0x4,0x8,0xc,0x0,0x8,0x8,0xc,0xff	@: 0x39C0 13860
	.byte	0x0,0x0,0x4,0x4,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x8,0x8,0x4,0xc,0xff	@: 0x39D0 13875
	.byte	0x4,0xc,0x4,0x4,0xc,0xc,0x4,0xc,0x8,0xc,0x4,0xc,0x0,0x4,0x4,0xff	@: 0x39E0 13890
	.byte	0x4,0x8,0xc,0xc,0x4,0xc,0x0,0x4,0x8,0x4,0x4,0x0,0x8,0x8,0x4,0xff	@: 0x39F0 13905
	.byte	0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x8,0xc,0x4,0xc,0x8,0xc,0x0,0xff	@: 0x3A00 13920
	.byte	0x0,0x8,0xc,0x8,0x0,0xc,0x0,0x8,0x4,0xc,0x0,0xc,0x8,0x0,0x8,0xff	@: 0x3A10 13935
	.byte	0x0,0xc,0xc,0xc,0x4,0x4,0xc,0x4,0x4,0xc,0xc,0x0,0x4,0x0,0x8,0xff	@: 0x3A20 13950
	.byte	0x8,0x8,0x0,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0xc,0x0,0x0,0x8,0x4,0xff	@: 0x3A30 13965
	.byte	0x0,0xc,0x4,0x8,0xc,0xc,0x4,0xc,0x0,0x8,0x8,0xc,0x4,0xc,0xc,0xff	@: 0x3A40 13980
	.byte	0xc,0x4,0x0,0xc,0xc,0xc,0xc,0x8,0xc,0x8,0xc,0x8,0xc,0x0,0x0,0xff	@: 0x3A50 13995
	.byte	0x8,0x8,0x0,0xc,0x0,0x4,0x0,0x8,0x0,0x8,0xc,0x8,0x0,0x8,0x4,0xff	@: 0x3A60 14010
	.byte	0x0,0x4,0x4,0x8,0x8,0x8,0x8,0x8,0x0,0x8,0x8,0x4,0x8,0x0,0x8,0xff	@: 0x3A70 14025
	.byte	0x8,0x0,0x4,0x0,0x8,0x4,0x4,0xc,0x4,0xc,0xc,0xc,0x0,0x0,0x0,0xff	@: 0x3A80 14040
	.byte	0xc,0x0,0x0,0x4,0x8,0xc,0x0,0xc,0xc,0x4,0xc,0x0,0xc,0x8,0x0,0xff	@: 0x3A90 14055
	.byte	0xc,0x0,0xc,0x4,0x4,0xc,0xc,0x8,0xc,0xc,0x8,0x4,0xc,0x8,0x4,0xff	@: 0x3AA0 14070
	.byte	0x8,0x8,0x8,0x8,0xc,0x8,0xc,0xc,0xc,0xc,0x0,0x8,0x4,0x8,0xc,0xff	@: 0x3AB0 14085
	.byte	0x0,0xc,0x4,0x0,0x8,0x8,0xc,0xc,0x4,0xc,0x8,0xc,0x0,0x4,0x8,0xff	@: 0x3AC0 14100
	.byte	0xc,0x4,0x8,0x0,0xc,0x4,0x4,0xc,0xc,0x4,0x4,0x0,0xc,0x0,0x4,0xff	@: 0x3AD0 14115
	.byte	0x8,0x8,0x4,0xc,0x4,0x4,0xc,0x8,0x8,0x4,0xc,0x0,0xc,0xc,0x4,0xff	@: 0x3AE0 14130
	.byte	0x4,0x8,0x4,0x0,0xc,0x0,0xc,0x8,0xc,0x0,0x4,0x8,0x8,0x0,0x8,0xff	@: 0x3AF0 14145
	.byte	0x8,0x0,0x4,0xc,0x4,0x4,0x4,0xc,0xc,0x4,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x3B00 14160
	.byte	0x8,0x4,0x8,0x4,0x0,0x0,0x4,0x4,0x4,0x4,0x8,0x0,0x8,0xc,0x8,0xff	@: 0x3B10 14175
	.byte	0x0,0x0,0x8,0x0,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0x8,0x4,0x0,0x8,0xff	@: 0x3B20 14190
	.byte	0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x4,0x4,0x8,0xc,0x8,0x4,0x8,0xff	@: 0x3B30 14205
	.byte	0x8,0x4,0x4,0x4,0x0,0x4,0xc,0x4,0xc,0xc,0x4,0xc,0x8,0x0,0xc,0xff	@: 0x3B40 14220
	.byte	0xc,0x0,0xc,0x0,0x0,0x0,0x4,0x0,0xc,0xc,0xc,0x8,0x8,0x4,0x0,0xff	@: 0x3B50 14235
	.byte	0x4,0x8,0x0,0xc,0x4,0x8,0xc,0x8,0x0,0xc,0x0,0x8,0x0,0x8,0x8,0xff	@: 0x3B60 14250
	.byte	0x4,0x0,0x0,0x0,0xc,0x8,0x8,0x8,0x0,0x0,0xc,0x8,0x4,0x0,0x4,0xff	@: 0x3B70 14265
	.byte	0x8,0x0,0x4,0x0,0x8,0xc,0xc,0x4,0x8,0x8,0xc,0xc,0x8,0x8,0xc,0xff	@: 0x3B80 14280
	.byte	0xc,0x8,0xc,0x0,0x0,0x4,0x4,0xc,0xc,0xc,0xc,0xc,0x8,0x0,0x8,0xff	@: 0x3B90 14295
	.byte	0xc,0x4,0x4,0x0,0x4,0x4,0x8,0x4,0x0,0xc,0xc,0xc,0x8,0xc,0xc,0xff	@: 0x3BA0 14310
	.byte	0x8,0x8,0xc,0xc,0x0,0x8,0x0,0x8,0x8,0xc,0xc,0x4,0x0,0x4,0x4,0xff	@: 0x3BB0 14325
	.byte	0x4,0x4,0x0,0x8,0x0,0x0,0x8,0x8,0x4,0x0,0x4,0x0,0x8,0x0,0x4,0xff	@: 0x3BC0 14340
	.byte	0xc,0xc,0xc,0x8,0x0,0x4,0x8,0x0,0xc,0xc,0x4,0x8,0x4,0x4,0x8,0xff	@: 0x3BD0 14355
	.byte	0x0,0x8,0xc,0x8,0x4,0x8,0xc,0x8,0xc,0xc,0x8,0x4,0xc,0x4,0x0,0xff	@: 0x3BE0 14370
	.byte	0x4,0xc,0x4,0x8,0x0,0xc,0x0,0xc,0x8,0x4,0x8,0x4,0x0,0x4,0xc,0xff	@: 0x3BF0 14385
	.byte	0x8,0x8,0xc,0x4,0x0,0xc,0x8,0x0,0xc,0xc,0xc,0x8,0xc,0x0,0x4,0xff	@: 0x3C00 14400
	.byte	0x4,0x8,0x8,0x0,0x0,0x8,0x0,0x0,0xc,0x8,0x4,0xc,0xc,0x0,0xc,0xff	@: 0x3C10 14415
	.byte	0x0,0xc,0xc,0xc,0x4,0xc,0x4,0x8,0x0,0x0,0x8,0x0,0x4,0x8,0x4,0xff	@: 0x3C20 14430
	.byte	0x0,0x8,0x4,0x8,0x8,0x8,0x0,0xc,0x4,0x0,0x8,0x4,0x0,0x0,0x4,0xff	@: 0x3C30 14445
	.byte	0x4,0x0,0xc,0x4,0x0,0x8,0xc,0x8,0x4,0xc,0x0,0x4,0x0,0x4,0xc,0xff	@: 0x3C40 14460
	.byte	0x0,0x0,0xc,0x4,0xc,0xc,0x4,0x8,0xc,0x8,0xc,0x8,0xc,0x8,0x0,0xff	@: 0x3C50 14475
	.byte	0x4,0x0,0xc,0x0,0x8,0x4,0x8,0xc,0xc,0x0,0x4,0x8,0x8,0x8,0x0,0xff	@: 0x3C60 14490
	.byte	0xc,0x0,0x4,0x4,0x8,0x4,0xc,0x0,0x0,0xc,0xc,0x0,0x4,0x8,0x4,0xff	@: 0x3C70 14505
	.byte	0xc,0x0,0xc,0xc,0x4,0x8,0xc,0x8,0x8,0xc,0xc,0x8,0x0,0x4,0x4,0xff	@: 0x3C80 14520
	.byte	0x0,0x4,0xc,0x4,0xc,0x8,0x0,0x8,0x8,0x0,0x4,0x8,0x4,0x8,0x4,0xff	@: 0x3C90 14535
	.byte	0xc,0x4,0x4,0xc,0x0,0x8,0xc,0x4,0x4,0x4,0x4,0xc,0xc,0x4,0xc,0xff	@: 0x3CA0 14550
	.byte	0x4,0x8,0x4,0x0,0x0,0x4,0x8,0xc,0xc,0x8,0x4,0x8,0x0,0x0,0x8,0xff	@: 0x3CB0 14565
	.byte	0x0,0x0,0xc,0x8,0x8,0x0,0x0,0x4,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x3CC0 14580
	.byte	0xc,0x8,0xc,0x4,0x0,0x0,0x0,0x4,0x8,0x4,0xc,0x4,0x8,0x8,0xc,0xff	@: 0x3CD0 14595
	.byte	0x0,0x4,0xc,0x0,0x4,0x0,0x8,0x0,0x8,0xc,0xc,0x8,0xc,0x8,0xc,0xff	@: 0x3CE0 14610
	.byte	0x8,0x4,0x4,0xc,0x8,0xc,0xc,0x0,0x0,0x4,0x4,0x8,0xc,0x4,0xc,0xff	@: 0x3CF0 14625
	.byte	0x0,0x8,0x4,0x8,0x4,0x4,0x0,0xc,0x4,0xc,0x8,0xc,0x8,0xc,0x4,0xff	@: 0x3D00 14640
	.byte	0xc,0x4,0xc,0x8,0xc,0x8,0x0,0x4,0xc,0x4,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x3D10 14655
	.byte	0x8,0x4,0xc,0x0,0x8,0x4,0xc,0x0,0x4,0xc,0x4,0xc,0x8,0x8,0x4,0xff	@: 0x3D20 14670
	.byte	0x0,0x4,0x4,0xc,0xc,0xc,0xc,0x4,0x8,0x0,0xc,0xc,0x4,0x4,0x0,0xff	@: 0x3D30 14685
	.byte	0x0,0x8,0xc,0x8,0x4,0xc,0x8,0x8,0x4,0xc,0x8,0x4,0x8,0xc,0x8,0xff	@: 0x3D40 14700
	.byte	0x0,0x4,0x4,0x8,0x4,0x0,0x4,0xc,0x4,0x0,0xc,0xc,0x0,0x8,0x4,0xff	@: 0x3D50 14715
	.byte	0x8,0x0,0x8,0x8,0x4,0x8,0xc,0xc,0xc,0xc,0xc,0x0,0x4,0x8,0xc,0xff	@: 0x3D60 14730
	.byte	0xc,0xc,0xc,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0xc,0x4,0xc,0x8,0x8,0xff	@: 0x3D70 14745
	.byte	0xc,0xc,0x8,0x0,0x0,0x0,0x4,0x4,0xc,0x8,0x4,0x0,0xc,0x4,0x4,0xff	@: 0x3D80 14760
	.byte	0x8,0x8,0x8,0x8,0x8,0x4,0x8,0x0,0x8,0x4,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x3D90 14775
	.byte	0x8,0x0,0x0,0x0,0x4,0x4,0x8,0xc,0x0,0x4,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x3DA0 14790
	.byte	0x8,0x0,0x4,0x0,0x8,0x0,0xc,0x0,0x8,0x8,0x4,0x4,0x8,0x8,0xc,0xff	@: 0x3DB0 14805
	.byte	0x8,0x4,0x4,0x8,0x8,0x0,0x4,0x8,0x4,0x0,0x0,0x8,0x0,0xc,0x8,0xff	@: 0x3DC0 14820
	.byte	0xc,0xc,0x4,0x8,0x4,0xc,0x8,0x4,0x0,0x8,0x0,0xc,0x4,0x0,0x4,0xff	@: 0x3DD0 14835
	.byte	0x0,0x0,0x8,0x8,0x4,0xc,0xc,0xc,0x8,0x0,0x0,0x4,0x8,0xc,0x0,0xff	@: 0x3DE0 14850
	.byte	0x0,0x0,0x0,0x8,0xc,0x0,0xc,0x4,0xc,0x8,0x8,0x4,0x4,0xc,0xc,0xff	@: 0x3DF0 14865
	.byte	0x0,0x8,0x8,0x8,0xc,0x8,0xc,0x4,0x8,0x4,0xc,0xc,0x8,0x8,0xc,0xff	@: 0x3E00 14880
	.byte	0x8,0x0,0x8,0x0,0xc,0x0,0x0,0xc,0x0,0x8,0x8,0xc,0xc,0x4,0x8,0xff	@: 0x3E10 14895
	.byte	0x8,0xc,0x4,0x4,0x4,0x0,0x0,0x8,0x0,0x4,0xc,0xc,0x0,0x0,0xc,0xff	@: 0x3E20 14910
	.byte	0x4,0x0,0x8,0x0,0x4,0x4,0x8,0xc,0x0,0x4,0x4,0x0,0x4,0x0,0xc,0xff	@: 0x3E30 14925
	.byte	0x0,0x4,0x0,0x4,0x8,0xc,0x8,0x4,0xc,0x8,0x4,0xc,0x8,0x8,0xc,0xff	@: 0x3E40 14940
	.byte	0x4,0x8,0x4,0x4,0x8,0x4,0xc,0x0,0x0,0xc,0x0,0xc,0x4,0xc,0x0,0xff	@: 0x3E50 14955
	.byte	0x8,0xc,0x8,0x8,0x4,0xc,0x0,0x0,0x0,0x0,0x4,0x4,0x8,0x4,0x8,0xff	@: 0x3E60 14970
	.byte	0x8,0xc,0x0,0xc,0xc,0x8,0x8,0x8,0x4,0xc,0x4,0x0,0xc,0x0,0x8,0xff	@: 0x3E70 14985
	.byte	0x8,0x8,0x0,0x0,0xc,0xc,0x4,0x0,0x8,0x0,0x4,0x0,0x0,0x0,0x4,0xff	@: 0x3E80 15000
	.byte	0x8,0x4,0x4,0x8,0x0,0x4,0xc,0x4,0x8,0x8,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x3E90 15015
	.byte	0x0,0xc,0x0,0x8,0x8,0x8,0x4,0x8,0xc,0x0,0x0,0x4,0x4,0xc,0x8,0xff	@: 0x3EA0 15030
	.byte	0x0,0xc,0x8,0x4,0xc,0x4,0x8,0x8,0x8,0xc,0x0,0x8,0x0,0x4,0xc,0xff	@: 0x3EB0 15045
	.byte	0x8,0xc,0xc,0xc,0x0,0x0,0x4,0x4,0x8,0x8,0xc,0x0,0xc,0xc,0x4,0xff	@: 0x3EC0 15060
	.byte	0x8,0x0,0xc,0x0,0x4,0x8,0x8,0x0,0x0,0x4,0xc,0xc,0x8,0x4,0x0,0xff	@: 0x3ED0 15075
	.byte	0x0,0x4,0x8,0xc,0x4,0x8,0x0,0xc,0xc,0x4,0x0,0x8,0x8,0xc,0x8,0xff	@: 0x3EE0 15090
	.byte	0x8,0x0,0x4,0xc,0x0,0x8,0x4,0x0,0x4,0xc,0xc,0x8,0x0,0x4,0x8,0xff	@: 0x3EF0 15105
	.byte	0xc,0x4,0x4,0x0,0x8,0x4,0xc,0x4,0x8,0x8,0x4,0x4,0x0,0x8,0x4,0xff	@: 0x3F00 15120
	.byte	0x0,0x4,0x0,0x0,0x8,0x4,0x0,0x0,0x0,0x4,0x4,0xc,0x8,0x0,0x8,0xff	@: 0x3F10 15135
	.byte	0x8,0x0,0xc,0x4,0xc,0x8,0xc,0x0,0xc,0x0,0xc,0x0,0x8,0x4,0x4,0xff	@: 0x3F20 15150
	.byte	0x4,0xc,0x4,0x0,0x8,0x4,0xc,0x8,0x4,0x8,0x0,0xc,0x0,0x4,0x4,0xff	@: 0x3F30 15165
	.byte	0x8,0x4,0x0,0x4,0x0,0x0,0x8,0x4,0x0,0x4,0x4,0x4,0x8,0x8,0xc,0xff	@: 0x3F40 15180
	.byte	0x4,0x0,0x8,0x0,0x8,0x8,0x4,0xc,0x8,0xc,0x4,0xc,0x4,0x8,0x0,0xff	@: 0x3F50 15195
	.byte	0x4,0x0,0xc,0x0,0x0,0x4,0xc,0x8,0x0,0x0,0x4,0x4,0xc,0x8,0xc,0xff	@: 0x3F60 15210
	.byte	0x4,0x8,0x0,0xc,0x4,0x8,0x0,0x0,0xc,0xc,0x4,0xc,0x0,0x4,0x4,0xff	@: 0x3F70 15225
	.byte	0x0,0xc,0x8,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0xc,0x4,0x0,0x8,0x8,0xff	@: 0x3F80 15240
	.byte	0x4,0xc,0x8,0x4,0x4,0x8,0x8,0x0,0x8,0x4,0xc,0x4,0x8,0xc,0x4,0xff	@: 0x3F90 15255
	.byte	0x4,0x8,0x0,0x0,0xc,0x4,0x4,0x0,0x0,0xc,0x8,0xc,0x8,0x8,0xc,0xff	@: 0x3FA0 15270
	.byte	0x8,0xc,0x0,0x0,0x8,0x8,0xc,0x8,0x8,0xc,0x0,0x0,0xc,0x0,0x0,0xff	@: 0x3FB0 15285
	.byte	0x8,0x0,0x0,0x4,0x4,0x0,0xc,0x8,0xc,0x0,0x4,0x4,0x8,0x8,0x8,0xff	@: 0x3FC0 15300
	.byte	0xc,0x0,0xc,0x8,0x0,0xc,0x0,0x0,0x8,0x0,0x0,0x0,0x4,0x8,0x0,0xff	@: 0x3FD0 15315
	.byte	0xc,0x8,0x0,0x8,0x0,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x8,0x4,0x0,0xff	@: 0x3FE0 15330
	.byte	0x0,0x8,0xc,0xc,0x4,0xc,0x4,0x4,0x0,0xc,0xc,0x8,0x4,0x4,0x4,0xff	@: 0x3FF0 15345
	.byte	0x4,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0x4,0xc,0x0,0x8,0x4,0x8,0x8,0xff	@: 0x4000 15360
	.byte	0x0,0x4,0x0,0x4,0xc,0xc,0x0,0x8,0x4,0x8,0x8,0x8,0xc,0x8,0x4,0xff	@: 0x4010 15375
	.byte	0xc,0xc,0x4,0x0,0x0,0xc,0xc,0x0,0x8,0x8,0xc,0x0,0x4,0x8,0x4,0xff	@: 0x4020 15390
	.byte	0xc,0x0,0xc,0x4,0xc,0x8,0x4,0x4,0x8,0x0,0xc,0x4,0xc,0x0,0x4,0xff	@: 0x4030 15405
	.byte	0x0,0x8,0x4,0x0,0x0,0xc,0xc,0x8,0x4,0xc,0x8,0x0,0x4,0xc,0x8,0xff	@: 0x4040 15420
	.byte	0x0,0x8,0x0,0x0,0x0,0xc,0x8,0x0,0x8,0x4,0xc,0x0,0xc,0xc,0x8,0xff	@: 0x4050 15435
	.byte	0x4,0x4,0x8,0x8,0x4,0x4,0x0,0x8,0x8,0x8,0x0,0x8,0xc,0xc,0x4,0xff	@: 0x4060 15450
	.byte	0xc,0xc,0x8,0x0,0x8,0xc,0x4,0xc,0x4,0x8,0x8,0x8,0x4,0x4,0x8,0xff	@: 0x4070 15465
	.byte	0x8,0xc,0x8,0x8,0xc,0x0,0x0,0x8,0xc,0x0,0xc,0xc,0xc,0xc,0xc,0xff	@: 0x4080 15480
	.byte	0x0,0x8,0x4,0x8,0x4,0x0,0x8,0x8,0x4,0xc,0x8,0x0,0x8,0x8,0xc,0xff	@: 0x4090 15495
	.byte	0x8,0x4,0x8,0x4,0x8,0x0,0x0,0x8,0xc,0x4,0x4,0x8,0x0,0x8,0x0,0xff	@: 0x40A0 15510
	.byte	0x8,0x4,0x8,0x8,0x8,0x8,0x8,0xc,0x4,0x8,0xc,0x8,0x4,0x4,0xc,0xff	@: 0x40B0 15525
	.byte	0xc,0x8,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0xc,0xc,0xc,0xc,0x4,0xc,0xff	@: 0x40C0 15540
	.byte	0x0,0x0,0x8,0x8,0x8,0x4,0xc,0x4,0x0,0x0,0x4,0x8,0x8,0xc,0x0,0xff	@: 0x40D0 15555
	.byte	0x8,0x8,0xc,0x4,0x4,0x0,0x4,0x8,0x8,0xc,0x4,0x8,0x0,0x8,0x0,0xff	@: 0x40E0 15570
	.byte	0x0,0x0,0x4,0x4,0x0,0x4,0xc,0x0,0x8,0x0,0xc,0x0,0x0,0xc,0xc,0xff	@: 0x40F0 15585
	.byte	0xc,0x4,0x8,0x8,0x8,0x4,0x0,0x0,0xc,0xc,0xc,0xc,0x0,0x4,0xc,0xff	@: 0x4100 15600
	.byte	0x8,0x8,0xc,0x0,0x4,0x4,0x8,0x0,0xc,0x8,0x4,0x0,0x0,0x0,0x0,0xff	@: 0x4110 15615
	.byte	0x4,0x8,0x4,0x4,0x4,0x8,0x0,0x4,0xc,0x4,0x0,0x0,0x8,0x4,0x4,0xff	@: 0x4120 15630
	.byte	0x8,0x4,0x8,0x4,0xc,0x4,0x4,0x8,0x8,0xc,0xc,0x8,0x8,0xc,0xc,0xff	@: 0x4130 15645
	.byte	0xc,0x0,0x8,0xc,0xc,0x8,0x0,0x4,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0xff	@: 0x4140 15660
	.byte	0x0,0xc,0x8,0xc,0xc,0x8,0x8,0x8,0xc,0x8,0x0,0xc,0x8,0xc,0x8,0xff	@: 0x4150 15675
	.byte	0x4,0x0,0x0,0x8,0x4,0xc,0x0,0xc,0xc,0xc,0xc,0x8,0x4,0x4,0x8,0xff	@: 0x4160 15690
	.byte	0x0,0x4,0xc,0x4,0x0,0x4,0x8,0xc,0xc,0x8,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x4170 15705
	.byte	0x4,0xc,0x8,0x0,0x8,0xc,0x8,0x0,0xc,0x8,0x4,0x4,0xc,0x4,0xc,0xff	@: 0x4180 15720
	.byte	0x0,0x0,0x4,0x4,0x0,0x0,0x0,0xc,0xc,0x0,0x8,0x4,0x4,0x4,0x0,0xff	@: 0x4190 15735
	.byte	0x8,0x4,0x0,0x0,0x4,0xc,0x8,0x4,0xc,0x8,0x8,0x0,0x4,0x0,0x0,0xff	@: 0x41A0 15750
	.byte	0x4,0x4,0x0,0x0,0x8,0xc,0xc,0x4,0x8,0x8,0x8,0x0,0x0,0x4,0xc,0xff	@: 0x41B0 15765
	.byte	0x4,0x0,0x4,0x0,0x0,0x0,0x8,0x8,0x4,0x0,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x41C0 15780
	.byte	0x4,0xc,0x4,0x4,0xc,0xc,0x4,0x0,0xc,0x0,0x8,0x0,0x0,0xc,0x8,0xff	@: 0x41D0 15795
	.byte	0x4,0x0,0x8,0xc,0x8,0x4,0x4,0xc,0xc,0x4,0x0,0x4,0x4,0xc,0xc,0xff	@: 0x41E0 15810
	.byte	0x4,0x8,0xc,0xc,0xc,0x8,0x4,0x0,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x41F0 15825
	.byte	0x8,0x8,0x0,0xc,0x0,0x4,0x4,0x8,0xc,0x8,0xc,0x4,0x0,0xc,0x0,0xff	@: 0x4200 15840
	.byte	0xc,0x0,0x0,0x0,0x8,0x4,0x8,0x8,0x8,0x0,0xc,0x8,0xc,0xc,0x0,0xff	@: 0x4210 15855
	.byte	0x0,0x0,0xc,0xc,0x0,0xc,0x0,0xc,0x8,0x0,0xc,0xc,0x0,0xc,0x8,0xff	@: 0x4220 15870
	.byte	0x4,0x4,0x4,0x4,0x0,0xc,0x0,0xc,0x8,0x0,0x4,0x4,0x8,0x8,0xc,0xff	@: 0x4230 15885
	.byte	0x8,0x0,0x4,0x8,0xc,0xc,0x8,0x4,0x0,0x4,0xc,0x8,0x0,0x8,0x8,0xff	@: 0x4240 15900
	.byte	0xc,0x8,0xc,0x0,0x8,0x4,0xc,0x8,0x4,0xc,0xc,0x4,0x0,0x8,0x4,0xff	@: 0x4250 15915
	.byte	0xc,0x0,0x4,0xc,0x8,0x8,0x0,0x8,0xc,0x0,0x8,0x4,0x8,0x0,0x0,0xff	@: 0x4260 15930
	.byte	0xc,0x4,0xc,0x4,0x4,0x8,0xc,0x8,0x4,0x0,0x0,0x8,0x0,0xc,0x8,0xff	@: 0x4270 15945
	.byte	0x4,0x8,0x0,0xc,0xc,0xc,0xc,0x8,0xc,0xc,0x8,0x8,0x0,0x4,0x8,0xff	@: 0x4280 15960
	.byte	0xc,0x0,0x4,0x8,0x0,0x4,0x8,0x8,0x4,0x4,0x8,0x8,0xc,0x8,0xc,0xff	@: 0x4290 15975
	.byte	0x0,0x0,0x4,0x0,0xc,0xc,0x0,0x0,0x8,0xc,0x8,0x8,0x8,0xc,0x0,0xff	@: 0x42A0 15990
	.byte	0x0,0xc,0xc,0x4,0x8,0x8,0xc,0x8,0xc,0x8,0xc,0xc,0x8,0x8,0x4,0xff	@: 0x42B0 16005
	.byte	0xc,0x8,0x8,0x0,0x8,0x8,0x8,0x4,0x8,0x8,0x0,0x4,0x4,0xc,0x8,0xff	@: 0x42C0 16020
	.byte	0x8,0xc,0x8,0x8,0x8,0xc,0x8,0x4,0x0,0x4,0x4,0x8,0x4,0x4,0x4,0xff	@: 0x42D0 16035
	.byte	0xc,0x0,0x8,0xc,0x4,0xc,0x4,0x8,0xc,0x0,0x8,0x8,0x4,0x4,0xc,0xff	@: 0x42E0 16050
	.byte	0xc,0x0,0x4,0x8,0x8,0x0,0x4,0x4,0x8,0x4,0x4,0x4,0x4,0x4,0x4,0xff	@: 0x42F0 16065
	.byte	0x4,0x8,0xc,0xc,0x0,0xc,0x4,0x4,0x4,0x4,0x0,0xc,0x4,0x0,0x8,0xff	@: 0x4300 16080
	.byte	0x0,0xc,0x4,0x4,0x8,0xc,0xc,0x8,0xc,0xc,0x4,0x0,0x4,0x4,0x8,0xff	@: 0x4310 16095
	.byte	0xc,0x0,0xc,0xc,0x8,0x8,0xc,0x8,0xc,0x4,0x0,0x4,0x0,0x4,0x8,0xff	@: 0x4320 16110
	.byte	0xc,0x0,0xc,0x0,0xc,0xc,0x0,0x0,0x8,0xc,0x0,0x4,0x8,0xc,0xc,0xff	@: 0x4330 16125
	.byte	0x0,0xc,0x8,0x4,0x4,0x8,0x0,0xc,0x8,0x0,0x4,0x0,0xc,0x4,0xc,0xff	@: 0x4340 16140
	.byte	0xc,0x0,0x8,0x0,0xc,0xc,0xc,0x8,0x0,0x4,0x0,0x8,0xc,0xc,0xc,0xff	@: 0x4350 16155
	.byte	0xc,0x4,0x0,0x4,0x4,0x0,0x4,0x4,0xc,0xc,0x8,0x4,0x8,0xc,0x4,0xff	@: 0x4360 16170
	.byte	0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x8,0xc,0x0,0x0,0x4,0x8,0xc,0xc,0xff	@: 0x4370 16185
	.byte	0x8,0x0,0x8,0x0,0x0,0xc,0x0,0x8,0x0,0x8,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x4380 16200
	.byte	0x8,0x8,0xc,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x8,0x8,0x4,0xff	@: 0x4390 16215
	.byte	0x4,0x8,0x4,0x0,0x8,0x8,0xc,0xc,0x0,0x4,0xc,0x8,0x8,0x8,0x4,0xff	@: 0x43A0 16230
	.byte	0x8,0xc,0x0,0xc,0x0,0x0,0x4,0x4,0xc,0xc,0x8,0x4,0x8,0x0,0x4,0xff	@: 0x43B0 16245
	.byte	0x0,0x8,0x0,0x0,0x4,0xc,0xc,0x8,0x4,0x4,0x4,0xc,0x8,0xc,0xc,0xff	@: 0x43C0 16260
	.byte	0x0,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0xc,0xc,0x4,0x0,0x8,0xc,0xc,0xff	@: 0x43D0 16275
	.byte	0xc,0xc,0x0,0xc,0xc,0x4,0x4,0xc,0x8,0x8,0x0,0x8,0x8,0x0,0x0,0xff	@: 0x43E0 16290
	.byte	0xc,0x0,0x4,0x0,0x0,0x4,0x8,0x8,0x4,0xc,0x4,0xc,0xc,0x0,0x8,0xff	@: 0x43F0 16305
	.byte	0xc,0x8,0x8,0x4,0x8,0xc,0x0,0x8,0x8,0x0,0xc,0x8,0xc,0x8,0x0,0xff	@: 0x4400 16320
	.byte	0xc,0xc,0x4,0x4,0x0,0x8,0x4,0x0,0xc,0x4,0xc,0xc,0x4,0x4,0x0,0xff	@: 0x4410 16335
	.byte	0x8,0x0,0x0,0xc,0x8,0x0,0x4,0xc,0xc,0x8,0x4,0x4,0x0,0xc,0x8,0xff	@: 0x4420 16350
	.byte	0xc,0xc,0x4,0x0,0x4,0x0,0xc,0x4,0x0,0xc,0x8,0x8,0xc,0x0,0x4,0xff	@: 0x4430 16365
	.byte	0x8,0x4,0x8,0x0,0x4,0xc,0x4,0xc,0x8,0xc,0x4,0x4,0xc,0x4,0x4,0xff	@: 0x4440 16380
	.byte	0xc,0x8,0x4,0xc,0x8,0x8,0x8,0x0,0x8,0x0,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x4450 16395
	.byte	0x4,0x8,0x8,0x0,0xc,0x4,0x0,0x4,0xc,0x0,0x4,0x4,0x8,0x0,0x4,0xff	@: 0x4460 16410
	.byte	0x8,0x8,0x4,0x4,0x4,0x0,0xc,0x0,0x0,0xc,0xc,0xc,0x8,0xc,0xc,0xff	@: 0x4470 16425
	.byte	0x4,0x8,0x0,0x8,0x8,0x0,0x4,0x8,0xc,0x4,0x4,0x4,0x4,0x4,0x8,0xff	@: 0x4480 16440
	.byte	0x0,0x4,0x4,0x4,0x8,0xc,0x8,0x0,0x8,0x8,0x8,0x8,0x4,0xc,0x8,0xff	@: 0x4490 16455
	.byte	0x0,0x0,0x4,0x0,0x4,0xc,0x0,0xc,0x4,0x0,0xc,0x0,0x0,0x4,0x4,0xff	@: 0x44A0 16470
	.byte	0x0,0x8,0xc,0x0,0xc,0x8,0x4,0x4,0x8,0x8,0x8,0xc,0x8,0x0,0x4,0xff	@: 0x44B0 16485
	.byte	0x4,0x0,0xc,0x0,0xc,0xc,0x0,0x0,0xc,0xc,0x0,0x8,0x8,0x0,0x8,0xff	@: 0x44C0 16500
	.byte	0x8,0x0,0x4,0x4,0xc,0x0,0x8,0xc,0xc,0xc,0x0,0x4,0x8,0x0,0x8,0xff	@: 0x44D0 16515
	.byte	0xc,0xc,0x0,0xc,0xc,0xc,0xc,0x8,0x4,0x8,0x8,0x4,0x4,0xc,0x0,0xff	@: 0x44E0 16530
	.byte	0x4,0xc,0x8,0x4,0x8,0x8,0x4,0x8,0x8,0xc,0x8,0xc,0x4,0x8,0x0,0xff	@: 0x44F0 16545
	.byte	0x0,0x4,0x4,0x0,0xc,0x0,0xc,0xc,0x8,0x8,0x8,0x0,0x4,0x0,0xc,0xff	@: 0x4500 16560
	.byte	0x8,0x0,0x0,0x8,0xc,0x0,0x0,0x0,0xc,0x8,0xc,0x0,0xc,0x0,0xc,0xff	@: 0x4510 16575
	.byte	0xc,0xc,0xc,0x0,0xc,0x4,0xc,0xc,0x8,0x8,0x4,0x4,0x4,0xc,0x0,0xff	@: 0x4520 16590
	.byte	0xc,0xc,0x4,0x0,0x8,0x4,0x4,0xc,0x4,0xc,0xc,0x4,0x8,0xc,0xc,0xff	@: 0x4530 16605
	.byte	0xc,0x0,0xc,0xc,0xc,0xc,0x4,0xc,0x0,0x8,0x8,0x4,0x4,0x4,0xc,0xff	@: 0x4540 16620
	.byte	0xc,0xc,0x8,0x0,0x4,0x0,0x4,0x8,0x4,0xc,0x4,0x4,0x0,0xc,0x0,0xff	@: 0x4550 16635
	.byte	0x4,0x0,0x4,0x4,0x4,0xc,0x4,0xc,0xc,0x4,0x4,0xc,0xc,0x0,0x0,0xff	@: 0x4560 16650
	.byte	0xc,0x0,0x8,0x0,0xc,0xc,0xc,0x0,0x0,0xc,0xc,0x0,0x4,0x8,0x8,0xff	@: 0x4570 16665
	.byte	0xc,0xc,0x4,0x0,0x8,0x4,0x8,0xc,0x8,0xc,0x0,0xc,0x8,0xc,0x8,0xff	@: 0x4580 16680
	.byte	0x4,0x8,0xc,0x8,0x8,0x8,0x4,0x0,0x8,0xc,0xc,0x0,0x0,0x4,0xc,0xff	@: 0x4590 16695
	.byte	0xc,0x8,0x4,0x0,0x8,0xc,0x0,0xc,0x8,0xc,0xc,0x8,0x4,0x8,0xc,0xff	@: 0x45A0 16710
	.byte	0x8,0x8,0x0,0x8,0x8,0x8,0x0,0x8,0x4,0x8,0x0,0x0,0xc,0x0,0x0,0xff	@: 0x45B0 16725
	.byte	0x0,0x0,0xc,0x0,0x8,0x0,0x0,0xc,0xc,0x8,0x8,0x4,0x0,0x0,0xc,0xff	@: 0x45C0 16740
	.byte	0x8,0x4,0x0,0x0,0x0,0x4,0x8,0xc,0x4,0xc,0xc,0x0,0xc,0x8,0x8,0xff	@: 0x45D0 16755
	.byte	0x0,0x0,0xc,0x4,0x8,0xc,0x4,0x4,0x8,0x4,0x0,0x8,0x0,0xc,0x4,0xff	@: 0x45E0 16770
	.byte	0x8,0x8,0xc,0xc,0xc,0x8,0x4,0xc,0xc,0x0,0x8,0x4,0xc,0x4,0xc,0xff	@: 0x45F0 16785
	.byte	0x0,0x4,0x4,0xc,0x0,0x4,0x8,0x0,0x8,0x8,0x8,0x0,0x4,0xc,0xc,0xff	@: 0x4600 16800
	.byte	0x4,0x0,0x4,0x4,0x0,0x4,0x0,0x4,0xc,0x8,0xc,0xc,0x8,0x4,0x8,0xff	@: 0x4610 16815
	.byte	0x4,0xc,0x4,0x0,0xc,0x0,0xc,0xc,0xc,0x4,0xc,0xc,0x0,0x8,0xc,0xff	@: 0x4620 16830
	.byte	0x8,0x0,0x0,0x4,0x0,0x0,0x8,0x0,0x0,0x4,0xc,0xc,0xc,0x8,0xc,0xff	@: 0x4630 16845
	.byte	0x0,0x0,0x0,0x4,0x0,0xc,0x4,0xc,0x0,0xc,0x8,0x4,0xc,0x4,0x8,0xff	@: 0x4640 16860
	.byte	0xc,0x4,0x4,0x0,0x8,0x4,0x8,0x4,0x8,0x0,0xc,0x8,0x4,0x4,0x8,0xff	@: 0x4650 16875
	.byte	0x4,0xc,0x0,0x8,0x0,0x4,0x8,0xc,0x4,0x0,0x8,0xc,0x0,0x4,0x0,0xff	@: 0x4660 16890
	.byte	0x8,0x4,0x8,0x8,0x8,0x0,0x0,0x8,0x4,0x4,0x8,0x8,0x0,0x4,0x4,0xff	@: 0x4670 16905
	.byte	0x8,0x4,0x8,0x4,0x8,0x8,0x0,0x0,0xc,0x4,0x0,0x0,0x0,0xc,0xc,0xff	@: 0x4680 16920
	.byte	0x4,0x0,0xc,0x8,0x8,0xc,0x4,0xc,0x4,0x8,0x4,0x0,0x4,0x0,0x0,0xff	@: 0x4690 16935
	.byte	0xc,0x0,0x0,0x0,0xc,0x8,0x4,0x8,0xc,0x8,0x8,0x0,0x8,0x0,0x8,0xff	@: 0x46A0 16950
	.byte	0x8,0x4,0x4,0x0,0x0,0x0,0xc,0xc,0xc,0x0,0x0,0x8,0x8,0x0,0x8,0xff	@: 0x46B0 16965
	.byte	0xc,0x0,0x4,0x0,0x4,0x4,0x8,0x0,0x8,0x8,0x0,0x0,0xc,0xc,0x0,0xff	@: 0x46C0 16980
	.byte	0x0,0x8,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0x0,0x8,0x4,0x4,0xc,0x8,0xff	@: 0x46D0 16995
	.byte	0x0,0xc,0x4,0x0,0x4,0x4,0x4,0x0,0x8,0x0,0x8,0x4,0xc,0x8,0x0,0xff	@: 0x46E0 17010
	.byte	0x4,0x4,0x0,0x4,0x0,0xc,0xc,0x8,0x4,0x8,0x8,0xc,0x8,0x8,0x4,0xff	@: 0x46F0 17025
	.byte	0x4,0x4,0xc,0x8,0x8,0x4,0xc,0xc,0x4,0xc,0x8,0x0,0x4,0x0,0xc,0xff	@: 0x4700 17040
	.byte	0x4,0x4,0x8,0x0,0xc,0x0,0x4,0xc,0x4,0x8,0x4,0x4,0xc,0x8,0xc,0xff	@: 0x4710 17055
	.byte	0x0,0xc,0x8,0x4,0x8,0x4,0x8,0x4,0x8,0x4,0x0,0xc,0xc,0x0,0x4,0xff	@: 0x4720 17070
	.byte	0x0,0x4,0x4,0xc,0x4,0x8,0x4,0xc,0x4,0xc,0x8,0x8,0xc,0x8,0x4,0xff	@: 0x4730 17085
	.byte	0xc,0x0,0x8,0x0,0x0,0x0,0xc,0x8,0x0,0x8,0x0,0x8,0x8,0x4,0x0,0xff	@: 0x4740 17100
	.byte	0xc,0x4,0x8,0x8,0x8,0x8,0x4,0x0,0x8,0x0,0x8,0x0,0x0,0xc,0x4,0xff	@: 0x4750 17115
	.byte	0x0,0xc,0xc,0xc,0x8,0x4,0x0,0x0,0xc,0xc,0x4,0x4,0x8,0x4,0x8,0xff	@: 0x4760 17130
	.byte	0x4,0x8,0xc,0x0,0xc,0x0,0x4,0x8,0x8,0x4,0x0,0x0,0xc,0xc,0x0,0xff	@: 0x4770 17145
	.byte	0x8,0x4,0xc,0xc,0x4,0x4,0xc,0xc,0x0,0x4,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x4780 17160
	.byte	0x8,0x4,0x4,0x0,0x8,0x4,0xc,0xc,0x8,0x4,0x4,0x4,0x0,0x8,0xc,0xff	@: 0x4790 17175
	.byte	0x8,0x0,0xc,0xc,0xc,0x4,0x8,0x0,0xc,0x0,0xc,0x8,0x8,0xc,0xc,0xff	@: 0x47A0 17190
	.byte	0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0xc,0xc,0x0,0x8,0x4,0x0,0xff	@: 0x47B0 17205
	.byte	0x4,0x0,0x8,0x0,0x4,0x8,0x0,0x4,0xc,0xc,0xc,0x4,0x8,0xc,0x0,0xff	@: 0x47C0 17220
	.byte	0x8,0x8,0x4,0x0,0x0,0x0,0xc,0xc,0xc,0x8,0x0,0x0,0x0,0xc,0xc,0xff	@: 0x47D0 17235
	.byte	0xc,0x0,0x0,0x8,0x4,0x8,0xc,0x4,0x0,0xc,0x0,0xc,0x8,0x4,0x0,0xff	@: 0x47E0 17250
	.byte	0x8,0xc,0x8,0x0,0x8,0xc,0xc,0x8,0xc,0xc,0xc,0x4,0x8,0x8,0x8,0xff	@: 0x47F0 17265
	.byte	0x4,0x0,0x0,0x4,0x0,0xc,0x8,0x0,0x0,0x4,0xc,0x0,0x0,0xc,0x0,0xff	@: 0x4800 17280
	.byte	0x4,0x0,0x4,0x4,0x4,0x0,0x0,0x8,0x8,0xc,0x0,0x8,0x4,0x8,0xc,0xff	@: 0x4810 17295
	.byte	0x0,0x8,0x8,0x8,0xc,0xc,0x0,0x4,0xc,0xc,0x4,0x8,0xc,0x0,0xc,0xff	@: 0x4820 17310
	.byte	0x0,0xc,0x8,0x0,0x8,0x0,0xc,0xc,0x0,0x0,0x8,0x4,0xc,0x8,0xc,0xff	@: 0x4830 17325
	.byte	0xc,0x8,0x0,0xc,0xc,0x4,0x4,0xc,0x4,0x0,0x4,0x0,0x0,0x8,0x8,0xff	@: 0x4840 17340
	.byte	0x4,0x4,0x8,0xc,0x8,0x4,0x0,0x8,0x4,0xc,0xc,0x8,0x4,0x0,0x8,0xff	@: 0x4850 17355
	.byte	0x4,0xc,0x0,0x4,0x4,0xc,0x8,0xc,0x8,0xc,0x4,0xc,0x8,0xc,0x4,0xff	@: 0x4860 17370
	.byte	0x4,0x4,0x0,0x0,0x4,0x4,0x8,0x0,0x8,0xc,0x0,0x4,0xc,0xc,0xc,0xff	@: 0x4870 17385
	.byte	0x8,0x8,0x0,0xc,0xc,0xc,0x8,0xc,0x8,0x8,0x4,0x8,0x8,0xc,0xc,0xff	@: 0x4880 17400
	.byte	0x0,0xc,0x4,0xc,0x8,0xc,0x0,0xc,0x4,0x8,0xc,0x0,0x0,0xc,0x0,0xff	@: 0x4890 17415
	.byte	0x8,0x4,0x4,0x4,0x8,0x0,0xc,0x8,0x8,0x4,0x0,0xc,0x8,0x0,0x4,0xff	@: 0x48A0 17430
	.byte	0x4,0x4,0xc,0x0,0x4,0x4,0xc,0x8,0x0,0x8,0x8,0x4,0x8,0x0,0x4,0xff	@: 0x48B0 17445
	.byte	0x4,0xc,0x0,0xc,0x8,0x8,0x0,0x4,0x0,0x0,0x0,0x8,0x0,0xc,0x8,0xff	@: 0x48C0 17460
	.byte	0xc,0x8,0x4,0x8,0x8,0x0,0xc,0x8,0x8,0x8,0x8,0xc,0x8,0x4,0x0,0xff	@: 0x48D0 17475
	.byte	0x4,0x8,0x0,0x4,0x8,0x0,0xc,0x8,0x8,0x8,0x8,0x0,0x0,0x4,0xc,0xff	@: 0x48E0 17490
	.byte	0x8,0x8,0x0,0x4,0x0,0x8,0xc,0xc,0x0,0x4,0x4,0x4,0x8,0x0,0x4,0xff	@: 0x48F0 17505
	.byte	0x8,0x0,0x8,0x8,0xc,0x0,0x8,0x4,0x4,0xc,0x0,0x4,0xc,0x4,0xc,0xff	@: 0x4900 17520
	.byte	0x4,0x4,0x0,0xc,0x8,0xc,0x8,0xc,0x4,0x4,0x4,0x0,0x0,0xc,0xc,0xff	@: 0x4910 17535
	.byte	0x0,0x4,0xc,0x0,0x0,0x4,0x8,0x0,0x8,0xc,0x4,0x0,0x8,0x8,0x0,0xff	@: 0x4920 17550
	.byte	0x0,0xc,0x0,0xc,0xc,0x8,0x4,0x0,0x4,0x8,0x0,0x4,0x4,0x0,0xc,0xff	@: 0x4930 17565
	.byte	0x8,0x0,0x8,0xc,0x4,0x8,0xc,0x8,0x8,0x4,0x4,0x8,0xc,0x4,0xc,0xff	@: 0x4940 17580
	.byte	0x4,0x0,0xc,0x0,0x0,0x0,0x4,0xc,0x8,0xc,0xc,0x4,0xc,0x0,0x0,0xff	@: 0x4950 17595
	.byte	0x0,0xc,0x0,0x4,0xc,0xc,0xc,0xc,0x4,0xc,0x8,0x8,0x8,0xc,0xc,0xff	@: 0x4960 17610
	.byte	0x4,0x0,0x0,0x8,0x8,0xc,0xc,0x8,0x4,0x8,0x0,0x8,0x0,0xc,0x8,0xff	@: 0x4970 17625
	.byte	0xc,0x8,0x0,0x4,0x0,0xc,0xc,0x4,0x0,0x0,0x0,0xc,0xc,0xc,0xc,0xff	@: 0x4980 17640
	.byte	0xc,0x0,0x0,0x0,0xc,0x0,0x4,0x8,0x0,0x8,0x8,0xc,0xc,0x4,0xc,0xff	@: 0x4990 17655
	.byte	0x8,0x8,0x8,0x4,0x4,0x0,0x0,0x0,0x4,0xc,0x8,0x8,0x0,0xc,0x4,0xff	@: 0x49A0 17670
	.byte	0x0,0xc,0x8,0x4,0xc,0xc,0x8,0x0,0x0,0x4,0x4,0x4,0x4,0x4,0xc,0xff	@: 0x49B0 17685
	.byte	0xc,0x4,0x0,0x0,0x4,0x0,0x8,0x4,0x4,0x8,0x0,0x8,0xc,0x4,0xc,0xff	@: 0x49C0 17700
	.byte	0x8,0xc,0x4,0x0,0x0,0x0,0x0,0x8,0x0,0x4,0x0,0x0,0xc,0x8,0x4,0xff	@: 0x49D0 17715
	.byte	0x8,0x0,0x8,0x4,0x8,0xc,0x0,0x0,0x4,0x4,0x8,0x8,0x0,0x0,0x4,0xff	@: 0x49E0 17730
	.byte	0x4,0xc,0x8,0xc,0x0,0x0,0xc,0x4,0x0,0xc,0x4,0x0,0xc,0x4,0x4,0xff	@: 0x49F0 17745
	.byte	0xc,0x8,0xc,0x8,0x0,0x0,0x0,0xc,0x8,0x4,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x4A00 17760
	.byte	0x4,0xc,0x8,0xc,0xc,0x4,0x8,0x4,0x0,0x4,0x0,0x8,0xc,0x4,0x8,0xff	@: 0x4A10 17775
	.byte	0x0,0xc,0xc,0x4,0x4,0x0,0x8,0x0,0xc,0x4,0x4,0x4,0x4,0x4,0xc,0xff	@: 0x4A20 17790
	.byte	0xc,0x0,0x0,0x0,0x0,0x4,0xc,0x4,0x4,0xc,0x4,0x4,0x8,0x4,0x4,0xff	@: 0x4A30 17805
	.byte	0xc,0xc,0x4,0x4,0x4,0x4,0x8,0x0,0x0,0x0,0x8,0x8,0xc,0x8,0x0,0xff	@: 0x4A40 17820
	.byte	0x8,0xc,0x0,0x4,0xc,0x4,0xc,0x0,0xc,0x4,0x4,0x4,0x0,0x0,0x4,0xff	@: 0x4A50 17835
	.byte	0x0,0x0,0x4,0x4,0x8,0x8,0xc,0x4,0x0,0x8,0x8,0xc,0x8,0xc,0x8,0xff	@: 0x4A60 17850
	.byte	0x0,0x0,0x8,0x0,0x4,0x8,0x8,0x0,0x0,0x4,0x4,0x8,0xc,0x0,0x8,0xff	@: 0x4A70 17865
	.byte	0x4,0xc,0xc,0x8,0x4,0x4,0xc,0xc,0x8,0x8,0x4,0xc,0x4,0x8,0x0,0xff	@: 0x4A80 17880
	.byte	0xc,0x4,0x8,0x4,0x8,0xc,0x8,0x4,0x0,0x4,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x4A90 17895
	.byte	0x4,0xc,0x0,0x0,0x8,0x8,0x4,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0xff	@: 0x4AA0 17910
	.byte	0xc,0xc,0x8,0x8,0xc,0x4,0x8,0x0,0x4,0x4,0x4,0x4,0x4,0x4,0x8,0xff	@: 0x4AB0 17925
	.byte	0x0,0x4,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x8,0xc,0x4,0xc,0x0,0x8,0xff	@: 0x4AC0 17940
	.byte	0x8,0xc,0xc,0x8,0x8,0x8,0x8,0x4,0xc,0x8,0x4,0xc,0x0,0xc,0x8,0xff	@: 0x4AD0 17955
	.byte	0x0,0x8,0x4,0xc,0x0,0x0,0x0,0x8,0x8,0xc,0x4,0x0,0x4,0x0,0x0,0xff	@: 0x4AE0 17970
	.byte	0x4,0x8,0x0,0x4,0xc,0x4,0x0,0x8,0xc,0xc,0x0,0x4,0x0,0x4,0x0,0xff	@: 0x4AF0 17985
	.byte	0x8,0xc,0x0,0x4,0xc,0x0,0x0,0x4,0x0,0x4,0x4,0x4,0x4,0x8,0x0,0xff	@: 0x4B00 18000
	.byte	0xc,0xc,0x8,0xc,0x8,0x8,0x0,0x4,0x0,0x4,0x4,0x8,0xc,0x8,0x0,0xff	@: 0x4B10 18015
	.byte	0x0,0x0,0x4,0xc,0x0,0x4,0xc,0x8,0xc,0x4,0xc,0x4,0x8,0xc,0xc,0xff	@: 0x4B20 18030
	.byte	0x0,0x4,0x8,0x8,0xc,0x0,0x8,0x8,0x0,0x8,0x4,0xc,0x4,0x4,0x4,0xff	@: 0x4B30 18045
	.byte	0x8,0x4,0x8,0x0,0x0,0x4,0x0,0x8,0xc,0xc,0x0,0x4,0xc,0x8,0x4,0xff	@: 0x4B40 18060
	.byte	0x4,0xc,0x8,0x4,0x8,0x8,0xc,0x0,0x4,0x0,0xc,0x8,0x4,0xc,0x4,0xff	@: 0x4B50 18075
	.byte	0x4,0xc,0x0,0x8,0xc,0xc,0x4,0xc,0x0,0xc,0x4,0xc,0x4,0x8,0xc,0xff	@: 0x4B60 18090
	.byte	0x8,0x8,0x0,0x0,0x8,0x0,0xc,0xc,0xc,0x0,0x0,0xc,0x4,0x4,0x8,0xff	@: 0x4B70 18105
	.byte	0x8,0xc,0x8,0xc,0x8,0xc,0x4,0x0,0xc,0x0,0x8,0x8,0x4,0x0,0xc,0xff	@: 0x4B80 18120
	.byte	0x8,0xc,0x4,0x4,0x8,0xc,0xc,0x8,0x0,0x4,0x8,0x0,0x0,0x0,0x8,0xff	@: 0x4B90 18135
	.byte	0x4,0xc,0x0,0xc,0x8,0x8,0x4,0x8,0x8,0x4,0xc,0x8,0x4,0x8,0x4,0xff	@: 0x4BA0 18150
	.byte	0x8,0x8,0x0,0x0,0x4,0xc,0xc,0x4,0x8,0x0,0x0,0xc,0xc,0xc,0xc,0xff	@: 0x4BB0 18165
	.byte	0x4,0x0,0xc,0xc,0xc,0x8,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0xc,0xc,0xff	@: 0x4BC0 18180
	.byte	0x0,0x8,0x0,0xc,0x4,0x8,0x4,0x4,0x4,0x4,0x8,0x4,0xc,0x8,0xc,0xff	@: 0x4BD0 18195
	.byte	0x4,0x4,0xc,0xc,0xc,0x8,0x4,0x4,0x8,0x0,0x0,0x8,0x0,0xc,0x8,0xff	@: 0x4BE0 18210
	.byte	0xc,0xc,0x4,0x0,0x4,0x4,0x0,0x8,0x0,0xc,0xc,0x4,0x4,0x8,0xc,0xff	@: 0x4BF0 18225
	.byte	0xc,0xc,0x4,0xc,0x0,0x0,0x4,0x4,0x4,0xc,0x8,0x0,0x4,0x8,0x4,0xff	@: 0x4C00 18240
	.byte	0x4,0xc,0x0,0x4,0x0,0x8,0x8,0x4,0x4,0x4,0x8,0x8,0x8,0x0,0xc,0xff	@: 0x4C10 18255
	.byte	0x4,0x4,0x4,0xc,0xc,0x0,0x8,0x8,0x4,0x0,0x0,0x4,0x0,0xc,0xc,0xff	@: 0x4C20 18270
	.byte	0x8,0xc,0x4,0x8,0x8,0xc,0x8,0x8,0x8,0x0,0x4,0x8,0xc,0x0,0x0,0xff	@: 0x4C30 18285
	.byte	0x0,0x8,0xc,0xc,0x4,0x0,0x8,0x4,0x0,0x0,0xc,0x4,0x4,0x8,0xc,0xff	@: 0x4C40 18300
	.byte	0x8,0xc,0xc,0x8,0x8,0x4,0x4,0x8,0x8,0x8,0x8,0x8,0x0,0x8,0x4,0xff	@: 0x4C50 18315
	.byte	0x4,0xc,0x0,0xc,0x4,0x0,0x8,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0x4,0xff	@: 0x4C60 18330
	.byte	0x0,0x8,0xc,0xc,0xc,0x0,0x0,0x0,0x4,0x8,0x8,0x8,0x8,0x8,0x8,0xff	@: 0x4C70 18345
	.byte	0x4,0x8,0x8,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x8,0xc,0x8,0x4,0x0,0xff	@: 0x4C80 18360
	.byte	0x8,0xc,0xc,0x4,0xc,0x4,0xc,0x0,0x4,0x4,0x4,0x8,0x0,0x8,0x8,0xff	@: 0x4C90 18375
	.byte	0xc,0xc,0x8,0x0,0x4,0x8,0x4,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0xff	@: 0x4CA0 18390
	.byte	0xc,0x4,0x8,0x8,0x8,0xc,0xc,0x0,0x0,0x0,0xc,0x8,0x0,0xc,0x4,0xff	@: 0x4CB0 18405
	.byte	0x8,0xc,0x0,0xc,0x4,0xc,0xc,0x8,0xc,0x8,0x8,0xc,0x4,0x8,0x0,0xff	@: 0x4CC0 18420
	.byte	0x8,0x4,0x0,0x8,0x4,0x0,0x0,0x8,0xc,0x4,0x0,0x4,0x8,0x8,0x0,0xff	@: 0x4CD0 18435
	.byte	0x0,0xc,0xc,0x8,0x8,0x0,0x4,0xc,0xc,0x0,0x4,0x4,0x0,0x0,0xc,0xff	@: 0x4CE0 18450
	.byte	0x8,0xc,0xc,0x8,0x0,0x0,0xc,0x8,0x4,0xc,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x4CF0 18465
	.byte	0x8,0x0,0x8,0x4,0x4,0x0,0x0,0xc,0x8,0x8,0x4,0x0,0x8,0x0,0x0,0xff	@: 0x4D00 18480
	.byte	0x8,0x4,0x0,0x8,0x0,0x8,0x4,0x4,0xc,0x0,0x4,0x4,0x4,0x0,0xc,0xff	@: 0x4D10 18495
	.byte	0x4,0xc,0x4,0x4,0x8,0x0,0x4,0xc,0xc,0x4,0x8,0xc,0x8,0xc,0x8,0xff	@: 0x4D20 18510
	.byte	0x8,0x4,0xc,0xc,0x8,0xc,0xc,0x4,0x8,0x4,0x4,0xc,0x8,0x8,0x4,0xff	@: 0x4D30 18525
	.byte	0xc,0x4,0xc,0x0,0x0,0xc,0x8,0x0,0x0,0xc,0xc,0xc,0xc,0x8,0x4,0xff	@: 0x4D40 18540
	.byte	0x4,0xc,0x8,0x4,0xc,0x0,0xc,0x4,0x4,0x4,0x4,0x8,0xc,0x0,0x4,0xff	@: 0x4D50 18555
	.byte	0x4,0xc,0xc,0x0,0xc,0xc,0xc,0x0,0x4,0x4,0xc,0xc,0x0,0x8,0xc,0xff	@: 0x4D60 18570
	.byte	0x4,0x8,0xc,0x4,0x4,0xc,0xc,0x8,0x0,0xc,0x8,0x4,0x0,0x0,0xc,0xff	@: 0x4D70 18585
	.byte	0x8,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0xc,0x0,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x4D80 18600
	.byte	0x4,0x0,0x4,0x0,0xc,0x0,0x0,0x4,0xc,0x0,0x0,0x8,0x4,0x8,0x8,0xff	@: 0x4D90 18615
	.byte	0xc,0x4,0xc,0x8,0xc,0xc,0xc,0x4,0x8,0x8,0x8,0xc,0xc,0xc,0x8,0xff	@: 0x4DA0 18630
	.byte	0xc,0x8,0x4,0xc,0x8,0xc,0x0,0xc,0xc,0x4,0xc,0x0,0x4,0x4,0x0,0xff	@: 0x4DB0 18645
	.byte	0x4,0x0,0x8,0x4,0xc,0xc,0x4,0xc,0xc,0xc,0x8,0x4,0x0,0x8,0x4,0xff	@: 0x4DC0 18660
	.byte	0x0,0x0,0x8,0x0,0x4,0xc,0x8,0x4,0x8,0x8,0x0,0x4,0x4,0xc,0x8,0xff	@: 0x4DD0 18675
	.byte	0xc,0x4,0x8,0x4,0x8,0x8,0x0,0x0,0xc,0x8,0x0,0x0,0x8,0x0,0x0,0xff	@: 0x4DE0 18690
	.byte	0x4,0x8,0xc,0x8,0x8,0x8,0x0,0x4,0x0,0x8,0x8,0x4,0x4,0xc,0x8,0xff	@: 0x4DF0 18705
	.byte	0x4,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0xc,0x8,0xff	@: 0x4E00 18720
	.byte	0x4,0x8,0x0,0x0,0x4,0x8,0x4,0x0,0xc,0xc,0x8,0x4,0x0,0x0,0x0,0xff	@: 0x4E10 18735
	.byte	0x4,0x4,0x8,0xc,0x0,0x4,0x8,0x8,0x4,0x4,0xc,0x4,0x4,0x0,0x4,0xff	@: 0x4E20 18750
	.byte	0xc,0xc,0x8,0xc,0x8,0xc,0x8,0x0,0x8,0xc,0x0,0x4,0x8,0x4,0x0,0xff	@: 0x4E30 18765
	.byte	0x8,0x8,0x8,0x0,0xc,0x8,0x4,0x4,0x4,0xc,0x4,0x4,0x8,0xc,0xc,0xff	@: 0x4E40 18780
	.byte	0x8,0x8,0xc,0xc,0x0,0x4,0xc,0x8,0xc,0x4,0x4,0x0,0x0,0x0,0x0,0xff	@: 0x4E50 18795
	.byte	0x4,0x4,0x0,0x4,0x4,0x0,0x0,0xc,0xc,0x0,0x4,0x8,0x8,0x8,0x4,0xff	@: 0x4E60 18810
	.byte	0x0,0xc,0x8,0x4,0x0,0xc,0xc,0xc,0x0,0x4,0x0,0xc,0x0,0x8,0xc,0xff	@: 0x4E70 18825
	.byte	0x8,0x4,0x8,0x8,0x8,0x8,0x8,0xc,0xc,0x4,0x0,0x8,0x8,0xc,0x8,0xff	@: 0x4E80 18840
	.byte	0xc,0x0,0x8,0xc,0xc,0x4,0x4,0x8,0x0,0xc,0x8,0x0,0x0,0xc,0xc,0xff	@: 0x4E90 18855
	.byte	0xc,0x0,0x0,0x8,0xc,0x0,0x8,0xc,0x8,0x4,0x8,0x4,0x8,0x4,0x0,0xff	@: 0x4EA0 18870
	.byte	0x8,0x8,0x8,0x8,0x0,0xc,0x8,0x8,0x4,0x0,0x8,0x8,0x4,0xc,0x8,0xff	@: 0x4EB0 18885
	.byte	0x4,0xc,0xc,0x0,0xc,0x0,0x8,0x8,0x0,0x4,0xc,0x4,0xc,0x4,0x0,0xff	@: 0x4EC0 18900
	.byte	0xc,0x4,0x8,0xc,0xc,0xc,0xc,0x4,0xc,0x4,0x4,0x0,0x4,0x4,0xc,0xff	@: 0x4ED0 18915
	.byte	0xc,0xc,0x8,0xc,0x4,0x4,0x0,0x4,0x8,0x4,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x4EE0 18930
	.byte	0xc,0x8,0xc,0xc,0x8,0x4,0x0,0xc,0x4,0x0,0x8,0x4,0x8,0x4,0x4,0xff	@: 0x4EF0 18945
	.byte	0x0,0x4,0x0,0x4,0x8,0xc,0x8,0x8,0x8,0x0,0xc,0x4,0x4,0x4,0x8,0xff	@: 0x4F00 18960
	.byte	0x0,0x8,0x8,0x8,0x4,0x8,0xc,0x0,0x0,0x0,0x4,0xc,0x4,0xc,0x8,0xff	@: 0x4F10 18975
	.byte	0x0,0xc,0x4,0x0,0x4,0x8,0x0,0x8,0xc,0x8,0x0,0x0,0x0,0x4,0xc,0xff	@: 0x4F20 18990
	.byte	0xc,0x0,0x4,0xc,0x0,0x4,0xc,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x8,0xff	@: 0x4F30 19005
	.byte	0x4,0x8,0xc,0xc,0x0,0x8,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x8,0x8,0xff	@: 0x4F40 19020
	.byte	0x4,0x4,0x0,0x8,0xc,0xc,0x8,0xc,0x8,0xc,0xc,0x0,0x0,0x8,0x0,0xff	@: 0x4F50 19035
	.byte	0x4,0x0,0x0,0xc,0xc,0x8,0xc,0x4,0x8,0x4,0x8,0x4,0x8,0xc,0x8,0xff	@: 0x4F60 19050
	.byte	0x4,0x0,0x8,0x0,0xc,0x0,0x0,0x0,0x8,0x8,0x4,0x4,0x0,0x8,0x8,0xff	@: 0x4F70 19065
	.byte	0xc,0xc,0xc,0x8,0x8,0x8,0x4,0x8,0x8,0x0,0x0,0x0,0xc,0x8,0x0,0xff	@: 0x4F80 19080
	.byte	0x0,0x8,0xc,0x8,0x0,0x0,0x0,0x4,0x0,0x4,0x4,0x8,0x8,0xc,0x0,0xff	@: 0x4F90 19095
	.byte	0xc,0xc,0xc,0x4,0xc,0x0,0x0,0xc,0x8,0xc,0x4,0xc,0x8,0x0,0xc,0xff	@: 0x4FA0 19110
	.byte	0x0,0x8,0x4,0x8,0x0,0xc,0x8,0x0,0x4,0x4,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x4FB0 19125
	.byte	0xc,0xc,0x0,0x0,0x4,0x8,0x0,0x8,0x4,0xc,0x0,0x8,0xc,0xc,0x0,0xff	@: 0x4FC0 19140
	.byte	0xc,0x4,0x8,0x0,0x8,0x4,0x4,0x8,0xc,0x8,0x0,0x4,0x0,0xc,0x8,0xff	@: 0x4FD0 19155
	.byte	0x8,0x8,0x0,0x8,0x0,0x4,0x0,0xc,0x8,0xc,0x0,0x8,0x4,0xc,0x0,0xff	@: 0x4FE0 19170
	.byte	0xc,0x0,0x8,0xc,0x0,0xc,0x8,0xc,0x8,0xc,0x8,0xc,0x0,0x8,0x0,0xff	@: 0x4FF0 19185
	.byte	0x0,0xc,0x4,0xc,0x0,0x0,0x0,0x0,0x0,0x8,0xc,0x8,0x4,0xc,0xc,0xff	@: 0x5000 19200
	.byte	0x4,0x8,0x0,0x0,0x0,0xc,0x4,0x0,0x8,0x8,0x4,0xc,0xc,0x8,0xc,0xff	@: 0x5010 19215
	.byte	0x8,0xc,0x8,0x0,0xc,0x4,0x8,0xc,0x4,0x4,0x0,0xc,0xc,0x4,0xc,0xff	@: 0x5020 19230
	.byte	0xc,0xc,0x0,0xc,0x4,0x4,0x0,0x8,0x8,0x4,0xc,0xc,0x0,0x0,0xc,0xff	@: 0x5030 19245
	.byte	0xc,0x0,0xc,0xc,0x8,0x4,0x0,0x0,0x8,0x4,0x0,0xc,0xc,0x0,0x8,0xff	@: 0x5040 19260
	.byte	0x0,0x4,0x0,0x4,0xc,0xc,0x0,0x8,0x4,0x0,0x8,0xc,0xc,0x8,0xc,0xff	@: 0x5050 19275
	.byte	0x4,0x8,0x8,0x4,0x8,0x8,0x0,0xc,0xc,0xc,0xc,0x4,0x0,0xc,0x4,0xff	@: 0x5060 19290
	.byte	0xc,0x8,0x4,0x8,0xc,0x0,0x0,0x4,0xc,0x0,0x8,0xc,0x8,0x0,0x4,0xff	@: 0x5070 19305
	.byte	0x8,0x8,0x8,0x0,0x8,0x0,0x0,0x4,0xc,0x0,0xc,0x4,0x8,0xc,0xc,0xff	@: 0x5080 19320
	.byte	0x8,0xc,0x0,0xc,0x0,0x4,0x0,0x0,0x8,0xc,0x8,0x8,0xc,0xc,0x4,0xff	@: 0x5090 19335
	.byte	0x4,0x0,0x8,0x0,0x4,0x4,0x4,0x4,0xc,0x0,0x0,0x0,0xc,0xc,0x8,0xff	@: 0x50A0 19350
	.byte	0xc,0x8,0x8,0x4,0x0,0x8,0x0,0x0,0x4,0x8,0xc,0xc,0x4,0x4,0x4,0xff	@: 0x50B0 19365
	.byte	0x4,0x0,0x8,0x4,0x8,0x8,0x4,0x8,0x0,0x0,0xc,0x0,0xc,0x0,0x4,0xff	@: 0x50C0 19380
	.byte	0x0,0x8,0x0,0x8,0xc,0x4,0x0,0xc,0xc,0x4,0xc,0x8,0x8,0xc,0x4,0xff	@: 0x50D0 19395
	.byte	0x4,0x0,0xc,0x0,0x0,0x8,0xc,0xc,0x0,0xc,0x4,0x4,0x4,0x8,0xc,0xff	@: 0x50E0 19410
	.byte	0xc,0xc,0x8,0xc,0x4,0x0,0x0,0x0,0x4,0x8,0x8,0x4,0xc,0x0,0x0,0xff	@: 0x50F0 19425
	.byte	0xc,0x0,0x0,0xc,0x8,0xc,0x8,0x4,0x0,0x4,0x8,0xc,0x4,0x8,0x0,0xff	@: 0x5100 19440
	.byte	0x0,0x0,0x4,0x4,0x0,0x8,0xc,0x0,0x0,0x4,0x4,0x4,0x4,0xc,0x4,0xff	@: 0x5110 19455
	.byte	0x4,0x4,0xc,0x8,0x0,0x4,0x0,0xc,0x8,0x0,0x8,0x0,0x0,0x4,0x4,0xff	@: 0x5120 19470
	.byte	0x4,0x8,0x4,0x8,0x0,0x4,0x4,0x8,0xc,0xc,0x4,0xc,0x8,0x0,0x8,0xff	@: 0x5130 19485
	.byte	0x4,0x8,0x0,0x8,0x0,0x4,0x0,0x0,0xc,0x0,0xc,0x4,0x4,0x0,0x4,0xff	@: 0x5140 19500
	.byte	0x4,0x8,0x8,0x4,0x4,0xc,0xc,0x8,0x0,0x8,0x8,0x4,0x4,0x0,0xc,0xff	@: 0x5150 19515
	.byte	0x0,0x8,0x0,0x4,0x8,0x0,0x0,0x8,0x4,0xc,0xc,0x8,0x4,0x4,0x8,0xff	@: 0x5160 19530
	.byte	0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x4,0xff	@: 0x5170 19545
	.byte	0x8,0xc,0x8,0x8,0x0,0x0,0x0,0x4,0xc,0xc,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x5180 19560
	.byte	0x8,0x0,0x0,0xc,0x4,0xc,0x4,0x0,0x8,0xc,0x4,0x0,0x0,0x8,0x0,0xff	@: 0x5190 19575
	.byte	0x0,0x8,0x0,0xc,0x8,0xc,0xc,0x0,0x8,0x4,0xc,0x4,0x8,0x4,0x8,0xff	@: 0x51A0 19590
	.byte	0xc,0x8,0x4,0xc,0xc,0x0,0x8,0x0,0x4,0xc,0x0,0xc,0x8,0x8,0x8,0xff	@: 0x51B0 19605
	.byte	0x0,0x8,0x8,0x4,0x4,0x4,0x0,0x4,0xc,0x4,0x0,0x0,0xc,0x4,0x8,0xff	@: 0x51C0 19620
	.byte	0xc,0xc,0x0,0xc,0x8,0xc,0x8,0x8,0x4,0xc,0x8,0xc,0x8,0x0,0x0,0xff	@: 0x51D0 19635
	.byte	0x0,0xc,0x8,0x4,0x4,0xc,0xc,0x4,0x8,0x0,0x4,0x4,0x4,0x0,0xc,0xff	@: 0x51E0 19650
	.byte	0x8,0xc,0x0,0xc,0x4,0xc,0xc,0x4,0x8,0x4,0x4,0x4,0xc,0x8,0x0,0xff	@: 0x51F0 19665
	.byte	0xc,0xc,0xc,0xc,0xc,0x8,0x4,0x4,0x0,0xc,0x4,0x0,0x8,0x0,0x8,0xff	@: 0x5200 19680
	.byte	0x4,0x8,0x0,0xc,0x8,0x0,0x4,0x0,0x8,0x8,0x8,0x8,0x4,0x8,0xc,0xff	@: 0x5210 19695
	.byte	0x0,0x0,0x8,0x4,0xc,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0x4,0x0,0x4,0xff	@: 0x5220 19710
	.byte	0xc,0xc,0xc,0x4,0x0,0x4,0xc,0x4,0x4,0xc,0x4,0x4,0x0,0xc,0xc,0xff	@: 0x5230 19725
	.byte	0x8,0x4,0x8,0x4,0x4,0x0,0xc,0x8,0x4,0x0,0xc,0x8,0x4,0x8,0x4,0xff	@: 0x5240 19740
	.byte	0x4,0xc,0x8,0x0,0x8,0x4,0x0,0x4,0xc,0x8,0x8,0x0,0xc,0x4,0xc,0xff	@: 0x5250 19755
	.byte	0xc,0x8,0x4,0x8,0x4,0x0,0x4,0x4,0x8,0x8,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x5260 19770
	.byte	0x8,0x8,0x4,0xc,0x0,0xc,0x8,0x4,0x8,0x4,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x5270 19785
	.byte	0x4,0x4,0x8,0xc,0x8,0x0,0x4,0x0,0x0,0x0,0x8,0x4,0xc,0x8,0x0,0xff	@: 0x5280 19800
	.byte	0xc,0xc,0x8,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x4,0x4,0x8,0x4,0x0,0xff	@: 0x5290 19815
	.byte	0x0,0x4,0x8,0x4,0x0,0x8,0x0,0x8,0x4,0xc,0xc,0x0,0xc,0xc,0x8,0xff	@: 0x52A0 19830
	.byte	0x8,0x0,0xc,0xc,0x0,0x4,0xc,0x8,0x4,0x0,0xc,0x4,0x8,0x0,0x0,0xff	@: 0x52B0 19845
	.byte	0x8,0xc,0x0,0xc,0xc,0x4,0x4,0x0,0xc,0xc,0x0,0xc,0x0,0x4,0x0,0xff	@: 0x52C0 19860
	.byte	0x4,0x8,0x0,0xc,0xc,0x0,0xc,0x4,0xc,0x4,0x4,0x0,0x4,0x4,0x8,0xff	@: 0x52D0 19875
	.byte	0x4,0x4,0x0,0x8,0x4,0x8,0x0,0xc,0xc,0xc,0x8,0x8,0xc,0x4,0xc,0xff	@: 0x52E0 19890
	.byte	0x8,0x4,0xc,0x0,0x4,0x4,0x0,0x8,0x8,0x4,0x0,0x0,0xc,0x4,0x0,0xff	@: 0x52F0 19905
	.byte	0xc,0x4,0x8,0xc,0x0,0xc,0x8,0x4,0x8,0x0,0x4,0x4,0x8,0x8,0xc,0xff	@: 0x5300 19920
	.byte	0x4,0xc,0x8,0x0,0x0,0x0,0xc,0xc,0x8,0xc,0x0,0x8,0x0,0x4,0x0,0xff	@: 0x5310 19935
	.byte	0x8,0x8,0x0,0xc,0x4,0xc,0x8,0x4,0x4,0x0,0x4,0x0,0x0,0x8,0xc,0xff	@: 0x5320 19950
	.byte	0xc,0x4,0x8,0x8,0x4,0x4,0x8,0x4,0x0,0xc,0x0,0xc,0x4,0x4,0x4,0xff	@: 0x5330 19965
	.byte	0x4,0xc,0x4,0x4,0x8,0x0,0x4,0xc,0x4,0x4,0xc,0x8,0x0,0x4,0x0,0xff	@: 0x5340 19980
	.byte	0x0,0xc,0x0,0x0,0x4,0xc,0x8,0x8,0x4,0xc,0x0,0x0,0xc,0x4,0x0,0xff	@: 0x5350 19995
	.byte	0x0,0x4,0x0,0x0,0xc,0x0,0x8,0x0,0x4,0x0,0x8,0x0,0x4,0xc,0x4,0xff	@: 0x5360 20010
	.byte	0x0,0x8,0x4,0xc,0xc,0x0,0xc,0xc,0x8,0x8,0x4,0x8,0x0,0xc,0x0,0xff	@: 0x5370 20025
	.byte	0x0,0xc,0x8,0x8,0x4,0xc,0x4,0x4,0x0,0x8,0x8,0x0,0x4,0xc,0xc,0xff	@: 0x5380 20040
	.byte	0x8,0x4,0x4,0x8,0x4,0x0,0x4,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0x8,0xff	@: 0x5390 20055
	.byte	0x8,0xc,0xc,0xc,0x0,0x0,0x4,0xc,0x0,0xc,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x53A0 20070
	.byte	0xc,0x0,0xc,0x0,0xc,0x4,0x8,0x0,0x0,0x0,0x8,0xc,0x4,0x4,0x8,0xff	@: 0x53B0 20085
	.byte	0x0,0x0,0xc,0x8,0x0,0x0,0xc,0x8,0x8,0x0,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x53C0 20100
	.byte	0x0,0x8,0xc,0x4,0x0,0xc,0x4,0xc,0x4,0x4,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x53D0 20115
	.byte	0xc,0xc,0x0,0x8,0x8,0x0,0xc,0x4,0xc,0x4,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x53E0 20130
	.byte	0x4,0x4,0x4,0x0,0xc,0x0,0xc,0x4,0x8,0x4,0xc,0xc,0x4,0x0,0x0,0xff	@: 0x53F0 20145
	.byte	0x0,0x8,0x4,0xc,0xc,0x0,0x4,0x8,0x0,0x0,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x5400 20160
	.byte	0x8,0x8,0x4,0x0,0xc,0x8,0x4,0x0,0x0,0x4,0xc,0x8,0x8,0x8,0x0,0xff	@: 0x5410 20175
	.byte	0x0,0x8,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0xc,0x0,0x8,0xff	@: 0x5420 20190
	.byte	0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x0,0x4,0x8,0xc,0x0,0xc,0x4,0xc,0xff	@: 0x5430 20205
	.byte	0xc,0x4,0x0,0xc,0x4,0xc,0xc,0x8,0x8,0xc,0x8,0x8,0x8,0xc,0x0,0xff	@: 0x5440 20220
	.byte	0xc,0xc,0x0,0x4,0x0,0x0,0x4,0xc,0x8,0x8,0x4,0x8,0x0,0x0,0x0,0xff	@: 0x5450 20235
	.byte	0x8,0x8,0x4,0xc,0x4,0x8,0x0,0x4,0x8,0x0,0xc,0xc,0xc,0xc,0xc,0xff	@: 0x5460 20250
	.byte	0x8,0x8,0xc,0x0,0x4,0x0,0x8,0x4,0x4,0x4,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x5470 20265
	.byte	0x4,0x4,0xc,0x4,0xc,0xc,0x4,0x0,0x8,0x0,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x5480 20280
	.byte	0xc,0x8,0x4,0x4,0xc,0xc,0xc,0xc,0x8,0x4,0x0,0x0,0x0,0x4,0x0,0xff	@: 0x5490 20295
	.byte	0x0,0x8,0x8,0x0,0x4,0x4,0x0,0x4,0x4,0x4,0x8,0x4,0x8,0x8,0x0,0xff	@: 0x54A0 20310
	.byte	0xc,0xc,0x0,0x8,0x8,0xc,0x4,0x8,0x8,0x4,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x54B0 20325
	.byte	0x0,0x8,0x8,0x4,0x4,0x8,0xc,0xc,0x0,0x4,0x0,0xc,0x4,0xc,0x0,0xff	@: 0x54C0 20340
	.byte	0x8,0x8,0x4,0x8,0x0,0x4,0x0,0xc,0x0,0x0,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x54D0 20355
	.byte	0x4,0x8,0x0,0x0,0x0,0x8,0x8,0xc,0x0,0x8,0x8,0x4,0x4,0xc,0xc,0xff	@: 0x54E0 20370
	.byte	0xc,0xc,0x4,0xc,0xc,0x4,0xc,0x8,0x0,0x8,0x0,0x4,0xc,0xc,0x0,0xff	@: 0x54F0 20385
	.byte	0x8,0x0,0x0,0xc,0xc,0x4,0x0,0x8,0xc,0x8,0x8,0x4,0xc,0xc,0x0,0xff	@: 0x5500 20400
	.byte	0x8,0x4,0x0,0x4,0x4,0xc,0x4,0x4,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0xff	@: 0x5510 20415
	.byte	0x4,0x0,0x8,0x0,0x0,0x0,0x8,0x4,0x0,0x4,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x5520 20430
	.byte	0xc,0x8,0xc,0x0,0x8,0xc,0x4,0x8,0x0,0x8,0x0,0x4,0x8,0x0,0xc,0xff	@: 0x5530 20445
	.byte	0xc,0xc,0xc,0x4,0x4,0x4,0xc,0x8,0x8,0xc,0xc,0xc,0x0,0x4,0x4,0xff	@: 0x5540 20460
	.byte	0x0,0x4,0x4,0xc,0x0,0x8,0x8,0x0,0x4,0x0,0xc,0x0,0x8,0x4,0xc,0xff	@: 0x5550 20475
	.byte	0x4,0x4,0x4,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0x8,0x4,0x4,0xc,0xff	@: 0x5560 20490
	.byte	0x4,0xc,0xc,0x8,0x4,0x4,0x8,0x0,0x4,0x4,0xc,0xc,0x4,0xc,0xc,0xff	@: 0x5570 20505
	.byte	0x4,0xc,0xc,0x8,0x4,0x8,0x8,0x8,0x4,0x8,0xc,0xc,0x0,0x0,0x0,0xff	@: 0x5580 20520
	.byte	0xc,0x8,0x4,0x8,0xc,0xc,0x4,0x4,0x8,0x8,0xc,0x8,0x8,0x0,0xc,0xff	@: 0x5590 20535
	.byte	0x0,0x0,0x4,0x0,0x8,0x8,0x4,0x4,0x8,0xc,0xc,0x8,0x8,0x0,0x8,0xff	@: 0x55A0 20550
	.byte	0xc,0x4,0x8,0x0,0x4,0xc,0x0,0xc,0x8,0x4,0xc,0xc,0xc,0x4,0x4,0xff	@: 0x55B0 20565
	.byte	0x0,0x8,0x8,0x8,0xc,0x4,0x8,0xc,0x4,0xc,0x8,0x4,0x4,0x4,0x8,0xff	@: 0x55C0 20580
	.byte	0x8,0xc,0xc,0x0,0x0,0x0,0xc,0x8,0x0,0xc,0xc,0x4,0x0,0x4,0xc,0xff	@: 0x55D0 20595
	.byte	0x4,0x4,0xc,0x0,0x4,0x4,0xc,0x0,0xc,0x0,0x0,0x4,0x8,0x0,0x0,0xff	@: 0x55E0 20610
	.byte	0x4,0x8,0x4,0x0,0x4,0x8,0x0,0x8,0xc,0xc,0x0,0x0,0x4,0x0,0xc,0xff	@: 0x55F0 20625
	.byte	0x8,0xc,0x0,0xc,0x8,0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x4,0x4,0x8,0xff	@: 0x5600 20640
	.byte	0x0,0x8,0x4,0x8,0x0,0x4,0x0,0xc,0x4,0x8,0xc,0x0,0xc,0x4,0x4,0xff	@: 0x5610 20655
	.byte	0x0,0x4,0xc,0xc,0x4,0xc,0x4,0x8,0x0,0x4,0x0,0x4,0x4,0x4,0xc,0xff	@: 0x5620 20670
	.byte	0x4,0x4,0x0,0x4,0x0,0x0,0xc,0x8,0x4,0x0,0x8,0x8,0xc,0x8,0x4,0xff	@: 0x5630 20685
	.byte	0x8,0x0,0x4,0x0,0x4,0xc,0x4,0x4,0x4,0x0,0x0,0xc,0x4,0x4,0x8,0xff	@: 0x5640 20700
	.byte	0x4,0xc,0x8,0x0,0xc,0x8,0xc,0x4,0x8,0x8,0x4,0x0,0x0,0x8,0x8,0xff	@: 0x5650 20715
	.byte	0x0,0x8,0xc,0xc,0x4,0x0,0x0,0x8,0x4,0x0,0x0,0xc,0x4,0x0,0xc,0xff	@: 0x5660 20730
	.byte	0x0,0x0,0x8,0x8,0xc,0xc,0x8,0xc,0x8,0x0,0xc,0x4,0xc,0xc,0x0,0xff	@: 0x5670 20745
	.byte	0x0,0x8,0x0,0x8,0xc,0x8,0x4,0x4,0xc,0xc,0x8,0x4,0x0,0xc,0x0,0xff	@: 0x5680 20760
	.byte	0x8,0x8,0x4,0x8,0x0,0x8,0x8,0x8,0xc,0x4,0x8,0xc,0x4,0x0,0x8,0xff	@: 0x5690 20775
	.byte	0x0,0xc,0x4,0x0,0x4,0x4,0xc,0x0,0x0,0x4,0x8,0xc,0x8,0x0,0x0,0xff	@: 0x56A0 20790
	.byte	0x4,0x0,0x0,0x0,0x8,0xc,0x8,0x0,0x4,0x8,0x8,0xc,0x0,0x0,0x0,0xff	@: 0x56B0 20805
	.byte	0xc,0x0,0x0,0x0,0x4,0x8,0x8,0x8,0xc,0xc,0x8,0x8,0x8,0x0,0x4,0xff	@: 0x56C0 20820
	.byte	0x8,0x8,0x0,0x0,0x4,0xc,0x8,0x4,0xc,0x0,0x0,0x8,0x4,0x8,0x0,0xff	@: 0x56D0 20835
	.byte	0x0,0xc,0x8,0xc,0x8,0x0,0xc,0x0,0xc,0x8,0x8,0xc,0xc,0x4,0x8,0xff	@: 0x56E0 20850
	.byte	0xc,0x0,0x8,0x8,0x8,0x0,0x8,0xc,0x4,0x8,0xc,0x4,0xc,0x4,0x8,0xff	@: 0x56F0 20865
	.byte	0x0,0xc,0x0,0x8,0x4,0x0,0xc,0x0,0x8,0x8,0x0,0x8,0x4,0x4,0x8,0xff	@: 0x5700 20880
	.byte	0xc,0x0,0x0,0x0,0x8,0x8,0x0,0x4,0x0,0x8,0x8,0x0,0x4,0x4,0x4,0xff	@: 0x5710 20895
	.byte	0x0,0x8,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0xc,0x4,0x8,0x4,0xc,0x8,0xff	@: 0x5720 20910
	.byte	0xc,0x0,0x0,0x4,0x0,0xc,0x8,0x0,0x8,0x4,0xc,0x4,0x0,0x0,0x4,0xff	@: 0x5730 20925
	.byte	0x4,0x0,0x4,0x8,0x4,0x8,0xc,0x8,0x8,0x4,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x5740 20940
	.byte	0x0,0xc,0x8,0x8,0x4,0xc,0x4,0x0,0x0,0xc,0x8,0x0,0x8,0xc,0x8,0xff	@: 0x5750 20955
	.byte	0x4,0xc,0x0,0x8,0x8,0x4,0x4,0xc,0x4,0x4,0x0,0x8,0x8,0x0,0x4,0xff	@: 0x5760 20970
	.byte	0x8,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0x4,0x4,0x8,0xff	@: 0x5770 20985
	.byte	0xc,0x4,0x4,0xc,0x4,0xc,0xc,0xc,0x0,0x0,0x4,0xc,0x0,0xc,0x8,0xff	@: 0x5780 21000
	.byte	0x0,0x4,0xc,0x8,0x0,0x0,0x8,0x8,0x4,0x4,0x0,0x8,0x0,0x4,0x4,0xff	@: 0x5790 21015
	.byte	0x0,0xc,0x4,0x0,0xc,0x8,0xc,0x4,0xc,0x8,0x8,0x4,0x0,0x4,0xc,0xff	@: 0x57A0 21030
	.byte	0x8,0xc,0x8,0x0,0x0,0xc,0x4,0x0,0x8,0x4,0x0,0xc,0x0,0x4,0x8,0xff	@: 0x57B0 21045
	.byte	0x0,0xc,0x0,0x4,0xc,0x4,0x8,0x0,0x0,0x8,0xc,0x4,0x4,0x0,0x8,0xff	@: 0x57C0 21060
	.byte	0x8,0xc,0x8,0x8,0xc,0xc,0x8,0xc,0x4,0xc,0xc,0xc,0x4,0xc,0x8,0xff	@: 0x57D0 21075
	.byte	0x4,0x8,0x0,0x0,0x0,0x4,0x0,0x4,0xc,0xc,0x8,0xc,0x8,0x8,0x8,0xff	@: 0x57E0 21090
	.byte	0xc,0x4,0x4,0x4,0x8,0xc,0x8,0xc,0x0,0x4,0x4,0x8,0x4,0xc,0x0,0xff	@: 0x57F0 21105
	.byte	0x8,0xc,0xc,0x4,0x8,0x4,0xc,0xc,0x4,0xc,0x4,0x0,0xc,0xc,0x0,0xff	@: 0x5800 21120
	.byte	0x4,0x8,0xc,0x4,0xc,0x4,0x4,0x4,0x8,0x0,0x4,0x8,0x8,0x8,0x8,0xff	@: 0x5810 21135
	.byte	0xc,0x8,0x4,0x4,0xc,0x4,0x8,0x0,0x0,0xc,0xc,0xc,0xc,0x0,0x0,0xff	@: 0x5820 21150
	.byte	0xc,0xc,0x8,0x4,0x0,0x8,0x4,0xc,0x4,0xc,0x8,0x8,0x4,0x4,0x4,0xff	@: 0x5830 21165
	.byte	0x8,0xc,0x0,0x4,0x4,0x4,0x0,0x0,0x4,0x8,0x4,0x0,0x0,0xc,0x4,0xff	@: 0x5840 21180
	.byte	0x4,0xc,0x4,0xc,0x8,0x0,0x8,0xc,0xc,0x8,0xc,0x4,0x4,0x8,0xc,0xff	@: 0x5850 21195
	.byte	0x0,0xc,0x0,0x4,0x0,0x0,0xc,0x8,0xc,0x8,0xc,0xc,0x4,0x0,0x8,0xff	@: 0x5860 21210
	.byte	0x0,0xc,0x4,0x4,0x0,0x4,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0xc,0x0,0xff	@: 0x5870 21225
	.byte	0x0,0xc,0x4,0x8,0x0,0xc,0xc,0xc,0x0,0xc,0x8,0x8,0x0,0x0,0xc,0xff	@: 0x5880 21240
	.byte	0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0xc,0xc,0x8,0x4,0x8,0xff	@: 0x5890 21255
	.byte	0x4,0x8,0x8,0x0,0xc,0x4,0x4,0x8,0xc,0x0,0x8,0x0,0x4,0x8,0xc,0xff	@: 0x58A0 21270
	.byte	0x0,0x8,0x8,0x4,0x8,0x4,0xc,0x0,0x8,0xc,0x0,0x4,0x0,0x0,0xc,0xff	@: 0x58B0 21285
	.byte	0x4,0x8,0xc,0x4,0xc,0x0,0x8,0x8,0x4,0x4,0xc,0xc,0x8,0x0,0x8,0xff	@: 0x58C0 21300
	.byte	0x4,0x4,0x0,0xc,0xc,0xc,0x4,0x4,0xc,0x0,0x0,0x0,0xc,0x4,0x8,0xff	@: 0x58D0 21315
	.byte	0x0,0x4,0x0,0x4,0x0,0x0,0xc,0x4,0x8,0x4,0x8,0x8,0xc,0xc,0x0,0xff	@: 0x58E0 21330
	.byte	0x0,0x8,0xc,0xc,0x0,0x0,0x4,0xc,0xc,0x0,0xc,0x8,0x4,0x8,0x8,0xff	@: 0x58F0 21345
	.byte	0xc,0x8,0x0,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0xc,0x4,0x8,0x4,0x8,0xff	@: 0x5900 21360
	.byte	0x8,0x0,0x0,0x8,0x8,0xc,0x0,0xc,0x4,0x8,0xc,0xc,0x0,0x4,0x4,0xff	@: 0x5910 21375
	.byte	0x0,0xc,0x8,0x0,0x4,0x0,0x4,0x4,0x4,0x0,0x8,0x4,0x8,0x4,0x4,0xff	@: 0x5920 21390
	.byte	0x8,0x8,0xc,0x0,0xc,0x0,0x0,0x4,0x8,0x0,0x0,0xc,0x4,0x0,0xc,0xff	@: 0x5930 21405
	.byte	0x8,0x4,0x8,0x0,0xc,0xc,0xc,0x0,0x4,0x4,0x4,0xc,0xc,0xc,0x0,0xff	@: 0x5940 21420
	.byte	0x0,0x0,0x4,0x4,0xc,0xc,0xc,0x8,0x4,0xc,0x8,0x0,0xc,0x4,0x0,0xff	@: 0x5950 21435
	.byte	0xc,0x0,0x0,0x4,0x0,0xc,0xc,0x8,0x4,0xc,0x4,0x0,0x8,0x0,0x4,0xff	@: 0x5960 21450
	.byte	0x8,0x0,0xc,0x0,0xc,0x4,0x4,0x8,0x0,0x0,0x8,0x0,0xc,0x4,0x4,0xff	@: 0x5970 21465
	.byte	0xc,0x4,0x4,0xc,0x0,0x8,0x8,0x4,0x4,0xc,0x0,0x8,0x8,0x4,0x0,0xff	@: 0x5980 21480
	.byte	0x4,0x0,0xc,0x4,0x8,0x4,0x8,0x0,0x8,0x0,0xc,0x0,0x8,0x4,0x0,0xff	@: 0x5990 21495
	.byte	0xc,0x4,0x4,0x8,0x8,0x4,0x0,0x8,0x8,0x4,0x4,0x4,0x0,0x4,0x0,0xff	@: 0x59A0 21510
	.byte	0x4,0x4,0x4,0x0,0x8,0xc,0x8,0x8,0x0,0xc,0xc,0x4,0x4,0xc,0x0,0xff	@: 0x59B0 21525
	.byte	0x4,0x8,0xc,0x0,0x4,0x8,0x8,0x4,0x4,0x8,0xc,0x0,0x0,0x0,0x8,0xff	@: 0x59C0 21540
	.byte	0x4,0x4,0x0,0x8,0xc,0x8,0x8,0x8,0x0,0xc,0x4,0x8,0x8,0x4,0x0,0xff	@: 0x59D0 21555
	.byte	0x0,0x4,0x4,0x8,0x0,0x4,0x0,0xc,0xc,0xc,0x0,0xc,0xc,0xc,0x0,0xff	@: 0x59E0 21570
	.byte	0x8,0x8,0x0,0x4,0xc,0xc,0x4,0x8,0x4,0x4,0x0,0x4,0x0,0x8,0x0,0xff	@: 0x59F0 21585
	.byte	0x8,0x4,0xc,0xc,0x0,0xc,0x4,0x4,0x0,0x8,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x5A00 21600
	.byte	0xc,0x8,0x8,0xc,0x8,0x8,0x0,0xc,0x4,0x4,0xc,0x0,0x4,0x4,0x8,0xff	@: 0x5A10 21615
	.byte	0x4,0x4,0x0,0x0,0x8,0xc,0x8,0x0,0xc,0xc,0xc,0x4,0x8,0x8,0x0,0xff	@: 0x5A20 21630
	.byte	0x8,0x0,0x4,0x4,0x4,0x8,0xc,0xc,0x4,0xc,0x8,0x0,0xc,0x0,0x0,0xff	@: 0x5A30 21645
	.byte	0xc,0xc,0x8,0xc,0xc,0x0,0x4,0xc,0x8,0xc,0xc,0x8,0x0,0x8,0x8,0xff	@: 0x5A40 21660
	.byte	0x8,0x4,0x0,0x0,0xc,0xc,0x8,0xc,0x4,0x4,0x0,0x8,0xc,0x0,0xc,0xff	@: 0x5A50 21675
	.byte	0x4,0x0,0x4,0x8,0x4,0x0,0xc,0xc,0x0,0x4,0xc,0x8,0xc,0x8,0xc,0xff	@: 0x5A60 21690
	.byte	0xc,0x4,0xc,0xc,0x8,0x4,0x4,0x0,0x8,0x8,0x0,0x4,0x0,0x0,0x4,0xff	@: 0x5A70 21705
	.byte	0xc,0xc,0x0,0x0,0x0,0xc,0x0,0x8,0x4,0xc,0xc,0x0,0x8,0x4,0x0,0xff	@: 0x5A80 21720
	.byte	0xc,0x8,0x4,0xc,0xc,0xc,0x0,0xc,0xc,0x8,0x0,0x0,0xc,0x8,0x8,0xff	@: 0x5A90 21735
	.byte	0xc,0x4,0x8,0x8,0x4,0x8,0x0,0x4,0xc,0x8,0x4,0x8,0xc,0x4,0x8,0xff	@: 0x5AA0 21750
	.byte	0x4,0x8,0x4,0x0,0x0,0xc,0x0,0x0,0xc,0x8,0x0,0x8,0xc,0x0,0x4,0xff	@: 0x5AB0 21765
	.byte	0x8,0x8,0x4,0x4,0x4,0xc,0x8,0x8,0x4,0x4,0x8,0x8,0xc,0x4,0x8,0xff	@: 0x5AC0 21780
	.byte	0xc,0xc,0xc,0x4,0x0,0x0,0x4,0x4,0x4,0xc,0x0,0x8,0xc,0xc,0x0,0xff	@: 0x5AD0 21795
	.byte	0x0,0x8,0x0,0xc,0x4,0xc,0x8,0x8,0xc,0xc,0xc,0x0,0x0,0x8,0x8,0xff	@: 0x5AE0 21810
	.byte	0x8,0x4,0x0,0x4,0x8,0x0,0x4,0xc,0x8,0x4,0x0,0x0,0x4,0x4,0x4,0xff	@: 0x5AF0 21825
	.byte	0xc,0x0,0x8,0x0,0x0,0xc,0x0,0x8,0x8,0x8,0xc,0x4,0xc,0xc,0x8,0xff	@: 0x5B00 21840
	.byte	0x0,0x8,0x8,0x4,0xc,0x4,0x0,0x4,0x0,0x8,0x4,0x0,0x0,0x0,0xc,0xff	@: 0x5B10 21855
	.byte	0x0,0x8,0x8,0x8,0xc,0xc,0x0,0x0,0x8,0x4,0x0,0x0,0x8,0x4,0x4,0xff	@: 0x5B20 21870
	.byte	0x4,0x0,0xc,0x0,0xc,0x8,0xc,0xc,0x4,0x4,0x0,0x4,0x8,0x8,0x8,0xff	@: 0x5B30 21885
	.byte	0xc,0x0,0x0,0x0,0x8,0x8,0x4,0x0,0x8,0x8,0x4,0x4,0x4,0x0,0xc,0xff	@: 0x5B40 21900
	.byte	0x4,0xc,0x4,0x0,0x4,0xc,0x8,0xc,0x0,0xc,0x4,0x0,0xc,0xc,0xc,0xff	@: 0x5B50 21915
	.byte	0x8,0xc,0x8,0xc,0x8,0x8,0xc,0x0,0xc,0x0,0x0,0xc,0x0,0x8,0x0,0xff	@: 0x5B60 21930
	.byte	0x8,0x0,0xc,0x8,0x4,0x8,0x8,0xc,0x8,0xc,0x0,0x8,0x4,0x0,0x0,0xff	@: 0x5B70 21945
	.byte	0x0,0xc,0x0,0x4,0x0,0xc,0x0,0x0,0x8,0x8,0x0,0x0,0x8,0xc,0x4,0xff	@: 0x5B80 21960
	.byte	0x8,0x8,0xc,0xc,0x0,0x8,0x4,0xc,0x4,0x0,0xc,0x8,0xc,0x0,0x8,0xff	@: 0x5B90 21975
	.byte	0x8,0xc,0xc,0x0,0x8,0x8,0xc,0x8,0x8,0xc,0xc,0xc,0xc,0x4,0x8,0xff	@: 0x5BA0 21990
	.byte	0x0,0xc,0x8,0x4,0x0,0x8,0x8,0xc,0x4,0x4,0xc,0x0,0x0,0x0,0x4,0xff	@: 0x5BB0 22005
	.byte	0x0,0x8,0x4,0x0,0x4,0x8,0xc,0x8,0x4,0xc,0x8,0x0,0xc,0x4,0x4,0xff	@: 0x5BC0 22020
	.byte	0x8,0x8,0xc,0xc,0xc,0x0,0x4,0x4,0x4,0x0,0x4,0xc,0x4,0x0,0x4,0xff	@: 0x5BD0 22035
	.byte	0x0,0x8,0x0,0x8,0xc,0x0,0x0,0x8,0x0,0x0,0x4,0x0,0x8,0x4,0x0,0xff	@: 0x5BE0 22050
	.byte	0x4,0x4,0x0,0x8,0x4,0x8,0x8,0x4,0x0,0x4,0x8,0x4,0x4,0x0,0x8,0xff	@: 0x5BF0 22065
	.byte	0x0,0xc,0x4,0x8,0x8,0x4,0x4,0x8,0x8,0x0,0x0,0x8,0x8,0xc,0x4,0xff	@: 0x5C00 22080
	.byte	0x0,0xc,0x8,0x8,0x4,0xc,0x0,0x4,0x4,0xc,0x4,0x0,0xc,0x8,0x4,0xff	@: 0x5C10 22095
	.byte	0x8,0x0,0x0,0x8,0x0,0x4,0xc,0x0,0x8,0xc,0x4,0xc,0x0,0x4,0x4,0xff	@: 0x5C20 22110
	.byte	0x4,0x8,0x4,0x0,0x4,0x0,0x0,0x4,0xc,0x0,0x4,0x0,0x0,0x0,0x0,0xff	@: 0x5C30 22125
	.byte	0xc,0x0,0x4,0x8,0x0,0x4,0x8,0xc,0xc,0x8,0x0,0x0,0x0,0x4,0xc,0xff	@: 0x5C40 22140
	.byte	0x4,0x8,0xc,0x4,0x8,0xc,0x8,0x0,0x0,0x4,0xc,0x0,0x8,0x8,0x0,0xff	@: 0x5C50 22155
	.byte	0x8,0xc,0x8,0x4,0x8,0x0,0x0,0x4,0xc,0x0,0x0,0xc,0x8,0x8,0x0,0xff	@: 0x5C60 22170
	.byte	0x8,0x8,0x0,0x8,0x0,0xc,0x0,0xc,0x8,0x0,0x0,0x8,0x8,0x4,0x8,0xff	@: 0x5C70 22185
	.byte	0xc,0x8,0x4,0x8,0x8,0x4,0x4,0xc,0xc,0x8,0x8,0xc,0x8,0xc,0x8,0xff	@: 0x5C80 22200
	.byte	0x8,0x8,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0x8,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x5C90 22215
	.byte	0x4,0xc,0xc,0xc,0x4,0x4,0x0,0x8,0x4,0x4,0x4,0x8,0x0,0x0,0x0,0xff	@: 0x5CA0 22230
	.byte	0x8,0x8,0x4,0x8,0x8,0x0,0xc,0x0,0x0,0x8,0x8,0xc,0x4,0xc,0x0,0xff	@: 0x5CB0 22245
	.byte	0x8,0x8,0x8,0x8,0xc,0x4,0x0,0x8,0x4,0x8,0x0,0xc,0x4,0x0,0x8,0xff	@: 0x5CC0 22260
	.byte	0xc,0x0,0x4,0x4,0x4,0x0,0x4,0xc,0xc,0x4,0xc,0xc,0x4,0x4,0xc,0xff	@: 0x5CD0 22275
	.byte	0x4,0x8,0x4,0x0,0x8,0xc,0x8,0x4,0xc,0xc,0xc,0x4,0x4,0x8,0x0,0xff	@: 0x5CE0 22290
	.byte	0x4,0xc,0x4,0x4,0x0,0x0,0xc,0xc,0x0,0x8,0x4,0x0,0x8,0x8,0xc,0xff	@: 0x5CF0 22305
	.byte	0x8,0x8,0x0,0x0,0x4,0x8,0xc,0xc,0x4,0x8,0xc,0x8,0x4,0x8,0x0,0xff	@: 0x5D00 22320
	.byte	0x0,0x8,0x4,0xc,0x0,0x4,0x8,0x0,0x0,0x0,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x5D10 22335
	.byte	0x8,0x0,0x4,0x0,0xc,0x0,0x4,0xc,0x0,0x0,0x0,0x4,0xc,0x8,0x4,0xff	@: 0x5D20 22350
	.byte	0x8,0x0,0x0,0xc,0x8,0x0,0x8,0x0,0x0,0x4,0xc,0x0,0xc,0xc,0x8,0xff	@: 0x5D30 22365
	.byte	0x8,0x4,0xc,0x0,0x8,0x0,0xc,0x4,0x4,0x0,0x0,0xc,0x0,0x4,0x4,0xff	@: 0x5D40 22380
	.byte	0x8,0x8,0x0,0x4,0xc,0x4,0x0,0x8,0x4,0xc,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x5D50 22395
	.byte	0x4,0x0,0xc,0x8,0xc,0x8,0xc,0x0,0xc,0xc,0x0,0xc,0x4,0x0,0x4,0xff	@: 0x5D60 22410
	.byte	0x4,0xc,0xc,0x4,0x4,0xc,0x8,0x0,0xc,0x8,0x0,0xc,0xc,0x8,0xc,0xff	@: 0x5D70 22425
	.byte	0xc,0x4,0x0,0x8,0x4,0x4,0x4,0x8,0x8,0x0,0x4,0x0,0x4,0x8,0x8,0xff	@: 0x5D80 22440
	.byte	0x0,0x8,0x4,0x4,0x4,0x4,0x4,0x8,0x8,0x4,0xc,0x0,0x4,0x4,0x8,0xff	@: 0x5D90 22455
	.byte	0xc,0x0,0x8,0x4,0x0,0x4,0x0,0xc,0x0,0x4,0x0,0x0,0x8,0x8,0x8,0xff	@: 0x5DA0 22470
	.byte	0x8,0xc,0x4,0x8,0x4,0xc,0x8,0x0,0x4,0x4,0xc,0x0,0x8,0x0,0x0,0xff	@: 0x5DB0 22485
	.byte	0xc,0x0,0x4,0x4,0x4,0x8,0xc,0xc,0x4,0x8,0x4,0xc,0xc,0x0,0xc,0xff	@: 0x5DC0 22500
	.byte	0xc,0xc,0xc,0x0,0x4,0x4,0x4,0x8,0x4,0x4,0xc,0x8,0xc,0xc,0x0,0xff	@: 0x5DD0 22515
	.byte	0x0,0x0,0x0,0x0,0x4,0xc,0xc,0x4,0xc,0x4,0x8,0x8,0xc,0x4,0xc,0xff	@: 0x5DE0 22530
	.byte	0x4,0xc,0x0,0x8,0x8,0x4,0x8,0x4,0xc,0xc,0x4,0xc,0x0,0x0,0x8,0xff	@: 0x5DF0 22545
	.byte	0x4,0x4,0x4,0xc,0x8,0x8,0x0,0x4,0x0,0x0,0xc,0xc,0x8,0x4,0x0,0xff	@: 0x5E00 22560
	.byte	0xc,0x8,0xc,0x4,0xc,0x0,0x0,0x0,0x8,0xc,0x0,0xc,0x4,0x8,0x4,0xff	@: 0x5E10 22575
	.byte	0xc,0x4,0x4,0x8,0x8,0x0,0x0,0x0,0x4,0xc,0x8,0x8,0x4,0x4,0xc,0xff	@: 0x5E20 22590
	.byte	0x8,0xc,0x4,0xc,0x0,0x4,0xc,0xc,0x4,0xc,0x8,0x4,0xc,0x8,0x8,0xff	@: 0x5E30 22605
	.byte	0x8,0x4,0x4,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x4,0x4,0x8,0x4,0xc,0xff	@: 0x5E40 22620
	.byte	0xc,0x8,0xc,0xc,0x0,0x0,0x4,0xc,0x0,0xc,0x4,0x0,0xc,0x4,0x0,0xff	@: 0x5E50 22635
	.byte	0x4,0xc,0x8,0x4,0x4,0x4,0x0,0x4,0x4,0x4,0xc,0x4,0x4,0x8,0x4,0xff	@: 0x5E60 22650
	.byte	0xc,0xc,0x0,0x8,0x0,0x4,0x4,0x8,0x4,0x4,0xc,0x0,0xc,0x8,0x8,0xff	@: 0x5E70 22665
	.byte	0xc,0x4,0x8,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0xc,0x8,0x0,0x4,0x4,0xff	@: 0x5E80 22680
	.byte	0xc,0x4,0xc,0x0,0xc,0xc,0x4,0x0,0xc,0x0,0x4,0x8,0x4,0x0,0x4,0xff	@: 0x5E90 22695
	.byte	0x0,0xc,0x4,0x8,0x4,0x8,0x8,0x8,0x8,0x8,0x0,0x4,0x0,0x4,0xc,0xff	@: 0x5EA0 22710
	.byte	0x0,0x8,0xc,0x0,0x4,0x0,0xc,0x4,0xc,0x0,0x4,0x0,0x0,0x0,0x0,0xff	@: 0x5EB0 22725
	.byte	0xc,0xc,0x8,0x8,0x4,0x4,0x8,0xc,0x8,0xc,0x4,0x0,0x0,0x8,0x8,0xff	@: 0x5EC0 22740
	.byte	0x0,0xc,0xc,0x0,0xc,0xc,0x4,0x0,0x0,0x0,0x4,0x8,0x8,0x8,0x4,0xff	@: 0x5ED0 22755
	.byte	0x8,0xc,0x8,0x4,0x0,0x4,0x4,0xc,0xc,0xc,0x0,0x0,0xc,0xc,0xc,0xff	@: 0x5EE0 22770
	.byte	0xc,0xc,0x8,0xc,0x8,0x8,0x0,0x0,0x8,0x4,0x0,0x8,0x8,0x4,0x0,0xff	@: 0x5EF0 22785
	.byte	0x0,0xc,0x4,0x0,0x4,0x0,0x4,0x0,0x8,0x0,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x5F00 22800
	.byte	0xc,0x0,0x4,0x4,0x4,0x0,0x0,0xc,0x4,0x4,0xc,0x4,0xc,0xc,0x4,0xff	@: 0x5F10 22815
	.byte	0x4,0xc,0x0,0xc,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0x4,0x4,0x8,0x0,0xff	@: 0x5F20 22830
	.byte	0x0,0xc,0x0,0xc,0x4,0x8,0x0,0x0,0xc,0x4,0xc,0x0,0x8,0x8,0x4,0xff	@: 0x5F30 22845
	.byte	0x0,0xc,0xc,0xc,0x4,0xc,0x8,0x8,0x8,0x0,0x0,0xc,0xc,0x4,0x8,0xff	@: 0x5F40 22860
	.byte	0xc,0x0,0xc,0x8,0x4,0x8,0x8,0x0,0x4,0x4,0xc,0xc,0xc,0x8,0x4,0xff	@: 0x5F50 22875
	.byte	0x4,0x4,0x4,0x0,0xc,0xc,0xc,0x0,0x8,0x4,0xc,0x4,0x4,0xc,0x8,0xff	@: 0x5F60 22890
	.byte	0x8,0xc,0x0,0x0,0xc,0x4,0x8,0xc,0xc,0x4,0x4,0x4,0x4,0x4,0x0,0xff	@: 0x5F70 22905
	.byte	0x8,0x4,0x8,0xc,0xc,0x4,0xc,0xc,0x4,0x0,0xc,0x4,0x4,0x8,0x8,0xff	@: 0x5F80 22920
	.byte	0xc,0x0,0xc,0x0,0x0,0x0,0x8,0xc,0x4,0x8,0x4,0x0,0x4,0x8,0xc,0xff	@: 0x5F90 22935
	.byte	0x0,0x8,0x8,0xc,0x0,0x8,0x4,0x4,0x8,0xc,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x5FA0 22950
	.byte	0x0,0x8,0x4,0x8,0x4,0xc,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x4,0x0,0xff	@: 0x5FB0 22965
	.byte	0x8,0xc,0x4,0xc,0x8,0x4,0xc,0x0,0xc,0xc,0x8,0x8,0xc,0x0,0x4,0xff	@: 0x5FC0 22980
	.byte	0x4,0x4,0x4,0x8,0x4,0x8,0x0,0x4,0x4,0x0,0xc,0x8,0x8,0xc,0x0,0xff	@: 0x5FD0 22995
	.byte	0xc,0xc,0x8,0xc,0x4,0xc,0xc,0xc,0x0,0x0,0x8,0x4,0x4,0x4,0x8,0xff	@: 0x5FE0 23010
	.byte	0x0,0xc,0x4,0x8,0x4,0xc,0x4,0x4,0x4,0xc,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x5FF0 23025
	.byte	0xc,0x4,0x0,0x8,0x8,0x8,0x4,0x8,0x8,0x4,0x4,0x4,0xc,0x0,0xc,0xff	@: 0x6000 23040
	.byte	0xc,0xc,0x8,0xc,0x0,0xc,0xc,0xc,0x8,0x0,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x6010 23055
	.byte	0xc,0x0,0xc,0x4,0x0,0xc,0x4,0x8,0xc,0xc,0x4,0x8,0x8,0x4,0xc,0xff	@: 0x6020 23070
	.byte	0x8,0x4,0x8,0x0,0x4,0xc,0x0,0x4,0x0,0xc,0x8,0x4,0x4,0x4,0x4,0xff	@: 0x6030 23085
	.byte	0x0,0x0,0xc,0xc,0x0,0x4,0x4,0x4,0x4,0x0,0x8,0xc,0x4,0x0,0x4,0xff	@: 0x6040 23100
	.byte	0x8,0x0,0x0,0x8,0x4,0x4,0x0,0x4,0x4,0xc,0x0,0xc,0xc,0x4,0xc,0xff	@: 0x6050 23115
	.byte	0x8,0xc,0x8,0x0,0x4,0x8,0x0,0x8,0x4,0x0,0xc,0x8,0x4,0xc,0xc,0xff	@: 0x6060 23130
	.byte	0x4,0x8,0x4,0x0,0x4,0x4,0xc,0x0,0xc,0x0,0x0,0x4,0x8,0x8,0xc,0xff	@: 0x6070 23145
	.byte	0x0,0x4,0x4,0x4,0x0,0xc,0x8,0xc,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0xff	@: 0x6080 23160
	.byte	0x4,0x4,0x8,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x8,0x0,0x0,0xc,0x8,0xff	@: 0x6090 23175
	.byte	0x8,0x0,0x8,0xc,0x0,0x8,0x0,0xc,0xc,0xc,0x0,0x4,0x0,0xc,0x4,0xff	@: 0x60A0 23190
	.byte	0x4,0x8,0x8,0x8,0xc,0x4,0xc,0xc,0x4,0xc,0x8,0x0,0x4,0xc,0x4,0xff	@: 0x60B0 23205
	.byte	0xc,0x4,0xc,0x8,0xc,0x0,0x8,0xc,0x8,0x4,0x8,0xc,0x8,0x0,0x4,0xff	@: 0x60C0 23220
	.byte	0xc,0x0,0x0,0xc,0x8,0xc,0x0,0x4,0x8,0x0,0xc,0x8,0xc,0x0,0x8,0xff	@: 0x60D0 23235
	.byte	0xc,0x8,0xc,0x4,0x4,0x0,0xc,0x4,0x4,0xc,0x8,0x0,0x0,0x4,0x4,0xff	@: 0x60E0 23250
	.byte	0xc,0xc,0x4,0x4,0x8,0xc,0x4,0xc,0x0,0x0,0x4,0x0,0x4,0xc,0x4,0xff	@: 0x60F0 23265
	.byte	0xc,0x0,0x0,0x4,0xc,0x4,0x8,0x8,0xc,0x8,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x6100 23280
	.byte	0x4,0x0,0x8,0x8,0x8,0xc,0x8,0x4,0xc,0x4,0x4,0x4,0xc,0xc,0x4,0xff	@: 0x6110 23295
	.byte	0xc,0xc,0x0,0x4,0xc,0x4,0x8,0x8,0x8,0x0,0x8,0x8,0x4,0xc,0xc,0xff	@: 0x6120 23310
	.byte	0x0,0x0,0x8,0xc,0x0,0x4,0x0,0x4,0x4,0x4,0x4,0x0,0xc,0x4,0x8,0xff	@: 0x6130 23325
	.byte	0x8,0xc,0x8,0xc,0x4,0x8,0x4,0x4,0x4,0x4,0xc,0xc,0x8,0x8,0x4,0xff	@: 0x6140 23340
	.byte	0x4,0x4,0x8,0xc,0x0,0x0,0x0,0x4,0x8,0x4,0x4,0x0,0x4,0x0,0x8,0xff	@: 0x6150 23355
	.byte	0xc,0x8,0x4,0xc,0x8,0x8,0x4,0x4,0x8,0xc,0xc,0x0,0xc,0x4,0xc,0xff	@: 0x6160 23370
	.byte	0x8,0x8,0x4,0x8,0x8,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x8,0x4,0x0,0xff	@: 0x6170 23385
	.byte	0x4,0xc,0x4,0x8,0x0,0x0,0x0,0xc,0x8,0x0,0x8,0x8,0x0,0x4,0xc,0xff	@: 0x6180 23400
	.byte	0xc,0xc,0x0,0x0,0x8,0x8,0x4,0x4,0x8,0x8,0x4,0x0,0xc,0x0,0x4,0xff	@: 0x6190 23415
	.byte	0xc,0x8,0xc,0x8,0xc,0xc,0x0,0x0,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0xff	@: 0x61A0 23430
	.byte	0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0xc,0x4,0xc,0xff	@: 0x61B0 23445
	.byte	0xc,0x4,0x8,0xc,0x0,0x0,0x8,0xc,0x8,0xc,0x8,0x0,0x8,0x4,0xc,0xff	@: 0x61C0 23460
	.byte	0xc,0xc,0xc,0x0,0x0,0x4,0x4,0x4,0xc,0xc,0x4,0x4,0x8,0xc,0x8,0xff	@: 0x61D0 23475
	.byte	0x4,0x0,0x0,0x8,0x0,0x0,0xc,0x4,0x0,0x8,0xc,0x8,0x8,0x4,0x4,0xff	@: 0x61E0 23490
	.byte	0xc,0x0,0xc,0x0,0x8,0x4,0x4,0x0,0xc,0x8,0x0,0xc,0x4,0x4,0x0,0xff	@: 0x61F0 23505
	.byte	0x4,0x0,0x8,0xc,0x4,0x8,0x4,0x0,0xc,0x0,0xc,0x8,0x0,0xc,0x0,0xff	@: 0x6200 23520
	.byte	0x0,0xc,0x8,0xc,0xc,0x8,0x4,0x0,0x4,0x4,0xc,0x8,0x4,0x4,0x4,0xff	@: 0x6210 23535
	.byte	0xc,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x0,0xff	@: 0x6220 23550
	.byte	0x0,0x0,0x4,0x8,0x0,0x0,0xc,0x0,0x0,0x8,0x8,0xc,0x8,0xc,0xc,0xff	@: 0x6230 23565
	.byte	0x4,0xc,0x4,0x0,0x8,0x4,0x8,0x0,0xc,0x0,0xc,0xc,0x8,0xc,0x0,0xff	@: 0x6240 23580
	.byte	0x8,0x4,0x4,0x0,0xc,0x8,0x4,0xc,0xc,0xc,0x0,0x0,0x4,0x8,0x8,0xff	@: 0x6250 23595
	.byte	0x0,0x8,0xc,0xc,0x0,0x8,0x0,0x8,0x8,0x0,0x8,0xc,0xc,0x0,0x0,0xff	@: 0x6260 23610
	.byte	0x4,0x4,0x4,0xc,0xc,0xc,0x4,0x0,0x4,0x4,0x8,0x0,0x0,0xc,0x8,0xff	@: 0x6270 23625
	.byte	0x0,0x8,0x0,0x0,0x8,0x8,0x4,0x4,0x0,0xc,0x8,0x0,0x0,0xc,0x4,0xff	@: 0x6280 23640
	.byte	0x8,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x8,0x8,0x8,0x0,0x4,0xc,0x0,0xff	@: 0x6290 23655
	.byte	0x0,0xc,0xc,0x8,0x0,0x8,0x0,0x8,0xc,0x8,0x8,0x4,0xc,0x0,0x4,0xff	@: 0x62A0 23670
	.byte	0xc,0x8,0xc,0xc,0xc,0xc,0x0,0x8,0xc,0x0,0x4,0x4,0x4,0x0,0xc,0xff	@: 0x62B0 23685
	.byte	0x4,0x4,0x4,0x8,0x0,0x4,0x8,0xc,0x0,0xc,0x0,0x0,0x0,0x8,0x8,0xff	@: 0x62C0 23700
	.byte	0xc,0x0,0x4,0x0,0x0,0x0,0x8,0x8,0x0,0xc,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x62D0 23715
	.byte	0x4,0x8,0x8,0x8,0x0,0x4,0xc,0x0,0x8,0xc,0x0,0xc,0x8,0x0,0xc,0xff	@: 0x62E0 23730
	.byte	0xc,0x4,0x0,0x8,0x4,0xc,0x8,0x0,0x0,0x8,0x0,0x8,0x8,0x0,0x8,0xff	@: 0x62F0 23745
	.byte	0x4,0x4,0x8,0x0,0x8,0x0,0x8,0x8,0x0,0xc,0xc,0x4,0xc,0x0,0x0,0xff	@: 0x6300 23760
	.byte	0x4,0xc,0x4,0x8,0xc,0x8,0x8,0x4,0x4,0x4,0x8,0x8,0x4,0x0,0x4,0xff	@: 0x6310 23775
	.byte	0x0,0xc,0x8,0x4,0x4,0xc,0x8,0x4,0x4,0xc,0x0,0x8,0x0,0x0,0x4,0xff	@: 0x6320 23790
	.byte	0x8,0xc,0xc,0x0,0x0,0xc,0xc,0x8,0x4,0x4,0x0,0x0,0xc,0xc,0x8,0xff	@: 0x6330 23805
	.byte	0x0,0x8,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x0,0x4,0x8,0x0,0x8,0x4,0xff	@: 0x6340 23820
	.byte	0x4,0x0,0x4,0xc,0x8,0xc,0x0,0x8,0x0,0x8,0xc,0x8,0x8,0x8,0x4,0xff	@: 0x6350 23835
	.byte	0x8,0xc,0x0,0x4,0x8,0xc,0x8,0x4,0xc,0x0,0x0,0x8,0xc,0x4,0x0,0xff	@: 0x6360 23850
	.byte	0xc,0x0,0xc,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0xc,0x8,0x0,0x0,0xff	@: 0x6370 23865
	.byte	0xc,0xc,0xc,0xc,0x0,0xc,0xc,0xc,0x0,0x4,0x0,0x8,0x0,0x8,0x8,0xff	@: 0x6380 23880
	.byte	0x4,0x8,0xc,0x4,0x4,0xc,0x8,0x8,0x0,0x0,0x4,0xc,0x0,0xc,0x0,0xff	@: 0x6390 23895
	.byte	0x4,0xc,0x4,0x8,0x8,0x8,0x0,0x0,0x8,0x0,0x4,0x4,0x0,0x8,0x4,0xff	@: 0x63A0 23910
	.byte	0x4,0x4,0x4,0x4,0xc,0x8,0xc,0x0,0x4,0x0,0x4,0xc,0x0,0x4,0x4,0xff	@: 0x63B0 23925
	.byte	0x8,0xc,0x4,0x0,0xc,0xc,0x4,0x4,0xc,0x0,0x0,0x0,0x0,0xc,0xc,0xff	@: 0x63C0 23940
	.byte	0x4,0xc,0x8,0x4,0x8,0x4,0x8,0x0,0xc,0x0,0x8,0xc,0x0,0x0,0x8,0xff	@: 0x63D0 23955
	.byte	0x8,0xc,0xc,0x0,0x4,0xc,0xc,0x0,0x0,0xc,0x0,0xc,0x4,0x0,0xc,0xff	@: 0x63E0 23970
	.byte	0x4,0x4,0xc,0x0,0x4,0x4,0x4,0xc,0xc,0x0,0x4,0xc,0x4,0xc,0x8,0xff	@: 0x63F0 23985
	.byte	0x0,0x0,0xc,0x8,0x8,0x8,0xc,0x4,0x8,0x4,0x8,0xc,0xc,0x8,0xc,0xff	@: 0x6400 24000
	.byte	0x4,0x4,0x8,0xc,0x8,0xc,0x8,0x8,0xc,0x8,0xc,0x0,0x4,0x8,0x8,0xff	@: 0x6410 24015
	.byte	0x8,0xc,0x8,0x4,0x8,0xc,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0xc,0x0,0xff	@: 0x6420 24030
	.byte	0x8,0x4,0x4,0x4,0x8,0x8,0x0,0xc,0xc,0x0,0x8,0x4,0xc,0xc,0x8,0xff	@: 0x6430 24045
	.byte	0x0,0x0,0xc,0xc,0x4,0x0,0x4,0x4,0xc,0x8,0x4,0x8,0x4,0x8,0x8,0xff	@: 0x6440 24060
	.byte	0x0,0x4,0xc,0xc,0x0,0xc,0xc,0x0,0x0,0xc,0x8,0x4,0x4,0xc,0x0,0xff	@: 0x6450 24075
	.byte	0x0,0xc,0xc,0xc,0xc,0x4,0x8,0x0,0x0,0x8,0x0,0xc,0x8,0x0,0x4,0xff	@: 0x6460 24090
	.byte	0xc,0x4,0x0,0x4,0x4,0x4,0xc,0x4,0x4,0x4,0x0,0x0,0x0,0xc,0x0,0xff	@: 0x6470 24105
	.byte	0x4,0x4,0x8,0x8,0x4,0x4,0x8,0x4,0xc,0x8,0x4,0xc,0xc,0xc,0x0,0xff	@: 0x6480 24120
	.byte	0x8,0x8,0x4,0x4,0x0,0x0,0x8,0x4,0x8,0x4,0xc,0x4,0xc,0x8,0xc,0xff	@: 0x6490 24135
	.byte	0xc,0x0,0x8,0x8,0x0,0x4,0x8,0x8,0xc,0xc,0x0,0x4,0x8,0x0,0xc,0xff	@: 0x64A0 24150
	.byte	0xc,0x4,0x0,0x4,0x0,0x8,0x4,0x0,0x0,0x8,0xc,0x4,0x4,0x8,0x4,0xff	@: 0x64B0 24165
	.byte	0x0,0x4,0x4,0xc,0x8,0xc,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0xc,0xff	@: 0x64C0 24180
	.byte	0x8,0x4,0x8,0xc,0xc,0xc,0x4,0x4,0x4,0xc,0xc,0x8,0xc,0x8,0x0,0xff	@: 0x64D0 24195
	.byte	0x8,0x0,0x0,0x8,0x8,0x8,0xc,0xc,0x8,0x8,0x8,0x0,0x0,0x4,0x8,0xff	@: 0x64E0 24210
	.byte	0x4,0x4,0xc,0x8,0x0,0x4,0x0,0x0,0x8,0x8,0xc,0x8,0x0,0x8,0xc,0xff	@: 0x64F0 24225
	.byte	0x8,0x8,0x0,0x8,0xc,0x0,0xc,0x4,0xc,0x0,0x4,0x4,0x0,0x4,0xc,0xff	@: 0x6500 24240
	.byte	0x4,0x4,0x8,0x8,0x4,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x8,0x4,0xc,0xff	@: 0x6510 24255
	.byte	0x0,0x4,0x8,0xc,0x8,0x0,0x0,0xc,0x4,0x0,0xc,0x0,0x4,0xc,0xc,0xff	@: 0x6520 24270
	.byte	0x8,0x8,0xc,0x0,0xc,0x0,0x4,0x4,0x0,0x0,0xc,0x4,0x0,0x8,0x4,0xff	@: 0x6530 24285
	.byte	0xc,0x4,0xc,0x0,0x8,0x4,0x0,0x0,0x4,0x4,0xc,0x0,0x0,0x8,0xc,0xff	@: 0x6540 24300
	.byte	0x0,0x4,0x4,0x0,0x0,0x4,0x8,0x4,0x0,0x8,0x0,0x8,0x8,0x4,0x8,0xff	@: 0x6550 24315
	.byte	0x8,0xc,0x4,0x8,0x8,0x4,0x0,0x8,0xc,0x0,0x0,0x8,0x4,0x0,0xc,0xff	@: 0x6560 24330
	.byte	0x4,0x4,0x0,0x8,0xc,0x0,0x4,0x8,0xc,0xc,0x8,0x4,0x8,0x0,0x8,0xff	@: 0x6570 24345
	.byte	0x0,0x0,0xc,0x4,0xc,0x4,0x0,0x0,0x8,0x4,0x8,0x0,0xc,0x0,0x0,0xff	@: 0x6580 24360
	.byte	0xc,0x4,0x0,0x8,0x8,0x8,0x4,0x4,0x0,0x0,0x8,0x8,0x4,0xc,0x4,0xff	@: 0x6590 24375
	.byte	0x0,0x4,0x8,0xc,0x4,0xc,0xc,0x4,0x8,0x0,0xc,0xc,0x4,0x8,0x4,0xff	@: 0x65A0 24390
	.byte	0x0,0x4,0x0,0x0,0x0,0x8,0xc,0x8,0xc,0xc,0x8,0xc,0x8,0x8,0x8,0xff	@: 0x65B0 24405
	.byte	0xc,0x4,0x8,0x8,0xc,0x4,0xc,0xc,0x8,0x0,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x65C0 24420
	.byte	0xc,0x8,0x4,0x0,0xc,0xc,0x8,0x0,0x8,0x0,0x8,0x8,0xc,0x0,0x8,0xff	@: 0x65D0 24435
	.byte	0xc,0x8,0x4,0xc,0xc,0x8,0xc,0xc,0x4,0x4,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x65E0 24450
	.byte	0xc,0x8,0xc,0x8,0xc,0x4,0x8,0x0,0x8,0x8,0x4,0x0,0x4,0x8,0x4,0xff	@: 0x65F0 24465
	.byte	0x8,0x0,0xc,0xc,0x0,0x8,0xc,0x8,0x0,0xc,0x0,0x8,0xc,0x4,0x4,0xff	@: 0x6600 24480
	.byte	0x0,0xc,0x0,0x4,0xc,0x0,0x0,0x0,0x8,0x4,0x0,0x0,0x4,0x0,0x4,0xff	@: 0x6610 24495
	.byte	0x8,0x4,0x4,0x8,0x4,0x4,0x8,0x8,0x0,0x0,0x0,0x8,0xc,0xc,0x4,0xff	@: 0x6620 24510
	.byte	0x4,0xc,0x4,0x8,0x8,0xc,0xc,0x4,0xc,0xc,0xc,0xc,0x0,0x8,0xc,0xff	@: 0x6630 24525
	.byte	0x8,0x4,0x0,0xc,0x8,0x4,0x8,0x8,0x4,0xc,0xc,0x0,0x4,0x8,0x4,0xff	@: 0x6640 24540
	.byte	0x0,0x8,0x0,0x0,0x0,0x8,0x4,0xc,0x0,0x0,0x8,0x8,0x4,0xc,0x0,0xff	@: 0x6650 24555
	.byte	0x4,0x4,0x0,0x4,0x4,0xc,0x0,0x0,0x0,0x4,0x0,0x0,0xc,0x0,0xc,0xff	@: 0x6660 24570
	.byte	0x8,0x8,0xc,0x8,0xc,0xc,0xc,0x4,0xc,0x0,0x4,0xc,0xc,0xc,0x8,0xff	@: 0x6670 24585
	.byte	0x0,0x0,0xc,0x8,0xc,0x4,0x4,0xc,0xc,0x4,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x6680 24600
	.byte	0x0,0x8,0xc,0xc,0x4,0x0,0xc,0xc,0x0,0x4,0x8,0xc,0x4,0x0,0x0,0xff	@: 0x6690 24615
	.byte	0x0,0xc,0x8,0x0,0x8,0x8,0x4,0x0,0x4,0x0,0x4,0x4,0x8,0xc,0xc,0xff	@: 0x66A0 24630
	.byte	0x0,0x0,0x4,0x0,0x8,0x4,0x4,0xc,0xc,0x8,0xc,0x0,0x0,0xc,0x4,0xff	@: 0x66B0 24645
	.byte	0xc,0x8,0xc,0x8,0x0,0x0,0xc,0x4,0x8,0x0,0x4,0x0,0x4,0x0,0x8,0xff	@: 0x66C0 24660
	.byte	0xc,0xc,0x8,0x8,0xc,0x0,0x8,0x0,0x0,0x0,0x4,0xc,0x4,0x4,0x0,0xff	@: 0x66D0 24675
	.byte	0x8,0x4,0x4,0x8,0x4,0x0,0x8,0x8,0x8,0x4,0x8,0x8,0x8,0x0,0x0,0xff	@: 0x66E0 24690
	.byte	0x8,0xc,0xc,0x4,0x0,0xc,0x0,0x8,0x0,0x4,0xc,0x0,0xc,0xc,0x8,0xff	@: 0x66F0 24705
	.byte	0x4,0x4,0x4,0x8,0x8,0x8,0x8,0x4,0x0,0xc,0x8,0x8,0xc,0x4,0x4,0xff	@: 0x6700 24720
	.byte	0xc,0xc,0x8,0x8,0x4,0x4,0x0,0xc,0xc,0x8,0x0,0xc,0x0,0xc,0x0,0xff	@: 0x6710 24735
	.byte	0x8,0x0,0x4,0x4,0x0,0x8,0x4,0x4,0xc,0xc,0xc,0x8,0x4,0x4,0x4,0xff	@: 0x6720 24750
	.byte	0xc,0x0,0x0,0x8,0x4,0xc,0xc,0x8,0x0,0x8,0x0,0x0,0xc,0x4,0x0,0xff	@: 0x6730 24765
	.byte	0xc,0x4,0xc,0x4,0x8,0x0,0x4,0x0,0xc,0x4,0xc,0x8,0x4,0x4,0x4,0xff	@: 0x6740 24780
	.byte	0x8,0x4,0x4,0x4,0x8,0x4,0x4,0x0,0xc,0x4,0xc,0x0,0x0,0xc,0x4,0xff	@: 0x6750 24795
	.byte	0x0,0x0,0x4,0xc,0x8,0x4,0x4,0x0,0x8,0xc,0x0,0x8,0xc,0x8,0x8,0xff	@: 0x6760 24810
	.byte	0x4,0x0,0x0,0x4,0x8,0x8,0x8,0xc,0x0,0x8,0x4,0x0,0xc,0x8,0x8,0xff	@: 0x6770 24825
	.byte	0xc,0x4,0xc,0x8,0xc,0x0,0x8,0x8,0x4,0x0,0xc,0x4,0x4,0x0,0x0,0xff	@: 0x6780 24840
	.byte	0x0,0x0,0xc,0xc,0xc,0x8,0xc,0x0,0x4,0x0,0x4,0x0,0xc,0x8,0x0,0xff	@: 0x6790 24855
	.byte	0x0,0x0,0xc,0xc,0xc,0xc,0x8,0x0,0x8,0x4,0x0,0xc,0x8,0x8,0x8,0xff	@: 0x67A0 24870
	.byte	0x8,0x4,0x8,0x0,0x4,0x0,0x4,0x8,0x0,0x4,0x4,0x4,0xc,0x4,0x0,0xff	@: 0x67B0 24885
	.byte	0x4,0x8,0x0,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0x8,0xc,0x0,0x4,0x4,0xff	@: 0x67C0 24900
	.byte	0x4,0x0,0xc,0x8,0x4,0xc,0x4,0x0,0xc,0x0,0x8,0x8,0x0,0x4,0x4,0xff	@: 0x67D0 24915
	.byte	0x8,0xc,0x4,0x0,0x8,0x8,0xc,0x4,0x4,0xc,0x4,0xc,0x4,0x0,0x0,0xff	@: 0x67E0 24930
	.byte	0x8,0x4,0x4,0x4,0x0,0x8,0x0,0xc,0x4,0xc,0x0,0x0,0xc,0xc,0x0,0xff	@: 0x67F0 24945
	.byte	0xc,0x4,0x8,0x0,0x0,0xc,0xc,0xc,0x8,0xc,0x0,0x0,0x4,0x0,0x4,0xff	@: 0x6800 24960
	.byte	0x8,0xc,0x0,0x8,0x4,0x0,0x4,0xc,0x4,0x0,0x0,0xc,0x4,0x8,0x8,0xff	@: 0x6810 24975
	.byte	0x4,0x4,0x4,0xc,0xc,0x8,0xc,0x8,0x8,0x0,0x0,0x0,0x8,0x8,0x0,0xff	@: 0x6820 24990
	.byte	0xc,0xc,0xc,0x4,0x8,0xc,0xc,0x0,0x4,0xc,0x0,0xc,0x4,0xc,0x4,0xff	@: 0x6830 25005
	.byte	0x8,0x4,0x8,0x8,0x0,0x0,0x4,0xc,0x0,0x0,0x4,0x4,0x0,0x8,0x8,0xff	@: 0x6840 25020
	.byte	0x8,0x0,0x0,0xc,0x4,0xc,0x8,0x0,0x8,0x4,0x4,0x0,0x0,0x4,0x4,0xff	@: 0x6850 25035
	.byte	0xc,0x8,0x0,0x0,0x4,0x4,0x4,0x4,0x0,0x4,0x8,0x0,0xc,0xc,0x4,0xff	@: 0x6860 25050
	.byte	0xc,0x8,0xc,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0x0,0x8,0x0,0x0,0x0,0xff	@: 0x6870 25065
	.byte	0x4,0x4,0xc,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0x0,0xc,0xff	@: 0x6880 25080
	.byte	0xc,0xc,0xc,0x0,0xc,0x4,0x8,0x8,0xc,0xc,0x4,0x8,0x8,0x8,0xc,0xff	@: 0x6890 25095
	.byte	0x0,0x8,0x4,0x4,0x4,0x4,0x8,0xc,0x0,0xc,0x8,0xc,0x0,0x0,0x8,0xff	@: 0x68A0 25110
	.byte	0x4,0x0,0x8,0xc,0x4,0x4,0x0,0xc,0x4,0xc,0xc,0xc,0xc,0x0,0xc,0xff	@: 0x68B0 25125
	.byte	0x4,0xc,0x4,0x0,0x8,0x4,0x8,0x4,0x0,0x4,0x8,0xc,0x8,0x8,0x8,0xff	@: 0x68C0 25140
	.byte	0x8,0xc,0xc,0x4,0x4,0x0,0xc,0x0,0x8,0x0,0x4,0x0,0x4,0xc,0x4,0xff	@: 0x68D0 25155
	.byte	0x8,0x0,0x0,0x0,0x8,0x8,0xc,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x68E0 25170
	.byte	0x4,0x0,0x8,0x4,0xc,0xc,0x8,0x0,0x8,0xc,0x8,0x8,0xc,0x0,0xc,0xff	@: 0x68F0 25185
	.byte	0x8,0x0,0x0,0x4,0x4,0x0,0x0,0xc,0xc,0x0,0x8,0xc,0x4,0x0,0x8,0xff	@: 0x6900 25200
	.byte	0xc,0xc,0x0,0x8,0x0,0xc,0x0,0xc,0x0,0xc,0xc,0x4,0x4,0x4,0x8,0xff	@: 0x6910 25215
	.byte	0x0,0xc,0x0,0x4,0x4,0xc,0x8,0x0,0x8,0x8,0x0,0x4,0xc,0x4,0xc,0xff	@: 0x6920 25230
	.byte	0x0,0x0,0x0,0xc,0xc,0x8,0xc,0xc,0x0,0x0,0x4,0x4,0xc,0x8,0x8,0xff	@: 0x6930 25245
	.byte	0x4,0xc,0x0,0x0,0x4,0xc,0x4,0x4,0x8,0x0,0x4,0xc,0x0,0x0,0x0,0xff	@: 0x6940 25260
	.byte	0xc,0x0,0x4,0x0,0xc,0x0,0x8,0xc,0x0,0x4,0x4,0x0,0x0,0x4,0x8,0xff	@: 0x6950 25275
	.byte	0x0,0x8,0x0,0x8,0x0,0xc,0x4,0x0,0x0,0xc,0x0,0x0,0xc,0x4,0x8,0xff	@: 0x6960 25290
	.byte	0x8,0x8,0x8,0x0,0x0,0x4,0x8,0x4,0x8,0x8,0x8,0xc,0xc,0x0,0x4,0xff	@: 0x6970 25305
	.byte	0xc,0x0,0xc,0x8,0x0,0x8,0x4,0x8,0x0,0xc,0x8,0x4,0x4,0xc,0x4,0xff	@: 0x6980 25320
	.byte	0x8,0x0,0xc,0xc,0x8,0x4,0x0,0xc,0x0,0x4,0x0,0x0,0x4,0x0,0xc,0xff	@: 0x6990 25335
	.byte	0x4,0x0,0x4,0x0,0x8,0xc,0x8,0x8,0xc,0x4,0xc,0x8,0x0,0xc,0x0,0xff	@: 0x69A0 25350
	.byte	0x8,0x8,0x0,0x0,0x8,0xc,0x8,0x4,0x0,0x4,0x8,0x8,0x0,0xc,0x0,0xff	@: 0x69B0 25365
	.byte	0x8,0xc,0x4,0xc,0x0,0xc,0xc,0x8,0x4,0x8,0x8,0x0,0xc,0x4,0x8,0xff	@: 0x69C0 25380
	.byte	0x0,0x4,0x0,0x4,0x8,0xc,0xc,0x0,0x8,0x0,0x8,0x0,0x4,0x0,0x8,0xff	@: 0x69D0 25395
	.byte	0xc,0x0,0x0,0x8,0x4,0xc,0xc,0x8,0xc,0x8,0xc,0x8,0x0,0xc,0x0,0xff	@: 0x69E0 25410
	.byte	0x0,0x8,0x8,0x4,0xc,0x0,0x0,0x0,0xc,0xc,0x4,0x0,0xc,0xc,0x0,0xff	@: 0x69F0 25425
	.byte	0xc,0x8,0x4,0xc,0x0,0xc,0x8,0x8,0xc,0xc,0xc,0xc,0x0,0xc,0xc,0xff	@: 0x6A00 25440
	.byte	0x4,0x8,0x8,0xc,0x0,0x4,0xc,0xc,0x8,0x8,0x0,0x0,0xc,0xc,0x4,0xff	@: 0x6A10 25455
	.byte	0x8,0x0,0x8,0xc,0xc,0x8,0x4,0x0,0xc,0x8,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x6A20 25470
	.byte	0xc,0x4,0x8,0x0,0x8,0x8,0x4,0xc,0x8,0x0,0x4,0xc,0x8,0x8,0xc,0xff	@: 0x6A30 25485
	.byte	0xc,0x0,0x0,0x8,0x8,0x8,0xc,0x4,0x0,0x4,0xc,0x0,0xc,0x0,0x8,0xff	@: 0x6A40 25500
	.byte	0x0,0xc,0x0,0x8,0x8,0xc,0x4,0xc,0x4,0x8,0x4,0x0,0x8,0x4,0x4,0xff	@: 0x6A50 25515
	.byte	0x0,0xc,0xc,0x0,0x8,0xc,0x0,0x0,0x4,0xc,0xc,0x4,0x0,0xc,0x8,0xff	@: 0x6A60 25530
	.byte	0x0,0x0,0xc,0x8,0x8,0xc,0x0,0x4,0xc,0x4,0x4,0x4,0x0,0x4,0x0,0xff	@: 0x6A70 25545
	.byte	0xc,0x4,0x0,0x8,0x8,0xc,0x0,0x8,0x8,0xc,0x8,0x8,0x4,0x8,0xc,0xff	@: 0x6A80 25560
	.byte	0x0,0xc,0x0,0x4,0xc,0x4,0x8,0xc,0xc,0x8,0x4,0x0,0x8,0x0,0xc,0xff	@: 0x6A90 25575
	.byte	0x0,0x4,0xc,0x4,0xc,0x0,0x4,0x8,0x0,0x8,0x0,0x4,0x4,0xc,0x4,0xff	@: 0x6AA0 25590
	.byte	0xc,0x0,0x8,0x0,0xc,0x8,0x0,0x8,0x0,0x4,0x4,0x8,0xc,0x0,0x4,0xff	@: 0x6AB0 25605
	.byte	0xc,0x4,0x8,0xc,0x0,0x8,0xc,0x8,0x8,0x4,0x4,0xc,0x8,0x8,0xc,0xff	@: 0x6AC0 25620
	.byte	0x8,0x8,0x8,0xc,0x4,0x8,0x8,0xc,0xc,0x4,0x4,0x4,0xc,0x8,0x8,0xff	@: 0x6AD0 25635
	.byte	0x0,0x4,0xc,0x8,0x0,0x0,0x8,0xc,0xc,0x4,0x0,0xc,0x0,0xc,0x8,0xff	@: 0x6AE0 25650
	.byte	0xc,0x8,0x8,0xc,0xc,0x4,0x0,0xc,0xc,0xc,0x8,0x4,0x4,0xc,0x4,0xff	@: 0x6AF0 25665
	.byte	0x4,0x8,0x8,0x0,0x0,0x8,0x8,0xc,0x4,0x0,0xc,0x0,0xc,0x0,0x8,0xff	@: 0x6B00 25680
	.byte	0x0,0xc,0xc,0xc,0x4,0x8,0x8,0xc,0x0,0x8,0x4,0xc,0x4,0xc,0x4,0xff	@: 0x6B10 25695
	.byte	0x8,0xc,0xc,0xc,0x8,0xc,0xc,0xc,0x8,0x4,0x8,0x0,0x0,0x8,0x8,0xff	@: 0x6B20 25710
	.byte	0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x4,0xc,0x0,0x4,0x8,0xc,0xff	@: 0x6B30 25725
	.byte	0xc,0xc,0x4,0x4,0xc,0x4,0x8,0x0,0xc,0x4,0x0,0x8,0x0,0x8,0xc,0xff	@: 0x6B40 25740
	.byte	0x0,0xc,0xc,0x8,0xc,0x4,0x0,0xc,0xc,0xc,0x8,0xc,0xc,0xc,0x4,0xff	@: 0x6B50 25755
	.byte	0x4,0xc,0x4,0x0,0xc,0x0,0x4,0x4,0x0,0xc,0x4,0x8,0x4,0x4,0xc,0xff	@: 0x6B60 25770
	.byte	0x4,0xc,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x4,0xc,0xc,0x4,0x4,0xc,0xff	@: 0x6B70 25785
	.byte	0x0,0x0,0xc,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x8,0x4,0x4,0x0,0xff	@: 0x6B80 25800
	.byte	0xc,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0x4,0xc,0x8,0xc,0x4,0x0,0xc,0xff	@: 0x6B90 25815
	.byte	0x0,0xc,0x4,0x8,0x8,0x0,0x4,0xc,0xc,0x8,0xc,0x0,0x4,0xc,0x8,0xff	@: 0x6BA0 25830
	.byte	0xc,0xc,0xc,0x8,0x0,0xc,0x4,0xc,0xc,0x8,0x8,0xc,0x8,0x8,0x4,0xff	@: 0x6BB0 25845
	.byte	0x4,0x0,0x0,0xc,0x4,0x4,0xc,0x4,0x8,0x4,0x4,0x0,0x4,0x8,0xc,0xff	@: 0x6BC0 25860
	.byte	0xc,0x8,0xc,0x0,0xc,0xc,0x8,0x0,0xc,0x0,0x4,0x4,0x8,0xc,0x4,0xff	@: 0x6BD0 25875
	.byte	0x4,0x4,0x8,0x4,0xc,0x0,0xc,0xc,0x4,0x4,0x0,0xc,0x0,0x4,0x4,0xff	@: 0x6BE0 25890
	.byte	0xc,0xc,0xc,0x4,0x4,0x0,0x0,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0x0,0xff	@: 0x6BF0 25905
	.byte	0x0,0x0,0xc,0x4,0x0,0x0,0x0,0x8,0x8,0x4,0x8,0xc,0x0,0x8,0xc,0xff	@: 0x6C00 25920
	.byte	0x4,0xc,0x4,0x4,0x4,0xc,0x8,0xc,0x0,0x0,0x4,0x4,0x4,0x0,0x8,0xff	@: 0x6C10 25935
	.byte	0x4,0x4,0x4,0xc,0xc,0x8,0x8,0x4,0x8,0xc,0x0,0x8,0x8,0x8,0x4,0xff	@: 0x6C20 25950
	.byte	0x4,0x4,0x4,0x0,0x8,0x8,0x8,0xc,0x4,0xc,0x0,0x4,0x8,0x8,0xc,0xff	@: 0x6C30 25965
	.byte	0x4,0xc,0x4,0x0,0xc,0x0,0x0,0x8,0x0,0x0,0xc,0xc,0x0,0xc,0x8,0xff	@: 0x6C40 25980
	.byte	0x4,0x4,0xc,0x0,0x8,0xc,0xc,0x0,0x8,0xc,0x0,0x0,0x8,0x8,0x8,0xff	@: 0x6C50 25995
	.byte	0x8,0x4,0x8,0x4,0x8,0x0,0x4,0x0,0x0,0x0,0xc,0x4,0x4,0x8,0x0,0xff	@: 0x6C60 26010
	.byte	0x4,0xc,0x0,0x4,0x0,0xc,0x0,0xc,0x0,0x4,0x8,0xc,0x0,0x4,0x8,0xff	@: 0x6C70 26025
	.byte	0x0,0x8,0x4,0x8,0x4,0x8,0xc,0x8,0x4,0x0,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x6C80 26040
	.byte	0x0,0xc,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0xc,0xc,0x0,0x4,0x4,0xc,0xff	@: 0x6C90 26055
	.byte	0xc,0x8,0x8,0xc,0x0,0x4,0x0,0x0,0x0,0x0,0xc,0x4,0x0,0x0,0x0,0xff	@: 0x6CA0 26070
	.byte	0x4,0x4,0x0,0x8,0x4,0x8,0xc,0xc,0xc,0xc,0x0,0xc,0x4,0xc,0x8,0xff	@: 0x6CB0 26085
	.byte	0x4,0x8,0x4,0x0,0x0,0xc,0x8,0x4,0xc,0x0,0x0,0xc,0x0,0xc,0x4,0xff	@: 0x6CC0 26100
	.byte	0x4,0x0,0x0,0x8,0xc,0xc,0x4,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0xff	@: 0x6CD0 26115
	.byte	0x8,0x0,0xc,0xc,0xc,0x8,0x8,0xc,0x0,0x8,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x6CE0 26130
	.byte	0x0,0x4,0xc,0xc,0x0,0xc,0x8,0xc,0x4,0x4,0x4,0x8,0xc,0x4,0x4,0xff	@: 0x6CF0 26145
	.byte	0xc,0xc,0x4,0x8,0xc,0x0,0x0,0x4,0x4,0x8,0x0,0x8,0x4,0x4,0x8,0xff	@: 0x6D00 26160
	.byte	0x0,0x0,0x4,0xc,0x8,0x0,0x4,0x0,0xc,0x4,0x8,0x0,0x8,0x4,0x4,0xff	@: 0x6D10 26175
	.byte	0x4,0x8,0x4,0x0,0xc,0x4,0x4,0x4,0x0,0xc,0xc,0x0,0x8,0x0,0x4,0xff	@: 0x6D20 26190
	.byte	0x4,0x8,0x0,0xc,0x4,0x4,0xc,0x4,0x4,0x8,0xc,0x0,0x0,0x8,0xc,0xff	@: 0x6D30 26205
	.byte	0x8,0x0,0xc,0x4,0x0,0xc,0x8,0x4,0xc,0x0,0x8,0xc,0xc,0x0,0x4,0xff	@: 0x6D40 26220
	.byte	0x4,0xc,0x8,0x4,0x8,0x0,0xc,0x8,0x4,0x8,0xc,0x8,0x8,0x8,0xc,0xff	@: 0x6D50 26235
	.byte	0x0,0x4,0x0,0x0,0x0,0x8,0xc,0xc,0x0,0x0,0x4,0x0,0x4,0x8,0x8,0xff	@: 0x6D60 26250
	.byte	0x4,0x0,0x8,0x4,0x4,0xc,0xc,0xc,0xc,0xc,0x0,0x0,0xc,0x8,0xc,0xff	@: 0x6D70 26265
	.byte	0xc,0xc,0x0,0xc,0x8,0x4,0x0,0x8,0x8,0x0,0xc,0xc,0x0,0xc,0x8,0xff	@: 0x6D80 26280
	.byte	0x8,0x4,0x4,0x8,0x0,0x4,0x0,0x4,0x8,0x4,0x0,0x4,0x4,0x0,0xc,0xff	@: 0x6D90 26295
	.byte	0x8,0x0,0x4,0x8,0x4,0x8,0x8,0x4,0x4,0x8,0xc,0x4,0x4,0x0,0x8,0xff	@: 0x6DA0 26310
	.byte	0x8,0x0,0x4,0x0,0x8,0x0,0xc,0xc,0x4,0x0,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x6DB0 26325
	.byte	0x0,0x8,0xc,0xc,0x8,0x0,0x0,0xc,0x8,0x4,0x8,0x8,0x8,0x0,0x8,0xff	@: 0x6DC0 26340
	.byte	0x8,0x4,0x4,0x0,0xc,0x0,0x0,0x8,0x8,0x0,0x0,0x4,0x4,0x8,0x0,0xff	@: 0x6DD0 26355
	.byte	0x4,0x0,0x8,0x8,0x4,0xc,0x0,0x0,0xc,0x8,0x4,0x8,0x4,0x0,0x0,0xff	@: 0x6DE0 26370
	.byte	0x8,0xc,0x0,0x4,0xc,0xc,0x8,0x8,0x4,0x4,0x4,0x0,0x0,0x4,0xc,0xff	@: 0x6DF0 26385
	.byte	0x8,0xc,0x4,0x8,0x0,0x0,0x8,0xc,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0xff	@: 0x6E00 26400
	.byte	0x4,0xc,0x8,0x4,0x0,0x4,0x0,0x8,0x4,0x4,0x0,0x0,0x8,0x8,0xc,0xff	@: 0x6E10 26415
	.byte	0xc,0x8,0xc,0x8,0x0,0x4,0x4,0x8,0x0,0xc,0x4,0x4,0x4,0xc,0x8,0xff	@: 0x6E20 26430
	.byte	0xc,0x8,0x0,0xc,0x0,0x4,0x0,0xc,0x8,0x8,0xc,0x4,0x4,0x8,0x8,0xff	@: 0x6E30 26445
	.byte	0x8,0x4,0x4,0xc,0x0,0x4,0xc,0x8,0xc,0x4,0x4,0x4,0x4,0x4,0xc,0xff	@: 0x6E40 26460
	.byte	0x8,0x4,0x4,0x8,0x8,0x0,0x8,0x0,0xc,0xc,0x8,0x4,0x8,0x8,0x4,0xff	@: 0x6E50 26475
	.byte	0x4,0x0,0x0,0xc,0x8,0x8,0x8,0x8,0x4,0x4,0xc,0x0,0xc,0xc,0x4,0xff	@: 0x6E60 26490
	.byte	0x8,0xc,0xc,0x4,0xc,0x8,0xc,0x0,0x8,0x4,0x8,0x4,0x4,0x0,0x8,0xff	@: 0x6E70 26505
	.byte	0x0,0x4,0x0,0x0,0x8,0x8,0xc,0x0,0x8,0x0,0x8,0x8,0x4,0x0,0xc,0xff	@: 0x6E80 26520
	.byte	0x0,0x0,0x0,0x4,0x4,0x0,0x4,0xc,0x0,0x0,0x4,0xc,0x0,0x8,0x8,0xff	@: 0x6E90 26535
	.byte	0x0,0x4,0x0,0x4,0x4,0x0,0x8,0xc,0xc,0xc,0xc,0xc,0x0,0x8,0x0,0xff	@: 0x6EA0 26550
	.byte	0x8,0x0,0xc,0x8,0x8,0x0,0xc,0x4,0x0,0x4,0xc,0x8,0xc,0x8,0x8,0xff	@: 0x6EB0 26565
	.byte	0xc,0x4,0x4,0x8,0x4,0xc,0x8,0x4,0xc,0x0,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x6EC0 26580
	.byte	0xc,0x8,0x4,0x4,0x4,0x8,0x4,0xc,0x4,0x8,0x4,0xc,0x4,0xc,0x4,0xff	@: 0x6ED0 26595
	.byte	0xc,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0xff	@: 0x6EE0 26610
	.byte	0x4,0x4,0x8,0xc,0x4,0xc,0x0,0x8,0x0,0x4,0x0,0xc,0xc,0x0,0xc,0xff	@: 0x6EF0 26625
	.byte	0xc,0xc,0x8,0xc,0x4,0x8,0x8,0x0,0x4,0x0,0xc,0xc,0x8,0x8,0xc,0xff	@: 0x6F00 26640
	.byte	0xc,0x4,0x0,0xc,0xc,0x4,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x8,0x8,0xff	@: 0x6F10 26655
	.byte	0x0,0xc,0xc,0x0,0xc,0x0,0x4,0xc,0xc,0x4,0xc,0x4,0x8,0x8,0x0,0xff	@: 0x6F20 26670
	.byte	0x0,0x0,0xc,0x4,0x0,0x4,0x8,0xc,0xc,0xc,0xc,0x8,0xc,0x4,0x8,0xff	@: 0x6F30 26685
	.byte	0x4,0x0,0x4,0x4,0x8,0x4,0x4,0x8,0x0,0xc,0x4,0x0,0x0,0x4,0x8,0xff	@: 0x6F40 26700
	.byte	0x4,0xc,0x4,0xc,0x0,0x4,0x8,0x0,0x4,0xc,0x4,0xc,0xc,0x0,0x0,0xff	@: 0x6F50 26715
	.byte	0x4,0xc,0x0,0xc,0xc,0xc,0x0,0x4,0x0,0xc,0x8,0x8,0x4,0x0,0x4,0xff	@: 0x6F60 26730
	.byte	0x4,0xc,0x0,0x0,0x8,0x4,0xc,0x8,0x8,0x0,0xc,0x8,0x0,0xc,0x0,0xff	@: 0x6F70 26745
	.byte	0xc,0x8,0x0,0xc,0x4,0xc,0xc,0x4,0xc,0xc,0x8,0xc,0x8,0xc,0x4,0xff	@: 0x6F80 26760
	.byte	0x0,0x4,0xc,0x8,0x0,0x0,0x0,0xc,0x4,0x8,0x8,0xc,0x4,0x4,0x0,0xff	@: 0x6F90 26775
	.byte	0xc,0xc,0x4,0x0,0xc,0x8,0x4,0x4,0xc,0x8,0x8,0x0,0x4,0x0,0x0,0xff	@: 0x6FA0 26790
	.byte	0xc,0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x6FB0 26805
	.byte	0x4,0x8,0x0,0x4,0x4,0x8,0xc,0x8,0x4,0x4,0xc,0x4,0x0,0x0,0xc,0xff	@: 0x6FC0 26820
	.byte	0xc,0xc,0x8,0xc,0x4,0x4,0x4,0x8,0x8,0x4,0xc,0x8,0x8,0x0,0x0,0xff	@: 0x6FD0 26835
	.byte	0x0,0x4,0x4,0xc,0x0,0x4,0x8,0x0,0xc,0x8,0xc,0x8,0x0,0x0,0x8,0xff	@: 0x6FE0 26850
	.byte	0x8,0xc,0xc,0x8,0xc,0xc,0x4,0x4,0x4,0xc,0xc,0xc,0x8,0x0,0x0,0xff	@: 0x6FF0 26865
	.byte	0x4,0x4,0xc,0x4,0x8,0x0,0x0,0xc,0xc,0x0,0x0,0x8,0x4,0x4,0xc,0xff	@: 0x7000 26880
	.byte	0x4,0x0,0x0,0x0,0x0,0xc,0xc,0x8,0x4,0x0,0x4,0x0,0x0,0xc,0x0,0xff	@: 0x7010 26895
	.byte	0x8,0x4,0xc,0x4,0x0,0x4,0x0,0x4,0x4,0x0,0x8,0x0,0xc,0x8,0xc,0xff	@: 0x7020 26910
	.byte	0x0,0x8,0xc,0x4,0x0,0x4,0x8,0xc,0xc,0x4,0x8,0xc,0xc,0x4,0xc,0xff	@: 0x7030 26925
	.byte	0x0,0x0,0x8,0xc,0xc,0xc,0x8,0xc,0x8,0x0,0x0,0x0,0x4,0x0,0x4,0xff	@: 0x7040 26940
	.byte	0x0,0x0,0x0,0x0,0xc,0x0,0x4,0x4,0xc,0xc,0xc,0x8,0x8,0xc,0xc,0xff	@: 0x7050 26955
	.byte	0xc,0x4,0xc,0x4,0x4,0xc,0x0,0x4,0xc,0x4,0x0,0x4,0x8,0xc,0x4,0xff	@: 0x7060 26970
	.byte	0x4,0x0,0xc,0xc,0xc,0x4,0x4,0x8,0x4,0x8,0x4,0x8,0xc,0xc,0x4,0xff	@: 0x7070 26985
	.byte	0x0,0x4,0x4,0x8,0x4,0x0,0xc,0x0,0x4,0xc,0x0,0x0,0x0,0x4,0xc,0xff	@: 0x7080 27000
	.byte	0x8,0x0,0x8,0xc,0xc,0x0,0xc,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0xc,0xff	@: 0x7090 27015
	.byte	0xc,0x0,0x8,0x8,0xc,0x8,0x8,0x4,0x4,0x0,0xc,0x8,0x8,0x0,0x8,0xff	@: 0x70A0 27030
	.byte	0x0,0x4,0x8,0xc,0x4,0x8,0x8,0xc,0x8,0xc,0x4,0x0,0x8,0x4,0x0,0xff	@: 0x70B0 27045
	.byte	0x4,0x8,0x0,0x4,0x8,0x4,0x8,0x0,0x0,0x8,0x8,0xc,0x4,0x8,0x0,0xff	@: 0x70C0 27060
	.byte	0x4,0x8,0x4,0x8,0x0,0x4,0x4,0x8,0xc,0x8,0x8,0xc,0xc,0x4,0x4,0xff	@: 0x70D0 27075
	.byte	0xc,0xc,0x8,0x4,0x4,0x8,0x0,0x0,0x8,0xc,0x4,0x4,0xc,0x4,0x4,0xff	@: 0x70E0 27090
	.byte	0x8,0x0,0xc,0x0,0xc,0xc,0x8,0x0,0x0,0x4,0x4,0x4,0x8,0x8,0xc,0xff	@: 0x70F0 27105
	.byte	0x8,0x8,0x8,0xc,0xc,0x4,0x4,0x4,0x8,0xc,0xc,0x8,0x8,0x4,0x4,0xff	@: 0x7100 27120
	.byte	0xc,0x0,0xc,0x0,0x8,0x8,0xc,0x8,0x8,0x0,0x4,0x8,0x8,0xc,0x4,0xff	@: 0x7110 27135
	.byte	0x0,0x4,0xc,0x8,0xc,0x0,0xc,0x0,0x0,0x0,0xc,0x8,0x0,0xc,0x4,0xff	@: 0x7120 27150
	.byte	0x4,0x4,0x4,0xc,0x0,0x0,0x0,0x8,0x0,0x8,0xc,0x0,0x8,0xc,0x0,0xff	@: 0x7130 27165
	.byte	0x0,0x8,0x0,0xc,0x8,0xc,0x8,0x8,0xc,0x8,0x8,0xc,0x0,0x4,0x8,0xff	@: 0x7140 27180
	.byte	0xc,0x0,0x4,0x0,0xc,0xc,0x8,0xc,0x4,0x0,0xc,0x0,0x0,0xc,0x4,0xff	@: 0x7150 27195
	.byte	0xc,0x0,0x0,0x0,0x0,0x4,0x8,0x0,0x8,0xc,0xc,0x0,0xc,0x8,0x0,0xff	@: 0x7160 27210
	.byte	0x0,0x0,0xc,0x4,0xc,0x0,0xc,0x4,0x0,0x8,0x8,0x8,0x8,0x4,0xc,0xff	@: 0x7170 27225
	.byte	0x8,0x4,0x0,0xc,0xc,0xc,0x4,0xc,0x0,0x4,0x8,0x0,0xc,0x0,0xc,0xff	@: 0x7180 27240
	.byte	0x0,0x8,0xc,0x4,0x4,0x4,0x0,0x0,0x8,0x8,0x8,0xc,0xc,0x4,0x0,0xff	@: 0x7190 27255
	.byte	0x0,0xc,0x0,0x4,0x4,0x0,0x8,0xc,0x4,0x0,0xc,0xc,0xc,0x4,0x0,0xff	@: 0x71A0 27270
	.byte	0x0,0xc,0x4,0x4,0x4,0x4,0x8,0x8,0x0,0x8,0xc,0x8,0xc,0x0,0x0,0xff	@: 0x71B0 27285
	.byte	0x4,0xc,0x0,0x8,0x0,0x8,0xc,0x4,0x4,0xc,0x8,0x4,0xc,0x8,0xc,0xff	@: 0x71C0 27300
	.byte	0x8,0x4,0x8,0x8,0x8,0x0,0x8,0x8,0x0,0x8,0x0,0x4,0x0,0x4,0xc,0xff	@: 0x71D0 27315
	.byte	0x8,0x4,0x8,0x0,0x0,0xc,0x8,0x4,0x0,0x8,0x8,0x4,0x4,0x4,0x8,0xff	@: 0x71E0 27330
	.byte	0xc,0xc,0xc,0x4,0x8,0x0,0x8,0xc,0x4,0x4,0x8,0x4,0x0,0x0,0x4,0xff	@: 0x71F0 27345
	.byte	0xc,0x4,0x8,0x4,0x0,0x4,0x0,0xc,0x4,0x0,0x8,0x8,0x0,0x8,0x8,0xff	@: 0x7200 27360
	.byte	0x4,0x4,0xc,0x8,0x0,0xc,0xc,0x4,0x8,0x8,0x4,0x0,0xc,0x4,0x4,0xff	@: 0x7210 27375
	.byte	0x4,0xc,0x0,0x8,0xc,0x8,0xc,0x4,0x8,0x0,0xc,0x4,0x8,0x4,0x0,0xff	@: 0x7220 27390
	.byte	0x0,0x0,0xc,0xc,0x0,0x8,0xc,0x4,0xc,0x0,0x0,0x0,0x8,0x4,0xc,0xff	@: 0x7230 27405
	.byte	0x0,0x0,0x4,0x0,0xc,0x4,0x0,0xc,0x8,0xc,0x4,0x0,0xc,0x4,0x8,0xff	@: 0x7240 27420
	.byte	0x4,0x0,0xc,0x4,0x4,0xc,0x4,0xc,0x8,0x8,0xc,0xc,0x4,0x8,0x4,0xff	@: 0x7250 27435
	.byte	0x8,0x0,0x0,0x0,0x4,0x8,0xc,0x0,0x4,0xc,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x7260 27450
	.byte	0x0,0x8,0x0,0x0,0x4,0x4,0x4,0x0,0x4,0xc,0x0,0x4,0xc,0x8,0x8,0xff	@: 0x7270 27465
	.byte	0x4,0x4,0x4,0x8,0x0,0xc,0x0,0x0,0x0,0xc,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x7280 27480
	.byte	0x0,0x4,0x8,0x4,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0x4,0x8,0x4,0x8,0xff	@: 0x7290 27495
	.byte	0xc,0xc,0xc,0xc,0x8,0x8,0xc,0x4,0x4,0x4,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x72A0 27510
	.byte	0x0,0x8,0x8,0x0,0x8,0x4,0x0,0xc,0x0,0xc,0x4,0x4,0x4,0x4,0x4,0xff	@: 0x72B0 27525
	.byte	0x8,0x8,0xc,0x0,0x8,0x4,0x0,0x0,0x0,0xc,0x4,0x0,0xc,0x4,0x0,0xff	@: 0x72C0 27540
	.byte	0x0,0x0,0x0,0x4,0xc,0x0,0x0,0x4,0x4,0x0,0x8,0x8,0xc,0x0,0xc,0xff	@: 0x72D0 27555
	.byte	0x8,0x4,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0xc,0x8,0x8,0x0,0x8,0x8,0xff	@: 0x72E0 27570
	.byte	0x8,0x4,0x4,0x8,0x8,0x8,0xc,0x8,0x8,0x0,0x8,0x4,0x0,0x0,0x8,0xff	@: 0x72F0 27585
	.byte	0xc,0xc,0x0,0x4,0x8,0x4,0x8,0x4,0x4,0x4,0xc,0x0,0x0,0xc,0x4,0xff	@: 0x7300 27600
	.byte	0xc,0x4,0x0,0x0,0x4,0x4,0xc,0x4,0x0,0x4,0x8,0x0,0x4,0xc,0xc,0xff	@: 0x7310 27615
	.byte	0x8,0x8,0x0,0x8,0xc,0x0,0x4,0x4,0xc,0xc,0x4,0x8,0x8,0xc,0xc,0xff	@: 0x7320 27630
	.byte	0x4,0x0,0x4,0x4,0x8,0x0,0xc,0x0,0x4,0x4,0x4,0x8,0x8,0xc,0x8,0xff	@: 0x7330 27645
	.byte	0x4,0xc,0x0,0x4,0xc,0xc,0xc,0x4,0xc,0x0,0x4,0x8,0x0,0x0,0xc,0xff	@: 0x7340 27660
	.byte	0x4,0x8,0x8,0x4,0x0,0x8,0x4,0xc,0x8,0x0,0x4,0xc,0x4,0x8,0x0,0xff	@: 0x7350 27675
	.byte	0xc,0x0,0x8,0x4,0x0,0x4,0x8,0xc,0x4,0x8,0x8,0x0,0x0,0xc,0x8,0xff	@: 0x7360 27690
	.byte	0x4,0xc,0x0,0x0,0xc,0x0,0xc,0x0,0xc,0x4,0x0,0x4,0xc,0x8,0x8,0xff	@: 0x7370 27705
	.byte	0xc,0x4,0xc,0x0,0x8,0x8,0xc,0x4,0x8,0x8,0x0,0x4,0x4,0x0,0x8,0xff	@: 0x7380 27720
	.byte	0x0,0x8,0x4,0xc,0x0,0x0,0x0,0x4,0x0,0xc,0x4,0x8,0x0,0xc,0x0,0xff	@: 0x7390 27735
	.byte	0xc,0x0,0x8,0x0,0x4,0x0,0x8,0x0,0x4,0x8,0x8,0x0,0x4,0x8,0xc,0xff	@: 0x73A0 27750
	.byte	0x0,0xc,0xc,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x4,0x4,0xc,0xc,0x0,0xff	@: 0x73B0 27765
	.byte	0xc,0x8,0x8,0x8,0x4,0x4,0x4,0x4,0x8,0xc,0x4,0xc,0xc,0xc,0xc,0xff	@: 0x73C0 27780
	.byte	0x8,0x0,0x4,0x8,0x8,0x4,0x4,0x8,0x4,0x8,0x0,0x8,0x4,0xc,0x8,0xff	@: 0x73D0 27795
	.byte	0x4,0xc,0xc,0x4,0x0,0xc,0xc,0xc,0x4,0x4,0x0,0x0,0x0,0x8,0x0,0xff	@: 0x73E0 27810
	.byte	0x8,0xc,0xc,0x4,0xc,0xc,0x4,0xc,0x4,0x0,0x8,0x4,0xc,0x0,0x8,0xff	@: 0x73F0 27825
	.byte	0x8,0x8,0x0,0xc,0x8,0x8,0x4,0x8,0x4,0xc,0x0,0xc,0x0,0x4,0x8,0xff	@: 0x7400 27840
	.byte	0x4,0x0,0xc,0x4,0x4,0x4,0x8,0xc,0xc,0x0,0x8,0x0,0xc,0x4,0x0,0xff	@: 0x7410 27855
	.byte	0x8,0x8,0x8,0x0,0xc,0xc,0xc,0x4,0x4,0x0,0xc,0x4,0x4,0x4,0xc,0xff	@: 0x7420 27870
	.byte	0x8,0xc,0xc,0x0,0xc,0xc,0x0,0x4,0x0,0x8,0xc,0x0,0x4,0xc,0x8,0xff	@: 0x7430 27885
	.byte	0xc,0x4,0xc,0xc,0x8,0x0,0xc,0xc,0x0,0x4,0x8,0x0,0x0,0x4,0x0,0xff	@: 0x7440 27900
	.byte	0xc,0x4,0x0,0x8,0x8,0x4,0x4,0x0,0x0,0x8,0x8,0x8,0x8,0x4,0xc,0xff	@: 0x7450 27915
	.byte	0x0,0xc,0x0,0x0,0x8,0x8,0x0,0xc,0x8,0xc,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x7460 27930
	.byte	0x0,0x0,0x4,0x0,0x0,0x4,0x8,0x4,0x8,0x8,0x8,0x4,0x8,0xc,0x8,0xff	@: 0x7470 27945
	.byte	0x4,0xc,0xc,0x4,0x4,0x8,0x0,0x0,0x0,0x0,0x4,0xc,0x4,0x8,0x4,0xff	@: 0x7480 27960
	.byte	0x0,0x8,0x0,0x8,0x0,0x4,0x0,0xc,0x8,0x4,0x4,0x4,0xc,0x0,0x4,0xff	@: 0x7490 27975
	.byte	0x8,0xc,0xc,0x8,0x4,0x4,0x4,0xc,0xc,0x4,0x8,0x0,0x4,0x8,0x8,0xff	@: 0x74A0 27990
	.byte	0x4,0xc,0x0,0x8,0x4,0xc,0x4,0x0,0x8,0x4,0xc,0x4,0x0,0xc,0xc,0xff	@: 0x74B0 28005
	.byte	0xc,0x0,0xc,0x8,0x8,0x8,0x0,0x8,0x0,0x4,0xc,0x4,0x0,0x0,0xc,0xff	@: 0x74C0 28020
	.byte	0x8,0x0,0x8,0x0,0x8,0x4,0xc,0x4,0x0,0xc,0x8,0x0,0xc,0x0,0xc,0xff	@: 0x74D0 28035
	.byte	0xc,0x8,0x8,0xc,0xc,0x0,0x8,0xc,0xc,0xc,0xc,0x4,0x8,0x0,0xc,0xff	@: 0x74E0 28050
	.byte	0x4,0xc,0x4,0x0,0x0,0x4,0x8,0x4,0x0,0x4,0x4,0x0,0x0,0x8,0x8,0xff	@: 0x74F0 28065
	.byte	0x8,0x8,0xc,0x0,0x8,0x8,0x4,0x4,0x0,0x8,0x4,0xc,0x8,0x4,0x0,0xff	@: 0x7500 28080
	.byte	0x4,0x8,0x8,0xc,0x8,0x4,0x0,0x4,0x0,0xc,0x8,0x0,0x4,0x0,0x8,0xff	@: 0x7510 28095
	.byte	0x0,0x4,0x4,0x8,0x4,0x0,0xc,0x0,0x4,0x8,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x7520 28110
	.byte	0xc,0x4,0x0,0x4,0xc,0x8,0x4,0x8,0x8,0xc,0x8,0x8,0xc,0xc,0x0,0xff	@: 0x7530 28125
	.byte	0x0,0xc,0x0,0x0,0xc,0x8,0xc,0x4,0xc,0x4,0x4,0x8,0x8,0x8,0x8,0xff	@: 0x7540 28140
	.byte	0x8,0x0,0x4,0xc,0x0,0x8,0xc,0x0,0xc,0x8,0xc,0x0,0x4,0x4,0x8,0xff	@: 0x7550 28155
	.byte	0x4,0x0,0xc,0xc,0x0,0xc,0xc,0x4,0xc,0x4,0x4,0x8,0x4,0x8,0x0,0xff	@: 0x7560 28170
	.byte	0x8,0x0,0xc,0xc,0x8,0x0,0x8,0x8,0x0,0x4,0x8,0x8,0x0,0x8,0xc,0xff	@: 0x7570 28185
	.byte	0xc,0x4,0x0,0x0,0x8,0x4,0x8,0x8,0x8,0x0,0x8,0xc,0x0,0x0,0x0,0xff	@: 0x7580 28200
	.byte	0xc,0x4,0x8,0x0,0x4,0xc,0x8,0xc,0x0,0xc,0x0,0x4,0x4,0x0,0x4,0xff	@: 0x7590 28215
	.byte	0x4,0x0,0xc,0xc,0x0,0x8,0x4,0xc,0x0,0x8,0x4,0x0,0x0,0xc,0x8,0xff	@: 0x75A0 28230
	.byte	0x0,0x4,0x0,0x4,0x8,0x4,0x4,0x8,0x4,0x8,0x4,0x8,0x4,0x8,0x8,0xff	@: 0x75B0 28245
	.byte	0x4,0xc,0x4,0x4,0xc,0x4,0x4,0xc,0x4,0xc,0x8,0x4,0x0,0xc,0x8,0xff	@: 0x75C0 28260
	.byte	0x0,0x4,0x0,0xc,0x8,0x8,0x8,0xc,0x8,0xc,0x8,0x4,0x8,0x4,0x4,0xff	@: 0x75D0 28275
	.byte	0x0,0x8,0x4,0xc,0x8,0x8,0x8,0x4,0x8,0x0,0x8,0xc,0x0,0x8,0x8,0xff	@: 0x75E0 28290
	.byte	0xc,0xc,0x0,0x8,0x4,0x4,0x0,0xc,0xc,0x4,0x0,0x8,0xc,0x4,0x8,0xff	@: 0x75F0 28305
	.byte	0x0,0x4,0x4,0x0,0xc,0xc,0xc,0x4,0x0,0xc,0x0,0x0,0x8,0x4,0x4,0xff	@: 0x7600 28320
	.byte	0x4,0xc,0x8,0xc,0xc,0x4,0xc,0xc,0x4,0x0,0xc,0x0,0xc,0x4,0x0,0xff	@: 0x7610 28335
	.byte	0x0,0x8,0xc,0x4,0x4,0x8,0x4,0xc,0x0,0x8,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x7620 28350
	.byte	0x4,0xc,0x0,0x4,0xc,0x0,0x4,0x8,0x8,0x4,0x0,0x4,0x4,0x8,0x4,0xff	@: 0x7630 28365
	.byte	0x8,0x8,0x4,0x4,0x4,0x0,0x0,0x8,0x0,0xc,0xc,0x0,0x8,0xc,0x8,0xff	@: 0x7640 28380
	.byte	0x0,0x8,0x0,0xc,0xc,0xc,0x4,0x4,0xc,0x0,0x0,0x4,0x0,0x0,0x8,0xff	@: 0x7650 28395
	.byte	0x4,0xc,0x4,0xc,0xc,0xc,0x4,0x0,0x0,0xc,0x0,0x8,0x4,0x8,0x8,0xff	@: 0x7660 28410
	.byte	0x8,0x4,0x4,0xc,0x4,0x4,0xc,0x0,0x0,0x4,0x4,0x0,0x8,0x0,0xc,0xff	@: 0x7670 28425
	.byte	0x8,0x0,0x0,0x4,0xc,0x4,0x8,0x4,0x4,0x8,0x0,0x4,0x4,0xc,0xc,0xff	@: 0x7680 28440
	.byte	0x8,0x8,0x4,0x0,0xc,0x0,0xc,0x0,0x4,0xc,0x8,0x0,0xc,0x0,0x0,0xff	@: 0x7690 28455
	.byte	0x4,0x4,0x0,0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0x0,0x4,0xff	@: 0x76A0 28470
	.byte	0xc,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0xc,0x0,0x8,0x8,0x8,0xc,0xff	@: 0x76B0 28485
	.byte	0x8,0x4,0xc,0x4,0x0,0x0,0xc,0xc,0x8,0x4,0x4,0x4,0x8,0x4,0x0,0xff	@: 0x76C0 28500
	.byte	0x4,0x0,0x0,0xc,0x0,0xc,0x4,0xc,0x4,0xc,0xc,0x0,0xc,0x4,0x0,0xff	@: 0x76D0 28515
	.byte	0x8,0x4,0x4,0x4,0x4,0x4,0x4,0x8,0x8,0x8,0xc,0xc,0x8,0x4,0x4,0xff	@: 0x76E0 28530
	.byte	0x0,0x0,0xc,0x8,0xc,0x4,0x4,0x4,0x8,0x8,0x8,0xc,0xc,0x8,0xc,0xff	@: 0x76F0 28545
	.byte	0x0,0x4,0x4,0x8,0x8,0x4,0x4,0x8,0xc,0x8,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x7700 28560
	.byte	0x0,0x0,0x0,0x8,0x0,0x8,0xc,0x0,0x4,0xc,0x4,0xc,0x8,0xc,0x8,0xff	@: 0x7710 28575
	.byte	0x8,0x0,0x4,0xc,0x8,0x8,0x8,0xc,0x8,0x0,0x0,0x8,0x8,0x4,0xc,0xff	@: 0x7720 28590
	.byte	0x0,0x4,0xc,0x4,0x0,0x0,0x4,0xc,0x8,0x8,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x7730 28605
	.byte	0x8,0xc,0x4,0x8,0x8,0x8,0xc,0xc,0x4,0x4,0x4,0x8,0x0,0x4,0x0,0xff	@: 0x7740 28620
	.byte	0xc,0x0,0x4,0x0,0x8,0x0,0x0,0xc,0x8,0x8,0x4,0xc,0x0,0xc,0x4,0xff	@: 0x7750 28635
	.byte	0xc,0x4,0x0,0x4,0x0,0x4,0x4,0x0,0x4,0x0,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x7760 28650
	.byte	0xc,0x8,0xc,0xc,0x0,0x4,0x4,0x4,0x4,0x4,0x0,0xc,0x8,0x0,0x0,0xff	@: 0x7770 28665
	.byte	0xc,0x0,0xc,0x4,0x8,0x0,0x0,0x4,0x8,0x8,0x0,0x4,0x4,0xc,0x4,0xff	@: 0x7780 28680
	.byte	0x0,0x8,0x0,0x0,0x4,0x0,0xc,0xc,0xc,0xc,0x4,0xc,0x8,0xc,0x4,0xff	@: 0x7790 28695
	.byte	0xc,0x8,0x8,0x4,0x0,0xc,0xc,0x8,0x0,0x0,0x0,0xc,0x4,0x0,0xc,0xff	@: 0x77A0 28710
	.byte	0x8,0x4,0x8,0x0,0x4,0x4,0x4,0x0,0x8,0xc,0x0,0x0,0xc,0xc,0x8,0xff	@: 0x77B0 28725
	.byte	0xc,0xc,0x4,0x8,0x0,0x4,0xc,0x8,0xc,0x0,0x8,0x4,0xc,0x8,0x0,0xff	@: 0x77C0 28740
	.byte	0x4,0x0,0x4,0x4,0x0,0x4,0xc,0x8,0x0,0x8,0xc,0x4,0xc,0x8,0x0,0xff	@: 0x77D0 28755
	.byte	0xc,0x4,0x4,0x0,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0xc,0xc,0x4,0x4,0xff	@: 0x77E0 28770
	.byte	0x4,0xc,0x8,0x4,0x0,0x8,0xc,0xc,0x4,0x0,0x0,0x8,0x8,0x4,0x0,0xff	@: 0x77F0 28785
	.byte	0xc,0x4,0xc,0xc,0x8,0x0,0xc,0xc,0x0,0xc,0xc,0x4,0x0,0x4,0x0,0xff	@: 0x7800 28800
	.byte	0x8,0x8,0x4,0x0,0x0,0x8,0x4,0xc,0x4,0x8,0xc,0x4,0x0,0x4,0x8,0xff	@: 0x7810 28815
	.byte	0x8,0x0,0xc,0x8,0x4,0x8,0x0,0xc,0x4,0x4,0x0,0x4,0x8,0x8,0x8,0xff	@: 0x7820 28830
	.byte	0x8,0xc,0x8,0xc,0x4,0xc,0x0,0xc,0x8,0x4,0x4,0xc,0x4,0xc,0x8,0xff	@: 0x7830 28845
	.byte	0x8,0x0,0xc,0x0,0x8,0x0,0x4,0x0,0x8,0x8,0x8,0xc,0x8,0x8,0xc,0xff	@: 0x7840 28860
	.byte	0x8,0xc,0xc,0xc,0x0,0x4,0x4,0x8,0xc,0x0,0x8,0x0,0x4,0x0,0x8,0xff	@: 0x7850 28875
	.byte	0x4,0xc,0x8,0x4,0xc,0x8,0x4,0x8,0x4,0x8,0x4,0x0,0x4,0x4,0x8,0xff	@: 0x7860 28890
	.byte	0x0,0xc,0x0,0x8,0x0,0x0,0x8,0x4,0x0,0x8,0x4,0x4,0x8,0xc,0xc,0xff	@: 0x7870 28905
	.byte	0xc,0xc,0x4,0xc,0x8,0xc,0xc,0x4,0xc,0xc,0xc,0x4,0x4,0x4,0xc,0xff	@: 0x7880 28920
	.byte	0x8,0x8,0x4,0xc,0xc,0x8,0x4,0x0,0xc,0x8,0x4,0x4,0xc,0x4,0x4,0xff	@: 0x7890 28935
	.byte	0xc,0x4,0x4,0x8,0x0,0x8,0x8,0xc,0x8,0x4,0x4,0xc,0x8,0x8,0x0,0xff	@: 0x78A0 28950
	.byte	0x4,0x0,0xc,0x8,0xc,0x0,0x0,0x0,0x4,0xc,0x0,0x8,0x8,0xc,0xc,0xff	@: 0x78B0 28965
	.byte	0x4,0x4,0xc,0x4,0x8,0x8,0x8,0x0,0x4,0x4,0x8,0xc,0xc,0x8,0x4,0xff	@: 0x78C0 28980
	.byte	0xc,0xc,0xc,0x0,0x0,0xc,0x4,0x0,0x4,0xc,0x8,0x8,0x0,0x8,0x4,0xff	@: 0x78D0 28995
	.byte	0x8,0x8,0xc,0x4,0x0,0x8,0x0,0xc,0x4,0x0,0xc,0x4,0x8,0x4,0x0,0xff	@: 0x78E0 29010
	.byte	0xc,0xc,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x8,0x4,0xc,0x8,0xc,0xc,0xff	@: 0x78F0 29025
	.byte	0x4,0x4,0x4,0xc,0x0,0x0,0x4,0x0,0x8,0xc,0x8,0x4,0x0,0xc,0xc,0xff	@: 0x7900 29040
	.byte	0x4,0x8,0xc,0xc,0x8,0x0,0xc,0x8,0xc,0x8,0x4,0x8,0x8,0xc,0x8,0xff	@: 0x7910 29055
	.byte	0xc,0x0,0x8,0x0,0x4,0x4,0x4,0x4,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0xff	@: 0x7920 29070
	.byte	0x4,0x4,0x0,0x8,0xc,0xc,0xc,0xc,0x0,0x4,0xc,0xc,0x4,0x8,0x4,0xff	@: 0x7930 29085
	.byte	0xc,0xc,0x0,0xc,0x4,0x0,0xc,0x0,0x4,0x0,0x4,0x0,0xc,0xc,0x8,0xff	@: 0x7940 29100
	.byte	0x0,0x8,0x8,0x4,0x8,0x0,0x0,0x0,0xc,0x4,0x0,0x4,0x4,0x0,0x4,0xff	@: 0x7950 29115
	.byte	0x8,0x8,0xc,0x0,0x4,0x4,0x4,0xc,0xc,0xc,0x8,0x0,0x4,0x0,0x4,0xff	@: 0x7960 29130
	.byte	0x0,0x4,0x0,0x0,0x4,0xc,0x4,0x4,0x0,0xc,0x4,0x8,0x8,0x0,0x8,0xff	@: 0x7970 29145
	.byte	0x8,0x8,0x4,0x8,0x4,0x0,0x8,0x0,0xc,0xc,0x4,0x4,0x8,0x0,0xc,0xff	@: 0x7980 29160
	.byte	0x0,0xc,0x4,0xc,0x0,0xc,0x4,0x4,0x4,0xc,0x4,0x8,0x0,0x8,0xc,0xff	@: 0x7990 29175
	.byte	0x8,0xc,0x8,0x0,0x8,0x4,0x8,0x4,0x8,0x4,0xc,0x0,0x8,0x8,0xc,0xff	@: 0x79A0 29190
	.byte	0xc,0x0,0x8,0x0,0x0,0x8,0x4,0x8,0x4,0x4,0xc,0x0,0x0,0x0,0x0,0xff	@: 0x79B0 29205
	.byte	0x8,0xc,0x0,0xc,0x8,0x4,0x4,0xc,0x4,0x0,0xc,0x0,0x4,0x4,0xc,0xff	@: 0x79C0 29220
	.byte	0x0,0xc,0x0,0xc,0xc,0x8,0x8,0x0,0x0,0x4,0xc,0x4,0xc,0x0,0x8,0xff	@: 0x79D0 29235
	.byte	0x8,0x8,0x4,0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x4,0x8,0x8,0xc,0x4,0xff	@: 0x79E0 29250
	.byte	0x8,0x4,0xc,0x8,0xc,0xc,0x4,0x0,0x0,0x8,0x8,0xc,0xc,0x0,0xc,0xff	@: 0x79F0 29265
	.byte	0x0,0x0,0x0,0x4,0x8,0x0,0x8,0xc,0x8,0x8,0x4,0x8,0x8,0x4,0xc,0xff	@: 0x7A00 29280
	.byte	0x8,0x8,0xc,0x8,0x0,0x8,0x4,0x8,0x8,0x4,0x8,0xc,0xc,0x4,0x8,0xff	@: 0x7A10 29295
	.byte	0x8,0xc,0x8,0x4,0x0,0xc,0xc,0x0,0xc,0x8,0x4,0x0,0x4,0x0,0x8,0xff	@: 0x7A20 29310
	.byte	0x8,0x4,0x0,0x8,0x8,0x4,0x4,0x0,0x8,0x4,0x0,0x4,0x0,0x8,0x8,0xff	@: 0x7A30 29325
	.byte	0x4,0xc,0x0,0xc,0x0,0x4,0x4,0xc,0xc,0x8,0x0,0x4,0x4,0x0,0x4,0xff	@: 0x7A40 29340
	.byte	0x4,0x4,0x4,0x8,0x4,0xc,0x0,0xc,0x0,0x8,0xc,0x4,0x0,0x8,0x4,0xff	@: 0x7A50 29355
	.byte	0x4,0x8,0x4,0x4,0x0,0x0,0x4,0xc,0x8,0x8,0x0,0x0,0x4,0xc,0xc,0xff	@: 0x7A60 29370
	.byte	0x0,0xc,0x4,0x0,0x4,0xc,0xc,0x0,0x0,0xc,0x4,0xc,0x4,0x8,0xc,0xff	@: 0x7A70 29385
	.byte	0x0,0x0,0x8,0x0,0x0,0x4,0xc,0x0,0x4,0xc,0x4,0xc,0xc,0xc,0x4,0xff	@: 0x7A80 29400
	.byte	0x4,0x4,0x0,0x8,0x4,0xc,0x0,0x4,0x8,0x8,0x0,0x8,0x8,0x4,0xc,0xff	@: 0x7A90 29415
	.byte	0xc,0x0,0x8,0x0,0x4,0xc,0xc,0x4,0x0,0x8,0x4,0x8,0x0,0xc,0x8,0xff	@: 0x7AA0 29430
	.byte	0x0,0x0,0x4,0xc,0x0,0x4,0x8,0xc,0x4,0xc,0x4,0x0,0xc,0x4,0x0,0xff	@: 0x7AB0 29445
	.byte	0x0,0x0,0x0,0xc,0x0,0xc,0x0,0x4,0x8,0x0,0xc,0xc,0x4,0xc,0xc,0xff	@: 0x7AC0 29460
	.byte	0x8,0x4,0x0,0x0,0xc,0x0,0xc,0x0,0x4,0x4,0xc,0x0,0xc,0x8,0x0,0xff	@: 0x7AD0 29475
	.byte	0x0,0x0,0x4,0x0,0x0,0x8,0x8,0xc,0x0,0x0,0xc,0x8,0x0,0x8,0x0,0xff	@: 0x7AE0 29490
	.byte	0x0,0xc,0x4,0x8,0x0,0x4,0x4,0x4,0x8,0x4,0x8,0xc,0xc,0x0,0x0,0xff	@: 0x7AF0 29505
	.byte	0xc,0x0,0x4,0x8,0x0,0x8,0xc,0xc,0x0,0x8,0x4,0x0,0x4,0x8,0xc,0xff	@: 0x7B00 29520
	.byte	0x8,0x4,0x4,0x4,0x4,0xc,0x0,0x4,0xc,0x8,0x0,0x4,0xc,0xc,0x4,0xff	@: 0x7B10 29535
	.byte	0xc,0xc,0x4,0x4,0x8,0x8,0x0,0x8,0x4,0x4,0x8,0xc,0x4,0xc,0x8,0xff	@: 0x7B20 29550
	.byte	0xc,0xc,0x4,0xc,0x0,0x0,0x0,0x0,0xc,0xc,0x4,0xc,0x0,0x8,0xc,0xff	@: 0x7B30 29565
	.byte	0x4,0x0,0xc,0x4,0x0,0xc,0x4,0x0,0xc,0x8,0x0,0x8,0x0,0x8,0x8,0xff	@: 0x7B40 29580
	.byte	0x0,0x8,0xc,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0x8,0xc,0x4,0x4,0x4,0xff	@: 0x7B50 29595
	.byte	0xc,0x0,0x8,0x0,0x0,0x8,0x8,0xc,0x8,0x4,0x4,0x0,0xc,0x0,0xc,0xff	@: 0x7B60 29610
	.byte	0x8,0xc,0x4,0x0,0x0,0x4,0x0,0x4,0xc,0x8,0x0,0xc,0x8,0xc,0xc,0xff	@: 0x7B70 29625
	.byte	0xc,0x0,0x4,0x4,0xc,0xc,0x0,0x4,0xc,0xc,0x0,0x8,0xc,0x8,0x0,0xff	@: 0x7B80 29640
	.byte	0x4,0x4,0x8,0xc,0xc,0x8,0x8,0x8,0x0,0x0,0x0,0x4,0x8,0x8,0x4,0xff	@: 0x7B90 29655
	.byte	0x4,0x8,0x0,0x0,0x0,0xc,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0xff	@: 0x7BA0 29670
	.byte	0x4,0x4,0x8,0x0,0x0,0x8,0x0,0x4,0x0,0x8,0xc,0x0,0x4,0x0,0x0,0xff	@: 0x7BB0 29685
	.byte	0x4,0xc,0x0,0xc,0x4,0xc,0x0,0x0,0xc,0x0,0x8,0x8,0xc,0xc,0x4,0xff	@: 0x7BC0 29700
	.byte	0xc,0x8,0xc,0x0,0x4,0x4,0x8,0x0,0x8,0x0,0xc,0x8,0x0,0x0,0x4,0xff	@: 0x7BD0 29715
	.byte	0x4,0x8,0x0,0x4,0x0,0xc,0x0,0x4,0x8,0x0,0x0,0x4,0xc,0x0,0x4,0xff	@: 0x7BE0 29730
	.byte	0xc,0xc,0x8,0xc,0x8,0x0,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0x0,0xc,0xff	@: 0x7BF0 29745
	.byte	0x8,0x4,0x8,0x0,0x0,0x8,0xc,0xc,0x4,0x4,0x4,0x0,0xc,0xc,0x4,0xff	@: 0x7C00 29760
	.byte	0x8,0xc,0xc,0xc,0xc,0xc,0x4,0x8,0x4,0x4,0x4,0x0,0x0,0x4,0x8,0xff	@: 0x7C10 29775
	.byte	0x4,0x0,0x8,0x8,0x0,0xc,0x0,0x4,0x4,0xc,0x0,0x4,0x4,0x0,0xc,0xff	@: 0x7C20 29790
	.byte	0xc,0x8,0x4,0x0,0x8,0x0,0xc,0x0,0xc,0xc,0x4,0x8,0x4,0x4,0x4,0xff	@: 0x7C30 29805
	.byte	0x8,0x0,0x8,0xc,0x8,0x4,0x8,0x0,0x0,0x4,0xc,0x8,0xc,0x0,0x8,0xff	@: 0x7C40 29820
	.byte	0xc,0x0,0x8,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x8,0xff	@: 0x7C50 29835
	.byte	0x8,0xc,0x4,0x8,0x0,0x4,0xc,0x0,0x4,0x4,0xc,0xc,0x8,0x0,0x8,0xff	@: 0x7C60 29850
	.byte	0x4,0xc,0x4,0xc,0x0,0xc,0x8,0x8,0xc,0x0,0x8,0x4,0x0,0xc,0x0,0xff	@: 0x7C70 29865
	.byte	0x4,0x0,0x0,0x0,0x8,0x0,0x4,0xc,0xc,0x4,0x8,0x4,0x4,0x8,0x8,0xff	@: 0x7C80 29880
	.byte	0x0,0x4,0x4,0x8,0x0,0x8,0x0,0x8,0x0,0xc,0x8,0x4,0x0,0x4,0x4,0xff	@: 0x7C90 29895
	.byte	0x0,0x8,0x4,0xc,0x0,0x8,0x0,0x8,0x4,0x0,0x4,0xc,0x8,0x4,0xc,0xff	@: 0x7CA0 29910
	.byte	0x8,0x8,0x8,0x8,0x4,0x0,0xc,0x0,0x8,0x8,0x0,0x8,0x0,0x0,0xc,0xff	@: 0x7CB0 29925
	.byte	0x4,0xc,0x8,0x8,0x4,0x8,0x0,0x8,0x8,0x0,0xc,0x8,0x0,0x8,0x8,0xff	@: 0x7CC0 29940
	.byte	0x0,0xc,0xc,0xc,0xc,0x8,0x4,0x0,0xc,0x4,0x8,0x4,0xc,0x0,0x8,0xff	@: 0x7CD0 29955
	.byte	0x8,0x8,0xc,0xc,0x4,0xc,0x4,0xc,0x0,0x4,0xc,0xc,0x0,0x8,0x0,0xff	@: 0x7CE0 29970
	.byte	0x0,0x4,0x8,0xc,0x0,0x4,0x0,0x8,0x0,0x0,0x4,0xc,0x8,0x4,0xc,0xff	@: 0x7CF0 29985
	.byte	0x8,0x4,0x4,0xc,0xc,0xc,0x8,0xc,0xc,0xc,0x4,0xc,0x0,0x0,0xc,0xff	@: 0x7D00 30000
	.byte	0x0,0x0,0xc,0x0,0x0,0x4,0x4,0x4,0x0,0xc,0xc,0x0,0x8,0xc,0xc,0xff	@: 0x7D10 30015
	.byte	0x4,0x8,0x0,0x4,0x4,0x4,0xc,0x0,0xc,0x0,0xc,0xc,0x0,0x8,0x4,0xff	@: 0x7D20 30030
	.byte	0x8,0x4,0x8,0x4,0x0,0x0,0x8,0xc,0xc,0x4,0x8,0x0,0x4,0x0,0x0,0xff	@: 0x7D30 30045
	.byte	0x0,0xc,0x4,0xc,0x8,0x4,0x0,0x8,0x4,0x8,0x8,0x4,0x4,0x0,0x4,0xff	@: 0x7D40 30060
	.byte	0x0,0x8,0x4,0xc,0x4,0x4,0x4,0xc,0x4,0x0,0x8,0x8,0xc,0xc,0xc,0xff	@: 0x7D50 30075
	.byte	0x0,0x0,0x0,0x8,0x0,0x0,0xc,0xc,0x0,0x8,0x0,0x0,0x8,0x4,0x8,0xff	@: 0x7D60 30090
	.byte	0xc,0xc,0x8,0x8,0x0,0x8,0x0,0x4,0x4,0x4,0x8,0x4,0x0,0x0,0x8,0xff	@: 0x7D70 30105
	.byte	0x0,0x0,0xc,0x8,0x8,0x4,0xc,0x0,0x8,0x4,0x4,0x4,0x8,0xc,0x8,0xff	@: 0x7D80 30120
	.byte	0x0,0x4,0x4,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0x8,0x0,0x4,0x8,0x4,0xff	@: 0x7D90 30135
	.byte	0x0,0x4,0x8,0x8,0x0,0x4,0xc,0x8,0x4,0x4,0x4,0x8,0x0,0x0,0x8,0xff	@: 0x7DA0 30150
	.byte	0x4,0xc,0x0,0x8,0x8,0x0,0x8,0x4,0x0,0xc,0x0,0x0,0x0,0x0,0x4,0xff	@: 0x7DB0 30165
	.byte	0x4,0x4,0x0,0x4,0xc,0x0,0x4,0xc,0x4,0x0,0x8,0x0,0x4,0x4,0xc,0xff	@: 0x7DC0 30180
	.byte	0x0,0x8,0x4,0xc,0x0,0x4,0x8,0x4,0xc,0x8,0x4,0xc,0xc,0x8,0x0,0xff	@: 0x7DD0 30195
	.byte	0x8,0xc,0x0,0xc,0xc,0x4,0xc,0xc,0x4,0x4,0x0,0xc,0x4,0x8,0x4,0xff	@: 0x7DE0 30210
	.byte	0x0,0x4,0x4,0x0,0x8,0x8,0x4,0xc,0x0,0xc,0x4,0x8,0xc,0x0,0x8,0xff	@: 0x7DF0 30225
	.byte	0x8,0x0,0x4,0x8,0xc,0xc,0x0,0x8,0x4,0x8,0x0,0x8,0xc,0x4,0x4,0xff	@: 0x7E00 30240
	.byte	0xc,0x4,0xc,0x4,0x4,0xc,0x8,0x8,0xc,0x0,0x0,0x4,0x8,0x8,0x4,0xff	@: 0x7E10 30255
	.byte	0xc,0x0,0x0,0x8,0x4,0x0,0x4,0x4,0x4,0xc,0x4,0x8,0x4,0x0,0x4,0xff	@: 0x7E20 30270
	.byte	0x4,0x4,0x4,0x0,0x4,0x8,0x4,0x0,0xc,0x8,0x8,0x0,0x8,0xc,0x0,0xff	@: 0x7E30 30285
	.byte	0xc,0x4,0x8,0x4,0x0,0x4,0x0,0x8,0x4,0x8,0xc,0x0,0x0,0x0,0x8,0xff	@: 0x7E40 30300
	.byte	0x8,0x4,0x4,0xc,0x0,0xc,0x4,0x8,0x4,0x4,0xc,0x8,0x0,0xc,0x4,0xff	@: 0x7E50 30315
	.byte	0x0,0x8,0xc,0x4,0xc,0x4,0x8,0x8,0xc,0xc,0x8,0xc,0x4,0x0,0x4,0xff	@: 0x7E60 30330
	.byte	0x8,0x8,0x8,0x4,0x8,0x4,0xc,0x4,0xc,0x0,0xc,0x0,0x4,0x0,0x4,0xff	@: 0x7E70 30345
	.byte	0xc,0x0,0x8,0x4,0x8,0x8,0x0,0x4,0x0,0x8,0x8,0x4,0x8,0x0,0x4,0xff	@: 0x7E80 30360
	.byte	0x0,0xc,0x0,0x8,0xc,0x4,0x0,0x4,0x0,0x4,0xc,0xc,0x4,0x0,0xc,0xff	@: 0x7E90 30375
	.byte	0x8,0x8,0x8,0xc,0x0,0x0,0x8,0x0,0x0,0x0,0x4,0x0,0xc,0xc,0x4,0xff	@: 0x7EA0 30390
	.byte	0x4,0x0,0x8,0x8,0x8,0x0,0x8,0x4,0x4,0x4,0x0,0x4,0xc,0x0,0x0,0xff	@: 0x7EB0 30405
	.byte	0x4,0xc,0x4,0xc,0x0,0x0,0x4,0x0,0xc,0x4,0x8,0xc,0x8,0x4,0xc,0xff	@: 0x7EC0 30420
	.byte	0x8,0x0,0x8,0x4,0x0,0x8,0xc,0x4,0xc,0xc,0x8,0xc,0x0,0x0,0x0,0xff	@: 0x7ED0 30435
	.byte	0x4,0xc,0xc,0x0,0x4,0xc,0x8,0xc,0xc,0x4,0x8,0x0,0x0,0x4,0x0,0xff	@: 0x7EE0 30450
	.byte	0xc,0x8,0x8,0x0,0x4,0x0,0xc,0xc,0x8,0x8,0x8,0x8,0x4,0x0,0x4,0xff	@: 0x7EF0 30465
	.byte	0x8,0xc,0xc,0xc,0x8,0x8,0xc,0x4,0xc,0x4,0x4,0x8,0xc,0x8,0x4,0xff	@: 0x7F00 30480
	.byte	0xc,0x4,0x4,0x0,0x4,0x4,0x4,0x0,0x8,0x8,0x8,0xc,0x8,0x0,0x0,0xff	@: 0x7F10 30495
	.byte	0x0,0x0,0x4,0xc,0x8,0x8,0x0,0xc,0x0,0x4,0x4,0xc,0xc,0x0,0x4,0xff	@: 0x7F20 30510
	.byte	0x0,0xc,0x0,0x0,0x8,0xc,0x8,0xc,0x4,0xc,0xc,0xc,0x0,0xc,0x4,0xff	@: 0x7F30 30525
	.byte	0x0,0x0,0x0,0x4,0xc,0xc,0x0,0x4,0x0,0x0,0x8,0xc,0x4,0x8,0xc,0xff	@: 0x7F40 30540
	.byte	0x0,0xc,0x8,0x4,0x4,0x0,0x4,0x4,0x4,0x4,0xc,0x8,0xc,0x8,0x8,0xff	@: 0x7F50 30555
	.byte	0xc,0x8,0x8,0x4,0x4,0x0,0x4,0xc,0x0,0x0,0x8,0x0,0xc,0x8,0x8,0xff	@: 0x7F60 30570
	.byte	0x0,0x8,0x4,0xc,0x0,0x4,0xc,0x4,0xc,0x0,0x8,0xc,0x4,0x0,0x0,0xff	@: 0x7F70 30585
	.byte	0xc,0x0,0x0,0xc,0x0,0x0,0x4,0x8,0x8,0x8,0x8,0x0,0x0,0x8,0x4,0xff	@: 0x7F80 30600
	.byte	0x4,0x0,0xc,0xc,0x4,0x4,0xc,0x4,0xc,0x8,0x0,0x0,0x8,0x4,0x8,0xff	@: 0x7F90 30615
	.byte	0x4,0x0,0x0,0xc,0x8,0x8,0x4,0xc,0x0,0x8,0xc,0x4,0x0,0x4,0x4,0xff	@: 0x7FA0 30630
	.byte	0x4,0x4,0x8,0x0,0x8,0x8,0xc,0x8,0xc,0x0,0x4,0x0,0x0,0x8,0x4,0xff	@: 0x7FB0 30645
	.byte	0x8,0xc,0x0,0x0,0x8,0x4,0xc,0x8,0xc,0xc,0x8,0x8,0x4,0x0,0x4,0xff	@: 0x7FC0 30660
	.byte	0xc,0x4,0x8,0x4,0x8,0xc,0xc,0x0,0x0,0x0,0x8,0x4,0x8,0x4,0x8,0xff	@: 0x7FD0 30675
	.byte	0xc,0x4,0x0,0x4,0x4,0x4,0x4,0x0,0x8,0x0,0x4,0x8,0x0,0xc,0xc,0xff	@: 0x7FE0 30690
	.byte	0x4,0x4,0x4,0x0,0x8,0x4,0x4,0x8,0x8,0x0,0xc,0x8,0xc,0xc,0x8,0xff	@: 0x7FF0 30705
	.byte	0x8,0x8,0x4,0xc,0x8,0xc,0xc,0xc,0x8,0x0,0xc,0xc,0xc,0x4,0x0,0xff	@: 0x8000 30720
	.byte	0x0,0xc,0x4,0x0,0x4,0xc,0xc,0x8,0xc,0x4,0x4,0xc,0xc,0xc,0x8,0xff	@: 0x8010 30735
	.byte	0x0,0xc,0x8,0x8,0x8,0xc,0x0,0x0,0xc,0x4,0x8,0x8,0x8,0x0,0xc,0xff	@: 0x8020 30750
	.byte	0x4,0x4,0xc,0x8,0x0,0x0,0xc,0xc,0x0,0xc,0xc,0x8,0xc,0x4,0xc,0xff	@: 0x8030 30765
	.byte	0x4,0x0,0xc,0x8,0x0,0x0,0xc,0xc,0x0,0x0,0x8,0x8,0x4,0x8,0x0,0xff	@: 0x8040 30780
	.byte	0xc,0x4,0x4,0x4,0x0,0x8,0xc,0x4,0x8,0x0,0x8,0x4,0xc,0x4,0xc,0xff	@: 0x8050 30795
	.byte	0x4,0x0,0x8,0x0,0x4,0x0,0x4,0x4,0x4,0xc,0xc,0x0,0x0,0x0,0xc,0xff	@: 0x8060 30810
	.byte	0x8,0x8,0x4,0x0,0x0,0xc,0x0,0x8,0x8,0xc,0x8,0x8,0xc,0xc,0x4,0xff	@: 0x8070 30825
	.byte	0x8,0x4,0xc,0x8,0x4,0xc,0x0,0x0,0x4,0x4,0x4,0x4,0xc,0x4,0x4,0xff	@: 0x8080 30840
	.byte	0x0,0x8,0x0,0x4,0x4,0x4,0x4,0x4,0x4,0xc,0x8,0x4,0x8,0x8,0xc,0xff	@: 0x8090 30855
	.byte	0xc,0x0,0x8,0x4,0x8,0xc,0xc,0x0,0x8,0x8,0xc,0xc,0x8,0xc,0x8,0xff	@: 0x80A0 30870
	.byte	0x0,0xc,0x4,0x0,0x4,0x4,0x8,0x4,0x0,0x8,0x0,0x4,0x8,0xc,0xc,0xff	@: 0x80B0 30885
	.byte	0x8,0xc,0x0,0xc,0xc,0x8,0x4,0xc,0x8,0x0,0x0,0x0,0x8,0x4,0x0,0xff	@: 0x80C0 30900
	.byte	0x8,0x8,0x8,0x8,0x4,0xc,0x0,0xc,0xc,0x0,0x4,0x0,0xc,0x0,0x8,0xff	@: 0x80D0 30915
	.byte	0x4,0x8,0x4,0x4,0x4,0xc,0x8,0xc,0x0,0x8,0x0,0x8,0x8,0x8,0x0,0xff	@: 0x80E0 30930
	.byte	0x0,0x0,0x0,0x4,0x4,0x4,0xc,0x8,0xc,0x0,0x4,0x8,0x8,0x0,0x8,0xff	@: 0x80F0 30945
	.byte	0x8,0x0,0x4,0x4,0x0,0x8,0x4,0x0,0xc,0x8,0xc,0x0,0x4,0x4,0xc,0xff	@: 0x8100 30960
	.byte	0x8,0x8,0x8,0x4,0xc,0x0,0xc,0x8,0x0,0xc,0x0,0x0,0x4,0x8,0x4,0xff	@: 0x8110 30975
	.byte	0x8,0x8,0x8,0x8,0xc,0x0,0x0,0x4,0xc,0xc,0xc,0x8,0xc,0x0,0x8,0xff	@: 0x8120 30990
	.byte	0x8,0x0,0x4,0xc,0x0,0x0,0xc,0x0,0xc,0x0,0x4,0x4,0x8,0xc,0xc,0xff	@: 0x8130 31005
	.byte	0x4,0x8,0x8,0x4,0x4,0x8,0x4,0x4,0xc,0xc,0x0,0x4,0xc,0x0,0x0,0xff	@: 0x8140 31020
	.byte	0x8,0x8,0x4,0x4,0x0,0xc,0x4,0xc,0xc,0xc,0xc,0x0,0x8,0x0,0xc,0xff	@: 0x8150 31035
	.byte	0x8,0xc,0x4,0xc,0x0,0x4,0x4,0x4,0x0,0x8,0x4,0x8,0x4,0x0,0x0,0xff	@: 0x8160 31050
	.byte	0xc,0x4,0x0,0x4,0x8,0x8,0x4,0xc,0x0,0x4,0x4,0x4,0x0,0xc,0x4,0xff	@: 0x8170 31065
	.byte	0x4,0x4,0x8,0x0,0x0,0xc,0x0,0xc,0x4,0x8,0x8,0x8,0xc,0x8,0x4,0xff	@: 0x8180 31080
	.byte	0x0,0x4,0x0,0x4,0xc,0xc,0x0,0x0,0x4,0x8,0x4,0x4,0x0,0xc,0x4,0xff	@: 0x8190 31095
	.byte	0x0,0x0,0x8,0x8,0x8,0x4,0x4,0xc,0x0,0x4,0x0,0xc,0x4,0x4,0x0,0xff	@: 0x81A0 31110
	.byte	0x0,0x0,0xc,0x8,0x0,0x8,0x4,0xc,0x8,0xc,0x4,0x8,0x4,0x8,0x0,0xff	@: 0x81B0 31125
	.byte	0x8,0x0,0x8,0x4,0xc,0x4,0x4,0x0,0x4,0x0,0x8,0x4,0x4,0x4,0x0,0xff	@: 0x81C0 31140
	.byte	0x0,0xc,0x8,0x4,0x0,0xc,0x4,0x4,0x0,0xc,0x8,0x4,0x8,0xc,0x8,0xff	@: 0x81D0 31155
	.byte	0xc,0x0,0x8,0x8,0x4,0x0,0x0,0xc,0x0,0xc,0x8,0x0,0x4,0xc,0x0,0xff	@: 0x81E0 31170
	.byte	0x4,0x8,0x0,0xc,0x0,0x0,0x8,0xc,0x8,0xc,0x0,0x8,0x8,0xc,0x4,0xff	@: 0x81F0 31185
	.byte	0x8,0x0,0x8,0x0,0x8,0xc,0x0,0x8,0x0,0xc,0x0,0xc,0x4,0x4,0x4,0xff	@: 0x8200 31200
	.byte	0x0,0xc,0x4,0x4,0x4,0x0,0x8,0xc,0x0,0x0,0x0,0xc,0xc,0x0,0x8,0xff	@: 0x8210 31215
	.byte	0xc,0x4,0x0,0x0,0x0,0xc,0x4,0x4,0x0,0xc,0x0,0x4,0x0,0x8,0x8,0xff	@: 0x8220 31230
	.byte	0x8,0xc,0x8,0x4,0x8,0x4,0xc,0x4,0x4,0x8,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x8230 31245
	.byte	0x4,0x0,0x0,0xc,0x0,0x4,0xc,0x4,0x0,0x4,0x8,0x4,0x8,0x8,0x8,0xff	@: 0x8240 31260
	.byte	0x4,0xc,0xc,0xc,0xc,0xc,0x0,0xc,0x0,0xc,0x4,0x4,0xc,0xc,0x8,0xff	@: 0x8250 31275
	.byte	0x4,0x8,0x4,0x0,0xc,0x4,0x8,0x4,0x0,0x8,0xc,0x8,0xc,0x0,0x4,0xff	@: 0x8260 31290
	.byte	0x8,0x8,0xc,0xc,0xc,0xc,0x4,0x0,0xc,0x8,0xc,0x0,0x4,0x4,0xc,0xff	@: 0x8270 31305
	.byte	0x0,0x0,0x4,0xc,0xc,0x0,0xc,0xc,0x8,0x0,0xc,0x8,0x0,0x4,0xc,0xff	@: 0x8280 31320
	.byte	0x4,0x4,0x0,0xc,0x4,0xc,0x4,0x4,0xc,0x0,0x0,0x8,0x4,0x4,0x8,0xff	@: 0x8290 31335
	.byte	0xc,0x0,0xc,0x8,0x8,0x0,0xc,0x4,0x8,0x4,0x4,0xc,0x0,0x0,0x8,0xff	@: 0x82A0 31350
	.byte	0x8,0xc,0x8,0x0,0xc,0x4,0x4,0xc,0x0,0x4,0xc,0x8,0x4,0x8,0x0,0xff	@: 0x82B0 31365
	.byte	0x8,0xc,0xc,0x4,0xc,0x0,0x0,0x0,0xc,0x4,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x82C0 31380
	.byte	0x4,0x4,0xc,0x0,0xc,0x4,0x0,0x4,0x0,0x4,0xc,0x8,0x8,0x0,0xc,0xff	@: 0x82D0 31395
	.byte	0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0xc,0x0,0x4,0xc,0x4,0x8,0xff	@: 0x82E0 31410
	.byte	0x8,0x8,0xc,0xc,0xc,0x4,0x0,0x4,0x0,0x0,0x8,0x4,0x0,0xc,0x4,0xff	@: 0x82F0 31425
	.byte	0x0,0xc,0x0,0x4,0x0,0x8,0x0,0x0,0x4,0x0,0x4,0x0,0x8,0x0,0x4,0xff	@: 0x8300 31440
	.byte	0x8,0xc,0x4,0x0,0x4,0x8,0x8,0x0,0x4,0xc,0x4,0xc,0x4,0x4,0x0,0xff	@: 0x8310 31455
	.byte	0x8,0x4,0x0,0x4,0x0,0x8,0x4,0x4,0xc,0x4,0x8,0x4,0xc,0x8,0x8,0xff	@: 0x8320 31470
	.byte	0xc,0x0,0x0,0x0,0x0,0x8,0x4,0x8,0x0,0xc,0xc,0x8,0x8,0xc,0x8,0xff	@: 0x8330 31485
	.byte	0x4,0xc,0x8,0x4,0x0,0x8,0x8,0x4,0x4,0xc,0x8,0x4,0x8,0x0,0x0,0xff	@: 0x8340 31500
	.byte	0x8,0xc,0x8,0x0,0xc,0x0,0xc,0x8,0x8,0x4,0xc,0x4,0x4,0x0,0xc,0xff	@: 0x8350 31515
	.byte	0xc,0xc,0x8,0x4,0x0,0xc,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0xc,0xc,0xff	@: 0x8360 31530
	.byte	0x4,0x4,0x8,0x8,0xc,0x4,0xc,0x8,0x4,0x8,0xc,0xc,0x8,0xc,0x8,0xff	@: 0x8370 31545
	.byte	0x4,0x0,0x8,0x8,0x4,0x8,0xc,0x0,0xc,0x0,0x4,0xc,0x0,0x8,0x8,0xff	@: 0x8380 31560
	.byte	0xc,0xc,0x0,0x0,0x4,0xc,0x0,0xc,0x0,0x8,0xc,0x8,0x8,0x8,0x8,0xff	@: 0x8390 31575
	.byte	0x0,0x8,0x0,0xc,0x4,0x4,0x8,0x0,0xc,0x0,0xc,0x4,0xc,0xc,0xc,0xff	@: 0x83A0 31590
	.byte	0x8,0xc,0x4,0xc,0xc,0x8,0x8,0xc,0x4,0x4,0x8,0xc,0x4,0x0,0x0,0xff	@: 0x83B0 31605
	.byte	0x4,0xc,0xc,0x0,0x4,0xc,0x0,0x4,0x0,0x4,0x4,0x0,0xc,0x4,0xc,0xff	@: 0x83C0 31620
	.byte	0xc,0x4,0x4,0x8,0x0,0x4,0x4,0x8,0x0,0x4,0x4,0x8,0x0,0x8,0x4,0xff	@: 0x83D0 31635
	.byte	0xc,0x8,0x0,0x8,0x8,0x8,0x4,0x0,0x0,0x0,0x4,0xc,0x8,0x0,0x4,0xff	@: 0x83E0 31650
	.byte	0x4,0xc,0xc,0x4,0x8,0x8,0xc,0x8,0xc,0x4,0xc,0x0,0x4,0x8,0x8,0xff	@: 0x83F0 31665
	.byte	0xc,0x4,0x8,0xc,0x4,0x4,0x8,0x4,0x0,0xc,0x4,0xc,0x8,0x4,0x4,0xff	@: 0x8400 31680
	.byte	0x8,0x8,0x8,0x0,0x4,0xc,0x0,0x8,0x4,0x4,0x4,0x8,0x0,0x4,0x0,0xff	@: 0x8410 31695
	.byte	0x0,0x0,0x4,0xc,0x8,0x0,0x8,0x8,0x4,0x4,0x0,0x0,0x8,0x0,0xc,0xff	@: 0x8420 31710
	.byte	0x8,0x8,0x8,0xc,0x0,0xc,0x4,0x4,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0xff	@: 0x8430 31725
	.byte	0x0,0xc,0x8,0x0,0x8,0x4,0x0,0x0,0xc,0x4,0xc,0x8,0x0,0x4,0x0,0xff	@: 0x8440 31740
	.byte	0xc,0xc,0x4,0x4,0x4,0xc,0x0,0xc,0xc,0x8,0xc,0xc,0x8,0x0,0x4,0xff	@: 0x8450 31755
	.byte	0x0,0x8,0x0,0x4,0x0,0x8,0xc,0x4,0x4,0x4,0x0,0xc,0xc,0x0,0x0,0xff	@: 0x8460 31770
	.byte	0x0,0xc,0x4,0x0,0x0,0x8,0x8,0xc,0x0,0xc,0x0,0x0,0x8,0x8,0x4,0xff	@: 0x8470 31785
	.byte	0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x8,0xc,0x0,0x8,0xc,0x8,0xc,0xff	@: 0x8480 31800
	.byte	0x0,0x4,0x8,0xc,0x8,0x0,0x8,0x0,0x4,0xc,0x8,0x4,0xc,0x0,0x4,0xff	@: 0x8490 31815
	.byte	0x4,0x0,0x4,0x4,0x0,0x8,0x0,0x8,0x4,0xc,0x8,0x0,0x8,0x4,0xc,0xff	@: 0x84A0 31830
	.byte	0x0,0xc,0xc,0xc,0x0,0xc,0x8,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0xc,0xff	@: 0x84B0 31845
	.byte	0x4,0x0,0x4,0xc,0xc,0x8,0x8,0xc,0x0,0x0,0x8,0x0,0xc,0xc,0xc,0xff	@: 0x84C0 31860
	.byte	0x8,0x0,0x0,0x0,0x4,0x8,0xc,0x4,0x8,0x4,0x4,0x0,0x0,0x0,0x4,0xff	@: 0x84D0 31875
	.byte	0x0,0x4,0xc,0x4,0x8,0x4,0x0,0x8,0x0,0xc,0x4,0x0,0xc,0x4,0xc,0xff	@: 0x84E0 31890
	.byte	0xc,0xc,0x0,0xc,0x0,0x8,0x0,0xc,0x4,0x4,0x8,0x8,0x8,0x4,0xc,0xff	@: 0x84F0 31905
	.byte	0x0,0x0,0x4,0x8,0x0,0x0,0x8,0x4,0x4,0x4,0x0,0x4,0x0,0xc,0x8,0xff	@: 0x8500 31920
	.byte	0x8,0x4,0xc,0x0,0x8,0x0,0x8,0x0,0x8,0xc,0x0,0x0,0x0,0x8,0x0,0xff	@: 0x8510 31935
	.byte	0x4,0x4,0x0,0x0,0x0,0x8,0x8,0x0,0x4,0x8,0xc,0x8,0x8,0x4,0x0,0xff	@: 0x8520 31950
	.byte	0xc,0x4,0x8,0x0,0x8,0x4,0x8,0x4,0x8,0xc,0xc,0x8,0x0,0xc,0x4,0xff	@: 0x8530 31965
	.byte	0x4,0x0,0x0,0x8,0xc,0x8,0x8,0x0,0xc,0x0,0x0,0x4,0x0,0x4,0x8,0xff	@: 0x8540 31980
	.byte	0x4,0x0,0x0,0x8,0xc,0x0,0xc,0x8,0x8,0xc,0x8,0x0,0xc,0x0,0x4,0xff	@: 0x8550 31995
	.byte	0x8,0x0,0xc,0x8,0xc,0x0,0x0,0xc,0x4,0x4,0x0,0x8,0x4,0xc,0x0,0xff	@: 0x8560 32010
	.byte	0xc,0xc,0x0,0xc,0xc,0x4,0x4,0x4,0x4,0x8,0x4,0x8,0x8,0x8,0x4,0xff	@: 0x8570 32025
	.byte	0x4,0xc,0xc,0xc,0x8,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0xff	@: 0x8580 32040
	.byte	0x0,0x0,0xc,0x8,0x0,0xc,0x0,0x0,0x8,0x4,0x0,0x8,0xc,0x0,0x8,0xff	@: 0x8590 32055
	.byte	0x4,0x4,0x8,0xc,0x4,0x0,0xc,0x4,0x0,0x8,0xc,0x0,0x8,0x8,0xc,0xff	@: 0x85A0 32070
	.byte	0xc,0x0,0x8,0x4,0x0,0xc,0xc,0x4,0x0,0x4,0x4,0x0,0x4,0x4,0x0,0xff	@: 0x85B0 32085
	.byte	0x8,0x0,0x8,0xc,0xc,0xc,0xc,0x0,0x4,0x8,0xc,0x4,0x4,0x4,0xc,0xff	@: 0x85C0 32100
	.byte	0x8,0xc,0x8,0xc,0x4,0xc,0x0,0x8,0x8,0x4,0x8,0x8,0xc,0x8,0x0,0xff	@: 0x85D0 32115
	.byte	0x4,0x4,0xc,0x8,0x4,0x4,0xc,0x8,0xc,0x8,0x8,0xc,0x8,0x0,0x4,0xff	@: 0x85E0 32130
	.byte	0x0,0x4,0xc,0x8,0x8,0x0,0xc,0x4,0xc,0xc,0x0,0xc,0xc,0xc,0xc,0xff	@: 0x85F0 32145
	.byte	0x8,0xc,0x8,0x8,0x8,0x4,0x8,0x8,0x4,0xc,0x4,0x0,0x0,0x8,0xc,0xff	@: 0x8600 32160
	.byte	0x8,0x8,0x8,0x0,0xc,0x0,0x0,0x8,0x0,0xc,0x8,0x8,0x0,0xc,0x0,0xff	@: 0x8610 32175
	.byte	0x8,0x4,0x8,0x0,0x0,0x0,0xc,0x0,0x8,0x0,0x0,0x8,0xc,0x8,0xc,0xff	@: 0x8620 32190
	.byte	0x8,0x4,0x0,0x0,0xc,0x8,0xc,0x0,0xc,0x4,0x8,0x4,0xc,0x4,0x0,0xff	@: 0x8630 32205
	.byte	0x0,0x4,0x4,0x8,0x4,0x4,0x4,0xc,0x0,0xc,0x0,0x0,0x4,0x4,0x0,0xff	@: 0x8640 32220
	.byte	0x8,0x4,0xc,0x8,0x0,0x8,0x4,0x8,0x8,0x0,0x4,0x4,0x0,0xc,0x0,0xff	@: 0x8650 32235
	.byte	0x4,0xc,0xc,0xc,0x0,0x4,0xc,0x0,0x8,0x0,0x0,0x8,0x0,0x4,0xc,0xff	@: 0x8660 32250
	.byte	0x0,0xc,0x0,0x0,0xc,0xc,0x8,0x4,0x8,0x0,0xc,0x0,0xc,0x0,0x4,0xff	@: 0x8670 32265
	.byte	0x8,0xc,0x0,0x0,0x8,0xc,0x4,0x8,0x4,0x8,0x4,0x8,0x8,0x4,0x4,0xff	@: 0x8680 32280
	.byte	0x4,0x4,0x4,0x4,0x8,0x8,0x8,0xc,0x4,0x0,0xc,0xc,0xc,0xc,0xc,0xff	@: 0x8690 32295
	.byte	0xc,0x8,0x4,0x0,0x4,0x8,0x8,0xc,0x8,0xc,0x4,0xc,0x0,0x8,0x8,0xff	@: 0x86A0 32310
	.byte	0xc,0x0,0x8,0xc,0xc,0x0,0xc,0xc,0xc,0x4,0x8,0x4,0x8,0x4,0x0,0xff	@: 0x86B0 32325
	.byte	0x8,0x0,0x4,0xc,0x0,0xc,0x0,0x0,0x4,0x0,0xc,0x4,0x4,0x8,0x4,0xff	@: 0x86C0 32340
	.byte	0xc,0x0,0x0,0x4,0x8,0xc,0x8,0x4,0x8,0x8,0x4,0x0,0x8,0xc,0x0,0xff	@: 0x86D0 32355
	.byte	0x8,0x8,0xc,0x8,0x4,0x4,0x8,0x4,0x0,0x4,0x0,0x4,0x0,0x8,0xc,0xff	@: 0x86E0 32370
	.byte	0xc,0xc,0xc,0x4,0x8,0x8,0x8,0x0,0x4,0x4,0xc,0x4,0x0,0x0,0x4,0xff	@: 0x86F0 32385
	.byte	0x8,0x4,0xc,0x8,0x0,0x8,0x4,0x4,0x0,0x0,0x0,0x4,0xc,0x4,0xc,0xff	@: 0x8700 32400
	.byte	0xc,0x4,0xc,0x0,0x8,0x4,0x4,0xc,0x8,0x8,0xc,0x8,0xc,0x0,0x0,0xff	@: 0x8710 32415
	.byte	0xc,0xc,0xc,0x4,0xc,0xc,0xc,0xc,0x0,0x8,0x4,0x4,0x0,0x8,0x8,0xff	@: 0x8720 32430
	.byte	0x0,0x0,0x0,0xc,0x0,0x0,0x4,0x4,0x4,0x8,0x8,0xc,0x8,0xc,0xc,0xff	@: 0x8730 32445
	.byte	0x4,0xc,0x8,0x4,0xc,0x4,0x0,0x0,0x4,0x4,0x8,0x0,0x0,0xc,0x4,0xff	@: 0x8740 32460
	.byte	0x4,0x0,0x4,0x8,0xc,0x4,0x8,0x0,0x8,0xc,0x8,0x4,0xc,0x4,0x8,0xff	@: 0x8750 32475
	.byte	0xc,0xc,0x0,0xc,0x4,0x4,0x4,0x4,0xc,0x4,0x8,0x0,0x4,0x8,0x0,0xff	@: 0x8760 32490
	.byte	0x0,0x0,0x0,0x8,0x0,0x4,0x4,0x8,0x0,0xc,0x8,0x4,0x8,0x8,0x0,0xff	@: 0x8770 32505
	.byte	0xc,0x4,0x8,0x8,0x8,0x8,0x0,0x0,0xc,0x0,0xc,0xc,0x4,0xc,0x8,0xff	@: 0x8780 32520
	.byte	0x0,0x4,0x4,0x4,0xc,0x4,0x0,0x0,0x8,0xc,0x8,0x4,0xc,0x8,0x8,0xff	@: 0x8790 32535
	.byte	0x8,0x4,0x8,0x8,0x0,0x8,0x8,0x8,0x0,0x0,0x4,0x4,0x0,0x8,0x0,0xff	@: 0x87A0 32550
	.byte	0x4,0x0,0xc,0x0,0x8,0xc,0x4,0x0,0xc,0x4,0xc,0x8,0xc,0xc,0x0,0xff	@: 0x87B0 32565
	.byte	0xc,0x0,0x0,0x0,0xc,0x8,0x4,0xc,0x0,0xc,0x4,0xc,0xc,0x4,0x0,0xff	@: 0x87C0 32580
	.byte	0x4,0x0,0x4,0x4,0x0,0x8,0x8,0x8,0x4,0x0,0x0,0x8,0x8,0x4,0xc,0xff	@: 0x87D0 32595
	.byte	0xc,0x0,0x0,0xc,0x0,0xc,0x4,0x0,0xc,0x4,0x4,0x0,0x0,0x0,0xc,0xff	@: 0x87E0 32610
	.byte	0x8,0xc,0x4,0x8,0xc,0x0,0x8,0x8,0xc,0x0,0x0,0x8,0xc,0xc,0xc,0xff	@: 0x87F0 32625
	.byte	0x4,0x8,0x8,0x0,0x4,0xc,0x0,0x4,0x8,0x8,0x0,0xc,0x0,0x8,0x8,0xff	@: 0x8800 32640
	.byte	0x8,0xc,0x8,0x0,0x8,0x4,0xc,0x4,0x8,0x8,0x4,0x0,0x8,0xc,0x4,0xff	@: 0x8810 32655
	.byte	0x8,0x0,0x4,0x8,0xc,0xc,0x8,0x8,0xc,0x0,0xc,0x8,0x0,0xc,0x4,0xff	@: 0x8820 32670
	.byte	0x8,0xc,0x0,0x8,0xc,0x0,0xc,0xc,0x8,0x8,0xc,0xc,0x4,0x4,0x0,0xff	@: 0x8830 32685
	.byte	0x0,0xc,0x4,0x4,0xc,0xc,0x4,0x8,0xc,0x4,0xc,0xc,0x0,0x8,0x4,0xff	@: 0x8840 32700
	.byte	0xc,0xc,0xc,0x4,0x4,0x4,0x4,0x0,0x4,0xc,0x8,0xc,0x0,0xc,0xc,0xff	@: 0x8850 32715
	.byte	0x4,0x4,0x4,0x8,0x4,0xc,0xc,0x0,0x8,0xc,0xc,0x4,0xc,0x8,0x4,0xff	@: 0x8860 32730
	.byte	0x8,0x0,0x8,0x8,0xc,0xc,0x4,0x8,0x8,0xc,0x4,0x4,0x0,0x8,0xc,0xff	@: 0x8870 32745
	.byte	0x0,0x8,0xc,0xc,0x4,0xc,0x0,0x8,0x8,0xc,0x4,0x8,0x4,0x0,0x4,0xff	@: 0x8880 32760
	.byte	0xc,0x8,0x0,0x4,0x4,0xc,0x0,0x4,0xc,0x4,0x8,0xc,0xc,0xc,0x4,0xff	@: 0x8890 32775
	.byte	0xc,0x8,0xc,0x0,0x4,0xc,0x8,0x8,0x8,0x8,0x8,0xc,0x8,0x8,0x8,0xff	@: 0x88A0 32790
	.byte	0x8,0x8,0x8,0xc,0xc,0x8,0x8,0x8,0x8,0x4,0x0,0xc,0xc,0x4,0x4,0xff	@: 0x88B0 32805

	
	.align	8

@: indicates 1 of 4 scrambling types for each symbol	
	
symbols_scramble_table_default:		

 .byte 0,1,1,1,1,3,1,3,1,3,1,3,1,3,3,3,1,3,1,2,2,2,2,0,0,0,1,3,3,3,2,3 @: 0000
 .byte 3,3,0,2,0,1,1,3,3,2,3,1,0,3,3,0,3,1,2,2,3,2,0,2,0,1,0,1,3,0,0,0 @: 0020
 .byte 0,2,2,1,2,2,0,0,3,0,2,3,2,1,3,2,3,1,2,0,2,0,1,2,2,2,2,0,0,3,2,1 @: 0040
 .byte 3,2,2,2,2,1,0,1,3,0,3,1,2,1,3,3,0,3,0,3,2,2,0,0,3,2,2,0,0,3,0,1 @: 0060
 .byte 3,2,1,3,3,1,3,1,0,3,1,1,0,2,0,1,0,3,0,1,3,2,3,3,2,0,2,1,0,2,2,3 @: 0080
 .byte 1,2,3,0,3,3,3,1,2,2,3,1,2,3,2,2,0,3,2,2,3,2,0,2,1,3,3,0,0,1,1,2 @: 00A0
 .byte 0,1,2,0,0,3,2,2,3,2,2,0,1,2,0,2,1,3,1,1,2,3,3,1,1,2,3,2,2,3,0,2 @: 00C0
 .byte 0,3,3,2,0,0,3,3,3,3,1,1,1,2,2,3,1,1,2,1,2,1,1,0,3,0,1,2,0,2,0,1 @: 00E0
 .byte 0,1,2,0,3,3,3,3,1,2,3,0,2,3,2,0,0,3,0,2,1,1,2,0,3,2,2,3,0,2,0,2 @: 0100
 .byte 2,0,3,2,3,0,1,0,3,3,3,0,2,3,1,0,1,2,0,1,1,1,2,1,3,2,0,1,2,3,1,1 @: 0120
 .byte 0,0,1,3,3,2,3,0,0,0,2,1,3,1,1,0,1,3,0,3,0,3,0,1,1,0,0,0,1,2,3,1 @: 0140
 .byte 0,2,0,3,1,0,2,0,0,3,0,1,1,0,3,3,0,1,3,1,3,0,0,1,2,1,2,3,3,0,2,0 @: 0160
 .byte 2,1,0,1,1,3,0,0,3,1,2,0,0,3,0,2,2,2,0,0,2,2,1,3,3,0,3,2,2,3,3,0 @: 0180
 .byte 3,3,1,2,0,0,1,0,1,1,1,2,3,0,0,0,3,0,3,1,2,2,2,2,2,2,2,0,3,1,3,2 @: 01A0
 .byte 3,1,2,2,0,0,1,1,0,0,0,3,2,1,3,3,2,0,0,0,1,2,3,2,3,2,3,1,2,2,1,2 @: 01C0
 .byte 1,1,1,0,2,0,3,0,3,3,0,3,1,1,1,0,0,0,3,2,0,1,2,0,1,0,2,1,2,2,2,1 @: 01E0
 .byte 1,2,0,2,3,0,1,1,2,0,1,3,1,2,1,1,2,2,2,0,1,0,1,1,2,0,0,1,1,2,3,3 @: 0200
 .byte 2,0,3,1,2,1,0,3,1,2,3,2,3,3,3,1,2,3,3,3,0,2,3,3,2,2,0,1,2,3,2,0 @: 0220
 .byte 1,3,0,2,2,2,1,1,0,1,3,0,2,0,0,0,0,1,1,1,0,2,2,0,3,1,1,3,3,0,0,1 @: 0240
 .byte 1,2,2,2,0,0,3,3,2,2,2,0,3,2,0,1,3,1,3,0,2,3,3,2,1,3,0,1,3,2,3,1 @: 0260
 .byte 1,2,3,0,0,2,1,1,1,0,2,0,0,0,1,0,3,2,3,3,3,2,1,2,1,3,2,2,2,0,2,2 @: 0280
 .byte 1,1,0,1,2,1,2,0,0,3,0,0,3,0,0,2,1,3,0,1,1,3,2,1,3,0,0,0,1,3,1,3 @: 02A0
 .byte 3,2,1,0,0,1,2,2,0,0,1,0,0,2,2,1,2,0,0,1,2,2,0,0,1,0,0,0,0,3,1,0 @: 02C0
 .byte 2,0,3,3,1,1,3,1,0,0,2,2,1,2,0,2,1,2,1,3,1,2,0,2,0,1,2,1,0,3,2,0 @: 02E0
 .byte 0,3,3,1,0,3,2,2,2,3,2,0,3,2,1,3,1,0,0,2,1,3,2,2,3,3,2,2,3,3,0,2 @: 0300
 .byte 2,2,2,0,2,0,3,3,0,3,1,3,0,1,2,1,3,0,2,2,2,2,2,0,2,2,2,3,3,0,0,2 @: 0320
 .byte 2,0,0,3,2,2,0,2,1,3,3,2,1,3,1,1,0,3,0,2,3,1,2,2,2,3,0,0,1,3,0,1 @: 0340
 .byte 2,2,0,0,3,1,3,1,3,0,0,1,2,0,0,2,2,1,0,2,1,0,1,1,0,2,2,1,2,1,3,1 @: 0360
 .byte 1,0,1,1,3,3,2,2,1,3,0,2,3,3,1,1,1,1,0,0,0,2,2,0,0,2,2,1,3,2,2,1 @: 0380
 .byte 2,0,1,2,2,0,0,0,1,2,2,2,1,0,2,1,3,2,3,0,1,1,1,2,2,0,1,2,3,2,1,1 @: 03A0
 .byte 2,0,3,3,0,0,0,1,3,3,0,2,3,0,3,3,3,1,3,0,3,2,2,2,0,0,0,2,0,2,2,0 @: 03C0
 .byte 0,1,3,3,1,0,3,1,0,1,2,0,0,0,2,3,1,1,1,3,3,0,3,3,3,2,2,1,2,3,0,0 @: 03E0
 .byte 0,2,2,3,0,0,0,0,3,0,2,3,3,1,1,0,0,1,0,3,0,0,2,3,0,1,1,1,2,3,1,1 @: 0400
 .byte 3,2,0,1,0,3,3,0,3,2,3,1,0,0,0,3,0,1,0,2,0,3,0,3,1,1,0,0,1,2,0,0 @: 0420
 .byte 0,1,0,2,0,0,3,0,1,0,3,3,2,0,3,1,1,2,1,0,1,2,3,2,3,3,1,3,0,3,0,1 @: 0440
 .byte 2,0,0,2,2,1,3,1,0,3,0,3,2,1,3,0,0,2,1,1,1,1,3,3,2,3,1,3,3,0,3,2 @: 0460
 .byte 1,3,0,2,0,2,1,3,0,1,3,2,3,1,1,2,2,1,1,3,3,1,1,3,2,0,2,1,3,3,0,3 @: 0480
 .byte 2,2,0,2,3,3,0,2,1,1,3,3,2,2,2,3,3,0,2,2,0,2,2,0,2,2,3,2,0,1,2,3 @: 04A0
 .byte 1,3,0,3,2,1,3,2,0,0,3,3,0,0,2,2,3,0,0,3,1,2,0,2,0,1,1,0,1,2,2,2 @: 04C0
 .byte 0,2,3,1,2,3,3,3,1,0,1,0,0,3,1,0,3,3,1,3,2,1,1,2,1,2,0,0,2,1,1,3 @: 04E0
 .byte 1,3,2,1,0,3,2,1,1,2,2,3,1,3,2,3,2,1,3,1,2,0,0,2,0,2,3,3,3,0,2,1 @: 0500
 .byte 2,1,2,0,3,1,3,1,0,0,2,2,3,3,2,1,3,2,1,3,3,2,0,1,2,1,3,0,0,3,2,2 @: 0520
 .byte 1,1,3,0,3,2,1,2,0,2,1,1,1,2,2,2,3,1,1,1,2,2,3,1,2,3,0,1,2,3,0,2 @: 0540
 .byte 0,2,2,1,3,1,3,1,2,2,0,2,0,3,0,3,1,1,0,0,0,1,1,0,1,1,1,3,2,2,2,3 @: 0560
 .byte 3,1,0,1,2,0,1,0,1,1,2,3,0,1,0,1,2,0,3,2,0,2,3,0,1,2,1,1,0,0,0,2 @: 0580
 .byte 3,2,2,2,1,1,2,3,2,0,1,3,1,2,0,0,3,0,0,0,1,2,2,3,2,2,3,3,1,2,3,2 @: 05A0
 .byte 3,1,1,0,0,1,2,2,0,2,3,1,3,0,0,1,0,1,0,2,0,0,0,1,2,2,1,0,0,1,3,3 @: 05C0
 .byte 1,0,3,1,2,0,3,2,3,0,0,2,3,1,3,3,2,2,2,2,3,2,1,3,3,1,1,2,1,2,1,1 @: 05E0
 .byte 0,3,2,3,1,0,1,1,1,0,1,2,3,1,2,2,2,3,2,2,0,0,0,3,1,3,2,3,1,1,0,1 @: 0600
 .byte 1,2,1,2,1,1,1,1,1,1,0,0,1,1,2,1,1,0,2,3,3,1,0,1,3,3,0,3,2,1,2,1 @: 0620
 .byte 2,2,2,2,0,3,0,1,1,3,3,1,3,1,0,3,0,3,1,0,0,1,0,2,0,0,2,1,0,3,2,0 @: 0640
 .byte 3,0,1,3,0,3,2,0,1,0,0,1,1,2,3,3,3,1,1,1,0,3,2,0,1,2,0,1,3,2,3,1 @: 0660
 .byte 1,2,1,3,0,0,0,3,2,3,2,3,3,0,3,2,0,0,3,0,2,2,3,1,2,0,3,3,1,1,3,1 @: 0680
 .byte 3,1,0,1,3,3,1,3,1,3,2,2,2,0,0,2,0,2,3,2,3,1,1,0,3,1,0,0,3,1,0,2 @: 06A0
 .byte 3,1,0,2,1,1,2,1,1,0,2,1,2,2,2,0,0,3,3,1,0,3,3,0,1,3,3,3,1,2,1,2 @: 06C0
 .byte 1,0,3,0,2,0,2,3,1,3,1,2,0,2,1,0,3,1,3,3,3,3,0,3,1,1,2,2,0,0,3,2 @: 06E0
 .byte 3,0,0,2,3,0,3,1,2,3,0,2,3,0,2,1,2,2,3,2,3,3,3,2,2,3,0,3,0,0,1,1 @: 0700
 .byte 1,2,2,2,2,1,2,1,2,0,3,0,1,2,0,1,0,2,1,1,2,1,3,3,3,3,3,0,3,2,2,1 @: 0720
 .byte 1,2,0,2,0,3,2,1,3,2,0,1,2,2,0,3,3,3,0,0,2,3,2,0,3,0,1,0,0,1,3,3 @: 0740
 .byte 1,2,0,1,3,2,3,3,3,3,3,2,1,3,1,2,2,1,0,0,2,3,1,1,2,1,0,3,1,1,3,3 @: 0760
 .byte 0,1,2,2,1,1,3,3,3,3,3,3,0,1,1,3,3,1,3,3,1,1,3,0,3,1,0,3,2,3,3,1 @: 0780
 .byte 2,1,3,0,0,0,2,2,3,3,1,0,3,2,1,3,1,0,3,3,3,1,2,1,3,0,2,2,2,1,2,1 @: 07A0
 .byte 1,3,2,1,2,3,3,2,2,2,1,3,0,1,2,3,2,0,2,2,3,1,2,3,0,3,0,0,3,0,1,1 @: 07C0
 .byte 2,2,2,3,1,3,0,3,1,0,2,3,3,1,1,2,0,3,3,2,3,1,3,0,1,1,2,0,2,2,2,2 @: 07E0
 .byte 0,1,3,1,0,2,2,1,2,2,2,2,0,2,2,3,1,3,0,2,3,3,2,3,2,0,3,2,0,1,3,2 @: 0800
 .byte 3,1,0,1,2,3,0,3,3,1,0,3,1,1,1,0,3,3,0,3,1,2,2,0,0,0,3,1,1,3,2,1 @: 0820
 .byte 0,0,1,3,2,0,1,3,2,0,3,1,2,2,3,1,1,0,2,3,0,3,3,1,2,0,3,0,0,3,1,3 @: 0840
 .byte 2,3,3,2,3,0,0,2,3,1,2,0,1,3,0,3,2,2,0,0,0,0,3,0,2,1,0,3,3,1,1,0 @: 0860
 .byte 3,2,0,0,0,0,2,3,0,1,3,2,2,2,3,3,3,1,2,3,3,1,3,1,2,3,0,1,0,2,2,3 @: 0880
 .byte 3,2,2,0,1,1,3,0,0,3,3,2,1,3,2,0,0,3,3,2,3,3,3,0,0,1,2,2,0,0,3,2 @: 08A0
 .byte 3,1,1,1,1,3,1,3,1,1,0,1,2,2,1,2,3,0,3,3,2,2,2,2,2,0,0,0,0,2,2,3 @: 08C0
 .byte 2,1,1,0,1,2,3,1,1,1,3,0,2,3,2,2,1,1,2,3,1,0,2,1,0,0,0,1,1,3,3,1 @: 08E0
 .byte 0,0,0,2,2,2,1,1,0,2,3,0,0,3,2,0,0,2,0,0,2,3,3,0,0,0,3,2,0,2,3,0 @: 0900
 .byte 0,0,2,3,1,0,0,2,3,0,3,0,3,0,0,3,0,3,2,2,2,0,0,3,3,3,2,2,0,1,2,2 @: 0920
 .byte 1,3,2,3,0,3,0,2,0,2,0,2,2,1,0,0,3,0,2,2,3,1,3,1,2,2,0,2,1,1,1,1 @: 0940
 .byte 2,0,2,1,0,1,0,0,2,3,2,1,0,3,0,0,1,0,3,1,2,2,3,2,1,1,1,3,0,2,1,3 @: 0960
 .byte 2,2,3,1,3,2,2,0,2,3,2,2,2,3,1,2,2,1,2,0,3,3,1,0,1,2,3,0,3,0,3,0 @: 0980
 .byte 2,0,0,1,3,0,3,3,0,1,3,3,0,0,0,1,1,2,3,1,1,0,0,0,2,0,0,3,0,1,2,3 @: 09A0
 .byte 0,0,0,3,3,1,1,0,3,1,2,3,2,1,3,2,1,0,3,0,1,1,0,2,0,3,2,2,3,2,1,0 @: 09C0
 .byte 1,2,3,0,3,0,2,0,1,0,2,2,0,2,3,2,3,3,0,1,2,0,1,3,0,0,1,0,0,3,2,0 @: 09E0
 .byte 3,2,1,1,0,1,0,1,0,1,0,1,0,2,1,2,1,2,2,1,3,2,3,2,3,0,2,1,2,0,1,2 @: 0A00
 .byte 2,1,1,1,1,2,0,0,2,0,2,3,3,3,1,3,3,3,1,1,0,2,1,1,3,2,2,0,0,1,2,2 @: 0A20
 .byte 2,1,0,1,2,1,1,0,2,1,1,3,3,2,3,1,2,0,3,0,3,1,3,2,2,0,0,1,2,2,1,0 @: 0A40
 .byte 3,3,3,0,2,3,3,3,2,3,3,1,1,1,3,0,2,2,3,0,1,0,1,2,2,2,1,1,0,0,1,1 @: 0A60
 .byte 0,0,0,3,1,1,3,0,2,3,0,0,2,2,3,3,0,0,0,1,0,3,3,1,3,2,3,0,0,2,3,0 @: 0A80
 .byte 1,2,1,2,1,3,1,3,3,2,1,2,0,2,0,2,2,1,0,1,2,1,3,0,2,0,3,0,2,1,0,3 @: 0AA0
 .byte 0,2,3,2,0,2,1,2,0,3,1,2,3,3,3,2,0,1,2,2,1,0,0,0,1,2,3,1,1,3,2,2 @: 0AC0
 .byte 0,1,1,0,3,0,3,2,3,2,2,1,3,1,0,2,0,1,2,1,0,2,3,0,1,1,2,2,3,2,1,0 @: 0AE0
 .byte 3,2,2,2,3,1,1,3,0,2,0,1,1,1,3,0,2,0,0,0,2,1,0,3,3,0,1,1,3,3,1,3 @: 0B00
 .byte 2,1,2,2,0,3,0,3,2,3,2,3,0,3,1,3,0,1,0,1,2,2,3,3,3,1,1,2,0,3,1,3 @: 0B20
 .byte 3,0,3,1,0,2,1,1,1,1,2,2,2,2,0,1,3,3,1,1,1,0,1,1,1,1,3,0,3,3,2,1 @: 0B40
 .byte 0,2,3,0,0,3,1,3,3,3,1,2,2,1,1,2,2,2,3,1,2,1,3,3,2,1,3,0,3,1,3,1 @: 0B60
 .byte 0,0,2,0,3,2,2,2,2,3,0,2,3,0,2,0,1,3,1,0,1,1,1,0,3,1,1,2,2,2,1,1 @: 0B80
 .byte 0,2,2,1,2,0,0,0,1,0,1,0,1,1,3,3,1,1,2,0,1,1,0,2,2,2,0,3,3,0,2,3 @: 0BA0
 .byte 3,0,3,0,3,0,1,1,3,0,3,1,1,3,3,1,1,1,2,0,1,2,1,0,1,3,0,1,3,1,3,2 @: 0BC0
 .byte 0,2,0,3,0,0,1,3,0,3,3,2,3,1,1,1,2,3,0,0,1,3,3,2,1,0,2,3,2,2,1,0 @: 0BE0
 .byte 3,3,0,0,2,2,2,3,3,3,0,0,1,0,3,0,1,0,2,0,1,2,2,2,0,1,0,1,1,3,3,3 @: 0C00
 .byte 0,1,1,3,0,0,2,1,2,0,0,0,0,0,1,1,1,3,1,0,1,0,0,0,3,2,2,2,0,1,0,1 @: 0C20
 .byte 3,1,1,0,2,1,2,1,0,3,3,1,3,1,2,3,3,0,3,1,0,1,3,0,2,3,1,3,3,3,1,2 @: 0C40
 .byte 2,2,3,3,3,2,1,1,3,2,3,2,3,0,1,1,0,2,0,1,1,1,3,1,3,3,3,3,2,0,1,2 @: 0C60
 .byte 2,2,2,1,0,3,3,3,0,0,1,3,0,0,1,2,3,0,2,2,0,2,0,1,0,0,1,0,0,3,1,2 @: 0C80
 .byte 0,3,0,2,0,1,0,0,2,1,3,0,0,0,0,3,2,3,2,1,2,3,1,0,2,3,2,2,3,0,3,2 @: 0CA0
 .byte 1,3,0,2,2,0,3,2,1,2,2,2,0,0,3,3,1,0,2,0,2,3,0,1,0,1,0,0,0,0,2,0 @: 0CC0
 .byte 0,2,2,1,1,3,3,2,3,3,3,2,1,0,2,0,2,2,3,1,1,1,1,0,0,0,2,1,2,3,0,0 @: 0CE0
 .byte 0,2,1,2,3,3,0,3,1,2,3,3,3,0,0,1,0,3,3,0,1,1,1,1,0,3,2,0,3,0,1,2 @: 0D00
 .byte 2,2,1,3,2,3,3,0,1,2,1,0,1,1,3,2,1,0,1,2,2,1,0,1,2,2,0,0,2,3,0,2 @: 0D20
 .byte 3,0,0,2,1,2,2,1,1,0,3,2,2,2,1,0,3,2,2,2,1,2,2,3,0,3,3,1,3,1,2,3 @: 0D40
 .byte 2,3,3,3,3,1,2,2,0,3,1,0,1,2,0,1,3,3,0,2,3,2,2,0,3,2,1,3,2,1,0,2 @: 0D60
 .byte 0,2,3,3,2,0,3,3,2,2,0,0,1,2,0,1,2,3,0,1,2,2,3,3,0,1,1,0,1,2,0,0 @: 0D80
 .byte 2,0,2,1,0,0,3,2,2,1,0,3,0,1,3,3,1,1,1,2,2,3,3,0,1,0,1,0,3,0,1,0 @: 0DA0
 .byte 2,1,2,1,3,2,1,3,3,1,0,3,0,2,3,3,0,3,0,1,3,1,2,2,2,0,1,0,0,0,2,0 @: 0DC0
 .byte 1,3,0,1,2,0,1,2,1,2,3,1,2,0,2,2,2,2,2,1,1,0,0,3,3,3,1,2,0,0,0,2 @: 0DE0
 .byte 2,1,0,1,3,0,2,2,2,3,2,1,0,1,2,1,1,0,1,3,0,1,3,1,0,1,1,0,0,2,2,1 @: 0E00
 .byte 1,3,0,0,3,1,1,3,2,0,0,2,2,3,2,2,2,1,0,0,1,1,1,2,3,0,1,3,3,2,2,3 @: 0E20
 .byte 0,0,0,3,0,0,3,1,1,0,0,3,2,0,1,1,0,0,0,2,0,3,1,3,0,1,3,0,3,3,2,3 @: 0E40
 .byte 3,0,3,1,3,2,3,3,1,1,3,1,1,1,3,1,3,2,1,2,3,2,2,3,3,2,1,3,3,1,0,0 @: 0E60
 .byte 2,1,2,3,2,1,1,0,0,0,3,0,0,3,3,0,1,0,2,1,2,3,3,0,1,0,2,1,1,1,1,2 @: 0E80
 .byte 3,2,1,2,2,1,0,2,3,3,0,0,0,1,0,0,0,0,3,1,0,2,0,3,0,3,2,2,0,2,1,2 @: 0EA0
 .byte 0,2,0,0,1,2,0,0,2,2,2,0,1,3,0,2,2,2,1,3,2,3,3,2,2,3,1,2,1,3,2,0 @: 0EC0
 .byte 0,1,0,1,0,3,1,2,1,0,0,2,2,2,1,3,0,3,2,1,2,3,0,0,2,2,3,1,1,2,0,3 @: 0EE0
 .byte 1,2,3,1,2,1,2,0,0,1,2,2,0,0,2,1,3,0,0,1,3,0,0,1,2,2,1,0,0,3,2,1 @: 0F00
 .byte 0,1,3,1,1,2,3,3,2,2,1,0,1,0,0,2,3,2,2,0,3,3,0,2,1,0,3,1,3,1,2,2 @: 0F20
 .byte 0,2,3,0,1,2,0,1,0,2,1,0,0,2,2,3,0,0,0,1,1,1,1,3,0,0,0,2,2,1,1,3 @: 0F40
 .byte 3,2,1,0,0,2,0,3,1,0,2,0,1,2,2,2,1,2,2,2,2,3,1,1,1,3,2,0,0,0,1,2 @: 0F60
 .byte 2,0,0,1,3,1,0,1,0,3,0,0,0,3,2,1,0,3,0,1,0,2,0,3,3,1,2,2,0,1,0,2 @: 0F80
 .byte 1,1,1,3,1,0,3,0,3,3,3,1,1,2,2,1,3,1,3,0,0,2,0,3,3,3,2,0,3,0,1,1 @: 0FA0
 .byte 3,3,3,0,0,0,3,1,1,3,2,0,0,1,1,1,0,3,3,2,3,3,3,2,2,2,3,1,2,2,1,0 @: 0FC0
 .byte 1,1,3,1,3,3,2,2,2,2,0,1,2,0,3,0,0,3,3,1,2,2,3,0,0,3,2,3,2,1,1,2 @: 0FE0
 .byte 2,2,0,0,2,0,3,2,2,2,3,1,3,2,3,0,3,2,3,3,0,0,3,1,0,2,3,2,2,0,3,0 @: 1000
 .byte 3,1,0,3,0,1,3,1,2,2,3,0,2,2,0,2,0,1,3,0,3,3,1,3,3,1,2,2,0,2,2,1 @: 1020
 .byte 0,1,0,3,1,0,0,0,0,1,2,3,0,0,3,1,2,3,2,3,2,1,3,3,1,1,0,1,2,1,1,2 @: 1040
 .byte 1,0,3,2,3,1,2,1,2,2,0,3,3,3,0,2,0,1,0,2,2,0,3,0,2,1,1,2,0,2,0,1 @: 1060
 .byte 1,1,1,2,2,0,2,2,2,2,0,1,2,0,0,1,0,0,0,3,0,0,1,1,2,3,1,2,2,1,2,0 @: 1080
 .byte 0,1,2,3,0,0,3,0,2,0,1,0,0,1,2,3,0,2,3,2,0,3,0,3,3,2,3,3,1,0,2,2 @: 10A0
 .byte 3,3,1,2,3,0,2,0,2,0,2,0,3,0,3,2,2,1,1,3,3,0,1,3,0,3,3,1,2,2,2,1 @: 10C0
 .byte 3,2,2,3,1,0,1,2,1,3,1,0,2,3,0,0,0,0,1,3,3,2,1,2,3,0,0,2,0,3,2,2 @: 10E0
 .byte 2,2,1,3,2,1,3,0,1,1,3,3,1,3,3,1,1,3,0,0,3,1,2,3,1,0,1,0,3,3,0,2 @: 1100
 .byte 1,0,3,2,1,2,2,3,1,1,1,0,0,2,0,3,0,0,1,2,1,0,2,3,3,2,1,3,1,2,3,3 @: 1120
 .byte 2,1,0,1,0,3,3,1,0,0,3,0,0,0,3,1,3,2,2,0,3,0,0,3,2,3,0,2,0,2,3,2 @: 1140
 .byte 2,0,0,2,0,1,1,3,2,3,0,0,0,3,0,0,2,0,2,2,3,1,1,2,2,1,2,0,1,3,0,1 @: 1160
 .byte 0,0,0,1,0,1,2,3,2,3,3,3,1,1,2,2,1,1,0,0,2,0,1,3,1,1,3,3,0,0,0,3 @: 1180
 .byte 2,1,0,3,3,3,0,3,1,1,1,1,1,0,1,3,1,2,1,1,1,1,2,2,2,1,1,3,1,3,3,2 @: 11A0
 .byte 2,2,1,0,1,3,1,1,3,3,0,1,1,2,3,3,2,0,3,1,1,2,3,2,0,0,3,3,1,0,2,0 @: 11C0
 .byte 2,3,3,1,0,0,3,0,3,0,1,0,0,0,2,1,3,2,1,0,3,0,3,2,1,2,0,0,2,1,2,2 @: 11E0
 .byte 2,0,0,0,3,0,2,0,2,3,1,1,1,2,3,1,3,3,2,0,2,2,1,1,3,2,2,1,1,0,2,3 @: 1200
 .byte 2,0,1,2,2,1,1,1,3,3,0,3,2,2,0,2,3,1,1,0,3,0,3,0,0,3,3,0,3,1,0,3 @: 1220
 .byte 1,0,0,3,3,2,2,3,2,2,2,1,3,3,0,3,3,1,3,1,3,1,2,0,1,3,2,1,2,1,1,2 @: 1240
 .byte 2,1,0,0,1,0,0,3,3,2,1,1,3,2,1,1,1,0,3,0,2,0,1,3,3,3,2,1,0,1,2,1 @: 1260
 .byte 0,1,3,3,2,2,1,1,1,0,0,2,1,0,1,2,0,0,3,3,0,2,0,2,0,1,3,0,0,3,3,2 @: 1280
 .byte 2,1,2,1,0,0,3,1,0,2,3,3,1,3,0,0,0,1,0,2,3,0,3,0,1,0,2,0,3,1,3,0 @: 12A0
 .byte 1,2,2,3,2,2,3,2,3,2,0,2,1,1,3,0,1,0,0,2,3,3,3,2,2,1,1,2,2,2,1,0 @: 12C0
 .byte 0,0,0,3,1,2,1,3,3,1,3,2,2,1,1,2,3,1,1,1,1,1,2,2,0,3,3,2,2,3,3,3 @: 12E0
 .byte 3,1,0,0,3,2,2,3,3,2,1,3,3,0,3,0,2,1,1,3,1,2,0,2,1,0,2,0,1,0,0,2 @: 1300
 .byte 1,3,2,3,2,0,2,3,2,3,3,2,3,1,0,1,0,2,3,0,0,2,3,3,0,1,0,1,1,1,1,2 @: 1320
 .byte 0,1,2,2,1,1,2,1,1,3,3,3,1,3,3,0,0,2,1,1,3,3,2,0,0,2,2,3,0,2,3,2 @: 1340
 .byte 2,0,1,1,2,0,1,1,2,3,0,2,0,2,0,2,2,1,2,1,3,2,2,1,1,2,1,2,2,1,0,0 @: 1360
 .byte 1,2,1,1,0,1,1,0,0,0,1,3,1,0,3,2,3,1,3,3,0,1,2,0,0,1,3,1,2,1,0,0 @: 1380
 .byte 3,1,1,3,0,0,2,1,0,1,2,1,0,1,3,2,3,2,3,3,3,3,3,3,1,0,2,0,2,1,1,2 @: 13A0
 .byte 0,1,2,1,1,2,2,1,1,1,0,2,1,1,2,3,3,0,1,0,0,0,1,2,3,0,1,0,3,0,1,0 @: 13C0
 .byte 2,3,2,3,0,1,2,3,2,0,2,1,0,3,0,1,3,3,0,2,0,2,0,3,2,0,1,0,2,3,3,3 @: 13E0
 .byte 1,0,0,1,3,3,3,2,0,1,0,0,1,0,2,3,2,1,3,0,2,3,1,0,3,2,3,1,1,2,2,3 @: 1400
 .byte 2,2,0,3,1,2,3,1,1,3,2,3,0,3,3,3,1,0,0,2,2,2,1,0,0,1,1,2,1,1,1,3 @: 1420
 .byte 2,3,2,3,0,3,1,2,2,2,0,3,3,0,2,0,0,3,1,3,0,1,1,3,2,1,0,1,0,3,0,2 @: 1440
 .byte 0,3,2,2,0,1,3,0,1,1,1,0,1,0,2,2,3,3,1,0,3,1,3,0,1,3,3,0,0,1,0,1 @: 1460
 .byte 1,2,3,3,0,3,1,3,1,0,0,1,2,3,1,1,0,2,2,2,2,1,2,2,0,3,3,0,1,1,3,3 @: 1480
 .byte 3,0,3,1,0,3,1,0,1,1,0,2,0,3,0,3,0,2,1,1,0,3,1,3,3,3,0,1,1,1,1,3 @: 14A0
 .byte 0,2,3,3,0,0,0,1,2,1,3,1,2,0,2,2,0,3,3,1,2,1,2,3,0,0,1,2,0,2,1,3 @: 14C0
 .byte 3,3,3,3,3,0,2,0,0,2,2,2,1,2,2,0,3,2,3,3,3,3,1,2,2,2,2,2,1,0,2,3 @: 14E0
 .byte 0,2,0,2,3,0,0,1,2,1,1,1,1,0,2,2,2,3,2,2,3,0,3,0,0,0,3,1,1,0,1,1 @: 1500
 .byte 2,0,3,0,0,3,3,0,3,0,1,0,1,3,1,1,1,2,1,1,0,3,1,3,1,2,1,1,1,1,1,3 @: 1520
 .byte 3,0,1,3,0,0,0,1,0,0,0,2,1,2,1,2,0,3,2,2,3,3,3,0,3,0,3,2,0,2,0,0 @: 1540
 .byte 2,1,1,2,0,1,2,0,0,1,0,3,0,0,0,0,1,3,2,2,1,1,3,2,3,2,0,0,2,3,2,0 @: 1560
 .byte 2,2,3,0,0,2,2,0,1,3,1,1,2,0,1,2,1,3,0,1,0,1,0,3,2,0,2,1,0,3,1,2 @: 1580
 .byte 1,3,1,2,2,2,1,0,2,0,3,0,1,0,2,3,2,1,3,0,1,0,3,3,1,1,0,0,1,0,3,3 @: 15A0
 .byte 2,0,0,1,0,3,2,0,3,1,2,3,1,0,1,1,0,3,0,0,1,2,1,1,1,2,1,2,2,0,3,0 @: 15C0
 .byte 3,0,0,2,3,1,1,0,3,0,1,0,2,0,1,0,2,1,3,2,0,3,0,3,0,3,0,0,3,2,1,2 @: 15E0
 .byte 3,2,2,1,1,0,1,2,3,2,3,2,0,0,2,2,3,1,1,1,3,0,0,0,2,2,3,3,3,1,2,2 @: 1600
 .byte 3,1,1,3,0,1,0,3,3,3,2,1,1,0,2,2,1,1,0,3,2,3,1,1,0,3,2,2,1,1,3,1 @: 1620
 .byte 0,2,2,2,2,3,3,2,1,1,0,2,0,1,0,0,1,0,0,1,2,0,0,3,0,3,0,3,1,2,1,1 @: 1640
 .byte 1,3,0,3,1,0,2,1,0,0,3,1,1,2,0,3,1,2,2,2,2,2,1,0,1,0,2,0,0,0,0,0 @: 1660
 .byte 2,0,3,3,1,2,3,0,2,1,1,0,2,2,1,1,0,0,2,0,3,0,3,2,1,2,1,2,3,0,1,3 @: 1680
 .byte 3,2,2,3,3,3,3,3,2,0,2,1,0,3,2,2,0,0,0,3,2,1,0,3,3,0,3,0,3,3,1,2 @: 16A0
 .byte 1,0,2,2,0,1,1,3,1,3,2,1,1,0,0,1,0,2,3,2,2,2,1,2,0,0,3,0,3,1,3,0 @: 16C0
 .byte 3,2,1,1,0,3,1,1,1,2,3,2,1,2,3,2,0,0,2,2,3,0,2,0,2,2,2,1,2,3,3,0 @: 16E0
 .byte 0,3,1,1,3,2,1,1,2,3,0,2,1,3,1,2,3,0,1,2,0,0,0,1,0,0,2,3,3,0,0,0 @: 1700
 .byte 3,3,1,1,0,0,1,0,3,2,1,3,0,0,3,2,1,2,3,0,1,1,0,2,0,3,2,0,1,0,1,3 @: 1720
 .byte 3,1,2,0,0,0,1,2,1,1,1,2,1,3,2,3,1,2,2,0,0,1,1,0,1,3,2,1,1,1,0,3 @: 1740
 .byte 3,2,0,2,2,0,1,2,3,2,1,3,3,3,0,2,1,3,2,1,0,0,0,0,2,1,2,3,3,3,1,3 @: 1760
 .byte 0,3,3,1,1,2,1,2,0,1,1,1,1,3,0,1,2,2,2,3,1,0,0,1,2,1,2,0,3,2,2,0 @: 1780
 .byte 2,2,3,3,2,3,2,2,2,2,1,1,3,0,3,1,0,3,2,2,2,1,2,3,1,1,3,3,2,1,0,3 @: 17A0
 .byte 3,0,2,0,2,2,2,1,0,2,3,0,0,3,0,3,1,3,3,1,1,1,2,3,1,0,3,2,2,1,1,1 @: 17C0
 .byte 0,1,2,1,0,1,2,0,1,1,1,3,2,3,3,3,2,1,0,0,3,3,0,3,2,2,1,2,1,1,3,3 @: 17E0
 .byte 0,3,3,0,2,3,0,0,1,0,1,1,2,0,2,1,0,1,0,0,3,3,3,1,3,1,3,1,0,0,2,2 @: 1800
 .byte 1,3,0,2,2,0,0,3,3,2,3,3,0,2,1,1,1,3,3,0,2,0,3,2,3,0,3,2,0,0,3,0 @: 1820
 .byte 2,1,2,3,2,3,0,0,3,3,3,3,1,3,3,2,0,3,1,0,1,0,3,1,1,3,1,3,3,0,1,1 @: 1840
 .byte 3,3,2,1,1,3,2,3,3,2,0,3,0,0,0,3,3,1,2,1,3,3,2,1,1,1,1,1,2,3,0,1 @: 1860
 .byte 1,2,2,1,2,1,2,3,1,2,3,0,2,0,2,0,0,3,0,0,0,3,1,1,0,3,1,2,2,2,3,3 @: 1880
 .byte 0,1,3,2,3,2,1,1,3,3,2,0,3,1,0,1,2,3,2,2,0,0,1,0,3,3,1,3,1,1,1,3 @: 18A0
 .byte 3,0,3,2,1,0,3,0,0,0,3,3,0,3,1,3,0,3,1,3,3,3,2,2,1,0,1,1,3,0,2,3 @: 18C0
 .byte 0,3,1,1,3,0,3,0,3,2,1,1,3,2,1,0,3,2,3,3,3,3,0,0,2,1,0,2,1,2,2,3 @: 18E0
 .byte 2,1,1,0,0,0,0,2,3,0,2,1,3,1,3,2,2,0,0,1,3,2,1,1,0,2,2,1,0,3,0,0 @: 1900
 .byte 1,2,2,1,1,0,2,1,3,2,0,3,3,2,3,1,1,0,0,1,2,0,0,0,0,2,1,3,3,3,1,0 @: 1920
 .byte 0,2,1,0,2,3,0,2,2,1,0,2,3,2,2,0,3,1,3,3,1,1,1,2,2,1,3,1,0,0,3,1 @: 1940
 .byte 0,1,2,0,1,3,0,2,1,1,3,3,2,3,2,3,3,0,1,2,3,0,1,0,2,0,3,1,0,3,0,2 @: 1960
 .byte 0,3,3,2,0,2,1,3,1,3,2,2,3,0,3,0,2,0,3,1,3,3,3,0,2,2,3,0,3,0,0,3 @: 1980
 .byte 2,0,2,2,3,1,1,0,0,1,3,2,0,2,1,0,3,3,1,0,1,0,0,0,1,3,3,1,2,1,3,3 @: 19A0
 .byte 2,2,2,3,0,0,0,2,2,1,3,2,2,1,0,0,1,3,1,2,3,1,0,2,2,0,3,3,0,2,3,1 @: 19C0
 .byte 0,1,1,3,2,0,2,2,3,3,0,2,2,3,2,3,2,3,2,2,1,2,2,3,1,2,3,3,0,2,2,1 @: 19E0
 .byte 0,1,3,2,0,0,3,0,2,1,3,2,2,1,0,0,3,0,0,0,2,1,0,2,3,2,3,2,0,3,1,2 @: 1A00
 .byte 1,2,1,2,3,1,1,2,0,1,0,3,2,1,3,3,3,0,3,2,2,3,2,0,0,3,1,2,3,2,2,0 @: 1A20
 .byte 0,0,0,1,2,3,2,3,0,1,2,2,3,1,3,0,2,2,2,2,0,3,1,0,0,0,2,0,3,3,0,2 @: 1A40
 .byte 0,1,3,3,0,0,3,2,3,2,0,0,0,1,1,1,1,1,2,0,3,3,1,3,2,3,3,3,3,3,0,1 @: 1A60
 .byte 1,1,1,2,0,1,2,0,1,3,2,0,0,0,1,0,1,3,1,2,3,1,3,3,0,3,3,0,2,2,1,2 @: 1A80
 .byte 1,0,3,0,1,0,1,2,2,3,3,1,0,0,3,3,3,2,3,3,2,1,0,3,1,3,1,3,3,1,0,0 @: 1AA0
 .byte 0,3,3,1,3,0,1,0,3,1,3,2,3,0,2,3,1,2,0,3,0,0,1,3,1,2,3,0,3,0,1,2 @: 1AC0
 .byte 3,1,2,0,0,2,3,2,2,2,3,2,2,1,2,1,0,2,3,3,1,0,2,3,2,3,0,0,2,0,2,3 @: 1AE0
 .byte 0,0,3,1,1,1,2,2,3,1,3,0,2,1,1,1,2,0,0,1,0,2,1,1,0,2,3,2,2,0,2,1 @: 1B00
 .byte 0,3,1,3,2,2,1,0,3,2,0,2,2,3,3,0,0,2,2,2,2,3,3,1,1,1,1,3,2,2,1,3 @: 1B20
 .byte 3,1,2,0,2,2,2,1,2,2,2,1,3,1,0,0,3,3,0,2,2,2,1,3,3,2,3,0,1,0,3,1 @: 1B40
 .byte 1,2,3,1,1,0,0,0,0,3,2,0,2,3,0,3,0,1,0,1,0,3,2,2,1,0,1,0,1,1,0,2 @: 1B60
 .byte 2,0,3,2,3,2,0,3,3,2,0,2,0,2,2,0,1,0,0,2,0,2,3,0,0,2,1,0,2,0,2,1 @: 1B80
 .byte 2,1,2,1,0,0,1,3,2,0,1,0,1,3,3,0,1,2,3,1,1,1,0,3,1,0,0,2,2,3,1,0 @: 1BA0
 .byte 2,3,0,1,2,2,2,3,0,3,2,1,1,0,2,2,0,1,1,1,2,3,1,2,1,1,0,2,1,0,1,0 @: 1BC0
 .byte 1,3,2,3,3,2,1,0,2,1,0,2,0,2,2,2,1,3,1,1,0,0,2,2,0,1,0,0,2,0,3,3 @: 1BE0
 .byte 2,2,2,1,2,1,2,1,2,0,3,0,3,3,0,1,2,1,0,3,0,1,1,0,1,0,2,3,3,3,1,1 @: 1C00
 .byte 2,3,2,2,1,0,0,3,0,0,1,3,0,2,2,1,1,0,3,0,3,1,0,2,3,3,1,0,3,1,1,3 @: 1C20
 .byte 0,3,3,0,0,2,0,0,0,0,2,0,2,2,3,2,3,1,0,0,2,3,0,2,3,3,1,3,1,2,3,2 @: 1C40
 .byte 3,0,1,1,3,2,1,0,3,2,0,1,2,2,3,1,1,2,0,1,1,2,3,1,2,0,0,1,0,0,2,3 @: 1C60
 .byte 2,2,0,3,3,1,2,1,2,1,1,0,3,0,0,2,0,2,3,1,1,1,3,2,0,3,1,2,1,1,1,0 @: 1C80
 .byte 2,2,3,0,0,0,1,1,0,1,0,1,0,0,0,3,2,0,1,1,3,1,2,1,1,3,0,0,2,0,3,0 @: 1CA0
 .byte 2,3,3,0,1,1,1,0,1,1,2,3,2,3,1,1,2,0,1,3,3,3,3,1,2,1,0,2,1,2,1,0 @: 1CC0
 .byte 1,2,0,3,2,2,1,0,2,1,1,2,0,2,0,3,0,2,2,1,3,3,3,1,2,1,2,0,2,3,2,3 @: 1CE0
 .byte 0,3,3,0,3,3,2,0,2,1,3,0,3,3,1,0,0,0,0,0,1,3,3,0,0,0,0,0,3,0,1,1 @: 1D00
 .byte 1,1,3,1,1,2,0,1,1,1,0,0,3,0,0,2,0,2,1,0,2,0,3,3,0,3,0,0,3,3,0,2 @: 1D20
 .byte 3,2,0,2,2,1,2,0,2,0,3,2,2,0,3,3,1,3,3,3,3,2,3,1,0,1,1,3,3,0,2,2 @: 1D40
 .byte 1,0,1,3,1,2,0,0,3,1,1,1,3,1,3,3,3,2,3,2,0,2,3,2,0,3,3,1,2,2,1,3 @: 1D60
 .byte 2,1,2,3,0,2,2,0,2,0,3,3,2,3,3,1,2,3,2,0,2,2,0,0,1,3,3,1,1,0,0,1 @: 1D80
 .byte 2,1,1,0,0,1,2,0,2,3,2,2,3,1,3,0,1,0,2,3,0,1,1,3,0,0,1,3,1,0,1,3 @: 1DA0
 .byte 0,3,3,2,3,2,2,1,1,3,3,2,0,2,1,2,0,2,2,3,3,1,1,1,2,2,3,2,0,2,3,0 @: 1DC0
 .byte 1,3,1,0,3,1,1,1,1,0,3,0,2,2,1,0,1,1,1,3,1,1,0,0,2,3,2,0,2,2,1,0 @: 1DE0
 .byte 3,1,0,0,3,1,3,1,0,3,2,3,3,3,2,0,1,1,3,3,2,0,0,3,3,3,1,3,1,1,0,3 @: 1E00
 .byte 1,0,1,2,2,3,1,2,2,0,3,1,0,2,1,0,1,1,1,2,3,1,3,3,2,0,0,2,3,3,0,1 @: 1E20
 .byte 3,1,2,2,1,2,1,1,3,2,1,0,1,0,3,2,2,1,0,0,2,3,1,1,2,2,0,1,1,1,2,0 @: 1E40
 .byte 3,1,0,0,3,1,3,0,3,1,1,2,1,1,1,3,1,2,0,0,2,2,1,3,3,2,1,2,3,3,2,0 @: 1E60
 .byte 3,3,1,3,1,2,1,0,1,0,3,3,2,1,2,2,1,1,1,3,2,3,0,3,0,1,0,2,1,0,2,3 @: 1E80
 .byte 1,0,0,0,1,3,0,1,3,0,3,1,0,3,1,3,0,3,3,3,0,0,1,1,2,3,3,0,2,2,2,3 @: 1EA0
 .byte 3,2,2,1,0,2,2,0,0,2,3,0,2,1,3,3,0,2,3,3,3,0,1,2,2,1,2,2,2,1,1,0 @: 1EC0
 .byte 1,3,3,3,1,2,0,0,1,3,2,3,0,1,1,2,2,0,2,0,2,3,2,2,2,2,3,2,2,2,3,2 @: 1EE0
 .byte 1,3,3,2,0,1,1,2,3,1,2,0,2,0,2,1,0,3,3,2,0,0,1,2,0,3,3,3,2,2,1,2 @: 1F00
 .byte 3,3,0,1,1,2,1,2,0,3,2,1,1,1,3,1,0,2,3,0,0,0,0,3,2,1,0,3,0,1,2,2 @: 1F20
 .byte 1,0,2,3,0,3,3,1,0,3,3,2,1,1,1,0,3,2,3,2,2,1,2,2,2,1,3,0,3,3,3,3 @: 1F40
 .byte 1,1,1,3,2,2,0,2,2,0,3,3,2,3,0,3,2,0,3,2,0,0,3,3,3,1,2,1,1,0,0,3 @: 1F60
 .byte 1,2,2,1,0,2,0,0,3,0,3,0,3,0,3,0,2,3,0,2,0,0,2,3,2,2,1,1,1,3,3,2 @: 1F80
 .byte 3,3,3,2,1,3,3,2,3,0,1,1,0,3,2,3,3,2,3,1,0,2,2,1,0,3,0,0,3,2,3,1 @: 1FA0
 .byte 1,2,2,0,3,0,1,2,0,1,3,0,0,1,3,1,2,3,2,2,1,0,1,1,1,3,3,1,3,3,1,1 @: 1FC0
 .byte 1,2,2,0,0,3,1,0,1,3,0,3,1,0,1,1,2,2,2,2,0,2,2,2,2,2,1,1,3,1,1,1 @: 1FE0
 .byte 1,2,3,0,1,0,1,2,0,1,2,0,3,0,3,1,3,2,0,3,0,2,1,0,2,0,2,3,0,2,3,0 @: 2000
 .byte 3,2,1,0,1,2,2,1,2,1,1,3,0,0,3,1,0,0,3,2,3,1,2,0,0,0,3,3,1,0,2,1 @: 2020
 .byte 1,0,3,2,2,1,3,2,3,3,2,2,3,2,1,2,0,3,1,1,0,2,1,1,0,2,0,1,3,3,0,1 @: 2040
 .byte 0,3,2,0,1,3,0,3,2,2,0,1,3,3,3,1,0,2,1,3,2,2,2,0,2,1,2,0,1,0,3,1 @: 2060
 .byte 0,1,0,2,0,3,0,3,3,1,2,0,0,1,2,0,2,1,1,2,0,3,2,3,1,3,1,2,3,3,3,3 @: 2080
 .byte 3,3,2,3,2,3,1,3,2,0,1,2,3,0,1,3,1,3,2,2,3,1,3,0,1,0,2,2,3,2,1,0 @: 20A0
 .byte 1,2,0,3,3,2,1,0,2,2,1,3,3,3,2,1,3,0,0,3,1,1,2,0,1,0,0,3,3,3,3,0 @: 20C0
 .byte 2,0,2,3,0,0,2,2,0,0,1,0,2,0,3,2,0,3,2,0,2,0,2,2,2,1,1,3,2,3,3,1 @: 20E0
 .byte 2,3,0,1,1,3,3,0,0,3,3,3,3,1,2,1,2,3,3,3,0,1,3,0,0,1,0,0,1,0,1,1 @: 2100
 .byte 3,0,2,0,1,0,0,3,3,3,3,3,0,0,1,1,0,0,2,0,0,0,2,1,2,0,2,3,1,0,2,0 @: 2120
 .byte 3,0,2,1,1,2,2,0,1,1,2,2,2,0,3,1,2,2,0,1,3,2,0,0,1,1,1,0,0,3,0,1 @: 2140
 .byte 0,0,0,0,0,3,1,0,3,2,2,2,2,3,0,3,0,3,2,3,3,0,2,3,3,2,1,3,1,0,1,2 @: 2160
 .byte 3,2,1,3,2,2,2,0,0,3,0,3,1,2,0,3,2,3,0,3,2,3,2,1,1,2,3,2,0,3,1,1 @: 2180
 .byte 1,1,0,0,2,0,2,1,3,2,3,2,3,0,3,0,2,2,3,3,0,2,0,0,0,3,1,3,0,1,1,0 @: 21A0
 .byte 0,2,1,2,0,3,2,0,3,0,1,2,3,2,0,0,0,2,3,1,1,0,0,1,2,0,3,1,3,2,0,1 @: 21C0
 .byte 3,3,1,1,1,3,3,2,1,1,0,3,3,3,3,3,2,1,1,1,2,3,1,1,1,1,2,0,3,1,2,1 @: 21E0
 .byte 1,3,1,2,3,2,3,0,2,1,0,3,3,0,1,0,1,2,1,0,2,3,2,0,1,3,3,2,2,1,2,0 @: 2200
 .byte 0,2,1,1,1,2,3,3,2,2,2,0,1,2,2,2,3,1,1,1,1,2,0,3,3,0,0,2,2,2,2,2 @: 2220
 .byte 3,2,2,0,3,1,1,1,0,2,3,1,1,2,3,3,1,1,2,0,3,3,0,3,3,3,1,1,3,3,0,3 @: 2240
 .byte 3,1,1,0,2,1,3,1,0,2,1,1,1,2,3,0,1,1,1,0,1,3,0,1,3,3,3,3,3,0,3,1 @: 2260
 .byte 1,1,0,2,2,3,3,0,2,3,2,0,2,2,2,2,0,0,0,3,2,3,2,1,3,3,2,1,1,0,3,1 @: 2280
 .byte 3,0,0,1,0,1,3,1,2,3,0,3,2,0,1,1,2,1,1,1,0,0,3,0,1,1,0,2,2,3,3,2 @: 22A0
 .byte 0,1,3,2,2,2,3,1,3,0,3,3,1,1,3,0,3,3,0,1,2,0,1,1,3,0,0,2,2,3,1,1 @: 22C0
 .byte 3,3,0,2,3,0,3,0,3,3,3,2,3,0,1,3,2,3,1,1,0,1,1,0,0,3,2,1,0,3,2,0 @: 22E0
 .byte 3,0,0,1,1,3,0,3,1,3,1,3,1,0,0,1,0,3,0,2,1,1,2,3,2,0,1,1,1,0,0,3 @: 2300
 .byte 0,1,3,2,1,0,0,1,2,0,2,2,0,2,1,2,3,3,1,3,1,0,1,3,3,3,3,1,3,2,1,2 @: 2320
 .byte 2,3,3,1,0,3,1,3,1,1,3,2,0,3,0,2,0,2,3,2,2,2,2,2,3,0,2,2,2,2,3,3 @: 2340
 .byte 1,3,0,2,0,3,1,0,3,1,2,3,2,3,2,0,2,2,3,3,0,3,0,1,2,3,1,0,1,1,2,1 @: 2360
 .byte 3,1,0,0,2,2,0,0,2,0,3,0,3,2,1,1,0,2,3,1,1,2,3,0,0,3,0,1,1,2,1,1 @: 2380
 .byte 2,2,3,3,3,3,1,3,1,3,3,0,0,3,2,0,2,2,0,3,3,2,3,0,3,1,0,3,3,2,3,0 @: 23A0
 .byte 3,1,2,0,1,1,1,0,2,0,0,0,2,2,3,0,2,3,0,1,3,2,0,2,3,3,2,3,0,3,1,1 @: 23C0
 .byte 1,3,3,2,2,2,2,3,0,0,2,2,3,3,2,1,1,3,2,1,0,2,2,2,2,2,1,2,2,0,0,0 @: 23E0
 .byte 3,1,0,3,3,1,3,2,0,2,1,1,2,0,3,1,2,2,2,0,1,3,3,1,3,2,0,0,0,2,1,1 @: 2400
 .byte 2,1,2,1,1,1,2,0,3,1,2,2,2,0,2,1,0,0,2,2,3,3,2,3,1,2,0,3,3,2,1,1 @: 2420
 .byte 1,0,1,2,1,1,3,1,1,1,1,1,2,1,3,3,0,1,3,2,2,3,2,3,0,0,3,3,0,3,0,1 @: 2440
 .byte 3,3,2,0,2,0,3,0,3,1,1,3,0,0,1,3,2,1,2,2,3,3,3,3,2,0,0,0,1,0,1,0 @: 2460
 .byte 2,1,2,0,0,0,2,2,3,2,2,3,1,0,3,0,3,2,2,3,3,3,2,3,2,3,3,0,3,1,2,2 @: 2480
 .byte 2,2,1,0,0,1,3,3,1,0,0,1,1,2,0,2,0,0,1,1,2,1,2,2,1,2,1,3,1,2,0,2 @: 24A0
 .byte 1,2,0,0,1,2,0,0,2,3,1,3,3,0,2,1,3,2,1,1,0,3,2,3,3,1,0,2,0,1,3,2 @: 24C0
 .byte 2,1,2,0,2,3,1,3,1,2,1,3,0,1,3,0,0,2,0,3,1,3,2,3,2,3,0,0,0,0,3,1 @: 24E0
 .byte 0,0,0,2,2,0,1,2,0,1,0,2,3,2,1,2,0,1,3,1,1,3,2,0,3,3,3,1,3,3,3,3 @: 2500
 .byte 1,2,0,1,0,0,1,2,2,1,2,3,2,0,0,3,0,1,2,1,2,0,2,1,3,2,2,3,1,1,3,2 @: 2520
 .byte 2,3,1,0,0,3,0,3,2,1,3,0,0,2,2,3,3,0,3,3,0,2,0,2,0,3,0,3,1,3,2,1 @: 2540
 .byte 2,3,3,1,3,2,1,2,0,2,2,1,2,0,1,0,2,0,1,2,1,2,2,3,1,2,2,0,1,2,0,3 @: 2560
 .byte 2,3,3,1,3,1,0,1,3,2,0,0,0,1,3,3,3,1,3,3,1,2,1,1,0,0,3,2,3,2,1,2 @: 2580
 .byte 3,0,0,3,3,0,0,1,1,2,2,3,0,1,1,2,3,1,0,2,1,2,3,0,3,1,3,3,0,0,2,2 @: 25A0
 .byte 0,3,2,2,1,3,2,0,2,3,3,3,0,3,3,1,2,3,1,0,3,0,0,3,2,3,1,3,3,3,0,1 @: 25C0
 .byte 1,1,1,1,0,0,0,2,0,0,0,0,1,3,1,1,2,1,2,0,2,0,0,0,2,0,0,1,3,2,1,3 @: 25E0
 .byte 3,3,1,1,3,1,0,3,3,0,1,0,3,3,3,3,2,2,3,3,3,0,1,1,2,0,3,3,2,1,0,1 @: 2600
 .byte 0,0,1,3,2,3,3,1,2,1,3,0,2,1,2,1,1,1,2,1,0,2,0,1,0,1,3,2,3,1,0,1 @: 2620
 .byte 0,3,0,0,3,0,1,2,2,1,0,1,2,2,2,2,3,3,2,3,0,3,3,3,3,3,3,2,0,3,3,2 @: 2640
 .byte 1,2,2,2,0,1,2,0,1,3,3,1,0,3,0,3,2,2,1,2,2,3,2,3,1,2,0,1,2,1,3,3 @: 2660
 .byte 2,3,3,2,0,0,3,0,0,2,3,3,2,3,0,0,2,3,1,1,1,3,1,1,3,3,0,1,3,1,1,3 @: 2680
 .byte 0,1,3,3,2,3,0,0,3,2,1,2,0,2,0,0,2,0,0,0,2,3,3,2,3,2,3,0,3,2,3,2 @: 26A0
 .byte 1,2,0,2,3,0,0,1,0,0,2,1,3,1,1,1,3,2,3,2,2,2,0,1,0,3,2,2,1,1,1,1 @: 26C0
 .byte 0,2,1,0,3,1,0,1,2,0,2,1,1,3,1,3,0,0,2,2,1,0,3,2,1,2,0,2,1,0,0,3 @: 26E0
 .byte 3,2,3,1,0,0,0,0,1,2,3,2,0,2,2,3,3,1,3,3,3,2,3,2,2,1,0,0,0,1,2,2 @: 2700
 .byte 2,3,2,1,1,1,2,1,0,2,0,1,2,0,3,3,0,3,0,1,3,3,1,3,0,1,3,3,0,1,2,1 @: 2720
 .byte 0,0,2,2,2,2,0,0,0,1,0,2,0,1,2,2,0,0,2,1,2,2,0,1,2,3,1,0,0,1,2,3 @: 2740
 .byte 2,3,1,1,1,0,0,1,3,2,3,2,0,2,1,2,0,0,0,2,3,2,1,2,2,2,1,3,0,0,3,3 @: 2760
 .byte 1,1,2,2,2,3,2,3,2,3,1,2,0,2,1,1,2,3,1,1,2,3,0,0,2,2,3,0,0,3,1,0 @: 2780
 .byte 1,1,3,0,1,2,0,1,1,0,1,1,0,0,1,3,0,1,2,2,3,2,0,2,0,0,0,1,3,3,3,2 @: 27A0
 .byte 3,2,0,1,3,2,2,2,2,2,1,2,1,2,0,0,1,3,1,1,3,1,0,3,2,3,0,3,3,3,0,3 @: 27C0
 .byte 1,1,1,1,2,0,0,2,2,3,2,3,0,0,2,2,0,1,1,2,0,3,0,0,3,3,2,2,3,1,1,2 @: 27E0
 .byte 3,1,2,3,3,3,1,0,0,1,1,3,1,2,1,2,2,3,2,3,3,0,3,3,1,2,0,0,2,1,1,3 @: 2800
 .byte 2,1,0,0,3,1,0,0,1,0,3,1,2,3,3,2,0,3,0,1,2,0,3,3,2,3,1,2,3,1,0,2 @: 2820
 .byte 1,2,2,3,2,2,3,2,3,0,3,1,0,3,1,2,0,3,1,3,2,3,3,1,1,2,0,2,0,0,0,3 @: 2840
 .byte 3,1,2,3,3,1,0,3,0,1,2,3,2,2,2,0,2,1,3,0,3,1,3,1,1,1,1,0,2,2,1,2 @: 2860
 .byte 0,3,3,1,2,0,3,0,0,0,1,0,0,2,3,1,3,2,3,3,2,3,3,0,3,1,3,1,2,0,3,3 @: 2880
 .byte 1,1,0,3,2,3,2,2,2,1,1,1,0,2,0,1,0,1,3,1,1,3,1,0,3,2,2,0,2,2,3,3 @: 28A0
 .byte 2,1,3,2,0,3,2,3,1,1,0,3,2,0,0,2,0,1,2,3,0,3,3,0,1,0,1,0,3,0,3,3 @: 28C0
 .byte 2,0,2,2,1,1,2,2,2,3,1,0,2,3,2,3,0,3,3,2,2,2,3,2,2,0,0,2,2,1,3,1 @: 28E0
 .byte 1,3,1,3,1,2,1,0,2,0,1,1,3,0,1,3,0,2,2,3,3,1,3,0,2,3,2,2,2,2,3,0 @: 2900
 .byte 2,0,0,0,0,2,0,1,3,0,3,2,3,1,2,0,3,0,1,3,0,3,3,0,2,0,2,2,0,0,0,1 @: 2920
 .byte 2,3,1,1,2,0,0,1,3,2,1,1,3,2,3,2,2,2,1,1,3,0,3,2,0,3,2,3,2,3,2,3 @: 2940
 .byte 2,0,0,0,1,0,2,2,1,1,0,3,1,2,2,2,2,3,1,1,3,1,2,2,1,1,2,2,0,0,1,0 @: 2960
 .byte 3,3,3,0,0,1,2,3,1,1,0,0,2,1,1,3,2,2,1,3,2,0,1,0,0,2,3,3,0,0,2,1 @: 2980
 .byte 2,0,2,0,3,2,2,1,2,2,1,2,2,0,1,3,0,2,3,2,0,1,2,3,2,0,3,3,2,3,3,2 @: 29A0
 .byte 1,2,2,3,1,1,1,2,0,2,1,0,0,0,2,2,3,3,2,3,3,0,3,1,2,3,3,0,0,1,1,0 @: 29C0
 .byte 1,3,0,1,1,0,0,2,1,2,3,0,0,0,2,3,0,2,3,2,0,0,2,2,0,3,2,2,3,2,3,0 @: 29E0
 .byte 3,0,3,3,3,1,2,3,3,1,0,2,0,0,2,2,0,1,0,3,1,0,2,1,3,2,0,1,2,1,1,3 @: 2A00
 .byte 2,0,1,3,2,0,2,1,3,1,0,0,3,3,1,3,1,0,3,1,1,1,3,3,0,1,3,3,0,1,3,0 @: 2A20
 .byte 1,1,3,2,3,0,0,2,3,0,0,3,3,1,3,3,3,1,3,3,0,0,3,1,1,3,1,3,2,1,2,1 @: 2A40
 .byte 1,3,3,2,3,3,0,2,2,3,0,2,3,2,1,1,0,1,0,1,0,2,3,3,2,3,1,3,2,0,1,0 @: 2A60
 .byte 2,3,3,1,0,0,0,3,2,0,2,1,0,1,0,2,1,0,3,2,0,1,3,0,3,1,0,3,3,2,1,1 @: 2A80
 .byte 1,0,3,1,3,3,3,1,1,2,2,3,0,1,0,1,2,0,2,3,3,0,3,2,0,2,3,3,2,3,0,2 @: 2AA0
 .byte 1,0,1,0,0,1,1,2,3,2,3,2,2,0,1,0,0,2,2,2,3,3,0,1,2,0,0,1,2,1,3,2 @: 2AC0
 .byte 3,2,1,3,1,2,1,0,0,2,3,1,1,2,0,3,0,2,0,0,1,3,0,0,1,2,0,0,2,2,1,3 @: 2AE0
 .byte 1,0,2,2,3,0,3,2,1,2,1,2,1,0,3,2,3,0,1,2,3,0,1,0,0,0,3,0,2,1,1,1 @: 2B00
 .byte 3,2,3,2,0,3,2,0,3,0,2,2,3,0,1,0,3,0,0,3,2,1,2,2,0,3,1,0,2,0,3,1 @: 2B20
 .byte 0,0,1,2,0,2,1,3,3,2,2,0,1,2,3,1,1,0,0,0,0,3,0,1,0,3,2,0,3,3,2,3 @: 2B40
 .byte 0,0,1,0,0,1,0,3,3,2,3,3,1,0,3,1,3,0,3,2,3,2,1,2,1,3,1,1,2,1,0,0 @: 2B60
 .byte 0,3,1,1,0,1,2,0,2,1,2,2,1,3,1,0,2,2,0,1,0,1,2,3,0,0,2,1,2,2,3,3 @: 2B80
 .byte 1,2,3,1,0,2,1,3,3,2,0,1,0,2,2,0,3,0,1,2,1,2,2,2,1,2,1,3,3,2,0,0 @: 2BA0
 .byte 3,0,2,0,0,2,1,0,0,1,1,2,1,2,0,1,0,1,0,2,2,3,2,1,2,2,2,1,2,2,1,3 @: 2BC0
 .byte 1,3,0,2,3,0,2,1,2,2,2,0,0,2,2,1,0,0,1,1,0,3,1,2,0,1,3,3,2,1,3,0 @: 2BE0
 .byte 0,2,2,2,1,2,0,0,2,3,2,2,0,1,3,0,3,2,2,0,3,2,0,1,3,2,2,3,2,1,0,1 @: 2C00
 .byte 2,0,1,1,2,1,0,3,3,0,1,2,3,2,1,0,0,1,1,3,1,1,3,0,1,2,2,2,0,1,2,1 @: 2C20
 .byte 0,3,3,2,1,1,3,3,1,2,0,2,0,0,0,1,0,2,1,1,1,2,3,1,1,2,1,0,3,2,3,2 @: 2C40
 .byte 1,2,3,3,1,1,0,2,1,1,1,3,3,1,0,1,1,1,0,2,0,2,3,3,1,2,3,1,1,3,2,3 @: 2C60
 .byte 3,3,3,3,1,3,1,3,1,3,1,0,3,1,1,0,2,1,0,3,0,0,2,0,1,1,1,2,2,0,2,2 @: 2C80
 .byte 0,0,3,2,0,2,0,1,3,0,0,3,1,2,0,3,1,0,0,0,3,1,2,3,0,0,0,1,2,2,1,3 @: 2CA0
 .byte 3,2,0,1,2,0,3,0,2,3,0,1,1,1,2,2,2,0,1,2,0,1,3,3,2,3,2,0,2,3,2,2 @: 2CC0
 .byte 0,1,2,3,1,3,2,0,1,0,3,1,1,0,0,2,3,3,0,1,1,1,1,0,2,3,0,0,3,0,1,2 @: 2CE0
 .byte 0,2,1,0,1,2,3,0,3,0,0,1,1,2,2,2,2,3,0,2,3,0,0,0,3,0,3,0,0,2,1,3 @: 2D00
 .byte 2,1,2,2,2,1,3,3,3,0,3,0,3,0,0,2,1,1,1,2,1,3,1,2,2,2,0,3,1,0,2,0 @: 2D20
 .byte 2,0,1,2,1,3,1,3,0,3,1,2,1,2,1,1,3,2,3,3,3,0,2,1,0,3,2,0,2,0,2,1 @: 2D40
 .byte 0,2,3,3,1,3,3,3,3,0,2,2,3,1,0,1,3,0,2,0,3,0,1,2,3,2,0,2,3,3,1,3 @: 2D60
 .byte 0,3,2,3,3,1,3,0,2,1,0,1,0,3,0,0,3,2,2,3,2,0,0,3,1,2,3,1,1,2,2,3 @: 2D80
 .byte 0,1,3,1,1,3,2,2,2,0,3,3,1,1,1,3,1,2,3,2,1,2,2,3,0,1,3,0,1,0,2,1 @: 2DA0
 .byte 0,1,1,3,0,1,1,0,0,1,0,0,3,0,3,2,1,3,1,2,1,0,2,0,3,3,2,0,2,0,2,2 @: 2DC0
 .byte 0,1,2,3,0,0,3,3,2,3,2,0,3,2,0,1,2,3,2,3,2,1,1,1,0,1,3,1,2,0,3,0 @: 2DE0
 .byte 1,1,1,1,1,3,1,0,2,1,1,3,1,1,1,0,1,2,0,0,1,1,2,2,1,0,0,3,1,1,2,1 @: 2E00
 .byte 1,3,1,2,2,2,2,0,3,0,0,3,3,0,1,1,0,0,2,3,3,1,3,1,2,0,1,1,3,3,2,0 @: 2E20
 .byte 2,1,1,2,3,0,2,2,3,1,3,3,2,1,1,3,1,2,1,3,0,2,2,0,0,1,0,0,3,2,0,3 @: 2E40
 .byte 2,2,3,3,3,1,3,2,3,2,0,0,0,2,3,3,0,0,3,1,0,3,2,0,1,3,3,2,0,2,2,0 @: 2E60
 .byte 3,1,3,0,0,0,2,2,3,0,1,3,3,3,1,1,1,2,1,2,2,1,3,3,3,2,0,1,1,2,0,2 @: 2E80
 .byte 3,1,3,3,0,2,2,3,2,3,1,0,0,0,0,3,2,1,0,3,3,1,0,2,0,2,1,3,3,2,3,2 @: 2EA0
 .byte 2,0,3,0,0,2,0,3,1,1,0,3,1,2,2,0,3,1,1,2,0,2,3,3,1,2,2,2,0,1,3,2 @: 2EC0
 .byte 3,0,3,0,1,0,3,2,2,2,0,1,0,1,3,2,3,0,1,0,2,3,3,3,3,1,2,2,3,3,2,3 @: 2EE0
 .byte 3,3,2,3,0,0,2,2,0,1,0,3,1,0,3,0,2,3,2,2,3,3,1,0,1,2,0,1,2,3,2,1 @: 2F00
 .byte 1,3,3,3,0,2,2,2,1,1,2,1,3,0,3,3,3,2,3,1,3,3,2,3,1,1,3,3,2,1,3,2 @: 2F20
 .byte 0,3,2,3,2,0,1,1,2,3,0,0,2,0,0,2,1,0,0,2,2,0,1,0,2,1,0,1,2,1,1,3 @: 2F40
 .byte 2,2,2,2,0,3,2,2,3,1,1,0,3,0,2,2,1,0,3,1,1,3,0,3,0,2,1,1,1,0,2,0 @: 2F60
 .byte 1,1,2,2,3,1,1,3,2,1,0,3,0,3,3,3,2,3,2,3,2,2,2,0,2,3,3,2,0,0,3,1 @: 2F80
 .byte 1,1,0,0,0,3,3,3,0,1,0,0,1,2,1,3,0,2,3,2,3,0,0,2,0,1,3,1,0,0,3,2 @: 2FA0
 .byte 2,1,2,3,2,0,3,1,0,1,3,2,3,1,3,0,3,3,1,3,3,2,1,0,0,0,2,0,1,2,0,1 @: 2FC0
 .byte 3,0,0,0,3,2,3,1,3,3,2,0,0,0,2,3,2,0,2,1,3,2,2,2,0,2,2,3,1,1,2,3 @: 2FE0
 .byte 2,3,2,2,2,3,0,2,1,2,1,2,3,3,0,1,2,3,1,0,3,3,1,2,0,2,3,0,1,3,2,2 @: 3000
 .byte 1,0,2,1,3,1,1,0,1,0,1,2,2,0,3,0,1,3,0,1,3,0,3,3,2,3,1,0,0,0,0,1 @: 3020
 .byte 3,0,0,1,0,1,0,0,2,1,2,3,3,2,3,3,2,1,3,0,3,1,3,3,3,3,1,2,3,2,3,0 @: 3040
 .byte 1,1,1,2,1,0,2,1,1,0,1,1,1,0,3,3,2,1,3,1,3,2,0,3,0,1,2,0,3,2,3,3 @: 3060
 .byte 1,2,3,2,3,0,3,3,0,3,3,3,0,0,0,0,2,2,3,2,3,3,0,2,2,2,1,2,1,1,0,0 @: 3080
 .byte 1,3,0,0,3,2,2,2,1,1,1,2,1,2,1,1,1,3,3,3,1,2,1,1,1,1,3,1,3,0,1,1 @: 30A0
 .byte 0,1,1,3,3,2,0,2,2,1,3,2,3,1,1,1,0,3,3,2,2,0,3,3,0,2,2,3,1,0,1,3 @: 30C0
 .byte 0,1,3,0,2,0,0,1,3,2,3,1,2,3,1,0,2,1,0,3,0,3,3,1,1,3,3,2,3,0,3,3 @: 30E0
 .byte 1,3,3,2,3,2,0,1,3,2,1,2,0,2,0,3,3,1,3,2,0,1,0,3,1,3,0,0,0,2,3,2 @: 3100
 .byte 3,1,1,1,0,0,3,3,3,2,2,0,3,1,1,2,0,0,3,2,0,2,2,2,2,3,3,3,1,2,0,0 @: 3120
 .byte 2,0,3,0,0,2,1,2,3,1,3,2,0,2,2,3,1,1,2,1,2,1,1,2,3,1,2,1,2,0,3,0 @: 3140
 .byte 0,1,0,0,0,3,1,3,0,0,0,3,1,0,1,0,1,1,3,3,0,1,0,3,1,3,0,0,2,2,1,0 @: 3160
 .byte 0,2,3,2,3,3,3,1,2,1,2,3,3,3,0,3,3,0,0,1,3,1,0,0,2,1,2,1,1,2,1,0 @: 3180
 .byte 3,0,0,0,3,2,3,1,2,2,2,1,0,2,2,0,3,3,0,3,1,3,3,0,0,3,2,0,3,1,1,3 @: 31A0
 .byte 3,0,0,2,1,1,1,3,0,0,1,1,3,0,1,2,1,1,3,0,0,2,2,3,1,3,1,1,3,0,3,2 @: 31C0
 .byte 2,1,0,1,0,0,0,2,3,3,1,0,0,3,0,3,2,2,1,2,1,0,0,0,0,3,1,1,0,0,2,3 @: 31E0
 .byte 1,3,2,1,1,0,3,3,0,1,0,1,1,1,2,0,2,2,0,3,0,3,0,3,0,0,1,3,1,2,3,0 @: 3200
 .byte 2,3,0,2,2,2,0,3,2,3,1,1,3,1,0,1,0,3,2,2,1,0,2,0,2,3,3,1,3,1,1,2 @: 3220
 .byte 0,1,3,2,2,3,0,3,2,3,0,0,1,1,1,1,2,1,1,3,2,3,0,1,1,2,1,3,2,1,0,3 @: 3240
 .byte 3,3,3,3,1,0,3,1,0,1,2,1,0,1,1,2,2,0,1,2,0,2,2,2,3,2,3,0,2,2,3,3 @: 3260
 .byte 0,0,2,3,0,2,2,0,0,2,3,2,3,3,3,1,3,1,3,2,1,2,0,2,0,1,0,0,3,2,1,2 @: 3280
 .byte 2,3,3,3,1,3,3,3,1,3,2,0,3,2,3,3,2,0,1,2,0,1,2,1,1,0,0,2,3,2,3,2 @: 32A0
 .byte 1,2,0,0,1,3,3,1,0,3,3,1,3,0,1,0,2,1,1,0,3,0,3,3,2,0,0,2,1,0,3,3 @: 32C0
 .byte 3,3,3,2,0,3,2,1,1,0,2,0,2,1,2,3,0,3,0,0,0,0,3,3,3,1,1,3,0,1,0,2 @: 32E0
 .byte 1,1,2,2,2,1,3,1,0,3,2,1,2,0,0,1,3,1,1,3,3,2,3,0,1,0,1,2,0,0,1,2 @: 3300
 .byte 2,3,0,0,1,2,0,2,1,0,3,3,2,3,3,2,1,3,0,1,2,0,1,3,0,3,3,2,0,3,2,1 @: 3320
 .byte 3,3,0,1,2,2,2,3,2,3,0,1,1,3,1,1,3,2,2,2,1,3,1,3,0,1,0,2,0,1,2,3 @: 3340
 .byte 2,3,2,2,0,1,1,1,2,1,3,1,1,3,1,0,3,2,2,0,1,0,3,0,1,3,3,0,2,1,0,2 @: 3360
 .byte 1,1,3,0,0,2,3,1,0,0,2,3,0,0,2,1,3,2,3,2,2,1,3,0,2,1,3,1,3,0,0,1 @: 3380
 .byte 2,1,1,0,2,1,0,3,0,0,3,2,0,1,0,1,0,1,1,3,0,1,2,0,3,3,0,0,0,1,1,0 @: 33A0
 .byte 0,3,3,2,1,0,3,1,2,0,1,0,0,2,3,2,1,3,1,0,2,1,1,0,0,0,2,0,3,0,2,0 @: 33C0
 .byte 1,2,1,3,2,1,2,3,2,0,0,2,0,0,0,1,1,3,3,1,2,1,2,1,2,3,3,0,2,3,3,1 @: 33E0
 .byte 2,1,0,3,0,1,2,3,3,3,2,2,3,1,0,1,3,1,0,1,3,1,1,3,0,1,2,2,2,1,1,3 @: 3400
 .byte 0,3,0,1,2,0,2,3,3,2,2,1,0,2,2,3,2,0,0,3,3,1,1,3,0,0,0,1,3,3,2,0 @: 3420
 .byte 3,0,3,2,0,2,2,0,3,0,1,1,3,0,0,1,3,2,1,2,1,3,3,0,1,0,1,1,2,3,1,2 @: 3440
 .byte 0,0,2,0,3,1,0,0,0,3,1,0,1,1,2,1,1,1,2,2,3,2,3,1,2,0,0,3,2,2,2,1 @: 3460
 .byte 2,3,2,2,1,2,0,3,2,0,1,2,3,0,2,1,3,2,2,3,0,2,1,1,2,3,0,3,2,1,3,0 @: 3480
 .byte 3,0,3,3,1,1,0,3,0,0,0,1,3,0,0,3,0,1,0,2,0,2,2,2,0,3,0,3,2,3,3,3 @: 34A0
 .byte 0,3,2,1,0,1,1,2,0,2,2,3,2,3,0,0,2,3,0,2,0,1,0,3,2,3,2,1,2,3,2,3 @: 34C0
 .byte 1,1,1,2,3,3,3,0,1,1,1,2,0,2,3,3,1,2,1,1,0,0,2,0,1,2,1,2,2,0,2,3 @: 34E0
 .byte 2,0,2,0,0,1,2,2,1,2,3,0,1,1,1,3,1,3,1,3,3,3,0,3,0,2,2,0,3,2,2,2 @: 3500
 .byte 0,2,3,1,3,3,2,3,0,0,3,3,1,1,3,0,3,0,1,1,1,1,1,1,3,3,3,2,1,0,3,1 @: 3520
 .byte 3,0,3,3,2,0,0,3,2,1,0,1,0,2,2,2,1,0,2,2,0,1,1,3,1,0,2,1,1,0,2,2 @: 3540
 .byte 2,2,3,0,3,2,3,1,0,2,2,3,2,1,2,1,2,1,0,1,0,0,0,3,0,3,2,1,1,1,2,3 @: 3560
 .byte 2,2,1,2,1,3,0,0,2,2,1,3,0,1,0,1,0,1,1,3,1,0,2,0,2,0,3,0,3,1,2,3 @: 3580
 .byte 0,0,1,0,2,3,0,0,2,0,3,2,0,1,1,1,1,0,2,3,2,3,1,3,2,0,2,0,3,0,3,2 @: 35A0
 .byte 2,1,3,2,1,2,1,0,1,1,3,3,1,0,3,3,2,3,2,3,0,1,3,3,3,3,3,0,3,3,2,1 @: 35C0
 .byte 1,1,3,0,2,2,1,1,3,3,1,1,0,3,0,1,1,1,1,2,1,1,2,1,1,2,0,2,3,3,0,1 @: 35E0
 .byte 1,0,0,3,1,0,3,0,3,0,3,1,0,0,3,1,1,2,2,0,3,0,2,2,2,2,2,1,2,3,1,3 @: 3600
 .byte 2,0,0,3,3,0,1,1,2,0,3,2,2,1,1,3,2,1,1,3,3,2,3,1,2,0,3,3,3,2,1,0 @: 3620
 .byte 2,2,3,1,1,0,2,2,2,0,3,1,3,0,1,1,0,2,3,0,2,2,0,2,2,1,1,2,3,3,1,1 @: 3640
 .byte 0,0,0,2,0,2,3,2,3,3,3,0,3,2,3,1,0,0,1,0,0,3,1,2,0,0,3,1,0,2,1,1 @: 3660
 .byte 2,1,1,0,3,3,3,0,1,0,3,3,3,3,0,0,2,2,1,0,3,0,0,2,0,2,2,1,0,3,2,0 @: 3680
 .byte 3,1,2,1,1,0,0,1,2,3,3,2,3,3,0,2,3,3,1,2,1,3,0,2,3,2,2,2,0,3,0,0 @: 36A0
 .byte 2,2,2,2,2,3,3,2,3,2,2,1,1,3,0,2,3,0,2,0,3,0,1,2,2,3,3,2,0,0,0,2 @: 36C0
 .byte 1,0,3,2,0,1,1,2,2,2,1,3,1,3,3,2,1,0,3,3,3,3,2,3,1,3,3,3,3,1,3,3 @: 36E0
 .byte 3,3,2,0,3,0,1,2,0,3,3,1,0,2,2,2,0,0,1,3,0,3,2,1,3,1,2,2,1,2,1,1 @: 3700
 .byte 0,0,3,0,2,3,1,3,2,1,1,0,3,1,3,3,3,3,2,2,1,3,2,3,3,1,1,0,2,1,3,1 @: 3720
 .byte 3,0,0,2,0,3,3,2,1,0,3,0,2,1,1,2,2,2,0,2,0,1,0,0,1,2,2,2,3,1,0,0 @: 3740
 .byte 1,0,0,0,1,0,3,0,1,1,0,0,3,1,1,2,3,1,3,1,1,1,2,1,0,2,0,2,0,0,2,3 @: 3760
 .byte 1,2,1,2,3,3,0,1,3,2,2,2,2,3,1,1,1,0,2,0,1,3,0,0,1,0,3,0,0,0,1,3 @: 3780
 .byte 1,0,2,2,3,1,3,2,1,0,2,2,3,3,0,0,3,3,3,0,1,3,0,3,3,2,2,2,2,2,0,1 @: 37A0
 .byte 0,1,2,0,3,0,2,1,2,3,3,2,0,2,1,2,1,3,1,3,0,0,0,3,2,0,1,0,3,1,1,2 @: 37C0
 .byte 3,1,2,0,1,3,1,2,2,3,0,2,2,3,3,3,3,3,3,3,3,3,3,1,2,2,2,0,2,0,3,1 @: 37E0
 .byte 3,2,3,1,1,3,0,1,1,3,2,3,0,3,3,1,2,2,2,2,0,0,1,0,0,1,2,3,2,2,3,0 @: 3800
 .byte 2,0,2,3,1,3,3,2,0,3,3,1,1,1,2,2,0,2,1,1,2,1,3,0,0,1,1,1,1,2,0,3 @: 3820
 .byte 2,1,0,0,2,2,3,2,3,2,3,1,1,0,3,2,0,0,1,2,3,2,3,2,2,0,1,0,0,0,2,3 @: 3840
 .byte 3,3,0,1,3,2,0,0,3,1,2,2,2,3,0,1,3,3,1,0,0,0,2,0,1,3,1,1,1,0,1,3 @: 3860
 .byte 0,0,0,0,3,3,3,1,1,1,0,1,0,3,2,2,2,3,1,1,3,1,2,3,2,2,3,0,1,3,3,0 @: 3880
 .byte 3,2,0,3,0,3,1,3,1,2,2,0,0,3,2,1,1,2,2,2,3,0,0,1,3,0,3,1,0,1,1,2 @: 38A0
 .byte 3,3,1,1,3,1,3,0,1,3,0,0,2,2,2,1,3,0,3,2,2,2,1,3,2,2,1,3,3,0,1,2 @: 38C0
 .byte 3,1,1,1,2,2,3,2,0,1,3,0,1,2,1,0,1,1,3,2,0,3,0,2,0,2,1,1,3,3,3,1 @: 38E0
 .byte 2,1,0,3,2,0,1,2,0,0,0,3,0,0,2,3,1,1,0,0,0,2,2,0,1,1,3,1,3,3,3,1 @: 3900
 .byte 2,1,2,2,2,2,3,3,0,2,2,1,0,3,3,3,0,3,2,0,2,1,1,1,1,3,3,1,2,2,0,3 @: 3920
 .byte 1,3,2,3,1,2,1,3,0,0,3,3,3,1,0,1,1,3,1,2,3,1,3,0,2,0,1,3,3,2,3,3 @: 3940
 .byte 2,3,2,1,3,0,2,1,1,2,1,0,0,0,2,3,2,1,0,3,3,1,2,3,2,2,2,1,1,1,1,1 @: 3960
 .byte 3,0,2,3,2,1,3,2,2,3,3,2,1,1,3,3,3,0,3,0,2,3,3,3,1,3,0,1,2,0,1,3 @: 3980
 .byte 3,2,2,2,2,1,3,2,3,2,2,2,3,2,0,0,2,2,0,1,0,2,0,0,0,2,1,2,0,1,1,0 @: 39A0
 .byte 1,2,2,3,1,0,3,0,3,2,0,2,2,1,1,2,1,0,0,1,0,1,0,1,3,3,1,2,1,0,2,2 @: 39C0
 .byte 1,1,1,3,2,3,0,0,1,3,0,0,1,1,2,0,2,2,2,2,2,1,1,3,0,3,3,0,1,2,3,3 @: 39E0
 .byte 2,1,3,1,1,0,2,3,0,2,0,2,0,0,0,2,2,3,1,1,0,1,2,1,3,0,3,3,2,1,0,3 @: 3A00
 .byte 0,2,2,1,2,0,3,0,2,2,1,2,2,0,1,0,3,3,1,1,2,0,0,1,3,0,0,2,1,3,2,3 @: 3A20
 .byte 2,0,0,0,1,2,1,1,3,2,3,1,3,3,3,0,2,3,0,1,2,1,0,0,3,2,3,3,0,1,2,2 @: 3A40
 .byte 1,2,3,3,0,1,2,0,1,1,2,3,2,2,1,3,3,1,3,2,2,3,0,2,1,0,0,2,3,0,0,1 @: 3A60
 .byte 2,3,0,3,1,0,1,1,3,3,1,0,2,1,2,3,2,3,1,0,3,0,2,2,2,2,0,0,2,1,3,3 @: 3A80
 .byte 0,1,0,2,0,2,2,1,3,0,2,3,3,1,2,1,1,3,1,2,0,1,2,2,2,2,3,2,0,2,0,3 @: 3AA0
 .byte 1,3,0,0,0,1,1,2,0,1,1,0,0,0,3,1,1,3,2,3,2,2,0,2,3,0,1,0,3,3,2,1 @: 3AC0
 .byte 3,0,3,3,0,1,1,0,0,2,2,2,1,2,0,1,1,0,3,0,2,0,3,1,2,1,1,3,3,3,0,3 @: 3AE0
 .byte 0,3,2,2,3,2,2,0,3,1,3,1,1,0,2,2,3,0,2,1,1,1,0,3,1,0,3,1,0,0,1,0 @: 3B00
 .byte 2,2,3,2,1,1,2,1,3,0,3,3,1,0,0,2,2,0,3,1,2,1,0,2,1,1,3,0,1,3,0,3 @: 3B20
 .byte 0,2,2,0,2,0,1,1,1,2,1,1,2,1,1,1,1,0,0,2,0,2,3,0,1,0,0,3,0,2,0,1 @: 3B40
 .byte 0,2,1,2,2,1,3,0,1,3,2,0,0,2,0,3,1,3,0,3,1,1,1,1,1,3,1,3,2,1,3,0 @: 3B60
 .byte 2,2,2,1,3,0,3,1,0,1,1,2,3,3,2,3,2,2,0,0,0,1,0,0,1,1,3,2,0,2,1,2 @: 3B80
 .byte 0,2,1,3,0,0,0,2,1,2,0,2,0,1,3,3,3,3,2,0,1,1,3,0,0,2,2,3,2,3,2,0 @: 3BA0
 .byte 2,1,3,0,2,3,3,0,0,0,2,2,0,3,0,3,1,2,2,3,1,0,0,1,0,3,2,3,3,0,3,1 @: 3BC0
 .byte 2,0,1,1,3,2,1,0,0,0,3,3,1,0,2,3,1,0,2,2,2,1,2,1,2,2,1,1,2,0,0,1 @: 3BE0
 .byte 1,0,3,3,3,1,3,0,3,0,1,3,2,1,0,1,0,3,0,3,1,3,3,2,0,0,3,1,1,2,0,1 @: 3C00
 .byte 1,1,2,2,3,2,2,0,0,2,3,3,2,2,0,1,1,3,1,3,2,2,2,0,2,1,1,1,0,0,1,3 @: 3C20
 .byte 2,2,1,3,1,0,2,2,0,0,2,0,0,0,1,2,3,3,1,3,3,2,0,1,2,0,2,3,1,2,2,1 @: 3C40
 .byte 3,1,2,2,2,3,0,2,0,0,2,2,1,3,3,1,3,3,3,1,2,2,1,2,2,0,2,2,3,2,1,1 @: 3C60
 .byte 2,1,2,2,2,2,1,2,3,1,2,2,0,0,0,2,0,2,0,2,2,2,2,3,3,1,3,1,0,3,1,2 @: 3C80
 .byte 3,2,1,3,3,0,2,2,3,2,0,1,3,2,2,1,3,3,0,3,3,0,2,0,2,0,2,0,0,2,3,1 @: 3CA0
 .byte 0,2,1,1,1,2,1,0,0,1,0,1,0,3,1,3,1,1,2,0,0,0,2,2,3,0,3,0,3,1,1,3 @: 3CC0
 .byte 3,2,2,0,3,2,0,0,1,3,2,3,3,0,0,3,3,2,1,2,1,2,2,1,2,3,1,2,2,0,1,1 @: 3CE0
 .byte 2,1,1,3,1,1,2,1,0,2,0,1,0,0,1,2,3,3,3,2,3,2,1,3,3,1,0,3,3,0,0,2 @: 3D00
 .byte 0,0,2,2,1,0,1,3,3,0,1,3,3,0,1,0,0,3,0,1,2,2,0,3,3,3,2,1,3,3,1,0 @: 3D20
 .byte 2,2,3,1,0,2,0,2,1,2,3,3,2,3,3,3,2,2,3,2,0,0,3,3,2,3,2,1,2,2,1,3 @: 3D40
 .byte 0,3,1,2,1,2,2,3,1,0,2,1,3,0,1,1,2,1,0,0,0,1,0,0,2,0,1,2,3,0,3,3 @: 3D60
 .byte 2,0,2,3,0,3,1,1,3,3,3,2,2,0,2,2,1,2,2,2,1,1,0,0,3,1,1,0,1,1,0,1 @: 3D80
 .byte 3,0,0,3,1,1,1,1,0,3,0,2,1,1,2,3,0,1,3,3,0,3,2,3,0,3,1,2,2,1,1,1 @: 3DA0
 .byte 2,0,3,0,1,3,3,0,0,0,1,0,3,2,0,0,2,0,1,2,2,0,1,3,2,3,3,0,2,2,3,2 @: 3DC0
 .byte 2,3,0,1,2,0,0,1,0,0,3,1,3,0,3,1,0,2,0,0,1,1,3,3,1,2,0,0,2,2,3,3 @: 3DE0
 .byte 3,2,2,2,2,0,0,0,3,3,3,1,1,2,3,1,0,3,0,2,3,3,3,2,0,0,2,3,2,3,3,3 @: 3E00
 .byte 0,2,0,1,1,3,1,3,2,0,3,1,3,2,2,1,3,1,2,2,2,3,0,3,1,2,2,2,0,1,3,1 @: 3E20
 .byte 1,3,0,0,3,3,2,0,2,1,1,2,0,0,2,0,2,2,0,3,2,1,0,2,1,3,0,0,2,0,0,3 @: 3E40
 .byte 0,1,1,3,3,2,0,1,3,0,3,2,3,1,3,2,3,2,0,3,2,2,0,2,3,1,2,3,3,1,3,2 @: 3E60
 .byte 2,2,2,3,2,2,2,3,0,3,2,2,1,2,3,2,2,3,0,1,3,2,3,3,2,3,0,0,2,2,2,1 @: 3E80
 .byte 0,2,3,2,2,2,1,2,2,3,3,0,2,2,1,1,1,1,2,1,2,0,3,2,2,1,0,1,0,1,2,1 @: 3EA0
 .byte 1,2,2,1,1,1,1,1,3,1,1,1,2,1,3,1,1,0,3,3,2,3,0,0,3,1,3,3,3,1,3,0 @: 3EC0
 .byte 0,2,2,3,3,3,2,3,1,3,3,0,1,2,2,0,1,3,3,2,1,3,1,3,0,1,0,0,3,0,1,1 @: 3EE0
 .byte 1,1,0,2,0,1,1,3,2,2,2,3,0,3,3,0,3,0,1,3,2,2,0,0,1,0,1,0,1,3,1,0 @: 3F00
 .byte 2,3,0,0,0,3,1,0,3,2,1,2,2,0,3,3,0,1,3,0,1,0,2,0,0,2,1,1,3,3,2,2 @: 3F20
 .byte 1,3,3,3,3,3,1,3,2,2,1,2,0,2,2,3,2,3,1,0,0,0,0,3,0,1,2,0,3,0,2,0 @: 3F40
 .byte 0,0,3,1,2,0,3,1,0,1,0,3,2,1,1,3,0,0,3,2,2,1,2,1,3,2,2,2,2,2,2,0 @: 3F60
 .byte 0,1,1,1,0,0,3,3,2,0,3,0,0,0,0,1,0,1,3,0,1,1,3,0,3,1,1,1,3,0,1,2 @: 3F80
 .byte 2,0,3,2,1,3,2,1,1,3,2,3,1,1,0,1,3,0,2,3,2,2,2,3,3,3,0,0,3,3,0,2 @: 3FA0
 .byte 3,3,2,3,2,3,0,3,2,1,0,1,1,1,3,0,2,0,2,1,3,2,0,0,0,1,1,3,2,0,3,1 @: 3FC0
 .byte 2,3,3,0,0,1,2,3,3,3,1,2,2,3,1,2,3,1,0,3,2,1,3,0,0,0,2,1,2,3,1,2 @: 3FE0
 .byte 1,2,2,2,2,1,2,1,0,3,0,1,1,2,3,1,3,2,1,0,1,2,0,3,3,0,1,0,2,2,3,0 @: 4000
 .byte 3,0,0,3,1,2,1,3,1,0,1,3,3,1,2,2,1,2,0,3,1,0,1,3,1,0,0,0,2,1,0,2 @: 4020
 .byte 0,1,1,3,2,1,0,0,2,2,1,3,0,3,3,2,1,2,0,1,2,0,3,1,3,2,1,2,1,2,0,2 @: 4040
 .byte 1,2,3,2,1,2,0,3,1,1,0,2,1,3,1,0,2,2,1,1,1,2,3,1,0,0,3,3,3,1,0,2 @: 4060
 .byte 0,1,3,1,3,3,3,2,3,0,3,2,0,2,3,1,0,3,2,2,3,3,1,2,3,3,2,3,0,0,2,2 @: 4080
 .byte 2,1,1,3,2,2,1,1,0,0,3,2,2,2,0,0,0,2,3,3,1,0,3,3,1,0,3,1,0,2,0,0 @: 40A0
 .byte 3,3,3,2,0,0,1,1,3,0,3,1,3,0,3,3,2,3,2,1,2,2,2,3,2,3,1,3,0,0,1,1 @: 40C0
 .byte 1,3,1,2,0,0,3,3,3,3,0,3,3,3,1,3,0,3,0,0,3,2,1,2,3,0,1,0,3,1,1,3 @: 40E0
 .byte 3,0,3,3,1,1,1,3,3,2,3,0,0,1,3,0,2,3,1,3,2,1,1,3,1,1,3,0,1,0,3,1 @: 4100
 .byte 1,3,0,2,3,0,0,2,3,1,3,2,3,2,2,2,1,3,1,0,0,2,0,2,2,2,2,2,1,2,3,2 @: 4120
 .byte 2,1,0,0,3,0,3,2,2,2,2,1,3,3,3,2,0,3,3,0,3,0,2,0,2,0,1,3,3,1,2,0 @: 4140
 .byte 2,3,3,0,0,2,0,2,0,1,0,2,3,0,3,3,0,0,1,3,2,0,2,3,0,1,3,2,0,2,1,1 @: 4160
 .byte 3,3,1,3,3,1,2,3,2,3,1,0,2,3,0,2,1,0,2,1,0,3,0,3,0,2,3,1,3,2,1,3 @: 4180
 .byte 0,1,1,2,1,0,3,0,1,1,1,0,3,1,0,1,0,0,3,0,1,1,0,0,2,0,3,2,0,1,3,0 @: 41A0
 .byte 2,3,3,0,2,2,1,1,2,3,3,3,0,3,3,3,1,2,0,3,3,1,2,2,3,2,3,3,0,3,1,2 @: 41C0
 .byte 0,1,3,1,0,1,0,2,1,0,2,2,0,2,0,2,3,1,1,0,1,2,2,0,3,1,3,2,0,2,1,1 @: 41E0
 .byte 3,0,0,1,2,3,2,2,1,2,3,2,3,1,0,0,1,1,1,1,2,2,0,1,2,1,3,2,1,0,0,1 @: 4200
 .byte 2,3,0,1,1,2,0,0,2,2,3,0,2,3,2,0,0,1,1,3,0,3,2,3,3,1,3,3,1,2,2,0 @: 4220
 .byte 0,1,2,0,0,0,0,2,0,1,2,2,3,0,0,0,3,0,2,2,3,0,0,1,0,2,3,1,1,0,1,0 @: 4240
 .byte 0,0,0,1,1,1,1,0,1,1,1,3,2,0,1,3,0,1,0,2,2,0,2,1,2,0,0,2,0,2,2,2 @: 4260
 .byte 0,1,1,3,3,1,3,2,3,3,2,2,0,2,0,1,1,1,0,0,1,1,3,1,3,2,2,1,2,0,1,3 @: 4280
 .byte 2,3,2,1,1,0,1,2,3,1,2,1,3,3,1,3,1,1,2,1,3,2,1,3,2,1,0,2,0,1,3,2 @: 42A0
 .byte 1,3,3,3,0,2,0,2,3,3,1,1,3,3,0,1,0,1,3,2,2,2,3,3,0,2,3,0,0,2,2,3 @: 42C0
 .byte 0,2,1,0,3,1,0,1,2,0,0,2,0,2,3,2,2,0,3,1,0,2,1,0,2,0,1,0,2,0,2,3 @: 42E0
 .byte 1,3,1,3,0,1,2,0,2,2,2,1,1,1,0,1,3,1,3,0,3,0,3,0,1,2,3,1,1,1,1,0 @: 4300
 .byte 3,3,2,0,3,3,0,0,0,2,3,0,1,1,0,3,0,1,3,3,2,1,2,0,2,0,2,2,2,2,3,1 @: 4320
 .byte 1,3,3,0,1,2,3,2,0,2,0,3,2,1,0,2,0,0,2,0,1,0,1,2,2,0,2,3,0,3,3,3 @: 4340
 .byte 1,3,1,2,3,3,0,3,3,2,3,3,3,0,0,3,1,0,3,1,2,0,2,2,3,3,1,2,0,3,0,2 @: 4360
 .byte 1,1,0,0,0,0,2,3,0,1,2,2,1,1,2,0,0,1,3,2,3,0,3,0,2,0,0,3,0,2,1,3 @: 4380
 .byte 0,2,3,0,1,3,3,0,3,0,1,2,0,2,2,1,0,1,3,3,3,2,0,2,0,3,3,3,3,1,1,1 @: 43A0
 .byte 2,1,3,1,0,2,0,0,3,3,1,0,3,2,1,1,1,1,3,1,1,0,2,2,3,2,3,0,1,1,2,2 @: 43C0
 .byte 0,3,3,3,1,3,1,0,0,2,3,1,0,1,2,3,2,0,3,3,2,2,1,3,2,0,2,1,2,3,1,1 @: 43E0
 .byte 0,1,1,3,3,3,1,0,3,2,2,1,3,3,0,1,2,0,3,3,3,3,2,2,2,1,2,0,2,2,1,2 @: 4400
 .byte 1,3,0,2,2,0,3,1,2,0,2,2,3,3,0,0,3,0,1,1,1,3,1,2,3,2,2,2,0,1,0,0 @: 4420
 .byte 3,2,1,1,2,2,2,0,2,0,0,2,0,3,3,3,1,2,2,3,0,2,2,0,0,2,2,1,0,2,2,1 @: 4440
 .byte 2,3,0,1,0,2,0,2,3,1,1,0,2,0,3,1,2,1,0,0,0,1,1,3,2,0,3,0,2,3,0,3 @: 4460
 .byte 3,2,0,3,0,3,1,2,2,2,2,1,1,3,0,0,1,1,2,1,3,1,3,2,0,1,1,0,1,0,0,1 @: 4480
 .byte 3,0,2,1,1,3,2,0,3,3,0,3,2,1,0,1,0,0,3,0,2,3,0,0,3,0,1,2,1,0,3,2 @: 44A0
 .byte 2,0,3,3,3,1,3,3,2,3,3,2,2,2,1,1,1,3,3,2,1,3,2,0,2,1,2,2,3,3,2,0 @: 44C0
 .byte 1,0,3,3,3,0,3,2,3,3,2,0,2,0,2,3,0,0,2,2,1,0,1,1,0,3,1,3,3,0,0,3 @: 44E0
 .byte 3,1,0,2,1,2,0,0,0,0,1,0,0,2,3,1,0,2,2,1,3,3,2,1,3,3,0,1,3,1,3,1 @: 4500
 .byte 3,3,1,3,3,2,2,1,1,3,0,3,0,1,2,2,0,0,1,3,1,0,2,0,0,0,3,0,2,0,0,3 @: 4520
 .byte 1,2,0,1,1,0,1,0,2,1,1,3,0,0,2,1,2,0,2,0,3,3,0,3,1,2,0,1,3,1,1,1 @: 4540
 .byte 3,1,0,3,2,3,3,0,3,2,3,0,2,3,1,0,0,3,1,0,0,1,0,1,0,2,2,3,3,1,0,1 @: 4560
 .byte 2,0,3,1,1,1,1,3,0,0,1,1,3,2,1,1,3,3,1,2,0,1,1,1,0,2,3,1,3,2,0,0 @: 4580
 .byte 3,3,0,0,1,0,1,2,1,1,1,0,1,3,2,1,1,1,2,2,2,3,3,2,0,0,1,0,0,3,0,0 @: 45A0
 .byte 0,1,2,1,2,1,2,1,2,1,3,2,3,0,2,3,2,0,3,0,0,1,2,2,1,3,1,3,3,1,3,3 @: 45C0
 .byte 3,2,0,2,2,1,0,2,1,2,2,3,1,3,2,1,3,2,1,2,3,1,0,0,2,0,0,1,2,1,0,1 @: 45E0
 .byte 1,3,3,1,3,1,0,1,1,3,0,1,2,3,0,1,0,3,0,2,0,2,0,1,1,3,2,2,1,3,1,0 @: 4600
 .byte 0,2,3,1,1,2,0,3,0,2,0,1,0,2,0,0,0,1,2,2,1,3,2,3,2,2,3,3,3,1,1,0 @: 4620
 .byte 1,3,0,1,3,0,1,0,0,3,0,1,2,2,0,0,2,3,0,0,3,3,0,1,0,2,1,2,1,3,3,2 @: 4640
 .byte 3,2,0,3,0,2,1,0,0,0,3,2,1,1,2,2,0,0,3,0,1,1,1,2,1,1,3,1,1,2,1,3 @: 4660
 .byte 1,3,2,1,2,2,3,1,0,0,3,1,2,1,1,2,1,3,3,2,2,2,0,0,0,1,2,0,0,2,3,2 @: 4680
 .byte 1,2,3,0,0,3,1,3,2,0,3,3,3,1,0,3,3,0,3,0,0,3,1,0,1,2,3,3,3,1,1,1 @: 46A0
 .byte 2,3,2,1,1,1,3,2,2,2,1,2,3,3,3,2,2,1,0,0,3,1,3,0,2,2,2,1,3,3,2,3 @: 46C0
 .byte 1,3,1,3,0,2,2,1,3,0,2,2,0,1,1,0,2,2,3,0,2,0,2,3,1,0,1,3,0,0,2,3 @: 46E0
 .byte 3,2,1,3,1,0,1,3,0,2,1,3,3,0,3,1,3,3,3,0,3,1,3,1,2,2,2,1,0,1,1,0 @: 4700
 .byte 0,1,1,2,0,1,2,0,0,1,0,3,1,2,0,3,0,1,2,1,1,3,0,1,3,2,3,2,3,3,2,3 @: 4720
 .byte 3,1,1,2,3,3,1,3,1,0,1,1,3,1,3,2,0,0,3,2,0,2,0,3,1,2,2,2,1,1,2,2 @: 4740
 .byte 1,1,1,2,3,1,0,0,2,2,0,1,0,2,1,2,1,2,0,3,2,0,3,0,1,3,3,0,0,2,1,0 @: 4760
 .byte 2,3,3,2,3,3,0,3,3,2,3,3,1,2,1,3,0,1,0,0,2,1,2,0,1,2,0,0,0,2,3,1 @: 4780
 .byte 0,2,0,2,3,2,1,2,1,2,3,2,1,0,2,2,2,2,0,2,3,1,1,2,1,2,3,3,2,3,3,1 @: 47A0
 .byte 2,3,2,2,0,1,0,2,1,3,1,2,0,1,2,3,0,3,1,3,0,0,2,0,1,1,0,0,0,1,0,0 @: 47C0
 .byte 2,1,2,3,3,2,0,2,2,0,0,0,1,2,0,3,0,2,2,1,2,2,0,2,3,1,3,3,0,0,3,3 @: 47E0
 .byte 3,2,2,2,1,1,2,0,3,0,0,0,3,0,1,3,2,2,3,2,3,3,3,1,2,1,0,3,2,0,1,0 @: 4800
 .byte 3,1,1,0,1,2,0,3,2,2,0,3,0,0,3,1,2,2,1,2,0,1,3,1,2,0,1,3,1,2,1,3 @: 4820
 .byte 1,0,2,2,0,2,0,3,0,1,1,3,3,1,3,1,2,3,3,2,2,0,1,1,1,1,2,1,0,1,3,3 @: 4840
 .byte 2,1,2,2,0,0,3,2,0,3,2,1,3,1,1,1,1,3,3,2,3,2,3,3,0,1,0,1,0,3,3,1 @: 4860
 .byte 3,0,3,3,2,3,3,3,0,1,0,2,0,1,1,0,3,1,1,3,3,1,3,2,3,2,3,1,3,3,0,0 @: 4880
 .byte 2,0,2,0,1,1,3,3,2,1,3,3,3,0,1,2,3,1,3,1,2,0,2,3,0,3,3,2,1,0,3,3 @: 48A0
 .byte 0,0,3,0,1,1,1,3,3,3,2,3,0,0,2,1,0,0,2,3,1,2,3,0,3,1,3,1,0,2,3,1 @: 48C0
 .byte 1,2,2,0,1,0,3,1,0,0,1,2,2,2,2,3,1,0,1,2,3,1,2,2,3,3,2,2,1,2,0,0 @: 48E0
 .byte 3,1,0,1,3,2,3,0,3,2,2,2,2,0,0,2,1,1,0,1,0,1,2,1,2,3,0,3,1,2,0,2 @: 4900
 .byte 1,1,1,3,0,2,1,3,3,0,2,2,0,0,3,3,1,1,0,2,3,2,1,3,2,1,2,2,0,0,2,0 @: 4920
 .byte 0,3,1,2,0,3,1,3,2,2,3,0,0,1,1,1,0,0,1,2,3,0,0,1,2,0,1,0,2,2,1,0 @: 4940
 .byte 2,2,1,3,2,3,0,2,0,3,1,1,3,0,1,0,2,1,0,3,1,3,0,3,1,2,3,3,1,3,3,0 @: 4960
 .byte 3,1,0,1,1,1,1,0,1,0,2,3,2,0,2,0,3,0,2,2,3,0,1,3,2,3,3,2,1,0,0,2 @: 4980
 .byte 2,2,0,2,2,3,2,2,2,3,3,0,2,1,0,3,2,1,2,2,3,2,3,2,3,0,2,1,1,3,1,0 @: 49A0
 .byte 0,2,2,2,2,0,1,2,2,0,2,1,3,3,1,3,2,3,0,2,1,3,3,3,3,1,3,2,3,2,2,3 @: 49C0
 .byte 0,3,3,3,3,3,1,2,0,3,1,1,2,3,0,0,2,1,1,3,0,3,2,1,1,1,1,0,3,1,0,2 @: 49E0
 .byte 1,0,0,1,3,1,3,2,1,1,3,1,0,3,1,1,0,0,0,3,1,2,3,0,0,2,1,1,1,2,0,3 @: 4A00
 .byte 2,1,1,0,3,2,2,1,2,3,0,3,2,0,2,0,2,0,3,2,0,0,2,0,3,1,0,0,1,3,0,2 @: 4A20
 .byte 1,1,0,0,1,3,1,0,2,2,3,2,1,1,1,1,2,1,0,0,3,0,0,2,3,2,3,0,0,3,3,3 @: 4A40
 .byte 2,3,2,0,2,2,3,0,2,3,1,0,3,2,2,2,1,3,1,2,2,3,2,1,1,0,1,1,0,0,2,0 @: 4A60
 .byte 2,2,3,2,2,0,2,2,3,0,3,0,3,2,3,2,3,3,3,1,2,2,1,2,2,0,3,0,2,0,0,3 @: 4A80
 .byte 1,0,0,2,2,1,3,0,2,0,2,1,0,1,3,1,0,1,1,3,0,2,3,1,3,2,2,1,2,3,0,0 @: 4AA0
 .byte 0,0,3,3,3,3,2,3,3,1,2,0,0,2,0,2,0,0,2,3,1,2,0,0,2,1,1,3,0,1,0,2 @: 4AC0
 .byte 2,2,3,3,1,3,2,2,3,2,3,3,0,0,0,2,2,1,2,3,3,0,1,0,3,3,3,2,0,2,0,0 @: 4AE0
 .byte 0,1,2,3,3,2,3,3,1,0,2,0,3,0,0,3,0,0,3,1,0,3,1,1,0,1,2,0,0,0,3,2 @: 4B00
 .byte 0,2,1,2,2,2,1,1,3,1,0,3,2,3,3,3,1,3,3,0,3,2,1,0,3,3,3,3,3,0,1,3 @: 4B20
 .byte 0,1,2,2,3,0,2,1,3,1,1,2,2,3,2,3,1,3,2,0,0,0,0,0,0,2,3,1,2,1,3,3 @: 4B40
 .byte 1,0,3,0,0,2,3,2,3,3,1,3,3,3,0,2,0,2,3,0,2,3,1,1,2,2,1,3,2,3,0,2 @: 4B60
 .byte 2,0,2,2,0,3,0,1,2,0,1,0,0,1,1,2,0,0,1,0,1,0,1,0,3,2,3,1,0,3,0,2 @: 4B80
 .byte 3,2,0,3,1,2,0,3,2,3,3,1,3,3,3,1,3,1,2,1,1,0,1,3,0,2,0,3,2,0,3,2 @: 4BA0
 .byte 1,2,0,3,2,3,0,1,2,1,2,0,1,0,3,0,2,3,3,0,0,3,0,1,0,1,3,2,3,3,1,2 @: 4BC0
 .byte 0,2,1,1,3,2,1,3,0,3,2,0,1,1,3,0,3,0,1,1,0,0,1,2,0,1,3,1,3,1,2,2 @: 4BE0
 .byte 2,0,0,0,3,2,1,1,2,3,0,1,1,0,3,2,0,0,2,3,1,1,0,3,2,1,2,1,3,1,0,3 @: 4C00
 .byte 1,1,0,2,2,3,1,0,0,1,1,2,1,1,0,1,2,2,2,0,0,2,0,0,2,1,1,0,0,1,2,1 @: 4C20
 .byte 1,3,0,1,0,3,0,0,0,2,2,0,3,0,1,3,0,2,3,0,3,2,3,0,1,1,2,0,1,1,1,0 @: 4C40
 .byte 0,0,1,0,1,3,2,1,2,2,0,3,3,0,2,2,2,0,0,1,2,3,3,3,0,1,2,3,0,3,3,0 @: 4C60
 .byte 0,1,3,2,1,0,0,0,3,2,2,1,3,3,1,3,0,1,3,0,2,0,1,3,2,0,2,2,2,2,1,2 @: 4C80
 .byte 1,0,2,2,0,3,0,2,2,3,3,3,2,0,2,0,1,3,1,3,1,2,1,1,1,3,3,3,0,2,3,3 @: 4CA0
 .byte 1,2,1,1,3,1,2,2,1,3,0,1,0,2,1,1,0,3,1,1,3,2,1,3,1,0,0,2,2,0,3,0 @: 4CC0
 .byte 3,1,0,3,3,2,0,3,3,0,2,3,3,3,1,1,3,2,3,0,2,0,2,1,1,1,0,3,1,0,3,1 @: 4CE0
 .byte 0,2,3,1,3,2,0,3,1,2,3,1,0,2,3,1,2,1,1,0,0,2,0,3,2,3,1,3,2,1,3,2 @: 4D00
 .byte 1,3,2,2,2,2,1,1,1,0,2,3,1,2,1,0,0,1,0,3,3,0,1,2,2,1,1,1,1,3,2,2 @: 4D20
 .byte 0,2,2,1,3,2,3,0,2,0,2,3,1,3,2,3,2,1,2,0,1,3,2,0,1,3,0,2,1,3,1,0 @: 4D40
 .byte 2,2,2,3,3,2,1,3,2,3,0,0,0,1,2,1,1,1,0,3,0,3,2,2,0,2,1,1,0,2,3,0 @: 4D60
 .byte 2,1,3,3,1,1,0,1,3,2,3,2,2,1,3,0,0,0,2,0,2,1,1,2,3,2,1,1,0,0,0,3 @: 4D80
 .byte 3,3,2,0,3,3,1,1,1,0,2,1,1,3,0,0,0,1,3,2,3,3,3,2,3,1,3,1,0,1,2,0 @: 4DA0
 .byte 3,0,2,0,0,1,3,3,1,1,1,1,0,2,3,0,3,1,2,3,1,3,2,1,2,2,0,2,3,0,3,2 @: 4DC0
 .byte 0,0,1,1,3,0,3,1,2,3,2,2,1,3,1,1,2,2,1,0,0,3,0,3,1,0,1,0,1,2,0,3 @: 4DE0
 .byte 2,0,0,1,2,1,2,1,3,0,3,1,1,0,0,0,3,3,1,2,1,0,0,1,1,0,0,3,2,1,3,3 @: 4E00
 .byte 0,3,0,0,1,2,2,3,3,2,0,3,1,1,1,2,1,3,0,2,3,0,2,1,2,0,0,2,0,3,1,0 @: 4E20
 .byte 1,1,3,3,0,0,1,0,0,2,2,3,3,1,3,0,2,1,3,3,2,2,3,0,1,1,0,3,3,0,0,1 @: 4E40
 .byte 1,1,1,2,1,0,3,0,0,1,0,0,2,1,3,0,2,0,3,2,0,0,1,3,1,1,3,1,3,1,2,1 @: 4E60
 .byte 3,2,3,2,0,0,3,1,0,2,3,1,3,3,0,1,2,1,2,0,0,0,2,3,0,3,0,0,3,1,3,3 @: 4E80
 .byte 2,3,1,1,2,1,3,2,0,1,1,1,1,2,0,3,0,1,0,3,2,2,3,1,3,2,3,0,1,1,1,0 @: 4EA0
 .byte 0,2,0,0,2,2,2,0,1,1,0,1,3,0,0,1,3,3,0,1,0,2,0,0,1,1,1,0,2,0,0,0 @: 4EC0
 .byte 0,0,1,1,0,1,0,2,2,3,1,3,0,2,0,0,3,2,3,3,0,2,0,1,1,0,2,3,3,3,2,2 @: 4EE0
 .byte 1,3,2,2,0,0,1,3,3,1,3,0,1,0,1,1,3,0,2,0,3,1,0,2,2,3,1,1,2,2,2,1 @: 4F00
 .byte 3,2,0,1,2,1,3,3,2,2,3,2,2,0,3,2,3,0,3,0,0,0,3,0,1,3,0,3,1,2,2,3 @: 4F20
 .byte 3,1,2,0,1,1,0,2,3,3,1,2,3,3,1,3,1,3,0,1,0,3,1,2,2,2,1,2,0,1,1,1 @: 4F40
 .byte 2,0,2,2,0,0,1,0,1,0,2,1,2,1,2,2,0,0,0,0,0,2,1,3,2,2,2,3,2,1,0,1 @: 4F60
 .byte 1,2,0,3,1,0,0,3,2,1,2,1,3,0,2,3,3,3,3,2,0,0,0,0,1,0,2,2,0,3,2,0 @: 4F80
 .byte 3,0,1,1,1,1,1,3,3,0,3,3,0,1,3,0,2,2,1,3,0,1,0,2,0,0,2,3,3,1,0,0 @: 4FA0
 .byte 3,1,0,2,1,3,0,3,0,1,2,1,2,1,1,2,3,1,0,0,2,1,1,2,2,3,3,0,1,2,2,1 @: 4FC0
 .byte 3,2,2,2,3,3,2,0,0,0,2,3,3,0,1,1,3,1,1,3,3,1,1,3,1,3,2,2,1,0,0,1 @: 4FE0
 .byte 1,2,3,1,3,2,3,2,2,0,0,0,2,1,3,1,3,0,3,1,3,3,0,3,3,0,2,3,0,2,1,1 @: 5000
 .byte 1,1,1,3,1,3,3,3,1,3,0,3,3,2,0,1,3,1,1,2,2,2,0,0,1,3,2,1,2,3,2,3 @: 5020
 .byte 2,1,1,0,2,1,1,3,1,2,2,2,2,2,3,1,3,3,3,3,3,2,2,3,0,2,2,3,0,0,0,1 @: 5040
 .byte 0,3,2,1,0,2,1,1,2,3,1,2,2,3,3,1,2,0,0,0,3,0,1,1,1,0,1,2,2,3,3,0 @: 5060
 .byte 3,2,0,2,1,0,3,3,3,3,0,3,2,3,0,0,1,1,1,0,1,0,2,1,1,1,0,0,2,3,0,3 @: 5080
 .byte 2,0,0,1,3,2,1,1,0,1,3,0,3,2,3,1,2,0,1,0,1,1,3,0,2,0,1,3,1,3,2,2 @: 50A0
 .byte 0,1,0,1,2,2,1,0,0,3,0,2,1,0,1,2,1,3,1,3,1,1,1,2,2,1,3,1,2,1,0,0 @: 50C0
 .byte 0,3,2,0,1,2,3,2,0,0,3,2,1,3,1,3,3,2,0,3,1,3,0,2,1,1,2,3,1,2,1,2 @: 50E0
 .byte 0,2,0,0,0,1,0,3,3,0,3,1,1,0,1,3,1,2,0,3,2,2,3,0,0,2,0,1,2,2,3,0 @: 5100
 .byte 0,1,1,0,2,2,0,0,3,0,1,2,2,2,1,3,1,2,3,2,1,2,0,0,3,3,0,1,3,1,1,2 @: 5120
 .byte 2,2,2,2,1,3,3,3,0,1,2,0,3,0,0,0,0,2,0,0,3,2,0,3,0,2,3,0,0,0,2,2 @: 5140
 .byte 0,0,3,2,1,1,2,2,2,3,0,0,2,2,3,2,2,1,0,3,3,3,3,1,3,0,2,2,2,0,2,3 @: 5160
 .byte 2,2,3,1,2,1,3,3,0,2,1,1,1,0,2,2,0,3,0,3,3,0,2,0,0,0,1,0,2,0,0,1 @: 5180
 .byte 1,2,0,0,0,2,0,3,3,0,1,2,0,1,0,0,2,0,0,2,2,2,3,1,0,2,1,3,2,0,2,1 @: 51A0
 .byte 1,1,1,0,1,1,3,0,2,1,2,1,1,0,1,2,0,3,3,0,1,2,0,3,2,2,2,0,1,1,2,3 @: 51C0
 .byte 2,3,1,0,3,1,1,3,2,0,3,0,2,0,1,1,1,3,1,3,1,2,0,2,2,0,2,0,0,2,2,1 @: 51E0
 .byte 3,3,0,1,2,2,1,2,3,0,0,2,1,1,3,3,1,3,1,2,3,2,0,0,1,0,3,0,3,0,2,3 @: 5200
 .byte 3,2,3,1,3,2,1,0,0,1,3,2,0,1,2,1,1,0,2,0,3,2,1,3,0,0,0,0,3,1,1,1 @: 5220
 .byte 2,1,3,2,0,2,1,3,3,3,2,1,0,2,0,1,1,2,0,1,3,3,0,2,1,3,1,3,2,2,0,2 @: 5240
 .byte 0,3,1,3,0,1,3,0,2,3,3,1,3,3,2,1,1,3,3,2,1,1,2,1,0,3,2,3,2,2,2,0 @: 5260
 .byte 2,1,3,3,3,2,2,3,3,3,1,2,1,1,1,1,2,3,3,0,1,1,1,2,3,1,2,1,3,1,0,3 @: 5280
 .byte 1,2,0,1,3,0,3,3,1,1,3,2,0,2,3,2,3,2,3,1,3,2,0,1,0,2,0,1,2,1,0,0 @: 52A0
 .byte 3,3,3,3,0,1,0,1,1,3,1,1,1,2,0,0,1,0,0,1,0,2,3,2,0,3,2,2,1,3,3,2 @: 52C0
 .byte 2,2,2,0,1,3,3,0,0,1,3,0,0,1,1,0,3,2,0,3,1,3,2,0,0,1,1,0,3,0,2,2 @: 52E0
 .byte 1,1,2,2,2,0,0,1,0,1,3,2,3,0,1,1,3,1,1,3,3,0,2,0,0,1,3,2,3,0,0,3 @: 5300
 .byte 2,3,2,0,2,3,0,1,0,2,1,0,0,1,2,0,3,2,3,3,1,1,0,0,2,1,1,2,3,0,0,3 @: 5320
 .byte 1,3,1,3,3,3,0,0,0,3,0,0,2,1,3,1,2,1,1,3,1,3,2,3,1,0,1,0,3,0,2,3 @: 5340
 .byte 3,0,2,2,2,3,3,1,0,1,3,2,2,2,0,2,3,2,0,2,2,0,3,2,0,0,2,3,3,2,0,0 @: 5360
 .byte 3,2,1,3,2,3,0,0,0,0,1,0,1,3,1,1,0,1,1,2,1,2,0,0,3,3,2,0,1,3,1,3 @: 5380
 .byte 2,0,2,1,1,1,1,0,2,1,1,3,2,0,3,2,1,0,0,0,2,1,0,3,0,1,1,0,3,3,0,3 @: 53A0
 .byte 3,3,3,1,3,3,3,1,0,2,2,2,1,1,1,0,1,3,3,0,1,2,1,2,3,0,0,0,3,3,2,3 @: 53C0
 .byte 3,1,0,1,0,0,1,1,3,1,3,1,1,0,1,1,1,3,1,1,3,1,2,0,0,2,2,2,2,1,1,3 @: 53E0
 .byte 2,2,0,2,1,0,2,2,1,2,2,0,3,0,1,3,0,3,1,3,2,0,1,1,2,2,0,1,1,1,1,3 @: 5400
 .byte 0,0,0,0,1,1,0,2,2,1,1,2,3,0,1,0,0,2,2,1,1,3,0,3,2,2,1,3,2,2,0,1 @: 5420
 .byte 1,2,3,2,1,0,3,1,2,3,3,1,3,1,0,0,0,2,3,1,0,2,3,0,0,1,3,2,2,0,0,0 @: 5440
 .byte 2,3,1,2,1,2,1,0,3,2,0,1,3,3,0,1,0,2,2,1,3,2,3,2,1,0,2,3,1,3,0,3 @: 5460
 .byte 0,1,3,1,2,1,3,3,0,3,3,2,3,0,1,0,3,1,2,3,0,1,2,0,0,2,0,0,3,2,1,3 @: 5480
 .byte 3,1,0,1,2,0,1,3,3,0,2,3,3,3,1,2,0,3,0,1,1,2,3,1,3,3,3,0,2,1,0,2 @: 54A0
 .byte 3,1,1,2,3,0,3,0,2,2,2,1,0,3,3,0,2,0,2,0,2,3,3,1,3,3,3,1,3,2,1,2 @: 54C0
 .byte 0,1,2,1,0,3,2,0,0,3,1,0,3,3,2,3,0,0,0,0,2,3,1,0,1,3,3,3,3,2,2,2 @: 54E0
 .byte 3,0,1,0,0,0,2,2,2,3,3,3,1,2,1,0,0,2,2,1,2,3,0,2,2,3,2,1,1,3,0,0 @: 5500
 .byte 1,1,3,1,1,0,1,2,3,0,3,0,2,1,2,1,2,1,2,3,1,1,3,2,1,3,3,1,2,0,3,0 @: 5520
 .byte 2,2,0,0,3,3,0,1,1,3,2,1,2,0,2,1,3,0,0,1,0,2,2,0,2,2,2,3,0,1,2,0 @: 5540
 .byte 0,3,3,3,3,1,3,2,0,0,0,3,2,1,0,3,2,0,2,1,2,2,1,1,3,1,0,0,1,0,0,1 @: 5560
 .byte 3,0,2,2,3,0,1,2,2,3,1,2,3,1,2,2,0,3,3,0,0,1,2,3,0,0,3,2,2,1,2,1 @: 5580
 .byte 2,3,2,2,1,2,3,2,0,3,0,3,2,0,3,2,2,3,0,3,1,1,0,0,1,0,3,2,1,3,0,1 @: 55A0
 .byte 0,3,2,0,3,3,0,0,0,2,2,0,3,2,3,3,0,3,3,2,1,3,0,1,0,0,2,0,3,2,2,2 @: 55C0
 .byte 0,1,3,2,0,3,2,3,2,1,2,1,2,0,3,1,0,3,3,3,0,2,3,0,2,3,3,0,3,0,1,0 @: 55E0
 .byte 1,2,2,1,0,2,0,1,2,2,2,1,1,3,0,0,0,3,2,2,1,3,3,1,2,0,0,2,3,1,0,2 @: 5600
 .byte 2,1,2,1,1,1,0,0,3,0,0,1,2,1,1,2,0,3,0,1,3,1,2,1,1,0,1,0,1,1,0,2 @: 5620
 .byte 0,0,2,1,3,3,0,2,1,2,0,1,2,2,2,0,2,1,0,1,1,3,1,0,1,0,3,0,2,1,0,1 @: 5640
 .byte 2,1,2,3,0,3,3,0,0,1,1,1,2,0,3,0,2,3,0,0,3,2,1,0,1,1,1,0,3,1,2,2 @: 5660
 .byte 0,2,3,2,1,3,2,0,2,1,1,2,0,2,2,0,1,3,0,3,2,2,0,0,3,0,1,3,3,0,3,2 @: 5680
 .byte 2,1,0,0,0,3,0,0,0,0,3,2,0,2,2,2,1,2,2,1,3,0,0,2,3,2,1,2,2,2,3,2 @: 56A0
 .byte 1,1,3,1,2,0,3,2,2,2,1,2,1,1,1,0,1,1,0,3,3,0,2,0,3,0,1,0,2,2,1,2 @: 56C0
 .byte 2,1,1,2,3,0,2,3,2,2,0,1,3,3,0,3,2,1,0,0,2,3,1,1,2,0,2,3,2,1,1,1 @: 56E0
 .byte 2,1,0,1,3,1,2,0,1,0,3,0,0,1,2,3,2,3,1,3,1,3,3,0,2,1,3,2,0,3,3,1 @: 5700
 .byte 3,3,1,0,1,1,1,2,0,1,2,2,2,3,0,3,2,0,2,2,2,2,0,0,0,1,1,0,0,3,0,3 @: 5720
 .byte 1,0,3,2,2,1,0,0,3,2,1,2,3,0,3,0,1,0,0,0,2,0,0,1,3,1,0,3,2,2,1,0 @: 5740
 .byte 1,0,3,3,2,3,2,3,0,2,1,2,2,2,1,1,1,2,0,3,3,0,3,3,0,1,2,1,2,3,3,1 @: 5760
 .byte 0,1,2,3,3,0,3,2,1,2,0,0,1,1,3,3,0,3,3,2,0,0,0,0,3,0,3,3,0,3,1,3 @: 5780
 .byte 1,2,0,2,1,3,1,3,3,0,3,2,1,2,0,3,0,1,2,1,2,1,1,2,1,1,0,1,1,1,1,3 @: 57A0
 .byte 1,1,0,2,2,2,3,0,2,2,0,1,0,1,1,1,1,3,0,3,0,0,0,0,1,1,2,2,2,1,2,0 @: 57C0
 .byte 2,2,2,0,3,3,0,1,0,3,0,3,1,3,0,0,1,0,0,2,1,1,1,2,2,1,3,1,3,1,3,2 @: 57E0
 .byte 3,2,1,1,1,1,3,3,2,1,1,3,1,3,2,1,3,2,2,3,3,3,3,0,0,3,1,0,3,0,3,2 @: 5800
 .byte 1,3,3,2,1,2,1,3,1,3,1,1,3,1,2,3,2,3,2,0,2,0,0,1,0,0,0,3,1,0,0,3 @: 5820
 .byte 0,2,1,1,0,3,3,3,3,0,2,2,3,3,2,1,2,1,1,3,1,2,1,2,0,1,3,2,2,3,1,3 @: 5840
 .byte 1,2,3,3,1,3,2,0,0,3,1,2,2,0,1,0,0,0,1,1,0,1,0,1,2,3,1,2,0,0,1,1 @: 5860
 .byte 0,3,1,1,1,1,3,3,1,0,1,0,2,3,1,3,1,1,2,2,3,0,1,2,3,3,0,0,1,1,3,2 @: 5880
 .byte 2,3,1,3,1,0,2,0,1,3,1,1,2,3,2,0,2,1,2,3,2,0,2,1,3,3,2,3,1,0,2,0 @: 58A0
 .byte 3,1,0,1,2,2,1,0,0,1,0,0,1,0,1,0,1,1,3,0,3,0,2,3,3,3,3,3,2,3,2,2 @: 58C0
 .byte 2,0,1,3,1,3,0,2,1,3,1,2,2,1,1,0,3,0,3,0,2,0,3,2,3,0,3,1,1,1,0,0 @: 58E0
 .byte 0,2,0,2,0,2,3,2,2,2,3,1,2,1,3,0,0,3,1,0,3,0,3,3,1,1,0,0,0,1,3,3 @: 5900
 .byte 1,1,1,1,0,0,1,2,1,0,3,0,0,3,2,0,2,1,2,3,0,1,3,1,3,3,0,3,0,1,1,0 @: 5920
 .byte 1,3,1,2,0,3,2,2,1,1,0,1,0,3,1,2,3,0,1,3,3,3,1,0,3,2,0,0,1,1,3,3 @: 5940
 .byte 3,2,3,1,2,2,3,2,2,0,0,3,2,1,2,3,0,1,1,1,0,3,3,1,3,3,1,1,3,3,1,1 @: 5960
 .byte 1,2,3,1,2,1,2,0,2,3,0,0,1,0,2,2,2,3,2,1,3,0,3,2,3,0,0,1,1,0,2,3 @: 5980
 .byte 3,2,1,0,3,3,1,2,1,1,2,2,0,2,3,2,3,1,3,0,1,0,2,0,1,1,0,0,2,2,1,1 @: 59A0
 .byte 2,3,3,0,2,1,3,0,3,1,3,3,1,1,2,1,3,2,3,2,2,1,1,1,1,2,3,3,3,0,3,1 @: 59C0
 .byte 0,1,3,1,3,1,0,1,3,0,0,3,2,3,2,3,2,2,1,1,3,2,1,3,0,3,1,3,1,0,2,3 @: 59E0
 .byte 3,3,3,2,1,3,0,1,0,2,3,2,2,3,1,0,2,0,0,1,2,3,3,3,1,3,1,0,2,3,2,1 @: 5A00
 .byte 2,2,3,0,1,0,3,3,1,2,1,2,1,1,2,1,3,2,2,1,0,2,1,1,3,1,3,1,0,2,2,1 @: 5A20
 .byte 0,0,3,2,3,0,2,1,3,2,0,0,0,1,1,1,1,1,2,1,1,0,0,3,1,1,2,0,1,1,1,3 @: 5A40
 .byte 0,3,0,0,2,0,3,0,3,3,2,1,1,3,1,2,0,1,3,2,1,3,3,3,0,1,2,1,1,1,0,2 @: 5A60
 .byte 1,2,2,2,1,2,3,2,0,3,0,3,3,1,2,1,2,1,0,3,3,3,3,3,0,2,3,1,0,2,3,3 @: 5A80
 .byte 2,2,0,2,0,0,1,0,2,0,0,1,0,3,3,3,0,2,1,1,3,3,3,3,1,0,2,3,3,0,3,1 @: 5AA0
 .byte 2,3,1,1,3,2,1,2,0,3,0,3,2,0,3,1,3,1,1,3,2,2,1,0,1,0,3,0,2,3,2,1 @: 5AC0
 .byte 3,2,0,0,2,3,0,1,0,0,1,3,1,2,1,1,3,1,3,0,0,0,3,0,0,2,0,2,1,2,1,3 @: 5AE0
 .byte 3,2,3,0,1,3,1,1,2,2,2,0,2,1,2,1,3,3,2,1,2,1,0,1,3,1,2,1,0,1,2,0 @: 5B00
 .byte 1,3,1,3,0,3,3,1,1,1,3,2,2,1,3,2,3,1,2,2,2,2,1,1,3,3,3,2,1,0,2,2 @: 5B20
 .byte 2,0,2,2,1,0,1,3,1,1,1,1,1,2,2,1,1,1,3,3,3,1,3,2,3,0,0,2,2,1,3,2 @: 5B40
 .byte 2,0,1,1,1,2,3,0,1,3,3,0,3,3,2,0,1,0,3,0,2,0,2,1,0,2,3,0,0,2,3,0 @: 5B60
 .byte 0,1,0,0,3,1,0,2,2,2,0,0,0,2,2,0,2,1,0,2,2,0,1,0,0,3,1,3,1,0,2,1 @: 5B80
 .byte 3,1,0,3,3,3,1,3,1,3,0,0,2,3,0,3,3,0,2,0,0,0,0,2,0,1,0,1,2,1,3,1 @: 5BA0
 .byte 3,1,1,0,2,3,0,3,3,3,2,2,2,1,3,0,0,1,2,3,2,2,2,1,1,3,1,1,3,2,1,0 @: 5BC0
 .byte 1,0,3,0,0,3,2,0,2,2,2,1,3,3,0,2,1,3,2,0,2,2,2,0,1,1,0,3,0,0,1,0 @: 5BE0
 .byte 3,1,2,0,0,1,1,2,3,3,0,2,2,2,2,3,0,1,0,2,3,1,1,3,0,1,0,3,1,2,0,1 @: 5C00
 .byte 3,1,2,1,1,1,3,1,0,0,3,3,2,3,0,3,1,2,2,3,2,1,0,1,0,3,2,0,3,3,2,1 @: 5C20
 .byte 0,3,0,1,3,0,2,2,3,0,3,0,2,1,3,0,3,2,0,3,0,2,0,2,0,2,0,3,2,0,3,2 @: 5C40
 .byte 0,0,3,3,0,0,2,3,2,0,0,3,2,0,2,3,1,1,0,0,1,2,2,2,0,2,3,3,3,2,2,0 @: 5C60
 .byte 2,2,2,1,0,0,1,1,0,1,3,1,3,3,0,0,1,0,1,3,1,3,1,3,1,0,2,1,1,1,2,0 @: 5C80
 .byte 2,0,2,2,0,0,0,1,1,0,1,3,2,2,3,2,3,2,0,0,0,0,2,0,3,3,3,2,0,3,0,0 @: 5CA0
 .byte 0,1,3,2,0,3,2,2,2,2,0,0,2,3,3,2,1,1,0,2,1,3,3,3,2,1,2,3,0,2,1,0 @: 5CC0
 .byte 2,3,1,0,0,2,3,3,2,2,2,3,2,1,1,2,0,1,1,1,3,1,3,1,3,2,0,0,1,2,2,0 @: 5CE0
 .byte 3,1,0,3,0,0,0,3,0,1,1,2,0,1,2,3,2,0,3,0,0,1,0,3,0,3,1,0,3,2,2,1 @: 5D00
 .byte 0,3,3,0,0,0,2,1,3,2,1,0,0,0,3,0,0,2,0,0,1,3,0,1,2,2,2,3,0,2,3,2 @: 5D20
 .byte 2,2,1,0,1,1,0,0,3,1,1,1,3,2,3,1,3,3,1,1,3,1,2,1,0,1,2,3,3,3,2,2 @: 5D40
 .byte 3,2,0,3,3,2,0,0,0,0,2,1,1,0,0,0,0,1,1,1,2,3,1,3,0,0,0,0,2,3,2,1 @: 5D60
 .byte 2,0,1,1,2,1,2,1,3,3,3,1,1,2,3,3,0,1,0,0,3,2,1,1,3,1,3,1,1,2,3,1 @: 5D80
 .byte 1,0,0,3,3,3,0,3,0,0,3,0,0,2,0,1,0,3,3,3,0,0,1,1,3,0,0,3,3,2,3,2 @: 5DA0
 .byte 0,1,2,2,0,1,3,1,3,2,2,1,2,3,1,1,2,2,2,2,2,3,3,2,3,2,0,0,1,2,2,3 @: 5DC0
 .byte 2,3,0,3,1,2,0,0,2,3,0,2,3,0,2,1,3,1,0,3,2,2,3,3,3,2,0,2,0,0,0,3 @: 5DE0
 .byte 0,1,3,1,3,3,3,0,3,3,3,1,1,0,3,1,0,3,1,1,1,3,2,3,1,0,0,1,3,0,0,1 @: 5E00
 .byte 2,3,2,1,1,2,0,0,2,1,3,0,1,1,2,0,2,3,0,3,2,0,1,0,1,2,3,3,1,2,0,1 @: 5E20
 .byte 2,1,2,0,2,1,2,1,1,0,0,0,1,0,1,2,2,2,2,1,1,1,2,0,3,2,3,0,2,1,3,2 @: 5E40
 .byte 1,3,0,3,3,1,1,1,3,3,2,1,3,2,0,2,0,3,3,1,0,2,2,1,1,1,0,1,1,2,0,3 @: 5E60
 .byte 3,3,2,2,2,3,2,0,3,3,2,1,0,1,3,0,0,1,3,0,0,1,2,2,2,3,2,2,2,3,2,3 @: 5E80
 .byte 2,2,0,2,0,3,0,0,0,2,1,2,3,0,2,3,2,1,0,2,2,1,1,2,0,2,2,3,2,2,3,0 @: 5EA0
 .byte 3,1,2,3,0,1,0,0,3,0,0,1,1,1,3,1,3,0,1,0,0,1,0,0,1,0,3,3,1,1,0,1 @: 5EC0
 .byte 0,2,1,0,1,1,3,2,3,3,3,1,3,0,2,1,1,1,3,1,3,1,1,0,0,0,2,2,2,0,2,3 @: 5EE0
 .byte 1,1,1,0,0,2,0,1,0,1,2,2,1,0,3,3,1,2,0,3,3,0,0,2,0,2,2,1,0,2,1,2 @: 5F00
 .byte 2,1,0,0,3,2,3,2,0,3,0,0,0,1,1,1,3,0,2,0,1,2,3,0,3,2,1,0,1,2,3,2 @: 5F20
 .byte 0,1,3,3,0,1,1,2,2,0,2,3,1,0,0,3,2,2,3,2,0,2,3,3,3,1,1,2,0,3,2,2 @: 5F40
 .byte 0,1,1,2,3,3,3,3,1,2,2,2,2,1,1,3,2,0,3,2,3,3,3,3,1,3,2,1,3,2,3,2 @: 5F60
 .byte 3,0,3,0,2,2,1,2,0,0,1,2,0,2,0,1,0,2,2,0,1,3,3,1,3,0,2,2,3,2,0,1 @: 5F80
 .byte 2,0,2,1,0,3,1,3,3,0,1,1,3,1,2,2,0,3,1,2,2,0,1,3,3,0,2,3,2,0,2,1 @: 5FA0
 .byte 0,2,0,3,3,1,0,3,0,0,0,3,2,0,2,3,3,1,3,0,1,0,3,2,1,1,1,3,2,0,1,2 @: 5FC0
 .byte 1,2,1,2,0,0,0,3,3,0,1,2,2,0,1,3,1,2,3,3,2,1,0,3,2,3,0,1,1,0,0,3 @: 5FE0
 .byte 3,0,1,0,3,2,0,1,0,2,0,3,1,1,3,3,2,3,0,3,1,0,3,2,0,0,0,0,0,2,3,0 @: 6000
 .byte 3,3,2,1,2,3,0,0,3,1,2,2,1,0,2,1,1,3,1,1,3,3,0,3,3,0,1,3,1,1,0,2 @: 6020
 .byte 0,2,1,3,0,3,1,0,1,1,2,0,3,0,3,3,3,0,3,1,3,3,2,2,2,3,1,3,3,2,1,3 @: 6040
 .byte 2,2,2,1,0,3,1,0,0,0,0,3,3,2,2,0,1,0,2,2,2,0,2,0,0,0,1,1,1,1,2,3 @: 6060
 .byte 0,3,2,0,1,1,2,3,0,1,0,3,2,0,0,2,1,3,2,3,1,3,0,0,1,2,1,0,2,2,1,2 @: 6080
 .byte 2,1,0,1,2,1,2,3,2,0,1,3,1,3,1,2,0,3,3,0,3,2,3,2,2,0,3,0,2,3,2,0 @: 60A0
 .byte 3,0,1,3,1,3,1,1,1,0,1,0,3,2,0,1,1,1,0,0,3,1,1,0,1,1,3,1,2,2,2,2 @: 60C0
 .byte 0,1,1,2,1,1,1,2,0,0,0,3,3,3,2,0,1,1,3,2,3,3,0,1,2,0,2,0,1,0,3,3 @: 60E0
 .byte 1,3,2,2,1,1,2,2,3,0,0,2,1,0,0,1,3,3,3,2,2,3,3,0,3,3,3,1,0,2,3,0 @: 6100
 .byte 2,3,2,1,2,0,0,2,1,1,2,0,0,0,1,1,3,1,0,1,1,0,3,1,1,3,2,3,0,2,2,1 @: 6120
 .byte 0,0,2,0,1,1,2,2,2,0,3,1,0,3,1,1,1,2,0,1,1,1,2,0,3,3,2,2,2,1,3,0 @: 6140
 .byte 2,0,1,3,3,3,1,1,0,0,3,3,2,2,1,0,3,2,3,0,0,0,1,3,1,1,0,3,1,1,0,0 @: 6160
 .byte 3,2,1,3,1,3,1,3,2,0,1,3,0,2,3,1,0,1,3,2,3,0,2,3,3,1,3,3,3,3,2,0 @: 6180
 .byte 2,1,2,1,3,0,0,3,0,0,0,0,0,3,0,3,1,1,2,1,0,2,2,3,1,2,0,1,2,2,3,3 @: 61A0
 .byte 1,0,2,2,2,0,0,3,2,3,0,1,0,1,1,1,0,3,1,2,1,2,1,2,3,0,1,2,0,2,0,3 @: 61C0
 .byte 0,1,1,1,1,1,2,0,1,0,0,2,0,0,3,0,2,1,3,0,2,1,1,0,1,3,0,1,1,3,2,0 @: 61E0
 .byte 3,3,1,2,2,0,1,3,0,3,1,1,0,1,1,1,0,2,2,0,0,2,3,3,0,3,0,1,2,3,3,3 @: 6200
 .byte 3,1,2,3,0,2,3,3,2,2,0,3,0,2,0,0,3,3,2,3,1,2,2,1,3,3,0,0,1,3,0,2 @: 6220
 .byte 0,1,0,1,2,1,2,3,1,0,2,3,2,3,3,2,1,0,0,0,0,2,0,2,1,0,0,3,2,1,0,2 @: 6240
 .byte 3,0,0,2,2,1,3,3,2,3,3,0,2,1,1,3,2,3,0,0,0,3,3,0,0,0,0,0,1,2,1,3 @: 6260
 .byte 1,0,1,3,0,3,3,2,0,0,2,3,3,3,0,3,3,0,2,0,0,3,2,0,2,3,0,1,3,1,1,1 @: 6280
 .byte 1,1,3,3,0,1,1,2,2,2,3,2,1,3,0,2,3,0,2,2,0,1,0,2,0,0,2,0,1,3,0,0 @: 62A0
 .byte 3,0,3,1,1,2,1,2,1,3,0,1,2,0,0,2,0,1,3,2,1,1,0,2,3,0,0,3,0,0,3,3 @: 62C0
 .byte 0,1,1,0,0,2,2,1,3,2,1,2,0,0,0,2,3,3,1,0,2,3,0,0,0,2,2,2,2,1,3,3 @: 62E0
 .byte 1,0,2,2,2,3,2,1,0,0,3,0,3,1,1,1,2,0,3,2,1,0,2,2,1,1,0,0,3,0,3,3 @: 6300
 .byte 1,3,0,0,2,0,3,0,3,1,0,2,1,0,0,2,3,1,2,1,0,2,1,3,3,3,3,0,3,3,3,0 @: 6320
 .byte 2,0,2,0,1,2,3,3,2,0,2,3,2,2,3,1,0,0,2,0,3,1,0,3,1,0,3,3,2,2,0,0 @: 6340
 .byte 3,1,2,3,2,2,0,1,1,2,2,2,3,3,3,0,0,0,3,2,3,1,2,2,2,3,1,1,2,3,0,3 @: 6360
 .byte 3,2,3,2,3,2,2,0,3,0,0,1,3,0,0,3,0,3,1,2,3,3,2,2,3,1,1,3,3,0,0,0 @: 6380
 .byte 0,3,3,0,0,0,3,3,2,2,0,2,2,2,2,2,2,3,3,3,3,1,0,0,1,3,0,1,0,1,1,3 @: 63A0
 .byte 1,2,3,1,3,1,3,1,0,0,1,1,3,2,0,0,0,1,3,1,2,1,2,0,3,0,0,3,1,3,1,0 @: 63C0
 .byte 0,0,3,2,2,1,1,0,2,3,3,3,3,1,0,2,0,2,1,0,2,3,2,2,2,3,0,0,3,2,2,1 @: 63E0
 .byte 2,1,0,1,2,0,1,2,1,2,1,3,2,0,3,0,3,3,1,1,3,2,0,3,1,2,1,2,2,2,3,2 @: 6400
 .byte 3,3,2,3,0,1,0,3,2,2,0,1,3,2,2,0,2,3,3,3,2,3,3,3,1,1,1,3,1,1,0,2 @: 6420
 .byte 3,1,3,1,2,3,0,1,2,2,3,3,3,2,2,1,1,0,2,1,2,3,3,0,2,3,3,0,0,3,3,1 @: 6440
 .byte 0,1,2,1,2,2,3,0,2,2,3,0,3,3,3,0,1,0,2,0,0,2,1,1,3,1,2,3,0,3,0,0 @: 6460
 .byte 3,1,0,1,0,3,2,2,2,1,2,3,3,0,1,1,3,3,3,3,1,3,1,2,1,2,0,2,3,3,3,2 @: 6480
 .byte 1,1,0,2,2,0,1,2,0,3,1,2,3,3,0,2,1,3,3,1,0,2,1,3,2,3,2,3,0,3,1,1 @: 64A0
 .byte 2,3,1,1,3,1,3,3,0,3,0,3,0,2,3,3,3,2,1,3,0,0,2,2,0,2,2,0,0,2,0,3 @: 64C0
 .byte 1,0,1,1,0,1,3,3,0,1,3,3,0,3,2,2,1,2,3,2,2,3,0,3,1,1,1,2,1,0,3,2 @: 64E0
 .byte 0,3,2,1,1,3,1,3,0,2,1,3,0,3,2,3,3,0,1,1,1,3,3,1,1,3,0,0,3,2,3,0 @: 6500
 .byte 1,0,3,1,2,3,1,0,1,0,1,2,1,1,0,1,0,1,3,1,1,2,0,0,2,3,1,0,3,1,1,0 @: 6520
 .byte 0,1,1,1,0,3,1,1,3,1,1,1,1,1,3,0,0,1,3,2,0,3,2,2,0,2,2,2,2,3,1,3 @: 6540
 .byte 2,0,2,1,1,0,3,3,2,1,0,0,3,1,2,1,0,1,2,2,2,0,2,2,3,2,1,3,1,1,2,1 @: 6560
 .byte 3,1,1,3,1,3,2,0,0,0,1,1,3,2,2,0,0,3,0,3,0,3,1,0,2,0,0,3,0,2,0,0 @: 6580
 .byte 0,3,0,1,3,0,3,2,3,0,1,3,0,2,1,0,3,2,2,1,2,2,0,2,0,0,3,1,2,3,2,1 @: 65A0
 .byte 1,0,2,0,2,0,3,2,1,0,0,1,2,2,1,2,3,3,0,3,2,0,0,3,1,2,0,3,0,3,0,3 @: 65C0
 .byte 0,3,3,0,2,0,1,3,3,1,0,1,2,1,0,3,0,3,0,2,1,1,2,0,2,0,0,1,1,0,3,3 @: 65E0
 .byte 0,2,3,3,0,3,3,0,3,3,2,3,2,1,2,2,1,0,3,3,3,2,0,1,0,2,2,1,0,2,0,1 @: 6600
 .byte 3,0,1,2,0,0,3,3,3,0,3,1,1,0,1,1,3,0,1,1,3,0,2,2,1,1,1,0,2,3,0,3 @: 6620
 .byte 3,2,3,1,0,0,1,1,0,1,1,3,1,0,1,1,1,3,0,1,2,1,3,2,0,2,3,3,2,0,0,0 @: 6640
 .byte 1,2,2,0,1,1,0,2,2,1,1,3,2,1,0,1,0,3,1,0,3,2,0,2,1,1,0,1,0,2,0,1 @: 6660
 .byte 3,0,2,3,2,3,3,3,1,2,3,3,3,1,0,3,0,2,0,3,2,3,1,0,3,2,0,0,3,2,1,3 @: 6680
 .byte 0,2,2,2,1,3,2,3,3,2,2,2,3,1,0,0,0,1,1,1,3,2,2,0,2,0,1,2,1,1,2,0 @: 66A0
 .byte 0,0,2,3,2,1,1,3,2,2,1,1,0,1,2,0,3,0,3,0,3,1,1,1,0,1,1,3,3,0,0,0 @: 66C0
 .byte 2,3,2,1,0,2,1,2,2,1,0,3,3,1,2,0,3,0,2,1,2,3,1,3,0,0,3,3,0,0,0,2 @: 66E0
 .byte 3,2,0,2,2,2,3,1,1,0,2,1,2,0,1,1,2,1,2,0,2,1,1,0,0,2,0,1,2,0,0,3 @: 6700
 .byte 2,1,3,3,3,3,2,2,1,2,3,0,2,1,2,3,0,0,0,0,0,1,1,1,2,0,1,0,3,2,2,3 @: 6720
 .byte 0,1,0,2,0,1,3,2,2,0,1,3,2,0,1,1,2,2,1,1,0,2,3,2,2,3,2,2,2,2,1,2 @: 6740
 .byte 1,1,0,3,1,1,0,3,3,2,3,1,0,2,2,3,1,0,2,2,3,2,2,3,2,0,2,0,3,3,1,2 @: 6760
 .byte 1,3,1,1,1,2,3,2,1,1,0,1,1,2,3,1,1,2,3,0,3,1,1,2,0,0,0,2,1,0,1,0 @: 6780
 .byte 0,0,0,3,0,1,1,2,2,1,1,2,2,0,0,0,3,1,2,3,0,3,3,1,2,0,3,0,0,0,3,1 @: 67A0
 .byte 2,1,3,3,2,3,3,2,1,0,0,3,0,2,2,2,3,2,0,2,3,3,3,1,1,2,0,1,1,1,0,2 @: 67C0
 .byte 2,1,0,3,1,1,0,1,3,2,0,3,2,1,3,0,1,3,3,2,3,1,0,0,0,2,2,1,0,1,0,0 @: 67E0
 .byte 0,3,1,3,1,1,1,3,2,3,2,0,1,1,0,3,3,3,0,0,3,1,3,0,2,0,3,3,3,3,0,1 @: 6800
 .byte 1,3,3,0,2,1,0,1,2,0,1,2,0,1,3,3,1,0,3,3,0,1,1,3,3,0,3,3,3,1,1,2 @: 6820
 .byte 2,0,2,3,2,2,2,1,3,2,0,2,1,1,1,1,0,3,3,3,1,1,0,0,1,3,3,0,2,0,3,2 @: 6840
 .byte 1,1,3,1,1,2,0,3,2,0,1,2,0,1,0,2,3,3,3,0,1,1,2,3,0,3,2,2,0,3,1,0 @: 6860
 .byte 1,0,0,3,2,0,1,0,3,0,3,3,2,1,3,0,0,3,1,2,3,2,0,2,1,0,3,2,3,0,2,2 @: 6880
 .byte 3,0,1,2,1,3,1,0,3,1,3,0,3,2,2,1,2,2,2,3,3,3,0,2,2,1,1,2,3,1,0,0 @: 68A0
 .byte 1,0,0,0,1,3,0,2,2,3,1,3,0,2,1,3,1,3,3,2,1,1,0,3,2,1,1,3,3,1,2,1 @: 68C0
 .byte 2,2,0,1,1,2,3,1,1,1,2,3,3,3,3,3,1,2,2,3,0,2,0,2,0,0,0,0,3,0,2,0 @: 68E0
 .byte 1,1,2,0,1,0,1,2,3,0,3,3,1,0,1,1,2,0,0,0,0,3,1,1,0,3,0,2,3,2,1,3 @: 6900
 .byte 3,1,1,3,0,0,0,1,0,1,2,2,2,0,0,3,1,0,3,3,1,3,2,1,3,0,3,3,0,0,3,1 @: 6920
 .byte 0,0,1,0,2,0,3,3,3,0,1,3,3,3,1,3,3,0,3,1,2,1,0,1,3,1,1,2,2,3,3,1 @: 6940
 .byte 0,3,1,2,0,3,0,1,0,2,1,2,1,2,2,3,0,3,3,3,1,3,1,1,0,2,3,0,1,0,0,1 @: 6960
 .byte 1,2,2,2,2,3,2,3,1,3,3,1,0,0,2,2,3,3,2,2,0,0,1,3,1,0,1,2,3,0,0,3 @: 6980
 .byte 0,1,3,1,0,0,2,0,0,0,2,2,1,1,0,1,3,3,2,0,1,1,3,2,2,2,3,0,0,1,2,3 @: 69A0
 .byte 1,2,1,0,2,0,1,3,1,1,2,3,2,1,0,2,0,2,0,0,0,3,2,0,2,2,3,1,2,2,1,1 @: 69C0
 .byte 3,3,1,1,1,3,3,2,2,1,1,2,0,1,1,3,2,3,0,1,2,0,1,1,2,3,3,1,3,0,2,3 @: 69E0
 .byte 3,2,3,0,1,2,0,0,1,3,3,0,1,2,0,2,2,2,0,0,3,0,0,2,3,1,3,3,2,2,2,0 @: 6A00
 .byte 2,2,0,2,1,3,3,3,1,1,1,0,0,3,3,0,2,0,0,0,0,1,0,3,3,0,0,1,2,3,0,3 @: 6A20
 .byte 3,3,1,0,2,2,2,3,2,3,0,1,3,1,2,0,2,0,3,2,2,3,3,2,3,0,0,2,0,0,3,2 @: 6A40
 .byte 1,3,2,1,2,1,0,3,2,0,0,0,1,2,3,3,0,3,0,1,3,1,1,1,3,1,1,1,3,1,0,1 @: 6A60
 .byte 1,0,2,2,3,0,3,2,0,2,1,0,1,2,0,2,2,2,3,3,0,3,3,2,3,3,3,3,0,1,1,0 @: 6A80
 .byte 3,0,0,0,1,2,2,3,3,1,1,3,0,2,2,3,2,2,0,1,0,2,0,2,2,0,3,0,3,2,2,2 @: 6AA0
 .byte 1,2,1,3,1,0,0,1,3,2,2,1,2,0,2,2,1,1,1,1,3,0,1,0,2,1,1,0,3,3,2,1 @: 6AC0
 .byte 3,1,1,0,1,1,3,0,2,3,0,3,1,2,2,3,0,0,3,0,1,3,2,2,0,3,3,3,3,1,1,1 @: 6AE0
 .byte 1,2,2,3,0,2,0,0,2,1,3,0,2,0,1,0,0,3,2,2,2,1,1,1,2,1,0,3,0,1,2,0 @: 6B00
 .byte 0,0,0,2,1,3,0,0,0,1,0,0,3,1,1,1,1,3,2,1,0,1,3,1,3,3,0,0,2,2,1,1 @: 6B20
 .byte 3,2,3,3,1,3,0,0,0,3,3,1,3,1,3,3,1,2,0,2,2,1,0,2,1,0,3,0,1,1,3,2 @: 6B40
 .byte 1,2,3,2,2,1,3,0,0,0,2,2,3,2,2,1,0,2,3,0,0,0,1,3,0,2,1,0,3,2,1,3 @: 6B60
 .byte 0,0,0,1,1,1,1,1,3,2,3,1,0,1,3,1,1,2,1,1,2,0,2,2,2,0,1,1,3,0,0,1 @: 6B80
 .byte 0,1,0,2,2,3,2,2,1,0,0,2,0,0,2,3,0,1,0,2,0,1,0,2,3,0,3,0,1,2,2,2 @: 6BA0
 .byte 0,2,2,1,3,3,0,0,1,0,2,0,0,3,2,2,3,3,2,1,3,1,2,0,0,0,0,1,1,0,2,1 @: 6BC0
 .byte 2,1,3,2,1,1,0,0,2,3,1,3,1,1,1,0,1,0,3,1,1,1,3,1,3,2,1,1,0,0,2,2 @: 6BE0
 .byte 0,1,2,2,3,3,3,3,1,3,3,2,1,1,3,1,3,2,0,3,0,2,2,0,1,1,1,0,3,0,0,3 @: 6C00
 .byte 3,2,1,0,3,1,2,3,1,3,3,0,3,2,1,3,0,0,2,1,1,1,2,0,2,3,0,1,0,1,0,3 @: 6C20
 .byte 0,2,3,2,3,0,2,2,3,0,3,0,1,2,0,3,3,1,2,3,0,3,0,0,2,0,1,0,2,0,0,0 @: 6C40
 .byte 3,0,2,1,1,1,0,0,2,0,1,1,2,3,2,0,0,1,2,1,1,2,0,1,1,0,1,3,0,3,2,3 @: 6C60
 .byte 2,0,3,0,3,2,1,2,2,0,3,3,2,1,3,3,2,2,1,1,1,2,0,3,1,1,3,3,1,1,3,1 @: 6C80
 .byte 1,2,3,3,2,1,1,1,3,2,1,0,1,0,0,2,3,2,0,1,3,1,0,3,3,3,2,0,3,2,0,2 @: 6CA0
 .byte 2,1,2,2,2,0,2,3,0,3,2,3,3,1,0,0,2,1,3,3,2,1,3,3,1,2,3,0,2,3,1,1 @: 6CC0
 .byte 1,3,1,0,3,0,0,2,0,2,3,3,3,0,1,0,0,3,1,1,1,1,1,3,2,0,3,2,3,3,0,0 @: 6CE0
 .byte 1,1,3,0,3,0,0,1,3,2,0,0,2,2,2,0,0,1,2,1,3,1,0,2,3,0,3,1,0,0,2,2 @: 6D00
 .byte 1,2,3,2,2,2,1,2,0,2,0,1,0,2,2,2,1,1,3,3,0,3,1,2,1,0,2,1,3,2,3,3 @: 6D20
 .byte 3,0,3,0,1,2,2,2,1,0,1,1,2,1,1,3,0,0,1,1,0,3,3,0,0,2,3,2,0,1,1,1 @: 6D40
 .byte 1,1,2,3,3,1,0,1,1,3,1,0,2,0,2,3,1,1,2,3,3,2,3,1,0,0,2,3,3,2,2,1 @: 6D60
 .byte 2,0,3,0,2,2,3,0,2,1,0,1,0,3,2,2,2,1,3,1,0,0,3,0,1,3,3,1,3,2,3,1 @: 6D80
 .byte 1,0,1,0,0,3,2,0,0,0,0,2,3,3,3,2,2,1,0,3,2,2,1,1,3,2,1,0,0,3,2,1 @: 6DA0
 .byte 2,2,1,3,2,1,0,2,1,0,3,1,1,1,0,2,0,0,1,2,2,3,2,3,1,2,2,2,3,0,0,2 @: 6DC0
 .byte 2,1,1,3,1,0,2,3,0,2,0,0,0,2,1,2,3,0,0,0,0,1,3,3,0,3,3,3,3,0,0,2 @: 6DE0
 .byte 2,2,3,0,3,3,3,2,1,0,1,2,3,3,3,0,1,2,1,1,1,3,1,2,2,0,2,2,2,1,1,0 @: 6E00
 .byte 2,1,2,2,2,2,0,3,3,3,1,0,1,1,0,1,0,2,3,0,0,0,3,1,2,1,0,2,1,3,2,1 @: 6E20
 .byte 2,2,1,1,2,3,3,2,2,0,0,1,0,3,2,2,2,0,1,1,3,1,0,2,0,1,0,1,0,0,3,2 @: 6E40
 .byte 0,1,2,2,1,0,0,3,3,1,2,3,1,0,1,0,1,3,3,2,3,2,2,1,1,2,2,1,1,2,2,0 @: 6E60
 .byte 3,3,1,3,1,2,2,3,3,3,0,1,2,2,2,0,1,1,3,2,0,2,0,3,3,1,2,1,2,1,2,2 @: 6E80
 .byte 0,1,0,1,1,3,2,3,1,2,3,0,0,3,1,1,3,3,1,3,3,1,2,0,3,3,1,1,1,3,3,2 @: 6EA0
 .byte 0,1,0,2,3,0,2,1,0,3,0,0,0,0,2,1,2,3,3,1,1,1,0,2,1,0,2,1,2,0,1,2 @: 6EC0
 .byte 2,2,3,1,1,0,1,1,1,3,3,3,1,3,3,1,0,3,3,1,0,1,1,3,2,1,0,0,0,3,0,0 @: 6EE0
 .byte 3,0,3,1,3,0,0,1,0,1,2,0,2,0,1,2,3,0,2,0,2,2,2,3,2,2,1,3,0,2,1,0 @: 6F00
 .byte 0,1,0,0,1,0,1,0,3,3,2,2,1,0,1,0,2,3,0,0,1,0,2,2,1,1,0,0,2,3,1,3 @: 6F20
 .byte 0,2,1,0,1,0,2,2,1,3,0,2,3,0,0,2,3,0,1,3,2,1,2,0,1,0,1,0,3,0,1,3 @: 6F40
 .byte 1,3,1,2,0,0,1,3,0,3,1,1,3,1,1,1,3,3,2,1,2,1,2,2,1,3,2,2,1,3,3,2 @: 6F60
 .byte 1,0,3,3,2,3,2,3,1,1,1,2,0,0,1,3,0,0,2,0,1,0,0,1,1,0,1,3,2,2,3,1 @: 6F80
 .byte 2,0,2,0,1,2,2,0,1,3,2,1,2,0,3,3,3,1,2,2,2,3,0,2,2,1,0,1,0,3,2,2 @: 6FA0
 .byte 3,2,2,0,0,3,1,3,1,2,3,2,2,3,3,3,3,0,1,2,1,1,0,3,2,0,1,3,2,2,0,0 @: 6FC0
 .byte 2,0,1,1,3,0,1,1,3,3,0,1,1,2,1,1,1,2,0,1,1,1,1,0,2,3,0,3,0,0,2,2 @: 6FE0
 .byte 1,3,3,0,0,1,1,0,3,0,3,2,0,2,2,1,3,0,2,2,1,0,1,0,2,1,0,1,0,0,3,1 @: 7000
 .byte 0,3,3,1,1,3,2,0,2,3,0,2,2,3,0,3,0,1,0,0,1,3,3,0,1,2,1,3,3,3,0,3 @: 7020
 .byte 1,1,3,2,3,1,3,1,3,0,1,3,1,1,1,2,2,1,0,1,0,0,1,0,1,1,1,2,3,3,2,3 @: 7040
 .byte 2,2,2,3,3,0,2,1,0,2,3,0,2,3,1,0,1,1,3,2,3,3,3,2,2,2,1,1,0,0,1,0 @: 7060
 .byte 3,2,2,2,1,2,0,3,3,1,3,2,3,0,2,3,2,0,1,1,0,2,2,3,3,1,0,0,3,3,3,3 @: 7080
 .byte 0,1,1,2,3,2,1,1,3,3,0,1,1,1,1,3,0,0,2,1,1,1,2,3,0,2,2,2,2,2,1,0 @: 70A0
 .byte 0,3,3,3,3,3,2,0,0,3,1,2,2,0,3,0,0,1,2,0,1,1,1,2,0,2,2,1,2,3,1,0 @: 70C0
 .byte 2,0,2,2,2,2,1,1,3,0,0,1,2,1,1,2,2,0,1,3,3,2,2,3,3,2,3,1,3,2,1,0 @: 70E0
 .byte 1,1,1,3,3,3,2,2,2,3,0,3,3,2,2,0,3,1,2,0,1,0,3,0,3,3,2,1,3,2,1,3 @: 7100
 .byte 3,1,1,0,1,1,3,2,1,3,2,2,1,1,2,3,3,1,0,3,1,3,2,3,1,3,2,3,3,3,3,0 @: 7120
 .byte 1,0,1,0,2,0,0,1,2,3,2,0,2,1,0,1,0,0,3,0,1,1,1,0,1,3,0,2,2,2,3,1 @: 7140
 .byte 3,2,1,3,3,0,2,2,2,2,1,3,1,1,0,3,1,1,3,1,1,2,0,1,1,3,2,0,3,3,0,2 @: 7160
 .byte 0,2,1,3,0,0,1,3,1,3,1,3,0,2,1,3,2,3,2,0,3,2,0,1,2,1,2,3,1,2,0,3 @: 7180
 .byte 0,2,0,1,3,3,0,2,3,2,2,1,3,0,2,0,3,2,2,1,0,2,3,0,3,1,0,0,1,2,1,1 @: 71A0
 .byte 0,0,1,3,3,0,1,1,0,0,3,1,1,3,3,0,0,1,3,3,1,0,2,1,0,1,0,2,3,1,1,2 @: 71C0
 .byte 3,0,0,0,2,1,1,2,2,0,2,3,2,3,3,0,1,1,2,2,2,3,0,0,1,0,2,0,0,3,1,2 @: 71E0
 .byte 2,1,2,1,0,1,1,2,3,1,2,1,3,3,1,1,1,1,3,3,1,2,0,0,2,0,2,0,0,2,2,0 @: 7200
 .byte 3,3,3,0,2,0,2,2,3,3,2,1,0,0,1,3,3,3,0,2,2,3,0,3,1,2,0,3,1,2,3,1 @: 7220
 .byte 3,0,3,0,1,0,0,0,0,1,0,2,3,3,1,2,0,1,2,3,1,3,2,3,1,0,3,0,3,2,1,3 @: 7240
 .byte 0,2,2,2,0,2,3,1,0,3,2,0,1,2,1,2,2,0,0,2,0,2,3,1,2,1,3,1,3,2,0,0 @: 7260
 .byte 2,2,3,2,2,1,2,1,1,2,1,0,2,3,0,1,2,3,1,0,1,1,0,2,3,2,2,2,1,1,1,0 @: 7280
 .byte 3,1,2,3,0,1,1,1,3,2,1,0,0,1,0,1,1,3,0,3,1,0,1,3,3,3,3,0,3,0,2,0 @: 72A0
 .byte 2,2,2,3,0,3,0,1,1,1,0,3,1,0,1,1,0,2,3,2,1,1,3,3,0,1,3,0,0,1,0,0 @: 72C0
 .byte 2,0,2,1,0,2,0,3,0,1,1,0,1,3,3,1,3,0,3,2,0,1,1,3,1,2,0,1,3,2,2,3 @: 72E0
 .byte 1,0,1,1,3,2,2,0,3,2,0,3,3,1,3,1,1,3,2,0,0,2,0,0,0,1,0,3,0,0,1,1 @: 7300
 .byte 3,0,0,2,0,3,0,0,3,0,2,1,0,3,2,1,1,0,3,1,2,1,0,2,0,1,0,1,3,3,3,2 @: 7320
 .byte 3,0,2,3,1,3,0,3,3,2,2,0,3,0,0,0,3,2,3,3,0,1,3,3,1,1,1,1,2,1,1,3 @: 7340
 .byte 0,1,2,0,2,3,2,0,3,0,0,0,3,1,2,0,0,3,1,3,2,2,1,3,1,0,2,1,0,1,3,3 @: 7360
 .byte 1,3,1,0,2,3,3,2,3,1,2,3,1,0,3,2,0,2,0,3,3,3,2,1,1,0,0,0,0,3,0,0 @: 7380
 .byte 3,0,2,1,1,3,2,0,0,0,3,1,3,3,2,3,2,0,1,2,0,2,1,0,2,3,0,3,0,1,3,2 @: 73A0
 .byte 2,1,0,3,2,1,3,3,3,1,1,1,0,1,2,1,1,2,0,2,1,3,0,0,3,3,0,0,3,2,3,2 @: 73C0
 .byte 0,2,0,0,1,2,2,1,3,0,0,0,3,0,2,2,0,0,0,3,2,1,2,0,3,2,0,1,2,2,0,0 @: 73E0
 .byte 0,1,0,0,1,3,1,3,3,2,2,3,0,3,0,2,3,0,1,3,1,1,0,2,3,1,3,0,0,2,0,0 @: 7400
 .byte 0,0,1,0,3,2,2,0,0,0,0,2,2,3,0,3,2,2,1,0,3,0,3,2,3,0,0,0,1,1,1,3 @: 7420
 .byte 2,2,1,3,1,3,0,2,2,3,2,1,0,3,2,0,0,3,0,2,2,3,3,0,3,1,0,3,3,2,1,0 @: 7440
 .byte 1,1,1,3,1,1,3,3,1,1,0,1,0,0,1,2,3,0,1,1,3,1,0,1,1,2,3,1,2,3,2,1 @: 7460
 .byte 0,0,3,3,2,2,1,1,3,0,2,3,2,0,0,0,1,3,1,3,2,3,3,2,0,0,0,2,0,0,1,3 @: 7480
 .byte 1,0,1,0,3,3,3,2,2,3,3,1,3,0,2,0,0,0,0,3,2,2,2,0,1,0,0,2,0,1,2,2 @: 74A0
 .byte 0,1,1,2,0,2,3,2,2,0,0,1,0,2,2,0,1,0,0,3,3,2,2,0,3,0,1,2,1,3,0,2 @: 74C0
 .byte 2,2,1,0,1,1,3,2,1,0,2,0,2,1,1,0,2,1,3,3,1,0,2,0,3,3,2,1,2,3,3,2 @: 74E0
 .byte 2,3,3,3,1,3,1,0,2,2,3,1,0,1,1,0,2,0,3,2,2,3,0,0,0,1,1,0,3,2,3,1 @: 7500
 .byte 2,1,3,3,0,3,0,2,2,0,2,1,2,2,0,3,2,0,1,2,1,0,2,1,1,3,0,2,3,0,1,1 @: 7520
 .byte 3,0,1,0,3,1,1,0,2,1,3,2,3,1,0,3,3,0,3,3,3,3,0,1,1,3,3,2,3,0,3,0 @: 7540
 .byte 0,2,0,1,0,3,2,0,3,3,1,0,0,0,0,3,3,2,0,3,1,1,0,2,3,3,2,2,2,1,0,0 @: 7560
 .byte 1,1,0,2,0,1,3,0,2,3,3,1,1,1,0,1,2,0,2,1,2,2,0,2,1,2,0,1,1,3,2,0 @: 7580
 .byte 0,3,1,0,1,3,2,2,0,0,0,1,0,1,1,3,3,1,2,0,2,2,2,2,2,2,0,2,1,0,1,0 @: 75A0
 .byte 3,0,3,2,0,2,2,1,2,2,1,0,1,0,1,3,1,2,1,0,1,0,2,0,2,1,0,0,3,2,0,0 @: 75C0
 .byte 2,1,2,1,1,0,2,0,1,2,3,1,0,1,0,1,1,3,3,0,3,0,3,2,0,1,1,2,1,2,3,1 @: 75E0
 .byte 3,1,3,3,1,3,1,0,0,2,1,3,2,1,0,1,0,3,3,2,1,3,1,3,1,2,2,0,3,0,1,2 @: 7600
 .byte 2,3,3,1,0,1,0,1,1,3,0,1,2,1,2,0,3,1,1,1,3,3,0,2,0,2,1,1,2,2,1,0 @: 7620
 .byte 1,3,1,3,2,0,3,2,0,0,1,2,2,1,2,0,3,2,1,2,1,2,0,3,1,1,1,0,3,2,0,2 @: 7640
 .byte 1,1,2,2,2,1,3,2,1,3,1,1,0,0,3,2,1,3,1,1,0,1,2,3,2,2,2,1,1,1,3,3 @: 7660
 .byte 2,1,3,0,3,3,2,3,0,2,3,0,0,0,1,1,0,3,0,0,2,1,1,1,3,0,2,1,0,3,2,0 @: 7680
 .byte 2,0,2,2,1,2,3,2,2,3,0,2,2,1,0,0,0,0,2,2,1,1,0,1,0,0,0,1,2,1,0,1 @: 76A0
 .byte 2,3,1,0,1,3,0,1,2,1,3,3,0,0,3,0,1,3,1,0,1,2,1,3,3,0,3,2,1,2,3,2 @: 76C0
 .byte 3,1,0,0,0,0,1,1,0,2,3,0,1,3,2,3,0,1,3,3,3,3,3,2,1,3,1,2,2,2,2,2 @: 76E0
 .byte 3,3,0,2,2,0,0,1,1,0,1,0,3,0,0,1,2,3,0,0,3,1,0,3,3,1,1,0,3,0,3,0 @: 7700
 .byte 2,1,2,2,2,1,2,3,3,1,0,2,1,0,3,3,3,2,0,1,1,2,1,3,1,2,1,3,2,3,3,3 @: 7720
 .byte 3,2,3,0,2,0,0,3,1,0,1,1,0,0,3,0,0,3,2,2,0,2,2,1,1,1,1,3,3,1,1,0 @: 7740
 .byte 3,0,0,1,0,1,1,3,1,1,3,1,0,1,0,3,0,1,0,0,2,3,2,2,3,2,0,3,1,3,3,1 @: 7760
 .byte 2,2,2,0,3,2,2,0,3,1,1,1,0,0,0,1,0,3,0,2,3,3,3,0,0,1,2,2,0,1,2,2 @: 7780
 .byte 1,3,1,3,2,1,3,2,2,3,0,3,2,2,2,0,2,0,3,1,0,0,1,0,0,2,0,0,2,1,1,2 @: 77A0
 .byte 1,2,1,1,2,3,3,1,3,1,1,1,0,2,0,1,0,1,1,0,2,2,1,2,1,3,1,1,3,3,1,1 @: 77C0
 .byte 2,0,0,2,3,0,2,2,3,0,0,0,2,2,1,3,2,1,2,2,1,2,0,3,0,1,3,3,1,2,3,2 @: 77E0
 .byte 2,0,0,1,2,3,3,1,1,1,2,3,3,0,2,2,2,1,2,0,3,3,3,0,3,3,0,3,3,2,0,3 @: 7800
 .byte 2,3,3,0,0,1,1,3,3,1,2,3,3,3,2,2,3,3,2,3,1,3,0,1,0,2,3,3,1,3,1,2 @: 7820
 .byte 0,1,0,2,3,1,2,1,2,1,0,0,0,0,1,0,0,2,0,3,3,3,1,0,3,1,1,2,0,2,1,2 @: 7840
 .byte 0,0,3,3,2,2,3,2,2,1,0,2,1,3,0,3,2,1,0,3,0,3,3,1,2,0,3,0,1,2,0,3 @: 7860
 .byte 3,0,2,1,2,1,1,0,1,1,2,1,3,1,3,1,0,1,3,2,0,1,0,1,1,1,2,0,1,3,2,2 @: 7880
 .byte 1,2,3,0,1,1,3,1,3,2,2,2,1,2,3,3,1,3,2,3,2,2,1,0,3,2,2,0,0,2,1,0 @: 78A0
 .byte 3,2,1,1,3,1,1,1,2,3,3,1,1,0,2,3,3,3,3,2,2,3,0,3,0,0,2,0,0,1,0,1 @: 78C0
 .byte 0,0,2,2,2,3,2,2,1,0,2,0,0,2,0,2,2,2,2,2,0,2,2,0,1,2,2,1,1,1,2,3 @: 78E0
 .byte 0,3,3,0,2,0,0,0,1,3,0,3,0,2,1,0,3,0,3,3,2,3,3,0,3,0,3,1,0,0,2,1 @: 7900
 .byte 1,1,3,2,1,2,0,3,3,1,2,3,1,2,2,3,2,2,3,1,2,1,1,0,1,1,3,1,1,0,0,2 @: 7920
 .byte 2,3,1,2,1,1,1,1,1,3,1,3,3,3,0,0,3,3,2,1,0,3,1,1,1,0,2,1,3,2,1,0 @: 7940
 .byte 0,0,0,3,0,3,0,1,1,0,0,0,1,1,0,0,2,0,2,3,0,1,2,2,0,3,2,0,3,3,1,2 @: 7960
 .byte 0,0,1,1,3,0,3,3,1,1,0,2,2,2,1,3,2,1,0,1,2,1,3,2,3,0,1,1,2,3,1,2 @: 7980
 .byte 1,1,0,0,2,0,3,1,0,3,0,2,2,2,2,0,1,1,2,3,3,0,1,0,1,3,0,0,1,1,0,2 @: 79A0
 .byte 0,1,3,3,1,0,0,2,0,3,3,3,2,2,2,0,1,1,0,2,1,2,1,2,1,3,3,3,0,2,0,1 @: 79C0
 .byte 2,0,3,2,0,3,1,3,2,1,0,2,0,1,0,1,2,1,0,2,3,0,3,1,0,2,1,3,2,3,1,1 @: 79E0
 .byte 0,0,0,1,3,0,3,2,0,0,0,0,3,3,1,3,1,3,0,3,1,0,2,0,1,2,2,0,1,1,1,2 @: 7A00
 .byte 0,3,2,2,0,3,1,3,3,3,0,3,0,3,3,3,1,3,1,3,3,0,2,1,1,3,1,0,0,0,0,3 @: 7A20
 .byte 1,3,2,2,2,1,3,3,1,1,2,0,2,3,3,1,2,3,0,1,2,2,1,3,0,1,3,2,0,1,0,3 @: 7A40
 .byte 1,0,3,2,3,3,2,0,3,1,2,3,0,3,0,1,3,1,3,1,3,1,1,3,2,3,2,0,0,0,1,1 @: 7A60
 .byte 3,0,1,3,2,2,3,2,0,1,0,1,1,1,0,2,3,2,2,0,2,1,0,2,3,1,0,2,3,3,1,3 @: 7A80
 .byte 1,0,0,3,3,3,1,3,0,1,0,1,0,0,0,0,0,1,0,1,3,0,1,0,1,1,3,0,0,3,0,2 @: 7AA0
 .byte 2,2,1,1,3,2,3,0,0,0,1,3,2,3,2,1,0,2,2,3,3,3,1,0,0,1,0,0,1,0,1,0 @: 7AC0
 .byte 0,1,0,0,2,2,2,2,0,2,1,1,0,0,1,2,1,1,3,0,0,3,1,3,1,1,2,3,0,3,1,2 @: 7AE0
 .byte 2,1,3,2,0,1,2,3,1,0,2,2,1,2,3,1,3,3,3,1,2,2,2,2,1,0,1,2,0,3,0,3 @: 7B00
 .byte 2,0,3,1,2,3,0,3,1,2,0,2,1,2,0,1,3,1,2,2,2,3,0,3,1,1,0,3,2,1,2,2 @: 7B20
 .byte 0,0,3,3,0,3,3,2,1,3,0,2,0,3,2,3,2,0,0,1,2,0,3,3,1,1,1,3,2,3,1,2 @: 7B40
 .byte 3,0,2,2,0,3,0,3,3,0,3,1,0,2,0,1,1,3,3,2,3,2,1,3,0,2,3,1,2,2,3,0 @: 7B60
 .byte 2,2,3,0,1,3,3,1,3,1,2,3,3,1,0,3,0,2,2,1,1,0,2,2,3,1,2,2,0,1,1,3 @: 7B80
 .byte 1,2,0,2,0,0,0,3,1,1,0,1,1,1,1,3,0,2,3,0,3,0,2,1,1,2,0,2,3,1,1,2 @: 7BA0
 .byte 3,2,0,2,1,2,0,2,2,2,1,2,3,0,3,3,1,1,2,0,1,3,0,3,2,0,2,1,1,2,2,1 @: 7BC0
 .byte 0,1,1,3,3,1,1,0,1,1,0,0,3,2,0,3,2,0,2,0,1,1,0,0,1,0,3,0,0,3,0,0 @: 7BE0
 .byte 3,3,2,3,2,1,0,1,0,1,1,0,2,1,0,0,1,3,2,2,0,0,3,2,0,3,1,3,3,3,1,0 @: 7C00
 .byte 1,2,1,3,3,3,0,0,2,3,3,0,0,2,3,2,1,0,0,2,0,1,0,1,0,0,1,0,0,1,0,3 @: 7C20
 .byte 0,2,1,3,3,3,1,3,3,2,0,0,0,0,2,3,0,2,0,2,0,0,2,2,2,1,1,0,3,3,3,0 @: 7C40
 .byte 0,2,2,0,2,1,0,0,3,3,2,2,2,0,1,2,3,1,3,3,1,2,0,3,0,0,1,3,1,0,3,0 @: 7C60
 .byte 3,0,1,3,3,1,2,0,2,2,1,2,2,3,0,0,3,1,2,3,0,2,0,1,0,1,3,1,2,1,1,2 @: 7C80
 .byte 0,0,0,2,3,0,3,2,3,0,1,1,3,1,3,3,0,2,1,3,0,1,1,1,1,3,0,2,2,0,0,0 @: 7CA0
 .byte 0,2,0,2,0,0,2,1,2,2,2,2,1,0,0,1,1,2,1,2,1,3,2,3,0,0,3,3,1,0,2,2 @: 7CC0
 .byte 0,0,2,0,3,2,1,3,2,0,0,1,1,1,2,3,0,0,0,3,0,0,3,0,2,2,2,3,3,3,3,3 @: 7CE0
 .byte 2,0,0,1,2,3,0,1,0,2,3,1,3,2,1,1,0,3,1,2,0,2,0,1,1,0,2,2,0,3,1,2 @: 7D00
 .byte 1,0,3,2,2,1,0,1,1,0,1,3,3,0,1,0,3,3,2,2,3,2,3,1,2,0,1,0,0,3,0,3 @: 7D20
 .byte 0,0,3,3,1,0,1,1,0,2,0,0,1,1,2,1,0,0,3,1,0,2,0,0,0,3,2,1,1,0,2,1 @: 7D40
 .byte 1,2,3,0,2,2,1,0,0,3,1,1,2,2,3,3,3,3,2,2,3,1,1,2,3,3,1,0,3,0,3,3 @: 7D60
 .byte 0,2,2,1,1,2,3,3,2,1,2,3,3,2,2,0,1,2,3,3,1,3,2,3,1,2,0,3,3,0,1,3 @: 7D80
 .byte 2,2,2,2,3,2,1,1,2,2,2,0,2,0,0,0,2,3,0,3,1,0,0,2,2,0,3,3,2,2,0,0 @: 7DA0
 .byte 1,0,2,3,3,3,0,1,1,2,0,2,0,2,2,1,0,0,3,3,2,3,2,1,3,0,3,0,0,2,1,0 @: 7DC0
 .byte 1,1,3,3,1,3,3,0,2,2,3,0,1,0,0,3,1,2,1,3,1,1,3,2,3,2,0,1,0,2,2,2 @: 7DE0
 .byte 3,0,0,0,0,1,0,3,0,1,2,0,1,0,0,3,1,3,1,0,0,0,3,1,2,1,3,3,3,1,2,0 @: 7E00
 .byte 0,1,1,2,0,1,0,3,2,2,1,3,3,2,2,0,1,2,2,3,2,3,3,3,1,1,2,3,2,0,3,1 @: 7E20
 .byte 1,3,1,2,2,3,3,1,2,3,0,2,1,3,2,1,1,3,2,0,2,3,2,3,0,0,2,3,1,0,3,3 @: 7E40
 .byte 3,1,2,1,0,2,1,2,3,3,1,2,0,2,2,2,0,1,1,0,1,2,0,1,0,2,1,1,3,1,0,3 @: 7E60
 .byte 1,0,1,1,1,2,0,0,2,3,2,0,1,0,3,1,2,3,3,0,1,1,3,0,3,3,3,0,2,0,1,3 @: 7E80
 .byte 0,2,3,0,2,1,3,0,1,1,3,1,1,3,3,1,0,2,0,1,0,2,2,2,0,3,1,2,1,2,1,3 @: 7EA0
 .byte 3,3,0,2,1,0,2,3,3,0,2,3,1,1,3,0,3,0,3,0,2,1,0,0,1,2,3,2,3,3,1,0 @: 7EC0
 .byte 1,1,1,1,0,2,1,1,0,0,1,2,1,2,3,0,1,3,1,3,2,2,2,2,0,1,0,1,0,3,1,2 @: 7EE0
 .byte 3,1,2,2,1,2,0,0,3,0,2,1,1,1,1,0,2,1,2,3,2,1,2,0,2,3,0,2,2,1,2,3 @: 7F00
 .byte 0,0,2,1,0,0,2,0,3,2,0,3,0,3,0,1,3,2,1,3,3,1,1,2,1,3,0,3,3,2,2,3 @: 7F20
 .byte 2,2,0,0,3,1,3,2,0,0,0,3,0,1,0,1,0,1,3,2,3,0,0,3,2,2,3,0,1,2,1,2 @: 7F40
 .byte 3,2,0,2,0,1,3,3,3,0,1,0,1,0,1,0,3,2,0,2,3,2,0,3,1,1,0,3,0,3,3,3 @: 7F60
 .byte 1,2,2,2,2,3,0,3,2,2,1,0,0,0,2,2,1,2,3,3,3,1,3,0,0,3,2,3,1,1,2,3 @: 7F80
 .byte 2,2,3,2,2,2,0,2,0,1,3,3,3,0,2,3,0,2,0,1,2,3,3,1,2,1,1,0,0,3,1,2 @: 7FA0
 .byte 3,3,1,0,1,3,1,2,1,1,2,2,3,1,1,3,3,1,3,3,1,1,3,1,2,0,0,2,3,1,2,2 @: 7FC0
 .byte 1,3,3,3,3,2,3,1,3,3,1,1,0,0,3,0,2,3,2,2,1,3,1,3,0,3,3,2,2,2,2,2 @: 7FE0
 .byte 3,0,3,2,3,1,0,3,1,1,1,3,3,3,3,2,0,0,2,2,2,1,2,2,2,3,2,2,3,1,2,1 @: 8000
 .byte 1,2,2,0,2,3,3,3,1,3,2,3,0,3,2,1,1,1,2,1,3,0,1,3,1,2,3,2,1,2,0,1 @: 8020
 .byte 2,3,3,2,1,1,1,3,0,3,2,0,0,3,0,2,2,0,2,3,3,1,3,1,3,2,1,1,2,3,1,2 @: 8040
 .byte 2,0,2,0,2,1,2,3,0,3,2,3,3,2,0,3,2,3,2,2,1,3,1,2,0,0,3,0,3,2,2,1 @: 8060
 .byte 2,3,3,1,0,0,0,1,0,0,3,1,1,1,2,1,1,0,0,3,0,3,0,0,2,2,0,2,0,3,3,2 @: 8080
 .byte 3,1,3,2,2,3,2,3,1,0,0,3,3,2,1,1,3,0,2,0,0,3,3,2,2,3,3,0,3,3,3,2 @: 80A0
 .byte 2,2,2,1,3,0,1,1,3,0,3,3,0,1,3,2,0,1,2,1,0,2,0,3,3,1,2,3,3,1,2,2 @: 80C0
 .byte 3,1,0,0,3,3,2,0,0,3,2,2,0,1,2,0,1,0,3,2,0,0,2,1,0,1,1,2,0,3,1,2 @: 80E0
 .byte 1,3,1,0,1,0,1,2,3,2,1,3,2,2,0,0,3,2,2,3,2,1,0,0,0,1,3,2,2,1,1,3 @: 8100
 .byte 1,2,3,1,2,0,1,1,0,0,3,0,1,2,2,0,3,0,2,0,0,3,3,2,3,2,3,3,1,3,0,3 @: 8120
 .byte 3,3,2,0,2,3,0,3,2,2,3,0,0,0,3,0,3,3,0,1,2,0,3,1,3,3,0,3,0,2,0,3 @: 8140
 .byte 1,2,1,0,2,2,3,0,2,3,3,2,1,2,3,0,3,0,3,0,0,3,0,0,2,3,3,0,2,2,2,1 @: 8160
 .byte 0,2,0,1,0,2,1,2,1,1,3,3,1,2,2,1,2,1,0,3,2,0,1,1,2,3,0,3,3,1,1,1 @: 8180
 .byte 0,1,1,1,1,0,2,1,2,1,3,3,3,1,3,0,1,2,2,3,3,1,0,2,3,2,0,0,3,1,1,0 @: 81A0
 .byte 0,1,3,2,0,1,1,3,1,0,1,2,0,3,3,0,0,2,0,3,0,2,3,1,0,1,3,2,0,0,3,3 @: 81C0
 .byte 3,1,2,0,0,1,2,2,0,3,0,3,3,2,3,0,2,1,1,1,2,0,1,1,3,3,1,3,1,3,1,2 @: 81E0
 .byte 3,2,1,1,3,3,1,2,3,3,3,2,2,1,0,1,0,3,3,1,1,1,1,0,3,0,3,2,0,0,2,3 @: 8200
 .byte 1,0,1,2,2,1,2,0,1,2,0,0,0,0,1,2,3,2,3,1,0,3,1,1,1,3,2,2,2,1,2,2 @: 8220
 .byte 3,1,2,3,0,3,3,3,3,2,0,0,2,2,2,1,1,3,0,2,2,1,2,3,2,3,3,1,0,2,1,2 @: 8240
 .byte 1,1,3,0,0,1,0,3,0,0,2,2,0,3,3,0,0,2,0,0,0,0,0,3,1,3,1,0,3,2,1,1 @: 8260
 .byte 1,0,2,3,3,3,1,1,2,2,1,2,2,3,2,2,1,3,3,3,0,2,3,2,1,3,1,3,3,1,2,2 @: 8280
 .byte 0,0,2,0,1,1,0,0,0,0,0,2,1,3,2,1,3,1,1,1,2,1,2,1,3,1,1,3,0,2,3,3 @: 82A0
 .byte 2,0,2,0,2,0,1,3,1,2,3,0,2,0,0,1,3,2,1,0,1,2,3,3,3,2,1,0,2,3,1,0 @: 82C0
 .byte 0,2,1,3,0,1,3,2,0,3,3,0,0,3,2,1,1,2,2,2,3,0,3,0,3,3,1,1,3,1,3,2 @: 82E0
 .byte 2,1,1,3,1,3,2,3,1,2,3,1,1,3,3,3,0,3,3,0,3,0,2,2,2,1,3,0,2,0,1,1 @: 8300
 .byte 3,1,3,1,3,3,0,0,0,1,2,3,3,0,2,3,0,0,0,1,2,3,3,0,3,1,1,0,2,3,1,2 @: 8320
 .byte 3,0,0,3,1,1,3,3,0,2,2,0,3,2,0,0,2,3,2,3,1,0,1,0,2,0,2,3,1,1,3,2 @: 8340
 .byte 0,3,1,3,1,0,2,3,0,0,2,2,3,3,2,1,3,1,2,3,1,0,1,3,2,0,0,0,1,2,1,2 @: 8360
 .byte 0,2,0,0,0,3,2,3,2,3,1,1,3,1,1,0,1,0,2,1,1,3,3,2,3,1,1,1,0,2,0,0 @: 8380
 .byte 1,2,3,2,2,3,0,3,2,2,2,3,0,1,3,0,0,1,3,1,2,0,2,2,2,3,3,1,0,1,1,3 @: 83A0
 .byte 0,1,1,1,0,0,0,2,1,2,0,1,0,1,0,1,3,1,0,0,1,1,3,1,3,1,1,3,0,3,2,0 @: 83C0
 .byte 2,1,0,2,0,0,3,1,1,2,1,1,3,1,1,2,0,2,3,1,2,2,0,2,1,1,1,3,1,3,0,0 @: 83E0


@:	LDPC parameters 
	
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@:
@:	entry 0: original LDPC bit number (for information only), -1 for end of list
@:	entry 1: offset of the group of 360 bits (45 bytes) in the LDPC input array	 
@:	entry 2: offset of the row number in the intermediate LDPC array
@:	entry 3: initial byte shift after loading, to cope with unaligned access
@:	entry 4: bit shift
@:
@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	.align	 8
ldpc_parameters_n14_neon4:
	.word	  540,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9315,	((LBPR * 2 *  27) + 36) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	32806,	((LBPR * 2 *  44) + 14) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	36046,	((LBPR * 2 *  28) + 11) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1892,	((LBPR * 2 *   6) + 43) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2702,	((LBPR * 2 *  14) + 42) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	43878,	((LBPR * 2 *  20) +	 4) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	44823,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	16609,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	47929,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	27140,	((LBPR * 2 *   4) + 19) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	43880,	((LBPR * 2 *  25) +	 4) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	13911,	((LBPR * 2 *   5) + 32) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	25521,	((LBPR * 2 *   5) + 21) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13642,	((LBPR * 2 *  10) + 32) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	41992,	((LBPR * 2 *  12) +	 6) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	30518,	((LBPR * 2 *  35) + 16) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	38618,	((LBPR * 2 *  24) +	 9) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	29574,	((LBPR * 2 *  41) + 17) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6354,	((LBPR * 2 *  17) + 39) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	42130,	((LBPR * 2 *   9) +	 6) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8515,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	13106,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 8381,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	22152,	((LBPR * 2 *  15) + 24) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	30117,	((LBPR * 2 *   8) + 17) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	32008,	((LBPR * 2 *  14) + 15) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	32818,	((LBPR * 2 *  42) + 14) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	19454,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 7304,	((LBPR * 2 *  29) + 38) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	18510,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	30255,	((LBPR * 2 *   2) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	44296,	((LBPR * 2 *   7) +	 4) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6226,	((LBPR * 2 *   0) + 39) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	12437,	((LBPR * 2 *  12) + 33) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	43757,	((LBPR * 2 *   8) +	 4) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	17028,	((LBPR * 2 *  40) + 29) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	27828,	((LBPR * 2 *   9) + 19) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	26344,	((LBPR * 2 *  12) + 20) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	41734,	((LBPR * 2 *   8) +	 6) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	12980,	((LBPR * 2 *  30) + 33) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	44030,	((LBPR * 2 *  11) +	 4) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	24186,	((LBPR * 2 *  23) + 22) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	27426,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	24997,	((LBPR * 2 *   1) + 21) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	36877,	((LBPR * 2 *  35) + 10) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	25943,	((LBPR * 2 *  10) + 21) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 7583,	((LBPR * 2 *  36) + 38) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	28914,	((LBPR * 2 *   8) + 18) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	44979,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	22435,	((LBPR * 2 *   5) + 24) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	37420,	((LBPR * 2 *  13) + 10) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	24461,	((LBPR * 2 *  34) + 22) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	34991,	((LBPR * 2 *  17) + 12) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	28782,	((LBPR * 2 *   4) + 18) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8937,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	38773,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	40258,	((LBPR * 2 *   7) +	 7) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	14474,	((LBPR * 2 *   2) + 31) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	42014,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	16905,	((LBPR * 2 *  30) + 29) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	42150,	((LBPR * 2 *   6) +	 6) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10021,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	32701,	((LBPR * 2 *   5) + 14) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	24332,	((LBPR * 2 *  36) + 22) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	30947,	((LBPR * 2 *  24) + 16) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	24333,	((LBPR * 2 *  11) + 22) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	35538,	((LBPR * 2 *  25) + 12) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	21634,	((LBPR * 2 *   8) + 25) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	37024,	((LBPR * 2 *   1) + 10) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	30950,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 9350,	((LBPR * 2 *  40) + 36) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	23121,	((LBPR * 2 *   6) + 23) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	40401,	((LBPR * 2 *   4) +	 7) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	20692,	((LBPR * 2 *   1) + 25) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	34192,	((LBPR * 2 *   9) + 13) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	21908,	((LBPR * 2 *  27) + 24) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	39998,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14349,	((LBPR * 2 *  19) + 31) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4494,	((LBPR * 2 *   9) + 40) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	40540,	((LBPR * 2 *   5) +	 7) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8815,	((LBPR * 2 *  33) + 36) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	13541,	((LBPR * 2 *  13) + 32) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	23396,	((LBPR * 2 *  13) + 23) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	19347,	((LBPR * 2 *  16) + 27) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	23802,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  448,	((LBPR * 2 *  37) + 44) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 8548,	((LBPR * 2 *  21) + 37) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11519,	((LBPR * 2 *   2) + 34) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3824,	((LBPR * 2 *   9) + 41) & ~3,  LBPR *  44,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	18405,	((LBPR * 2 *   5) + 28) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20970,	((LBPR * 2 *   8) + 25) & ~3,  LBPR *  45,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	27316,	((LBPR * 2 *  12) + 19) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5041,	((LBPR * 2 *   6) + 40) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	13817,	((LBPR * 2 *   7) + 32) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	48512,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	10308,	((LBPR * 2 *   6) + 35) & ~3,  LBPR *  48,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	17058,	((LBPR * 2 *  11) + 29) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	19354,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  49,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	46489,	((LBPR * 2 *  13) +	 2) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	13550,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	22460,	((LBPR * 2 *  31) + 24) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3156,	((LBPR * 2 *  13) + 42) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	37581,	((LBPR * 2 *   7) + 10) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11392,	((LBPR * 2 *   8) + 34) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	41902,	((LBPR * 2 *   4) +	 6) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	35423,	((LBPR * 2 *  13) + 12) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	36098,	((LBPR * 2 *   0) + 11) & ~3,  LBPR *  53,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	15174,	((LBPR * 2 *  11) + 31) & ~3,  LBPR *  54,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	20439,	((LBPR * 2 *  23) + 26) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	23950,	((LBPR * 2 *  22) + 22) & ~3,  LBPR *  55,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	31105,	((LBPR * 2 *   2) + 16) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	27056,	((LBPR * 2 *  37) + 20) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	28811,	((LBPR * 2 *  22) + 18) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	37992,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *  57,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 8832,	((LBPR * 2 *   6) + 36) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	18148,	((LBPR * 2 *   0) + 28) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	31378,	((LBPR * 2 *  38) + 16) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	38669,	((LBPR * 2 *   2) +	 9) & ~3,  LBPR *  59,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6134,	((LBPR * 2 *   3) + 39) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1140,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11940,	((LBPR * 2 *   7) + 34) & ~3,  LBPR *  60,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2221,	((LBPR * 2 *  39) + 43) & ~3,  LBPR *  61,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4246,	((LBPR * 2 *  11) + 41) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	42587,	((LBPR * 2 *   1) +	 5) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 8297,	((LBPR * 2 *  15) + 37) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	17343,	((LBPR * 2 *  41) + 29) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	42858,	((LBPR * 2 *  14) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	40564,	((LBPR * 2 *   3) +	 7) & ~3,  LBPR *  64,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8974,	((LBPR * 2 *  13) + 36) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	15860,	((LBPR * 2 *   6) + 30) & ~3,  LBPR *  65,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	43130,	((LBPR * 2 *  11) +	 5) & ~3,  LBPR *  65,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	47316,	((LBPR * 2 *  33) +	 1) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5871,	((LBPR * 2 *  13) + 39) & ~3,  LBPR *  66,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	18292,	((LBPR * 2 *  12) + 28) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6547,	((LBPR * 2 *   8) + 39) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12083,	((LBPR * 2 *  38) + 33) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 4793,	((LBPR * 2 *  11) + 40) & ~3,  LBPR *  68,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5739,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *  69,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  879,	((LBPR * 2 *  35) + 44) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	21670,	((LBPR * 2 *  38) + 25) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	28150,	((LBPR * 2 *   8) + 19) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	28826,	((LBPR * 2 *   2) + 18) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7091,	((LBPR * 2 *  26) + 38) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	15057,	((LBPR * 2 *  34) + 31) & ~3,  LBPR *  72,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 8037,	((LBPR * 2 *   4) + 37) & ~3,  LBPR *  72,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	10468,	((LBPR * 2 *   7) + 35) & ~3,  LBPR *  73,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	39223,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR *  73,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	13304,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  74,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	18704,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  74,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	27210,	((LBPR * 2 *   9) + 19) & ~3,  LBPR *  75,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	39225,	((LBPR * 2 *  10) +	 8) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	18031,	((LBPR * 2 *  39) + 28) & ~3,  LBPR *  76,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	46516,	((LBPR * 2 *  12) +	 2) & ~3,  LBPR *  76,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12497,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *  77,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	29642,	((LBPR * 2 *  12) + 17) & ~3,  LBPR *  77,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	15063,	((LBPR * 2 *  26) + 31) & ~3,  LBPR *  78,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	38553,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *  78,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1159,	((LBPR * 2 *  39) + 44) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	18979,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  79,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	45710,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  80,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	45980,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  80,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	29511,	((LBPR * 2 *  11) + 17) & ~3,  LBPR *  81,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	33561,	((LBPR * 2 *  17) + 14) & ~3,  LBPR *  81,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	29782,	((LBPR * 2 *  18) + 17) & ~3,  LBPR *  82,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9937,	((LBPR * 2 *  32) + 35) & ~3,  LBPR *  82,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15608,	((LBPR * 2 *   3) + 30) & ~3,  LBPR *  83,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	44498,	((LBPR * 2 *   5) +	 3) & ~3,  LBPR *  83,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	16419,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	23709,	((LBPR * 2 *  31) + 23) & ~3,  LBPR *  84,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	44500,	((LBPR * 2 *  32) +	 3) & ~3,  LBPR *  85,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  895,	((LBPR * 2 *   8) + 44) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	19526,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  86,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	25736,	((LBPR * 2 *   8) + 21) & ~3,  LBPR *  86,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	32892,	((LBPR * 2 *   7) + 14) & ~3,  LBPR *  87,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8187,	((LBPR * 2 *  24) + 37) & ~3,  LBPR *  87,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	22363,	((LBPR * 2 *   2) + 24) & ~3,  LBPR *  88,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	24928,	((LBPR * 2 *   1) + 22) & ~3,  LBPR *  88,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	16694,	((LBPR * 2 *  12) + 29) & ~3,  LBPR *  89,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	20879,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  89,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6705,	((LBPR * 2 *   8) + 38) & ~3,  LBPR *  90,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 9405,	((LBPR * 2 *  12) + 36) & ~3,  LBPR *  90,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11836,	((LBPR * 2 *  28) + 34) & ~3,  LBPR *  91,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	34921,	((LBPR * 2 *   1) + 12) & ~3,  LBPR *  91,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	39782,	((LBPR * 2 *  29) +	 8) & ~3,  LBPR *  92,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4682,	((LBPR * 2 *  37) + 40) & ~3,  LBPR *  92,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	29523,	((LBPR * 2 *  18) + 17) & ~3,  LBPR *  93,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	46128,	((LBPR * 2 *  42) +	 2) & ~3,  LBPR *  93,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	31009,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  94,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	32224,	((LBPR * 2 *  12) + 15) & ~3,  LBPR *  94,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	24530,	((LBPR * 2 *  41) + 22) & ~3,  LBPR *  95,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	30875,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *  95,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	24261,	((LBPR * 2 *  15) + 22) & ~3,  LBPR *  96,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	35466,	((LBPR * 2 *  12) + 12) & ~3,  LBPR *  96,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	20887,	((LBPR * 2 *  14) + 25) & ~3,  LBPR *  97,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	33172,	((LBPR * 2 *  21) + 14) & ~3,  LBPR *  97,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	46538,	((LBPR * 2 *   7) +	 2) & ~3,  LBPR *  98,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9278,	((LBPR * 2 *  19) + 36) & ~3,  LBPR *  98,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	14004,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  99,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	35739,	((LBPR * 2 *   9) + 12) & ~3,  LBPR *  99,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	22645,	((LBPR * 2 *   3) + 24) & ~3,  LBPR * 100,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3340,	((LBPR * 2 *  10) + 42) & ~3,  LBPR * 100,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11171,	((LBPR * 2 *  31) + 34) & ~3,  LBPR * 101,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3611,	((LBPR * 2 *   7) + 41) & ~3,  LBPR * 101,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	20622,	((LBPR * 2 *  44) + 26) & ~3,  LBPR * 102,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7257,	((LBPR * 2 *  13) + 38) & ~3,  LBPR * 102,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	17248,	((LBPR * 2 *   1) + 29) & ~3,  LBPR * 103,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	31828,	((LBPR * 2 *  10) + 15) & ~3,  LBPR * 103,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	28859,	((LBPR * 2 *   0) + 18) & ~3,  LBPR * 104,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	39929,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR * 104,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	38715,	((LBPR * 2 *  40) +	 9) & ~3,  LBPR * 105,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5505,	((LBPR * 2 *  27) + 40) & ~3,  LBPR * 105,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	33721,	((LBPR * 2 *  29) + 13) & ~3,  LBPR * 106,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	34261,	((LBPR * 2 *  10) + 13) & ~3,  LBPR * 106,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	41282,	((LBPR * 2 *  14) +	 6) & ~3,  LBPR * 107,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 8747,	((LBPR * 2 *  10) + 37) & ~3,  LBPR * 107,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	45333,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR * 108,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	47088,	((LBPR * 2 *   0) +	 1) & ~3,  LBPR * 108,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	24679,	((LBPR * 2 *   4) + 22) & ~3,  LBPR * 109,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	32914,	((LBPR * 2 *  28) + 14) & ~3,  LBPR * 109,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	26570,	((LBPR * 2 *  14) + 20) & ~3,  LBPR * 110,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	46685,	((LBPR * 2 *  44) +	 1) & ~3,  LBPR * 110,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1191,	((LBPR * 2 *  10) + 44) & ~3,  LBPR * 111,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	19416,	((LBPR * 2 *   6) + 27) & ~3,  LBPR * 111,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	36967,	((LBPR * 2 *  43) + 10) & ~3,  LBPR * 112,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 4027,	((LBPR * 2 *  23) + 41) & ~3,  LBPR * 112,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	15233,	((LBPR * 2 *   6) + 31) & ~3,  LBPR * 113,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6998,	((LBPR * 2 *   9) + 38) & ~3,  LBPR * 113,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	16854,	((LBPR * 2 *   3) + 29) & ~3,  LBPR * 114,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	22254,	((LBPR * 2 *   3) + 24) & ~3,  LBPR * 114,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	10915,	((LBPR * 2 *   9) + 35) & ~3,  LBPR * 115,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4165,	((LBPR * 2 *  20) + 41) & ~3,  LBPR * 115,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	23606,	((LBPR * 2 *   0) + 23) & ~3,  LBPR * 116,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	34541,	((LBPR * 2 *  32) + 13) & ~3,  LBPR * 116,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15642,	((LBPR * 2 *  13) + 30) & ~3,  LBPR * 117,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	21042,	((LBPR * 2 *   1) + 25) & ~3,  LBPR * 117,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	12673,	((LBPR * 2 *  10) + 33) & ~3,  LBPR * 118,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	16858,	((LBPR * 2 *   1) + 29) & ~3,  LBPR * 118,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1469,	((LBPR * 2 *  14) + 43) & ~3,  LBPR * 119,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1874,	((LBPR * 2 *   2) + 43) & ~3,  LBPR * 119,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	18345,	((LBPR * 2 *  43) + 28) & ~3,  LBPR * 120,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	34410,	((LBPR * 2 *  21) + 13) & ~3,  LBPR * 120,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	16726,	((LBPR * 2 *  10) + 29) & ~3,  LBPR * 121,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	45616,	((LBPR * 2 *  26) +	 2) & ~3,  LBPR * 121,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	22532,	((LBPR * 2 *   3) + 24) & ~3,  LBPR * 122,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	45482,	((LBPR * 2 *  34) +	 3) & ~3,  LBPR * 122,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	20373,	((LBPR * 2 *  43) + 26) & ~3,  LBPR * 123,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9978,	((LBPR * 2 *  16) + 35) & ~3,  LBPR * 123,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	31039,	((LBPR * 2 *  42) + 16) & ~3,  LBPR * 124,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	32254,	((LBPR * 2 *   7) + 15) & ~3,  LBPR * 124,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	22535,	((LBPR * 2 *  22) + 24) & ~3,  LBPR * 125,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	27260,	((LBPR * 2 *  14) + 19) & ~3,  LBPR * 125,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	32796,	((LBPR * 2 *   4) + 14) & ~3,  LBPR * 126,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	38061,	((LBPR * 2 *  20) +	 9) & ~3,  LBPR * 126,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	27802,	((LBPR * 2 *  16) + 19) & ~3,  LBPR * 127,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	29962,	((LBPR * 2 *  30) + 17) & ~3,  LBPR * 127,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	26723,	((LBPR * 2 *  13) + 20) & ~3,  LBPR * 128,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	34823,	((LBPR * 2 *   5) + 12) & ~3,  LBPR * 128,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	21459,	((LBPR * 2 *  25) + 25) & ~3,  LBPR * 129,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	46974,	((LBPR * 2 *  14) +	 1) & ~3,  LBPR * 129,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	14035,	((LBPR * 2 *  33) + 32) & ~3,  LBPR * 130,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1480,	((LBPR * 2 *   7) + 43) & ~3,  LBPR * 130,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9176,	((LBPR * 2 *   3) + 36) & ~3,  LBPR * 131,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9851,	((LBPR * 2 *   5) + 36) & ~3,  LBPR * 131,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	22002,	((LBPR * 2 *   9) + 24) & ~3,  LBPR * 132,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	23892,	((LBPR * 2 *   3) + 23) & ~3,  LBPR * 132,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6883,	((LBPR * 2 *   7) + 38) & ~3,  LBPR * 133,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7693,	((LBPR * 2 *   1) + 38) & ~3,  LBPR * 133,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	13364,	((LBPR * 2 *  36) + 32) & ~3,  LBPR * 134,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	40094,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR * 134,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n13_neon4:
	.word	21120,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	37560,	((LBPR * 2 *  44) +	 5) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5520,	((LBPR * 2 *   0) + 39) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	22081,	((LBPR * 2 *  46) + 22) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	27361,	((LBPR * 2 *  35) + 16) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	28321,	((LBPR * 2 *  54) + 15) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	17162,	((LBPR * 2 *   6) + 27) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	29162,	((LBPR * 2 *  16) + 14) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	34082,	((LBPR * 2 *  27) +	 9) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14763,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	25083,	((LBPR * 2 *  46) + 18) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	39843,	((LBPR * 2 *  12) +	 3) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 2404,	((LBPR * 2 *  13) + 42) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	41404,	((LBPR * 2 *  23) +	 1) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	42604,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	10325,	((LBPR * 2 *  17) + 34) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 1925,	((LBPR * 2 *  18) + 43) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	24125,	((LBPR * 2 *   4) + 19) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	12366,	((LBPR * 2 *   5) + 32) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	22686,	((LBPR * 2 *   5) + 21) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	31566,	((LBPR * 2 *  15) + 12) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	12127,	((LBPR * 2 *   9) + 32) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	15367,	((LBPR * 2 *  18) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 8047,	((LBPR * 2 *  47) + 36) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	15968,	((LBPR * 2 *  22) + 28) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	17408,	((LBPR * 2 *  21) + 26) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	39608,	((LBPR * 2 *  34) +	 3) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	27249,	((LBPR * 2 *  23) + 16) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	34689,	((LBPR * 2 *   9) +	 8) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6489,	((LBPR * 2 *  16) + 38) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11650,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	21250,	((LBPR * 2 *  19) + 22) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	31570,	((LBPR * 2 *  45) + 12) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	12971,	((LBPR * 2 *  16) + 31) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	37451,	((LBPR * 2 *   8) +	 6) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7571,	((LBPR * 2 *   9) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	18132,	((LBPR * 2 *  14) + 26) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	37332,	((LBPR * 2 *  16) +	 6) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 4932,	((LBPR * 2 *  54) + 39) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	16093,	((LBPR * 2 *   0) + 28) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	17293,	((LBPR * 2 *  10) + 27) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 7453,	((LBPR * 2 *  11) + 37) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	16454,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	26894,	((LBPR * 2 *   2) + 17) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	38774,	((LBPR * 2 *  22) +	 4) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	11055,	((LBPR * 2 *  11) + 33) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14295,	((LBPR * 2 *  44) + 30) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	39375,	((LBPR * 2 *   7) +	 4) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1216,	((LBPR * 2 *  52) + 43) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  736,	((LBPR * 2 *  17) + 44) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 7936,	((LBPR * 2 *  57) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	21137,	((LBPR * 2 *  34) + 23) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	28457,	((LBPR * 2 *  13) + 15) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	29417,	((LBPR * 2 *  35) + 14) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	10578,	((LBPR * 2 *  58) + 34) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	24738,	((LBPR * 2 *   8) + 19) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	31338,	((LBPR * 2 *   7) + 12) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	25339,	((LBPR * 2 *  46) + 18) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	28459,	((LBPR * 2 *  22) + 15) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	39139,	((LBPR * 2 *  10) +	 4) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	11660,	((LBPR * 2 *  10) + 32) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	39860,	((LBPR * 2 *  32) +	 3) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 7580,	((LBPR * 2 *  14) + 37) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	23421,	((LBPR * 2 *  11) + 20) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	28581,	((LBPR * 2 *  16) + 15) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	40701,	((LBPR * 2 *   5) +	 2) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	19342,	((LBPR * 2 *   7) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	22222,	((LBPR * 2 *   1) + 21) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	33262,	((LBPR * 2 *  12) + 10) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	17783,	((LBPR * 2 *  29) + 26) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7943,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8783,	((LBPR * 2 *  17) + 35) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	18624,	((LBPR * 2 *  43) + 25) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	19224,	((LBPR * 2 *  37) + 25) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	23064,	((LBPR * 2 *   9) + 21) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	18985,	((LBPR * 2 *  15) + 25) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	28585,	((LBPR * 2 *  18) + 15) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4465,	((LBPR * 2 *   6) + 40) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	19946,	((LBPR * 2 *   5) + 24) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	30506,	((LBPR * 2 *   8) + 13) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	  506,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12867,	((LBPR * 2 *   2) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	35787,	((LBPR * 2 *   7) +	 7) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4107,	((LBPR * 2 *  55) + 40) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11548,	((LBPR * 2 *  17) + 33) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	25588,	((LBPR * 2 *   4) + 18) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	38788,	((LBPR * 2 *  57) +	 4) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	22469,	((LBPR * 2 *  13) + 21) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	25709,	((LBPR * 2 *  41) + 18) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	28229,	((LBPR * 2 *  20) + 15) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	17430,	((LBPR * 2 *  16) + 26) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	32910,	((LBPR * 2 *   1) + 10) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	40590,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	34471,	((LBPR * 2 *  13) +	 9) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	35911,	((LBPR * 2 *   4) +	 7) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	39751,	((LBPR * 2 *  59) +	 3) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1712,	((LBPR * 2 *   6) + 43) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	29072,	((LBPR * 2 *   5) + 14) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	37832,	((LBPR * 2 *  19) +	 5) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	17073,	((LBPR * 2 *  48) + 27) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	25353,	((LBPR * 2 *  59) + 18) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	  633,	((LBPR * 2 *  33) + 44) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	35554,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	42994,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	43114,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	16715,	((LBPR * 2 *  15) + 27) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	36035,	((LBPR * 2 *   5) +	 7) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6875,	((LBPR * 2 *  15) + 37) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15156,	((LBPR * 2 *  18) + 29) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	25236,	((LBPR * 2 *  52) + 18) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	42516,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	13957,	((LBPR * 2 *  25) + 30) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	30397,	((LBPR * 2 *   8) + 13) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3397,	((LBPR * 2 *   8) + 41) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	18518,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	27518,	((LBPR * 2 *   9) + 16) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	40238,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	24279,	((LBPR * 2 *  11) + 19) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	30279,	((LBPR * 2 *  14) + 13) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	30519,	((LBPR * 2 *  14) + 13) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	15160,	((LBPR * 2 *  10) + 29) & ~3,  LBPR *  40,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	20800,	((LBPR * 2 *  12) + 23) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5800,	((LBPR * 2 *  18) + 39) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	10241,	((LBPR * 2 *   2) + 34) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1721,	((LBPR * 2 *  16) + 43) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8681,	((LBPR * 2 *  53) + 36) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10602,	((LBPR * 2 *  18) + 34) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12282,	((LBPR * 2 *   7) + 32) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4122,	((LBPR * 2 *  59) + 40) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	12043,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2803,	((LBPR * 2 *  12) + 42) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	37483,	((LBPR * 2 *  14) +	 6) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	21764,	((LBPR * 2 *  18) + 22) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	39884,	((LBPR * 2 *  30) +	 3) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 9884,	((LBPR * 2 *  48) + 34) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1365,	((LBPR * 2 *  11) + 43) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	16245,	((LBPR * 2 *  44) + 28) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	16365,	((LBPR * 2 *   5) + 28) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13486,	((LBPR * 2 *  10) + 31) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2326,	((LBPR * 2 *  39) + 42) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	27526,	((LBPR * 2 *  15) + 16) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	14807,	((LBPR * 2 *  50) + 29) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	20927,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  47,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6767,	((LBPR * 2 *  17) + 38) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	20208,	((LBPR * 2 *  18) + 24) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	41328,	((LBPR * 2 *  12) +	 2) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4368,	((LBPR * 2 *  58) + 40) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	17449,	((LBPR * 2 *   2) + 26) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	33409,	((LBPR * 2 *   7) + 10) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	34249,	((LBPR * 2 *  54) +	 9) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	10490,	((LBPR * 2 *  16) + 34) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	12170,	((LBPR * 2 *  18) + 32) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7970,	((LBPR * 2 *  12) + 36) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	25611,	((LBPR * 2 *   0) + 18) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	29331,	((LBPR * 2 *  16) + 14) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	38091,	((LBPR * 2 *  13) +	 5) & ~3,  LBPR *  51,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	34372,	((LBPR * 2 *   2) +	 9) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6172,	((LBPR * 2 *  27) + 38) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7252,	((LBPR * 2 *  15) + 37) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	25493,	((LBPR * 2 *  19) + 18) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	32093,	((LBPR * 2 *   0) + 11) & ~3,  LBPR *  53,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	37253,	((LBPR * 2 *   4) +	 6) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	10134,	((LBPR * 2 *  29) + 34) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	16134,	((LBPR * 2 *  50) + 28) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	29094,	((LBPR * 2 *  37) + 14) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	16255,	((LBPR * 2 *  11) + 28) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	33775,	((LBPR * 2 *   8) +	 9) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5215,	((LBPR * 2 *  12) + 39) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	36056,	((LBPR * 2 *   3) +	 7) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	37856,	((LBPR * 2 *   1) +	 5) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	39296,	((LBPR * 2 *  43) +	 4) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	20577,	((LBPR * 2 *   6) + 23) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	31497,	((LBPR * 2 *  11) + 12) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5457,	((LBPR * 2 *   3) + 39) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	18658,	((LBPR * 2 *  50) + 25) & ~3,  LBPR *  58,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	25978,	((LBPR * 2 *  17) + 18) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3778,	((LBPR * 2 *  10) + 41) & ~3,  LBPR *  58,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	24899,	((LBPR * 2 *  20) + 19) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2939,	((LBPR * 2 *  36) + 42) & ~3,  LBPR *  59,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4979,	((LBPR * 2 *  25) + 39) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	40020,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	43020,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5100,	((LBPR * 2 *   8) + 39) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	15541,	((LBPR * 2 *  15) + 28) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	34141,	((LBPR * 2 *  28) +	 9) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9301,	((LBPR * 2 *   7) + 35) & ~3,  LBPR *  61,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	24782,	((LBPR * 2 *  53) + 19) & ~3,  LBPR *  62,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	25622,	((LBPR * 2 *   2) + 18) & ~3,  LBPR *  62,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7022,	((LBPR * 2 *  17) + 37) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	34863,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	38343,	((LBPR * 2 *  10) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7143,	((LBPR * 2 *   4) + 37) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13504,	((LBPR * 2 *  39) + 31) & ~3,  LBPR *  64,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	16624,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  64,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	32944,	((LBPR * 2 *  51) + 10) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	14705,	((LBPR * 2 *  29) + 29) & ~3,  LBPR *  65,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	27425,	((LBPR * 2 *  23) + 16) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4265,	((LBPR * 2 *  10) + 40) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	11106,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	34386,	((LBPR * 2 *  15) +	 9) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	41346,	((LBPR * 2 *  11) +	 2) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11827,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	16867,	((LBPR * 2 *  10) + 27) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	29227,	((LBPR * 2 *  19) + 14) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	14468,	((LBPR * 2 *  56) + 30) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	14828,	((LBPR * 2 *  11) + 29) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	24188,	((LBPR * 2 *   8) + 19) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	26229,	((LBPR * 2 *  10) + 17) & ~3,  LBPR *  69,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	39069,	((LBPR * 2 *  15) +	 4) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	41229,	((LBPR * 2 *  24) +	 2) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	26350,	((LBPR * 2 *  11) + 17) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	39070,	((LBPR * 2 *  14) +	 4) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	40870,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  70,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	29111,	((LBPR * 2 *  32) + 14) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	  431,	((LBPR * 2 *  17) + 44) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 8351,	((LBPR * 2 *  18) + 36) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	33552,	((LBPR * 2 *  33) + 10) & ~3,  LBPR *  72,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	34992,	((LBPR * 2 *  26) +	 8) & ~3,  LBPR *  72,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9912,	((LBPR * 2 *   4) + 34) & ~3,  LBPR *  72,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	13273,	((LBPR * 2 *  18) + 31) & ~3,  LBPR *  73,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	13873,	((LBPR * 2 *   3) + 30) & ~3,  LBPR *  73,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3673,	((LBPR * 2 *  14) + 41) & ~3,  LBPR *  73,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14594,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *  74,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	40034,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *  74,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8354,	((LBPR * 2 *  11) + 36) & ~3,  LBPR *  74,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	19995,	((LBPR * 2 *  48) + 24) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	21675,	((LBPR * 2 *  17) + 22) & ~3,  LBPR *  75,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	29235,	((LBPR * 2 *   3) + 14) & ~3,  LBPR *  75,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	24436,	((LBPR * 2 *  38) + 19) & ~3,  LBPR *  76,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	29236,	((LBPR * 2 *   7) + 14) & ~3,  LBPR *  76,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	39556,	((LBPR * 2 *   5) +	 3) & ~3,  LBPR *  76,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	22157,	((LBPR * 2 *  56) + 22) & ~3,  LBPR *  77,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	28637,	((LBPR * 2 *  38) + 15) & ~3,  LBPR *  77,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5357,	((LBPR * 2 *  37) + 39) & ~3,  LBPR *  77,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	19878,	((LBPR * 2 *   2) + 24) & ~3,  LBPR *  78,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	22158,	((LBPR * 2 *   1) + 22) & ~3,  LBPR *  78,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3438,	((LBPR * 2 *  26) + 41) & ~3,  LBPR *  78,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	16279,	((LBPR * 2 *  19) + 28) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	21679,	((LBPR * 2 *  45) + 22) & ~3,  LBPR *  79,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	37399,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  79,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	14480,	((LBPR * 2 *  14) + 30) & ~3,  LBPR *  80,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	17360,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  80,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	28760,	((LBPR * 2 *  27) + 15) & ~3,  LBPR *  80,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12201,	((LBPR * 2 *  51) + 32) & ~3,  LBPR *  81,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	27081,	((LBPR * 2 *  57) + 16) & ~3,  LBPR *  81,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	31041,	((LBPR * 2 *   1) + 12) & ~3,  LBPR *  81,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1642,	((LBPR * 2 *  31) + 43) & ~3,  LBPR *  82,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 6082,	((LBPR * 2 *  24) + 38) & ~3,  LBPR *  82,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9562,	((LBPR * 2 *  38) + 35) & ~3,  LBPR *  82,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	18563,	((LBPR * 2 *  13) + 25) & ~3,  LBPR *  83,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	28643,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *  83,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5363,	((LBPR * 2 *  13) + 39) & ~3,  LBPR *  83,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	32124,	((LBPR * 2 *  55) + 11) & ~3,  LBPR *  84,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	34404,	((LBPR * 2 *  18) +	 9) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	38244,	((LBPR * 2 *  35) +	 5) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	19165,	((LBPR * 2 *   6) + 25) & ~3,  LBPR *  85,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	24085,	((LBPR * 2 *  17) + 20) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	35245,	((LBPR * 2 *  49) +	 8) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	23126,	((LBPR * 2 *   9) + 21) & ~3,  LBPR *  86,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2966,	((LBPR * 2 *   9) + 42) & ~3,  LBPR *  86,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7406,	((LBPR * 2 *  19) + 37) & ~3,  LBPR *  86,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	15687,	((LBPR * 2 *  12) + 28) & ~3,  LBPR *  87,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	26127,	((LBPR * 2 *  19) + 17) & ~3,  LBPR *  87,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6447,	((LBPR * 2 *  12) + 38) & ~3,  LBPR *  87,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	26848,	((LBPR * 2 *  49) + 17) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	41488,	((LBPR * 2 *  19) +	 1) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7048,	((LBPR * 2 *  19) + 37) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	12449,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	20129,	((LBPR * 2 *   3) + 24) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	28289,	((LBPR * 2 *   9) + 15) & ~3,  LBPR *  89,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	20010,	((LBPR * 2 *  14) + 24) & ~3,  LBPR *  90,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	42210,	((LBPR * 2 *  28) +	 1) & ~3,  LBPR *  90,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	42810,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *  90,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	30451,	((LBPR * 2 *   9) + 13) & ~3,  LBPR *  91,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3211,	((LBPR * 2 *   7) + 41) & ~3,  LBPR *  91,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	40651,	((LBPR * 2 *  41) +	 2) & ~3,  LBPR *  91,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	10172,	((LBPR * 2 *  36) + 34) & ~3,  LBPR *  92,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1052,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  92,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20252,	((LBPR * 2 *  14) + 24) & ~3,  LBPR *  92,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15333,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *  93,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	22773,	((LBPR * 2 *  30) + 21) & ~3,  LBPR *  93,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3093,	((LBPR * 2 *  26) + 41) & ~3,  LBPR *  93,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15334,	((LBPR * 2 *  10) + 29) & ~3,  LBPR *  94,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	32134,	((LBPR * 2 *  16) + 11) & ~3,  LBPR *  94,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	40654,	((LBPR * 2 *  25) +	 2) & ~3,  LBPR *  94,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	14615,	((LBPR * 2 *  31) + 29) & ~3,  LBPR *  95,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	35495,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR *  95,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6215,	((LBPR * 2 *   8) + 38) & ~3,  LBPR *  95,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	13536,	((LBPR * 2 *   6) + 31) & ~3,  LBPR *  96,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	21936,	((LBPR * 2 *   4) + 22) & ~3,  LBPR *  96,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	36696,	((LBPR * 2 *  13) +	 6) & ~3,  LBPR *  96,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 1297,	((LBPR * 2 *  13) + 43) & ~3,  LBPR *  97,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	40177,	((LBPR * 2 *  39) +	 3) & ~3,  LBPR *  97,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  697,	((LBPR * 2 *  47) + 44) & ~3,  LBPR *  97,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1058,	((LBPR * 2 *   9) + 44) & ~3,  LBPR *  98,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14138,	((LBPR * 2 *   6) + 30) & ~3,  LBPR *  98,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	32138,	((LBPR * 2 *  42) + 11) & ~3,  LBPR *  98,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	23619,	((LBPR * 2 *  13) + 20) & ~3,  LBPR *  99,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9579,	((LBPR * 2 *  33) + 35) & ~3,  LBPR *  99,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9699,	((LBPR * 2 *   8) + 35) & ~3,  LBPR *  99,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	14980,	((LBPR * 2 *   3) + 29) & ~3,  LBPR * 100,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	19780,	((LBPR * 2 *   3) + 24) & ~3,  LBPR * 100,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	37540,	((LBPR * 2 *   6) +	 6) & ~3,  LBPR * 100,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	37061,	((LBPR * 2 *  32) +	 6) & ~3,  LBPR * 101,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	41021,	((LBPR * 2 *  28) +	 2) & ~3,  LBPR * 101,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6821,	((LBPR * 2 *  45) + 38) & ~3,  LBPR * 101,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	15702,	((LBPR * 2 *   6) + 28) & ~3,  LBPR * 102,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	29382,	((LBPR * 2 *  55) + 14) & ~3,  LBPR * 102,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	38142,	((LBPR * 2 *  42) +	 5) & ~3,  LBPR * 102,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	21583,	((LBPR * 2 *  40) + 22) & ~3,  LBPR * 103,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	34903,	((LBPR * 2 *   0) +	 8) & ~3,  LBPR * 103,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	35383,	((LBPR * 2 *  16) +	 8) & ~3,  LBPR * 103,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	11504,	((LBPR * 2 *   8) + 33) & ~3,  LBPR * 104,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	18704,	((LBPR * 2 *   1) + 25) & ~3,  LBPR * 104,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2624,	((LBPR * 2 *  56) + 42) & ~3,  LBPR * 104,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	11265,	((LBPR * 2 *   9) + 33) & ~3,  LBPR * 105,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	14985,	((LBPR * 2 *   1) + 29) & ~3,  LBPR * 105,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1665,	((LBPR * 2 *   2) + 43) & ~3,  LBPR * 105,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	13906,	((LBPR * 2 *  12) + 30) & ~3,  LBPR * 106,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	18346,	((LBPR * 2 *  19) + 26) & ~3,  LBPR * 106,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	38986,	((LBPR * 2 *  52) +	 4) & ~3,  LBPR * 106,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12467,	((LBPR * 2 *  12) + 32) & ~3,  LBPR * 107,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14867,	((LBPR * 2 *   9) + 29) & ~3,  LBPR * 107,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	41867,	((LBPR * 2 *  43) +	 1) & ~3,  LBPR * 107,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	26148,	((LBPR * 2 *  58) + 17) & ~3,  LBPR * 108,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	35268,	((LBPR * 2 *  47) +	 8) & ~3,  LBPR * 108,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	39948,	((LBPR * 2 *  20) +	 3) & ~3,  LBPR * 108,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	20029,	((LBPR * 2 *   3) + 24) & ~3,  LBPR * 109,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	24229,	((LBPR * 2 *  13) + 19) & ~3,  LBPR * 109,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	42349,	((LBPR * 2 *  17) +	 1) & ~3,  LBPR * 109,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	12950,	((LBPR * 2 *  15) + 31) & ~3,  LBPR * 110,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	28670,	((LBPR * 2 *   7) + 15) & ~3,  LBPR * 110,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8390,	((LBPR * 2 *  49) + 36) & ~3,  LBPR * 110,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11871,	((LBPR * 2 *  17) + 32) & ~3,  LBPR * 111,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	12951,	((LBPR * 2 *  34) + 31) & ~3,  LBPR * 111,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	39831,	((LBPR * 2 *  14) +	 3) & ~3,  LBPR * 111,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	29152,	((LBPR * 2 *   4) + 14) & ~3,  LBPR * 112,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	34192,	((LBPR * 2 *  19) +	 9) & ~3,  LBPR * 112,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	34792,	((LBPR * 2 *  19) +	 8) & ~3,  LBPR * 112,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	15593,	((LBPR * 2 *  31) + 28) & ~3,  LBPR * 113,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	38993,	((LBPR * 2 *  21) +	 4) & ~3,  LBPR * 113,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	39953,	((LBPR * 2 *  16) +	 3) & ~3,  LBPR * 113,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	14274,	((LBPR * 2 *  21) + 30) & ~3,  LBPR * 114,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	41754,	((LBPR * 2 *  13) +	 1) & ~3,  LBPR * 114,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6834,	((LBPR * 2 *  40) + 38) & ~3,  LBPR * 114,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	23755,	((LBPR * 2 *  12) + 20) & ~3,  LBPR * 115,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	41755,	((LBPR * 2 *  30) +	 1) & ~3,  LBPR * 115,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5035,	((LBPR * 2 *  51) + 39) & ~3,  LBPR * 115,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	11636,	((LBPR * 2 *   1) + 33) & ~3,  LBPR * 116,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1316,	((LBPR * 2 *   7) + 43) & ~3,  LBPR * 116,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 8756,	((LBPR * 2 *   5) + 36) & ~3,  LBPR * 116,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21237,	((LBPR * 2 *   3) + 23) & ~3,  LBPR * 117,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	31557,	((LBPR * 2 *  42) + 12) & ~3,  LBPR * 117,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 8157,	((LBPR * 2 *   3) + 36) & ~3,  LBPR * 117,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	19558,	((LBPR * 2 *   8) + 24) & ~3,  LBPR * 118,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6118,	((LBPR * 2 *   7) + 38) & ~3,  LBPR * 118,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6838,	((LBPR * 2 *   1) + 38) & ~3,  LBPR * 118,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	29519,	((LBPR * 2 *  14) + 14) & ~3,  LBPR * 119,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	35639,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR * 119,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	36479,	((LBPR * 2 *  36) +	 7) & ~3,  LBPR * 119,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n25_neon4:
	.word	19008,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	28404,	((LBPR * 2 *  32) + 12) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	30672,	((LBPR * 2 *  71) +	 9) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4968,	((LBPR * 2 *   0) + 39) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	13825,	((LBPR * 2 *  19) + 29) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	18685,	((LBPR * 2 *  23) + 23) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	26245,	((LBPR * 2 *  17) + 14) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7129,	((LBPR * 2 *  45) + 36) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	14798,	((LBPR * 2 *  40) + 27) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	23114,	((LBPR * 2 *  28) + 18) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	33698,	((LBPR * 2 *   6) +	 6) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	38342,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	13719,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	23007,	((LBPR * 2 *  23) + 18) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	32187,	((LBPR * 2 *  49) +	 7) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	33591,	((LBPR * 2 *  12) +	 6) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	14800,	((LBPR * 2 *  71) + 27) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	20416,	((LBPR * 2 *   5) + 21) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	28408,	((LBPR * 2 *  16) + 12) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	35860,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	11129,	((LBPR * 2 *   5) + 32) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2165,	((LBPR * 2 *  14) + 42) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	21713,	((LBPR * 2 *   4) + 19) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	33917,	((LBPR * 2 *  66) +	 5) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	16206,	((LBPR * 2 *  44) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	24738,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	26898,	((LBPR * 2 *  17) + 13) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5838,	((LBPR * 2 *  17) + 38) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	17287,	((LBPR * 2 *  24) + 25) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	33703,	((LBPR * 2 *   9) +	 6) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	34243,	((LBPR * 2 *  61) +	 5) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6595,	((LBPR * 2 *  32) + 37) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	14588,	((LBPR * 2 *  12) + 28) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	19124,	((LBPR * 2 *  20) + 22) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	24092,	((LBPR * 2 *   8) + 17) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 9512,	((LBPR * 2 *  46) + 34) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10485,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	23661,	((LBPR * 2 *  19) + 17) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	30249,	((LBPR * 2 *  43) + 10) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  873,	((LBPR * 2 *  10) + 44) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10702,	((LBPR * 2 *  67) + 32) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	15562,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	24418,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	24850,	((LBPR * 2 *  21) + 16) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	11675,	((LBPR * 2 *  17) + 31) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	17291,	((LBPR * 2 *  42) + 25) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	17939,	((LBPR * 2 *  15) + 24) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 6707,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14484,	((LBPR * 2 *   0) + 28) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	21936,	((LBPR * 2 *  46) + 19) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	24204,	((LBPR * 2 *   2) + 17) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4116,	((LBPR * 2 *  21) + 40) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	14809,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	22153,	((LBPR * 2 *  60) + 19) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	33385,	((LBPR * 2 *   8) +	 6) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	35437,	((LBPR * 2 *   7) +	 4) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	23450,	((LBPR * 2 *  47) + 17) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	25610,	((LBPR * 2 *  14) + 15) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	31226,	((LBPR * 2 *  26) +	 8) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	33386,	((LBPR * 2 *  27) +	 6) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	13191,	((LBPR * 2 *  57) + 29) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	21939,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	28527,	((LBPR * 2 *  22) + 12) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	38247,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	10492,	((LBPR * 2 *  59) + 32) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	20104,	((LBPR * 2 *  21) + 21) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	25720,	((LBPR * 2 *  17) + 15) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	26476,	((LBPR * 2 *  15) + 14) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1205,	((LBPR * 2 *  59) + 43) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	12869,	((LBPR * 2 *   4) + 30) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	24641,	((LBPR * 2 *  23) + 16) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	35009,	((LBPR * 2 *   8) +	 4) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12114,	((LBPR * 2 *  21) + 31) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	17406,	((LBPR * 2 *   7) + 24) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	21186,	((LBPR * 2 *  63) + 20) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	22266,	((LBPR * 2 *   9) + 19) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	13195,	((LBPR * 2 *  68) + 29) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	23131,	((LBPR * 2 *   8) + 18) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	35227,	((LBPR * 2 *  11) +	 4) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	36199,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1532,	((LBPR * 2 *  59) + 43) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	17948,	((LBPR * 2 *   5) + 24) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	29936,	((LBPR * 2 *  13) + 10) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	34040,	((LBPR * 2 *   1) +	 5) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1425,	((LBPR * 2 *  22) + 43) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	18705,	((LBPR * 2 *  48) + 23) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	31017,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	32205,	((LBPR * 2 *   7) +	 7) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11578,	((LBPR * 2 *   2) + 31) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	21082,	((LBPR * 2 *  12) + 20) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5638,	((LBPR * 2 *  16) + 38) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7582,	((LBPR * 2 *  56) + 36) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10067,	((LBPR * 2 *  10) + 33) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	19895,	((LBPR * 2 *  65) + 22) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	27455,	((LBPR * 2 *   9) + 13) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	  455,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	26160,	((LBPR * 2 *   5) + 14) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	27456,	((LBPR * 2 *  49) + 13) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7152,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8016,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	10609,	((LBPR * 2 *  56) + 32) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	13633,	((LBPR * 2 *  19) + 29) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	17089,	((LBPR * 2 *  16) + 25) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	19033,	((LBPR * 2 *  24) + 23) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	11150,	((LBPR * 2 *  19) + 32) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	15254,	((LBPR * 2 *   8) + 27) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	23030,	((LBPR * 2 *   4) + 18) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	28646,	((LBPR * 2 *  53) + 11) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	25299,	((LBPR * 2 *  39) + 15) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	29619,	((LBPR * 2 *   1) + 10) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	30807,	((LBPR * 2 *  22) +	 9) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6183,	((LBPR * 2 *  16) + 37) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	17308,	((LBPR * 2 *   8) + 25) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	30160,	((LBPR * 2 *  50) + 10) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	35992,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8128,	((LBPR * 2 *  34) + 35) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	16553,	((LBPR * 2 *   1) + 25) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2621,	((LBPR * 2 *  23) + 42) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	32321,	((LBPR * 2 *   4) +	 7) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	35561,	((LBPR * 2 *  64) +	 3) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	18498,	((LBPR * 2 *   6) + 23) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	19038,	((LBPR * 2 *   3) + 23) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	28002,	((LBPR * 2 *  51) + 12) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	35562,	((LBPR * 2 *  18) +	 3) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15475,	((LBPR * 2 *   6) + 27) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19471,	((LBPR * 2 *  11) + 22) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	19687,	((LBPR * 2 *  53) + 22) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	38263,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11156,	((LBPR * 2 *  18) + 32) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14504,	((LBPR * 2 *  38) + 28) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3596,	((LBPR * 2 *   9) + 40) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6836,	((LBPR * 2 *  15) + 37) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15693,	((LBPR * 2 *  17) + 26) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	22605,	((LBPR * 2 *  31) + 18) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	27357,	((LBPR * 2 *   9) + 13) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	31137,	((LBPR * 2 *  69) +	 9) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	16666,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	20770,	((LBPR * 2 *  10) + 21) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	26818,	((LBPR * 2 *  57) + 14) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	33730,	((LBPR * 2 *  15) +	 6) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10835,	((LBPR * 2 *  13) + 32) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12131,	((LBPR * 2 *   6) + 31) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	24551,	((LBPR * 2 *  21) + 16) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	28331,	((LBPR * 2 *  67) + 12) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	28656,	((LBPR * 2 *  48) + 11) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3060,	((LBPR * 2 *   9) + 41) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	35784,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9432,	((LBPR * 2 *  17) + 34) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	11593,	((LBPR * 2 *  65) + 31) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	13645,	((LBPR * 2 *  11) + 29) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	29305,	((LBPR * 2 *  33) + 11) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9217,	((LBPR * 2 *   2) + 34) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	13322,	((LBPR * 2 *  62) + 29) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	16778,	((LBPR * 2 *   8) + 25) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	21854,	((LBPR * 2 *  12) + 19) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	37190,	((LBPR * 2 *  13) +	 2) & ~3,  LBPR *  38,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10839,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	15483,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	18723,	((LBPR * 2 *  13) + 23) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8463,	((LBPR * 2 *  37) + 35) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	11056,	((LBPR * 2 *   7) + 32) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13108,	((LBPR * 2 *  22) + 29) & ~3,  LBPR *  40,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15052,	((LBPR * 2 *  16) + 27) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	31684,	((LBPR * 2 *  50) +	 8) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	14729,	((LBPR * 2 *   5) + 28) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	19589,	((LBPR * 2 *  19) + 22) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	28229,	((LBPR * 2 *  50) + 12) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	33521,	((LBPR * 2 *   4) +	 6) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11382,	((LBPR * 2 *  18) + 31) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	18834,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	28338,	((LBPR * 2 *  13) + 12) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	36654,	((LBPR * 2 *  58) +	 2) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	12139,	((LBPR * 2 *  11) + 31) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	21859,	((LBPR * 2 *  68) + 19) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	27583,	((LBPR * 2 *  18) + 13) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	31795,	((LBPR * 2 *  25) +	 8) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	17432,	((LBPR * 2 *  15) + 24) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	30068,	((LBPR * 2 *   7) + 10) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	38708,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4364,	((LBPR * 2 *  69) + 40) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	24885,	((LBPR * 2 *   2) + 16) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2529,	((LBPR * 2 *  13) + 42) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	25965,	((LBPR * 2 *  37) + 15) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3393,	((LBPR * 2 *  11) + 41) & ~3,  LBPR *  45,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1018,	((LBPR * 2 *  32) + 43) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15922,	((LBPR * 2 *  58) + 26) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	23050,	((LBPR * 2 *   0) + 18) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	34390,	((LBPR * 2 *  23) +	 5) & ~3,  LBPR *  46,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	21107,	((LBPR * 2 *  68) + 20) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	34283,	((LBPR * 2 *  14) +	 5) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5231,	((LBPR * 2 *  19) + 39) & ~3,  LBPR *  47,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 7067,	((LBPR * 2 *   6) + 36) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	28884,	((LBPR * 2 *   0) + 11) & ~3,  LBPR *  48,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	30936,	((LBPR * 2 *   2) +	 9) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	37308,	((LBPR * 2 *  21) +	 1) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7824,	((LBPR * 2 *  41) + 36) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13333,	((LBPR * 2 *  37) + 29) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	34069,	((LBPR * 2 *  20) +	 5) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	34501,	((LBPR * 2 *  11) +	 5) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7285,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	13334,	((LBPR * 2 *  52) + 29) & ~3,  LBPR *  50,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13442,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *  50,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	18086,	((LBPR * 2 *   3) + 24) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 9122,	((LBPR * 2 *  23) + 34) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	20247,	((LBPR * 2 *  34) + 21) & ~3,  LBPR *  51,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2103,	((LBPR * 2 *  44) + 42) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	21759,	((LBPR * 2 *   3) + 19) & ~3,  LBPR *  51,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 4695,	((LBPR * 2 *  13) + 39) & ~3,  LBPR *  51,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	24892,	((LBPR * 2 *  27) + 16) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	30400,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	37204,	((LBPR * 2 *  12) +	 2) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4804,	((LBPR * 2 *  69) + 39) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	13985,	((LBPR * 2 *  22) + 28) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	26405,	((LBPR * 2 *  17) + 14) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	35369,	((LBPR * 2 *  62) +	 4) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7073,	((LBPR * 2 *  18) + 36) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1566,	((LBPR * 2 *   6) + 43) & ~3,  LBPR *  54,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	19710,	((LBPR * 2 *  38) + 22) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4590,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *  54,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 7182,	((LBPR * 2 *  13) + 36) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	10423,	((LBPR * 2 *  57) + 33) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	18199,	((LBPR * 2 *  19) + 24) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	22519,	((LBPR * 2 *   8) + 19) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	37855,	((LBPR * 2 *  18) +	 1) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	12152,	((LBPR * 2 *  25) + 31) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12584,	((LBPR * 2 *  52) + 30) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5240,	((LBPR * 2 *   8) + 39) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 8372,	((LBPR * 2 *   7) + 35) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	17445,	((LBPR * 2 *  64) + 24) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	23709,	((LBPR * 2 *  12) + 17) & ~3,  LBPR *  57,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	35157,	((LBPR * 2 *  16) +	 4) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	35913,	((LBPR * 2 *  22) +	 3) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	14962,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	23062,	((LBPR * 2 *   2) + 18) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	31378,	((LBPR * 2 *  10) +	 8) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	33754,	((LBPR * 2 *  47) +	 6) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	21767,	((LBPR * 2 *   9) + 19) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	26735,	((LBPR * 2 *  35) + 14) & ~3,  LBPR *  59,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7511,	((LBPR * 2 *  12) + 36) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8483,	((LBPR * 2 *  51) + 35) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1248,	((LBPR * 2 *  41) + 43) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	19932,	((LBPR * 2 *  33) + 22) & ~3,  LBPR *  60,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	31380,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 3840,	((LBPR * 2 *  11) + 40) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	15181,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  61,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	22957,	((LBPR * 2 *  20) + 18) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	30841,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	38833,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	10646,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	21554,	((LBPR * 2 *  23) + 20) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	25550,	((LBPR * 2 *  40) + 15) & ~3,  LBPR *  62,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4058,	((LBPR * 2 *   6) + 40) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11943,	((LBPR * 2 *  19) + 31) & ~3,  LBPR *  63,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	33651,	((LBPR * 2 *  66) +	 6) & ~3,  LBPR *  63,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	34515,	((LBPR * 2 *  18) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	38187,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	10000,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *  64,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	19612,	((LBPR * 2 *  45) + 22) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	36784,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7516,	((LBPR * 2 *  19) + 36) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	15293,	((LBPR * 2 *  51) + 27) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	35597,	((LBPR * 2 *   5) +	 3) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	36029,	((LBPR * 2 *  16) +	 3) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	36245,	((LBPR * 2 *  29) +	 3) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12486,	((LBPR * 2 *   3) + 30) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	13350,	((LBPR * 2 *  12) + 29) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13998,	((LBPR * 2 *  16) + 28) & ~3,  LBPR *  66,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	21450,	((LBPR * 2 *  58) + 20) & ~3,  LBPR *  66,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  175,	((LBPR * 2 *  30) + 44) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	19939,	((LBPR * 2 *   1) + 22) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	20587,	((LBPR * 2 *   8) + 21) & ~3,  LBPR *  67,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	29767,	((LBPR * 2 *  36) + 10) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	15620,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	30848,	((LBPR * 2 *  42) +	 9) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3524,	((LBPR * 2 *  33) + 41) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	36464,	((LBPR * 2 *  16) +	 2) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	10977,	((LBPR * 2 *  19) + 32) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	22749,	((LBPR * 2 *  49) + 18) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	26313,	((LBPR * 2 *   7) + 14) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	36357,	((LBPR * 2 *  35) +	 3) & ~3,  LBPR *  69,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	13354,	((LBPR * 2 *   1) + 29) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	35602,	((LBPR * 2 *  19) +	 3) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5362,	((LBPR * 2 *  42) + 38) & ~3,  LBPR *  70,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  718,	((LBPR * 2 *   8) + 44) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	23615,	((LBPR * 2 *  11) + 17) & ~3,  LBPR *  71,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	33659,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 4499,	((LBPR * 2 *  54) + 39) & ~3,  LBPR *  71,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5903,	((LBPR * 2 *  23) + 38) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11952,	((LBPR * 2 *  55) + 31) & ~3,  LBPR *  72,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	17784,	((LBPR * 2 *  18) + 24) & ~3,  LBPR *  72,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	17892,	((LBPR * 2 *   2) + 24) & ~3,  LBPR *  72,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	25668,	((LBPR * 2 *  21) + 15) & ~3,  LBPR *  72,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	16813,	((LBPR * 2 *   1) + 25) & ~3,  LBPR *  73,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	26317,	((LBPR * 2 *  20) + 14) & ~3,  LBPR *  73,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	27073,	((LBPR * 2 *  43) + 13) & ~3,  LBPR *  73,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5365,	((LBPR * 2 *   8) + 38) & ~3,  LBPR *  73,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	10010,	((LBPR * 2 *  12) + 33) & ~3,  LBPR *  74,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14654,	((LBPR * 2 *  31) + 28) & ~3,  LBPR *  74,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2558,	((LBPR * 2 *  53) + 42) & ~3,  LBPR *  74,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	25778,	((LBPR * 2 *  12) + 15) & ~3,  LBPR *  74,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10551,	((LBPR * 2 *  29) + 32) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	18111,	((LBPR * 2 *  48) + 24) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7203,	((LBPR * 2 *  30) + 36) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7959,	((LBPR * 2 *  18) + 35) & ~3,  LBPR *  75,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	24808,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  76,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	27292,	((LBPR * 2 *  15) + 13) & ~3,  LBPR *  76,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	27292,	((LBPR * 2 *  24) + 13) & ~3,  LBPR *  76,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	36796,	((LBPR * 2 *  38) +	 2) & ~3,  LBPR *  76,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	14441,	((LBPR * 2 *  21) + 28) & ~3,  LBPR *  77,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	32477,	((LBPR * 2 *  22) +	 7) & ~3,  LBPR *  77,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	38201,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  77,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5585,	((LBPR * 2 *  70) + 38) & ~3,  LBPR *  77,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	16710,	((LBPR * 2 *  14) + 25) & ~3,  LBPR *  78,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4830,	((LBPR * 2 *  70) + 39) & ~3,  LBPR *  78,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5802,	((LBPR * 2 *  13) + 38) & ~3,  LBPR *  78,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6882,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  78,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	16927,	((LBPR * 2 *  71) + 25) & ~3,  LBPR *  79,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	18007,	((LBPR * 2 *   3) + 24) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	28375,	((LBPR * 2 *  12) + 12) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	37771,	((LBPR * 2 *  18) +	 1) & ~3,  LBPR *  79,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11204,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  80,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2888,	((LBPR * 2 *   7) + 41) & ~3,  LBPR *  80,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	37232,	((LBPR * 2 *   7) +	 2) & ~3,  LBPR *  80,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5156,	((LBPR * 2 *  61) + 39) & ~3,  LBPR *  80,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1485,	((LBPR * 2 *  63) + 43) & ~3,  LBPR *  81,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2673,	((LBPR * 2 *  10) + 42) & ~3,  LBPR *  81,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	30969,	((LBPR * 2 *  19) +	 9) & ~3,  LBPR *  81,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 8613,	((LBPR * 2 *  22) + 35) & ~3,  LBPR *  81,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	23518,	((LBPR * 2 *  20) + 17) & ~3,  LBPR *  82,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	32806,	((LBPR * 2 *  23) +	 7) & ~3,  LBPR *  82,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 6670,	((LBPR * 2 *  20) + 37) & ~3,  LBPR *  82,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7318,	((LBPR * 2 *  39) + 36) & ~3,  LBPR *  82,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	20063,	((LBPR * 2 *  67) + 21) & ~3,  LBPR *  83,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	25463,	((LBPR * 2 *  10) + 15) & ~3,  LBPR *  83,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	31943,	((LBPR * 2 *   5) +	 8) & ~3,  LBPR *  83,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  947,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  83,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14880,	((LBPR * 2 *  52) + 27) & ~3,  LBPR *  84,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	37344,	((LBPR * 2 *  20) +	 1) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6132,	((LBPR * 2 *   1) + 38) & ~3,  LBPR *  84,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6348,	((LBPR * 2 *  20) + 37) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	14125,	((LBPR * 2 *   6) + 28) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	21685,	((LBPR * 2 *  18) + 20) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	27409,	((LBPR * 2 *  10) + 13) & ~3,  LBPR *  85,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	33133,	((LBPR * 2 *  65) +	 6) & ~3,  LBPR *  85,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	16394,	((LBPR * 2 *  15) + 26) & ~3,  LBPR *  86,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	33026,	((LBPR * 2 *  14) +	 6) & ~3,  LBPR *  86,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	36482,	((LBPR * 2 *  60) +	 2) & ~3,  LBPR *  86,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6998,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  86,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	20175,	((LBPR * 2 *  20) + 21) & ~3,  LBPR *  87,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	28923,	((LBPR * 2 *  17) + 11) & ~3,  LBPR *  87,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	37995,	((LBPR * 2 *  28) +	 1) & ~3,  LBPR *  87,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7863,	((LBPR * 2 *  66) + 36) & ~3,  LBPR *  87,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12184,	((LBPR * 2 *  26) + 31) & ~3,  LBPR *  88,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	13588,	((LBPR * 2 *  36) + 29) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	19744,	((LBPR * 2 *   4) + 22) & ~3,  LBPR *  88,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 5596,	((LBPR * 2 *   9) + 38) & ~3,  LBPR *  88,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	10997,	((LBPR * 2 *  10) + 32) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	12725,	((LBPR * 2 *   6) + 30) & ~3,  LBPR *  89,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	27305,	((LBPR * 2 *  23) + 13) & ~3,  LBPR *  89,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8405,	((LBPR * 2 *  55) + 35) & ~3,  LBPR *  89,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	23094,	((LBPR * 2 *  15) + 18) & ~3,  LBPR *  90,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	28386,	((LBPR * 2 *  55) + 12) & ~3,  LBPR *  90,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	32490,	((LBPR * 2 *   3) +	 7) & ~3,  LBPR *  90,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	36594,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  90,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	13483,	((LBPR * 2 *   3) + 29) & ~3,  LBPR *  91,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	21259,	((LBPR * 2 *  14) + 20) & ~3,  LBPR *  91,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	35407,	((LBPR * 2 *  30) +	 4) & ~3,  LBPR *  91,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7543,	((LBPR * 2 *  36) + 36) & ~3,  LBPR *  91,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	25796,	((LBPR * 2 *  25) + 15) & ~3,  LBPR *  92,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	26336,	((LBPR * 2 *  54) + 14) & ~3,  LBPR *  92,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	33356,	((LBPR * 2 *   5) +	 6) & ~3,  LBPR *  92,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 8732,	((LBPR * 2 *   9) + 35) & ~3,  LBPR *  92,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	16617,	((LBPR * 2 *  16) + 25) & ~3,  LBPR *  93,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2037,	((LBPR * 2 *  70) + 42) & ~3,  LBPR *  93,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	21477,	((LBPR * 2 *  22) + 20) & ~3,  LBPR *  93,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	31413,	((LBPR * 2 *   0) +	 8) & ~3,  LBPR *  93,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	12514,	((LBPR * 2 *  13) + 30) & ~3,  LBPR *  94,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	16510,	((LBPR * 2 *  20) + 26) & ~3,  LBPR *  94,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	27958,	((LBPR * 2 *   1) + 12) & ~3,  LBPR *  94,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	32062,	((LBPR * 2 *  45) +	 8) & ~3,  LBPR *  94,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1175,	((LBPR * 2 *  14) + 43) & ~3,  LBPR *  95,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	13379,	((LBPR * 2 *  10) + 29) & ~3,  LBPR *  95,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1499,	((LBPR * 2 *   2) + 43) & ~3,  LBPR *  95,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	30551,	((LBPR * 2 *  60) +	 9) & ~3,  LBPR *  95,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	26556,	((LBPR * 2 *  23) + 14) & ~3,  LBPR *  96,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	28932,	((LBPR * 2 *  43) + 11) & ~3,  LBPR *  96,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	29796,	((LBPR * 2 *  28) + 10) & ~3,  LBPR *  96,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	35088,	((LBPR * 2 *  26) +	 4) & ~3,  LBPR *  96,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	21049,	((LBPR * 2 *  21) + 20) & ~3,  LBPR *  97,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4957,	((LBPR * 2 *   3) + 39) & ~3,  LBPR *  97,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8845,	((LBPR * 2 *  20) + 34) & ~3,  LBPR *  97,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  961,	((LBPR * 2 *  56) + 44) & ~3,  LBPR *  97,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11330,	((LBPR * 2 *  61) + 32) & ~3,  LBPR *  98,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	18026,	((LBPR * 2 *  35) + 24) & ~3,  LBPR *  98,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	25802,	((LBPR * 2 *   7) + 15) & ~3,  LBPR *  98,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8090,	((LBPR * 2 *  17) + 35) & ~3,  LBPR *  98,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11655,	((LBPR * 2 *  16) + 31) & ~3,  LBPR *  99,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	21807,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  99,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	31851,	((LBPR * 2 *  17) +	 8) & ~3,  LBPR *  99,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	35091,	((LBPR * 2 *  40) +	 4) & ~3,  LBPR *  99,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	19216,	((LBPR * 2 *  15) + 22) & ~3,  LBPR * 100,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	26236,	((LBPR * 2 *   4) + 14) & ~3,  LBPR * 100,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	34336,	((LBPR * 2 *  29) +	 5) & ~3,  LBPR * 100,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4528,	((LBPR * 2 *  39) + 39) & ~3,  LBPR * 100,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	18245,	((LBPR * 2 *  15) + 24) & ~3,  LBPR * 101,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	34985,	((LBPR * 2 *  21) +	 4) & ~3,  LBPR * 101,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	35849,	((LBPR * 2 *  47) +	 3) & ~3,  LBPR * 101,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	37037,	((LBPR * 2 *  17) +	 2) & ~3,  LBPR * 101,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	13062,	((LBPR * 2 *  44) + 30) & ~3,  LBPR * 102,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	27858,	((LBPR * 2 *   5) + 12) & ~3,  LBPR * 102,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	30774,	((LBPR * 2 *  20) +	 9) & ~3,  LBPR * 102,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	37578,	((LBPR * 2 *  14) +	 1) & ~3,  LBPR * 102,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	21379,	((LBPR * 2 *  13) + 20) & ~3,  LBPR * 103,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	24727,	((LBPR * 2 *  21) + 16) & ~3,  LBPR * 103,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3019,	((LBPR * 2 *  21) + 41) & ~3,  LBPR * 103,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6259,	((LBPR * 2 *  54) + 37) & ~3,  LBPR * 103,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1184,	((LBPR * 2 *   7) + 43) & ~3,  LBPR * 104,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	13172,	((LBPR * 2 *   1) + 29) & ~3,  LBPR * 104,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	28616,	((LBPR * 2 *  62) + 12) & ~3,  LBPR * 104,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	33368,	((LBPR * 2 *  22) +	 6) & ~3,  LBPR * 104,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	23541,	((LBPR * 2 *  64) + 17) & ~3,  LBPR * 105,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	26241,	((LBPR * 2 *  22) + 14) & ~3,  LBPR * 105,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	31749,	((LBPR * 2 *  34) +	 8) & ~3,  LBPR * 105,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	32073,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR * 105,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17602,	((LBPR * 2 *   9) + 24) & ~3,  LBPR * 106,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	20086,	((LBPR * 2 *   1) + 21) & ~3,  LBPR * 106,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7882,	((LBPR * 2 *   5) + 36) & ~3,  LBPR * 106,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8962,	((LBPR * 2 *  63) + 34) & ~3,  LBPR * 106,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	  215,	((LBPR * 2 *  41) + 44) & ~3,  LBPR * 107,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	27539,	((LBPR * 2 *  15) + 13) & ~3,  LBPR * 107,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	32075,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR * 107,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5507,	((LBPR * 2 *   7) + 38) & ~3,  LBPR * 107,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n12_neon4:
	.word		0,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16290,	((LBPR * 2 *  74) + 22) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	23310,	((LBPR * 2 *  27) + 12) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	27000,	((LBPR * 2 *  26) +	 7) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6030,	((LBPR * 2 *  30) + 36) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	13861,	((LBPR * 2 *  41) + 25) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word		1,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	25741,	((LBPR * 2 *  20) +	 9) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4501,	((LBPR * 2 *  10) + 38) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5491,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	12422,	((LBPR * 2 *  51) + 27) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1262,	((LBPR * 2 *  16) + 43) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2792,	((LBPR * 2 *   4) + 41) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	28622,	((LBPR * 2 *  27) +	 5) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word		2,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	23583,	((LBPR * 2 *   2) + 12) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	24033,	((LBPR * 2 *  16) + 11) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	31683,	((LBPR * 2 *  68) +	 1) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6213,	((LBPR * 2 *   6) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	21514,	((LBPR * 2 *  24) + 15) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	25024,	((LBPR * 2 *  82) + 10) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	28534,	((LBPR * 2 *   9) +	 5) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3244,	((LBPR * 2 *  33) + 40) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word		4,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12245,	((LBPR * 2 *  24) + 28) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13685,	((LBPR * 2 *   3) + 26) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	18815,	((LBPR * 2 *  30) + 18) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	22865,	((LBPR * 2 *  13) + 13) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word		5,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21246,	((LBPR * 2 *  32) + 15) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	25746,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	30426,	((LBPR * 2 *  76) +	 2) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word		6,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9276,	((LBPR * 2 *  21) + 32) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	11347,	((LBPR * 2 *   4) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	19267,	((LBPR * 2 *  89) + 18) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	23857,	((LBPR * 2 *  34) + 11) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3967,	((LBPR * 2 *  28) + 39) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word		7,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1358,	((LBPR * 2 *  18) + 43) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	26738,	((LBPR * 2 *  30) +	 7) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	29888,	((LBPR * 2 *  16) +	 3) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4418,	((LBPR * 2 *  87) + 38) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word		8,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	26649,	((LBPR * 2 *  58) +	 8) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	30699,	((LBPR * 2 *  21) +	 2) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	30699,	((LBPR * 2 *  24) +	 2) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	31779,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word		9,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  100,	((LBPR * 2 *  37) + 44) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   10,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12610,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	15850,	((LBPR * 2 *   5) + 23) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2530,	((LBPR * 2 *   1) + 41) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	11981,	((LBPR * 2 *  20) + 28) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   11,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15311,	((LBPR * 2 *  32) + 23) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	18011,	((LBPR * 2 *  19) + 20) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	24941,	((LBPR * 2 *   8) + 10) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   12,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16302,	((LBPR * 2 *  33) + 22) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	17742,	((LBPR * 2 *  78) + 20) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	29982,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7122,	((LBPR * 2 *  26) + 35) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	13063,	((LBPR * 2 *  16) + 26) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   13,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20803,	((LBPR * 2 *  66) + 16) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	28363,	((LBPR * 2 *  46) +	 5) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 9013,	((LBPR * 2 *   8) + 32) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	11804,	((LBPR * 2 *  67) + 28) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   14,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20354,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2534,	((LBPR * 2 *   0) + 41) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9014,	((LBPR * 2 *  63) + 32) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	14955,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   15,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16575,	((LBPR * 2 *  30) + 22) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	26925,	((LBPR * 2 *  63) +	 7) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	30165,	((LBPR * 2 *  23) +	 3) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11176,	((LBPR * 2 *  59) + 29) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	12166,	((LBPR * 2 *   6) + 28) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   16,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21526,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7666,	((LBPR * 2 *  73) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	10907,	((LBPR * 2 *  49) + 29) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15587,	((LBPR * 2 *   8) + 23) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   17,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	27197,	((LBPR * 2 *  56) +	 7) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4877,	((LBPR * 2 *  27) + 38) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	14508,	((LBPR * 2 *  81) + 24) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   18,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	24588,	((LBPR * 2 *  25) + 10) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 4608,	((LBPR * 2 *  23) + 38) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 9918,	((LBPR * 2 *  14) + 31) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10279,	((LBPR * 2 *  38) + 30) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	12529,	((LBPR * 2 *  15) + 27) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	14419,	((LBPR * 2 *  28) + 25) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	17299,	((LBPR * 2 *   2) + 21) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	26390,	((LBPR * 2 *  31) +	 8) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 3080,	((LBPR * 2 *  19) + 40) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4520,	((LBPR * 2 *  11) + 38) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 8480,	((LBPR * 2 *  74) + 33) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	16941,	((LBPR * 2 *  11) + 21) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 2091,	((LBPR * 2 *   8) + 42) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   21,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	25221,	((LBPR * 2 *  67) + 10) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	27561,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   22,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	26122,	((LBPR * 2 *  71) +	 8) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	27562,	((LBPR * 2 *  31) +	 6) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4972,	((LBPR * 2 *  85) + 38) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8032,	((LBPR * 2 *  19) + 33) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15323,	((LBPR * 2 *  19) + 23) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	16583,	((LBPR * 2 *  45) + 22) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	18653,	((LBPR * 2 *   3) + 19) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   23,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3983,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	18384,	((LBPR * 2 *  35) + 19) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	   24,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3174,	((LBPR * 2 *   4) + 40) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6594,	((LBPR * 2 *  17) + 35) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 8754,	((LBPR * 2 *  52) + 32) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	20545,	((LBPR * 2 *  27) + 16) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   25,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	26035,	((LBPR * 2 *  24) +	 8) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  295,	((LBPR * 2 *  19) + 44) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6865,	((LBPR * 2 *  78) + 35) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	10556,	((LBPR * 2 *  29) + 30) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	21896,	((LBPR * 2 *  83) + 14) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	26036,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   26,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7676,	((LBPR * 2 *  52) + 34) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	11727,	((LBPR * 2 *   7) + 28) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	15147,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1737,	((LBPR * 2 *  66) + 42) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   27,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6237,	((LBPR * 2 *  34) + 36) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11098,	((LBPR * 2 *  45) + 29) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	24598,	((LBPR * 2 *  18) + 10) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   28,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	29908,	((LBPR * 2 *  25) +	 3) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	  928,	((LBPR * 2 *  32) + 43) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	12719,	((LBPR * 2 *  35) + 27) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	21449,	((LBPR * 2 *   5) + 15) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	21449,	((LBPR * 2 *   6) + 15) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   29,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6689,	((LBPR * 2 *  14) + 35) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11370,	((LBPR * 2 *  20) + 29) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	13980,	((LBPR * 2 *  47) + 25) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2730,	((LBPR * 2 *  86) + 41) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   30,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5520,	((LBPR * 2 *  22) + 37) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11551,	((LBPR * 2 *   3) + 29) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	16681,	((LBPR * 2 *  46) + 21) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	21001,	((LBPR * 2 *  80) + 15) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	29371,	((LBPR * 2 *   4) +	 4) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   31,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17042,	((LBPR * 2 *  25) + 21) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	18212,	((LBPR * 2 *   6) + 19) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	19202,	((LBPR * 2 *  64) + 18) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	29642,	((LBPR * 2 *  17) +	 3) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   32,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10023,	((LBPR * 2 *  15) + 31) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	26403,	((LBPR * 2 *  35) +	 8) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   33,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4173,	((LBPR * 2 *  40) + 39) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7863,	((LBPR * 2 *  16) + 34) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	15424,	((LBPR * 2 *  77) + 23) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	25954,	((LBPR * 2 *  12) +	 9) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	29194,	((LBPR * 2 *  88) +	 4) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   34,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4264,	((LBPR * 2 *  11) + 39) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	13715,	((LBPR * 2 *  22) + 26) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	15605,	((LBPR * 2 *  28) + 23) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	20645,	((LBPR * 2 *  14) + 16) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	24965,	((LBPR * 2 *  36) + 10) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   35,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20646,	((LBPR * 2 *  21) + 16) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	24966,	((LBPR * 2 *  25) + 10) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	26676,	((LBPR * 2 *  51) +	 8) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3186,	((LBPR * 2 *   5) + 40) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   36,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12997,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	17677,	((LBPR * 2 *  61) + 20) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	25687,	((LBPR * 2 *  10) +	 9) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   37,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6247,	((LBPR * 2 *  31) + 36) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	14798,	((LBPR * 2 *  10) + 24) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3818,	((LBPR * 2 *  50) + 39) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   38,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3908,	((LBPR * 2 *  37) + 39) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9308,	((LBPR * 2 *   7) + 32) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	29919,	((LBPR * 2 *  26) +	 3) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	32169,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   39,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8589,	((LBPR * 2 *  55) + 33) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 9129,	((LBPR * 2 *  20) + 32) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10120,	((LBPR * 2 *  75) + 31) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12280,	((LBPR * 2 *  70) + 28) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	30370,	((LBPR * 2 *  15) +	 2) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   40,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7960,	((LBPR * 2 *  20) + 34) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	15071,	((LBPR * 2 *  57) + 24) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	24791,	((LBPR * 2 *  31) + 10) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	31451,	((LBPR * 2 *  17) +	 1) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   41,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6071,	((LBPR * 2 *  58) + 36) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	21462,	((LBPR * 2 *  20) + 15) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	22092,	((LBPR * 2 *  27) + 14) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	28032,	((LBPR * 2 *  16) +	 6) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   42,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6612,	((LBPR * 2 *  86) + 35) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	10393,	((LBPR * 2 *  59) + 30) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	20113,	((LBPR * 2 *  89) + 17) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	   43,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4543,	((LBPR * 2 *  21) + 38) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5443,	((LBPR * 2 *  14) + 37) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13364,	((LBPR * 2 *  19) + 26) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   44,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5444,	((LBPR * 2 *   8) + 37) & ~3,  LBPR *  44,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  764,	((LBPR * 2 *  39) + 44) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9674,	((LBPR * 2 *  25) + 31) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	15975,	((LBPR * 2 *  22) + 22) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   45,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4635,	((LBPR * 2 *   1) + 38) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5265,	((LBPR * 2 *  18) + 37) & ~3,  LBPR *  45,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6165,	((LBPR * 2 *   5) + 36) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2296,	((LBPR * 2 *  33) + 41) & ~3,  LBPR *  46,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	29656,	((LBPR * 2 *  21) +	 3) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   46,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5896,	((LBPR * 2 *   7) + 36) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6526,	((LBPR * 2 *  71) + 36) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14897,	((LBPR * 2 *  26) + 24) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	21557,	((LBPR * 2 *  50) + 15) & ~3,  LBPR *  47,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	30647,	((LBPR * 2 *  65) +	 2) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   47,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8597,	((LBPR * 2 *   0) + 33) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	16158,	((LBPR * 2 *  10) + 22) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	18408,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  48,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	19038,	((LBPR * 2 *  35) + 18) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   48,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9318,	((LBPR * 2 *   0) + 32) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	10219,	((LBPR * 2 *   0) + 30) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	16789,	((LBPR * 2 *   5) + 21) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 1759,	((LBPR * 2 *  29) + 42) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	26689,	((LBPR * 2 *  33) +	 8) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   49,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10490,	((LBPR * 2 *  12) + 30) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	13370,	((LBPR * 2 *  60) + 26) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	22370,	((LBPR * 2 *  11) + 14) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	28130,	((LBPR * 2 *   1) +	 6) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   50,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20661,	((LBPR * 2 *  85) + 16) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	21921,	((LBPR * 2 *  21) + 14) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3651,	((LBPR * 2 *   1) + 40) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   51,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5811,	((LBPR * 2 *   3) + 37) & ~3,  LBPR *  51,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	12742,	((LBPR * 2 *  87) + 27) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	21202,	((LBPR * 2 *   5) + 15) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	26962,	((LBPR * 2 *  73) +	 7) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	31552,	((LBPR * 2 *  17) +	 1) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   52,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12383,	((LBPR * 2 *  40) + 27) & ~3,  LBPR *  53,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	13103,	((LBPR * 2 *  23) + 26) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	17783,	((LBPR * 2 *  68) + 20) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	22193,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   53,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	23634,	((LBPR * 2 *   8) + 12) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	26154,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4554,	((LBPR * 2 *  83) + 38) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   54,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8334,	((LBPR * 2 *   6) + 33) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14905,	((LBPR * 2 *  53) + 24) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	31285,	((LBPR * 2 *  25) +	 1) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	  505,	((LBPR * 2 *  30) + 44) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   55,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  595,	((LBPR * 2 *  88) + 44) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1046,	((LBPR * 2 *  42) + 43) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	15896,	((LBPR * 2 *  28) + 23) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2936,	((LBPR * 2 *  30) + 41) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	31016,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   56,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15447,	((LBPR * 2 *   3) + 23) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	27777,	((LBPR * 2 *  26) +	 6) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   57,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9597,	((LBPR * 2 *  12) + 31) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9597,	((LBPR * 2 *  60) + 31) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	18688,	((LBPR * 2 *  23) + 19) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	25168,	((LBPR * 2 *  35) + 10) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	28768,	((LBPR * 2 *   4) +	 5) & ~3,  LBPR *  58,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 5098,	((LBPR * 2 *  29) + 38) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   58,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10139,	((LBPR * 2 *  29) + 31) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	15719,	((LBPR * 2 *  54) + 23) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   59,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8069,	((LBPR * 2 *  44) + 33) & ~3,  LBPR *  59,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 9509,	((LBPR * 2 *  17) + 31) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  240,	((LBPR * 2 *  38) + 44) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	27060,	((LBPR * 2 *  57) +	 7) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	28050,	((LBPR * 2 *  21) +	 6) & ~3,  LBPR *  60,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	32370,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   60,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20131,	((LBPR * 2 *  31) + 17) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	26611,	((LBPR * 2 *  70) +	 8) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	30841,	((LBPR * 2 *  12) +	 2) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   61,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7081,	((LBPR * 2 *  61) + 35) & ~3,  LBPR *  61,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	18152,	((LBPR * 2 *  65) + 19) & ~3,  LBPR *  62,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2762,	((LBPR * 2 *  12) + 41) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6182,	((LBPR * 2 *  12) + 36) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   62,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8882,	((LBPR * 2 *  35) + 32) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11943,	((LBPR * 2 *  34) + 28) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	29223,	((LBPR * 2 *  29) +	 4) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3033,	((LBPR * 2 *   1) + 40) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   63,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7263,	((LBPR * 2 *   1) + 35) & ~3,  LBPR *  63,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	16264,	((LBPR * 2 *   3) + 22) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	20314,	((LBPR * 2 *  33) + 16) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	29224,	((LBPR * 2 *  23) +	 4) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 6454,	((LBPR * 2 *  18) + 36) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   64,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	19235,	((LBPR * 2 *  13) + 18) & ~3,  LBPR *  65,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	24725,	((LBPR * 2 *  47) + 10) & ~3,  LBPR *  65,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	26165,	((LBPR * 2 *  72) +	 8) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   65,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9335,	((LBPR * 2 *  17) + 32) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	22836,	((LBPR * 2 *   7) + 13) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	31656,	((LBPR * 2 *  24) +	 1) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 4746,	((LBPR * 2 *  15) + 38) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   66,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  66,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6996,	((LBPR * 2 *  81) + 35) & ~3,  LBPR *  66,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	20947,	((LBPR * 2 *  34) + 16) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	22207,	((LBPR * 2 *   9) + 14) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	24457,	((LBPR * 2 *  30) + 11) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2767,	((LBPR * 2 *  49) + 41) & ~3,  LBPR *  67,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   67,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17618,	((LBPR * 2 *   6) + 20) & ~3,  LBPR *  68,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	18608,	((LBPR * 2 *  32) + 19) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	22298,	((LBPR * 2 *  31) + 14) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5288,	((LBPR * 2 *  43) + 37) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   68,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  68,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11409,	((LBPR * 2 *  26) + 29) & ~3,  LBPR *  69,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	12489,	((LBPR * 2 *  79) + 27) & ~3,  LBPR *  69,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	31119,	((LBPR * 2 *  22) +	 1) & ~3,  LBPR *  69,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   69,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7989,	((LBPR * 2 *  84) + 34) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12400,	((LBPR * 2 *  32) + 27) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 1510,	((LBPR * 2 *  20) + 43) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	22120,	((LBPR * 2 *  13) + 14) & ~3,  LBPR *  70,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	23830,	((LBPR * 2 *   1) + 12) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   70,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14831,	((LBPR * 2 *  17) + 24) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	24731,	((LBPR * 2 *   2) + 10) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	25631,	((LBPR * 2 *  24) +	 9) & ~3,  LBPR *  71,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5651,	((LBPR * 2 *  28) + 37) & ~3,  LBPR *  71,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   71,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15642,	((LBPR * 2 *  34) + 23) & ~3,  LBPR *  72,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	20232,	((LBPR * 2 *  53) + 17) & ~3,  LBPR *  72,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	24102,	((LBPR * 2 *  39) + 11) & ~3,  LBPR *  72,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   72,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  72,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  792,	((LBPR * 2 *   2) + 44) & ~3,  LBPR *  72,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16633,	((LBPR * 2 *  18) + 22) & ~3,  LBPR *  73,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	19513,	((LBPR * 2 *  62) + 18) & ~3,  LBPR *  73,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	29773,	((LBPR * 2 *  27) +	 3) & ~3,  LBPR *  73,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 7093,	((LBPR * 2 *  35) + 35) & ~3,  LBPR *  73,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   73,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  73,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11774,	((LBPR * 2 *  75) + 28) & ~3,  LBPR *  74,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	16904,	((LBPR * 2 *   9) + 21) & ~3,  LBPR *  74,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	25634,	((LBPR * 2 *  22) +	 9) & ~3,  LBPR *  74,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	27524,	((LBPR * 2 *   9) +	 6) & ~3,  LBPR *  74,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   74,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  74,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1335,	((LBPR * 2 *  77) + 43) & ~3,  LBPR *  75,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	19605,	((LBPR * 2 *  22) + 17) & ~3,  LBPR *  75,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	31755,	((LBPR * 2 *  23) +	 1) & ~3,  LBPR *  75,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   75,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9345,	((LBPR * 2 *  69) + 32) & ~3,  LBPR *  75,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	18346,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  76,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	21856,	((LBPR * 2 *  26) + 14) & ~3,  LBPR *  76,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	24646,	((LBPR * 2 *  54) + 10) & ~3,  LBPR *  76,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	26086,	((LBPR * 2 *  29) +	 8) & ~3,  LBPR *  76,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   76,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  76,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11327,	((LBPR * 2 *   7) + 29) & ~3,  LBPR *  77,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	14567,	((LBPR * 2 *  36) + 24) & ~3,  LBPR *  77,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	22757,	((LBPR * 2 *  28) + 13) & ~3,  LBPR *  77,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	23117,	((LBPR * 2 *  24) + 13) & ~3,  LBPR *  77,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   77,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  77,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13668,	((LBPR * 2 *  13) + 26) & ~3,  LBPR *  78,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	15918,	((LBPR * 2 *  41) + 23) & ~3,  LBPR *  78,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	24828,	((LBPR * 2 *  15) + 10) & ~3,  LBPR *  78,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	28158,	((LBPR * 2 *  44) +	 6) & ~3,  LBPR *  78,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   78,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  78,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17989,	((LBPR * 2 *  48) + 20) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	21949,	((LBPR * 2 *  22) + 14) & ~3,  LBPR *  79,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   79,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9169,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  79,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	  979,	((LBPR * 2 *  82) + 43) & ~3,  LBPR *  79,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	29870,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *  80,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	32120,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  80,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 5750,	((LBPR * 2 *   2) + 37) & ~3,  LBPR *  80,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	   80,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *  80,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8900,	((LBPR * 2 *  64) + 32) & ~3,  LBPR *  80,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11241,	((LBPR * 2 *  72) + 29) & ~3,  LBPR *  81,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	21951,	((LBPR * 2 *  16) + 14) & ~3,  LBPR *  81,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	22851,	((LBPR * 2 *  34) + 13) & ~3,  LBPR *  81,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	30051,	((LBPR * 2 *  76) +	 3) & ~3,  LBPR *  81,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   81,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  81,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14392,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  82,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15112,	((LBPR * 2 *  34) + 24) & ~3,  LBPR *  82,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	25912,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *  82,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	31942,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  82,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   82,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  82,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14213,	((LBPR * 2 *   7) + 25) & ~3,  LBPR *  83,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1433,	((LBPR * 2 *  62) + 43) & ~3,  LBPR *  83,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19613,	((LBPR * 2 *  33) + 17) & ~3,  LBPR *  83,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	  263,	((LBPR * 2 *  27) + 44) & ~3,  LBPR *  83,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   83,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  83,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17094,	((LBPR * 2 *  11) + 21) & ~3,  LBPR *  84,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	21864,	((LBPR * 2 *  28) + 14) & ~3,  LBPR *  84,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	29694,	((LBPR * 2 *  69) +	 3) & ~3,  LBPR *  84,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  624,	((LBPR * 2 *  18) + 44) & ~3,  LBPR *  84,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   84,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  84,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14665,	((LBPR * 2 *  10) + 24) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	21415,	((LBPR * 2 *   9) + 15) & ~3,  LBPR *  85,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	30145,	((LBPR * 2 *  29) +	 3) & ~3,  LBPR *  85,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6025,	((LBPR * 2 *  33) + 36) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   85,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  85,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10706,	((LBPR * 2 *  23) + 30) & ~3,  LBPR *  86,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	29246,	((LBPR * 2 *  32) +	 4) & ~3,  LBPR *  86,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	29966,	((LBPR * 2 *   8) +	 3) & ~3,  LBPR *  86,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	30326,	((LBPR * 2 *  31) +	 3) & ~3,  LBPR *  86,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   86,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  86,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21327,	((LBPR * 2 *  42) + 15) & ~3,  LBPR *  87,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	21777,	((LBPR * 2 *  84) + 14) & ~3,  LBPR *  87,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	23397,	((LBPR * 2 *  11) + 12) & ~3,  LBPR *  87,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	31857,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  87,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   87,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  87,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13858,	((LBPR * 2 *  15) + 25) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	16018,	((LBPR * 2 *   5) + 22) & ~3,  LBPR *  88,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	19978,	((LBPR * 2 *  56) + 17) & ~3,  LBPR *  88,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	  718,	((LBPR * 2 *   7) + 44) & ~3,  LBPR *  88,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   88,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  88,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14579,	((LBPR * 2 *  43) + 24) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	19529,	((LBPR * 2 *  19) + 18) & ~3,  LBPR *  89,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	26909,	((LBPR * 2 *   0) +	 7) & ~3,  LBPR *  89,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	32309,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   89,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  89,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n35_neon4:
	.word		0,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14400,	((LBPR * 2 *  15) + 20) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14616,	((LBPR * 2 * 101) + 19) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	15048,	((LBPR * 2 *  40) + 18) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	17064,	((LBPR * 2 *   0) + 15) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	22536,	((LBPR * 2 *  22) +	 5) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	24840,	((LBPR * 2 *  32) +	 1) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 8208,	((LBPR * 2 *  33) + 30) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9648,	((LBPR * 2 *  24) + 28) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	11161,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1873,	((LBPR * 2 *   9) + 41) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	18865,	((LBPR * 2 *  11) + 12) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word		1,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	24913,	((LBPR * 2 *  97) +	 1) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4825,	((LBPR * 2 *  24) + 36) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5329,	((LBPR * 2 *  44) + 35) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9649,	((LBPR * 2 *  33) + 28) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 9937,	((LBPR * 2 *   7) + 27) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11234,	((LBPR * 2 *  33) + 25) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	12818,	((LBPR * 2 *   8) + 22) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	18506,	((LBPR * 2 *   6) + 12) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	24410,	((LBPR * 2 *  92) +	 2) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2522,	((LBPR * 2 *  34) + 40) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	25706,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word		2,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3746,	((LBPR * 2 *  14) + 38) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6770,	((LBPR * 2 *  64) + 33) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	10443,	((LBPR * 2 *  22) + 26) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	13395,	((LBPR * 2 *  17) + 21) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	15195,	((LBPR * 2 * 104) + 18) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	15627,	((LBPR * 2 *  17) + 17) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	17499,	((LBPR * 2 *  27) + 14) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	18651,	((LBPR * 2 *  26) + 12) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	23547,	((LBPR * 2 *  12) +	 4) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	25851,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word		3,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10012,	((LBPR * 2 *  14) + 27) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1660,	((LBPR * 2 *  55) + 42) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2452,	((LBPR * 2 *  25) + 40) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	25420,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	25780,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3604,	((LBPR * 2 *  18) + 38) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word		4,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8716,	((LBPR * 2 *  18) + 29) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 9004,	((LBPR * 2 *  11) + 29) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11525,	((LBPR * 2 *  25) + 25) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	14477,	((LBPR * 2 *  48) + 19) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15053,	((LBPR * 2 *  22) + 18) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	15125,	((LBPR * 2 *  24) + 18) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3821,	((LBPR * 2 *  29) + 38) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word		5,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  797,	((LBPR * 2 *  28) + 43) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8645,	((LBPR * 2 *  31) + 30) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9869,	((LBPR * 2 *  94) + 27) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	12966,	((LBPR * 2 *  10) + 22) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	13254,	((LBPR * 2 *  50) + 22) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	17646,	((LBPR * 2 *  20) + 14) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	20526,	((LBPR * 2 *  25) +	 9) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	24558,	((LBPR * 2 *  98) +	 2) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	25350,	((LBPR * 2 *  17) +	 1) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6126,	((LBPR * 2 *   6) + 34) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word		6,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7206,	((LBPR * 2 *  12) + 32) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	13255,	((LBPR * 2 *  25) + 22) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	16423,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	18655,	((LBPR * 2 *  45) + 12) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	20671,	((LBPR * 2 *  97) +	 9) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	21463,	((LBPR * 2 *  27) +	 7) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3175,	((LBPR * 2 *  31) + 39) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4471,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6199,	((LBPR * 2 *  30) + 34) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word		7,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17720,	((LBPR * 2 *  35) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	25496,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	25712,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4040,	((LBPR * 2 *  22) + 38) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6344,	((LBPR * 2 *   8) + 34) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7064,	((LBPR * 2 *   8) + 32) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8720,	((LBPR * 2 *   8) + 29) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word		8,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9368,	((LBPR * 2 *  38) + 28) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11313,	((LBPR * 2 *  11) + 25) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	12177,	((LBPR * 2 *  31) + 23) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	23697,	((LBPR * 2 *  30) +	 3) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	24633,	((LBPR * 2 *  77) +	 2) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4617,	((LBPR * 2 *  67) + 37) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4761,	((LBPR * 2 *  22) + 36) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5625,	((LBPR * 2 *   0) + 35) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8433,	((LBPR * 2 *   7) + 30) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word		9,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13474,	((LBPR * 2 *  23) + 21) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	16858,	((LBPR * 2 *  24) + 15) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	19234,	((LBPR * 2 *  51) + 11) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4186,	((LBPR * 2 *   1) + 37) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4402,	((LBPR * 2 *  13) + 37) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5842,	((LBPR * 2 *  17) + 34) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 9442,	((LBPR * 2 *  30) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	  946,	((LBPR * 2 * 103) + 43) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   11,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17507,	((LBPR * 2 *  16) + 14) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	20747,	((LBPR * 2 *  82) +	 9) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	21611,	((LBPR * 2 *   9) +	 7) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	24203,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4403,	((LBPR * 2 *  56) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6635,	((LBPR * 2 *  11) + 33) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 7643,	((LBPR * 2 *   4) + 31) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9803,	((LBPR * 2 *  11) + 28) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11676,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   12,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14556,	((LBPR * 2 *  11) + 19) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	18444,	((LBPR * 2 *  41) + 13) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	20172,	((LBPR * 2 *  25) + 10) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	24924,	((LBPR * 2 *  33) +	 1) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5340,	((LBPR * 2 *   5) + 35) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 7428,	((LBPR * 2 *  35) + 32) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8220,	((LBPR * 2 *  94) + 30) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1021,	((LBPR * 2 *  81) + 43) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	11749,	((LBPR * 2 *  34) + 24) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   13,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15925,	((LBPR * 2 *   3) + 17) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	18661,	((LBPR * 2 *  36) + 12) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	22981,	((LBPR * 2 *  15) +	 5) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2893,	((LBPR * 2 *  31) + 40) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3685,	((LBPR * 2 *   7) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6853,	((LBPR * 2 *   3) + 33) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	   14,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2030,	((LBPR * 2 *  69) + 41) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	20534,	((LBPR * 2 *  13) +	 9) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	22910,	((LBPR * 2 *  28) +	 5) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	23918,	((LBPR * 2 *  17) +	 3) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	25358,	((LBPR * 2 *  29) +	 1) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4694,	((LBPR * 2 *   7) + 36) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6926,	((LBPR * 2 *  89) + 33) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 8006,	((LBPR * 2 *  15) + 31) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	10311,	((LBPR * 2 *  31) + 27) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12039,	((LBPR * 2 *  80) + 24) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14487,	((LBPR * 2 *   4) + 19) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   15,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16071,	((LBPR * 2 *  60) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	16287,	((LBPR * 2 *  27) + 16) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	22047,	((LBPR * 2 *  23) +	 6) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7575,	((LBPR * 2 *  15) + 31) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 8439,	((LBPR * 2 *  32) + 30) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   16,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17728,	((LBPR * 2 *  13) + 14) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	18448,	((LBPR * 2 *  19) + 13) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	18880,	((LBPR * 2 *  27) + 12) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	23128,	((LBPR * 2 *   9) +	 4) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	24640,	((LBPR * 2 *  41) +	 2) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 3688,	((LBPR * 2 * 102) + 38) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5056,	((LBPR * 2 *  29) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5128,	((LBPR * 2 *  15) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14705,	((LBPR * 2 *  26) + 19) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	   17,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21617,	((LBPR * 2 *  60) +	 7) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 2177,	((LBPR * 2 *   2) + 41) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	22985,	((LBPR * 2 *  29) +	 5) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	25361,	((LBPR * 2 *   5) +	 1) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	  377,	((LBPR * 2 *  23) + 44) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 6209,	((LBPR * 2 *  90) + 34) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 6353,	((LBPR * 2 *  35) + 34) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12402,	((LBPR * 2 *  99) + 23) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	16218,	((LBPR * 2 *   1) + 16) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	17442,	((LBPR * 2 *   4) + 14) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   18,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	22770,	((LBPR * 2 *  58) +	 5) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	24210,	((LBPR * 2 *  23) +	 3) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2898,	((LBPR * 2 *  14) + 40) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6066,	((LBPR * 2 *  20) + 34) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 9306,	((LBPR * 2 *  14) + 28) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	13555,	((LBPR * 2 *   2) + 21) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13915,	((LBPR * 2 *  91) + 20) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	14131,	((LBPR * 2 *  59) + 20) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   19,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	25651,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2971,	((LBPR * 2 *  27) + 39) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3691,	((LBPR * 2 *  31) + 38) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5635,	((LBPR * 2 *   5) + 35) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7507,	((LBPR * 2 *   9) + 32) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11972,	((LBPR * 2 *  23) + 24) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13196,	((LBPR * 2 *  92) + 22) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	20900,	((LBPR * 2 *  10) +	 8) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   20,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21908,	((LBPR * 2 *  32) +	 7) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	22124,	((LBPR * 2 *  11) +	 6) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8084,	((LBPR * 2 *  63) + 31) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 8732,	((LBPR * 2 *   2) + 29) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 8804,	((LBPR * 2 *  19) + 29) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	13053,	((LBPR * 2 *  15) + 22) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	16365,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	16581,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	19245,	((LBPR * 2 *   2) + 11) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   21,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	24213,	((LBPR * 2 *   4) +	 3) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 5133,	((LBPR * 2 *  75) + 36) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5421,	((LBPR * 2 *   6) + 35) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  597,	((LBPR * 2 *  62) + 44) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10174,	((LBPR * 2 *  26) + 27) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	15214,	((LBPR * 2 *  26) + 18) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	16582,	((LBPR * 2 *  21) + 16) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	17014,	((LBPR * 2 * 102) + 15) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	19030,	((LBPR * 2 *  29) + 12) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21766,	((LBPR * 2 *   3) +	 7) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   22,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4198,	((LBPR * 2 *  17) + 37) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  742,	((LBPR * 2 *  49) + 43) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	17015,	((LBPR * 2 *   1) + 15) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	19175,	((LBPR * 2 *  42) + 11) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	20543,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	20831,	((LBPR * 2 *  19) +	 8) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	21911,	((LBPR * 2 *  79) +	 7) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4127,	((LBPR * 2 *  27) + 37) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5567,	((LBPR * 2 *  27) + 35) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7943,	((LBPR * 2 *  27) + 31) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	19968,	((LBPR * 2 *  62) + 10) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	22056,	((LBPR * 2 *  30) +	 6) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	24360,	((LBPR * 2 *  21) +	 2) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2472,	((LBPR * 2 *  35) + 40) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   24,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	25656,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4488,	((LBPR * 2 *  20) + 37) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6504,	((LBPR * 2 *  86) + 33) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8952,	((LBPR * 2 *   6) + 29) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	12697,	((LBPR * 2 *  11) + 23) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	13273,	((LBPR * 2 *  51) + 22) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	14929,	((LBPR * 2 *  17) + 19) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	17305,	((LBPR * 2 *   1) + 15) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	20041,	((LBPR * 2 *   1) + 10) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	20473,	((LBPR * 2 *  32) +	 9) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	22705,	((LBPR * 2 *  76) +	 5) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   25,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3553,	((LBPR * 2 *  25) + 38) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	15290,	((LBPR * 2 *  17) + 18) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1538,	((LBPR * 2 *  35) + 42) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	19826,	((LBPR * 2 *  14) + 10) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	20474,	((LBPR * 2 *  28) +	 9) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	21122,	((LBPR * 2 *  52) +	 8) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   26,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3122,	((LBPR * 2 *   0) + 39) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3482,	((LBPR * 2 *  16) + 39) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6938,	((LBPR * 2 *  76) + 33) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10971,	((LBPR * 2 *  43) + 26) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	13059,	((LBPR * 2 *  16) + 22) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	13059,	((LBPR * 2 *   6) + 22) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14931,	((LBPR * 2 *  10) + 19) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	15219,	((LBPR * 2 *  83) + 18) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   27,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3627,	((LBPR * 2 *  35) + 38) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3699,	((LBPR * 2 *  32) + 38) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   99,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	12340,	((LBPR * 2 *  10) + 23) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	18244,	((LBPR * 2 *  32) + 13) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	22636,	((LBPR * 2 *  30) +	 5) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	25012,	((LBPR * 2 *  72) +	 1) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   28,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4636,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 5500,	((LBPR * 2 *   2) + 35) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 7300,	((LBPR * 2 *  47) + 32) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 9604,	((LBPR * 2 *  18) + 28) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10757,	((LBPR * 2 *  59) + 26) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	16445,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	16445,	((LBPR * 2 *  30) + 16) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	20189,	((LBPR * 2 *   5) + 10) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	21197,	((LBPR * 2 *  75) +	 8) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	22421,	((LBPR * 2 *  11) +	 6) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	22853,	((LBPR * 2 *   2) +	 5) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   29,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6797,	((LBPR * 2 *  27) + 33) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14646,	((LBPR * 2 *  13) + 19) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	17382,	((LBPR * 2 *   8) + 14) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	22422,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	22782,	((LBPR * 2 *  53) +	 5) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	23718,	((LBPR * 2 *  29) +	 3) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	25446,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   30,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3702,	((LBPR * 2 *  99) + 38) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5286,	((LBPR * 2 *   8) + 35) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	10831,	((LBPR * 2 *  33) + 26) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11119,	((LBPR * 2 *   4) + 25) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	14359,	((LBPR * 2 *  85) + 20) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	20119,	((LBPR * 2 *  26) + 10) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	25087,	((LBPR * 2 *   1) +	 1) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   31,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5431,	((LBPR * 2 *  32) + 35) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6079,	((LBPR * 2 *  52) + 34) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 9247,	((LBPR * 2 *  10) + 29) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10256,	((LBPR * 2 *  23) + 27) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	13568,	((LBPR * 2 *  66) + 21) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1400,	((LBPR * 2 *  21) + 42) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	14216,	((LBPR * 2 *   7) + 20) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	16088,	((LBPR * 2 *  32) + 17) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	20912,	((LBPR * 2 *   6) +	 8) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   32,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8816,	((LBPR * 2 *  88) + 29) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9752,	((LBPR * 2 *  22) + 28) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	10761,	((LBPR * 2 *  38) + 26) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	11049,	((LBPR * 2 *   2) + 25) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	11265,	((LBPR * 2 *  83) + 25) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13929,	((LBPR * 2 *   8) + 20) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	23577,	((LBPR * 2 *   3) +	 4) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	24009,	((LBPR * 2 *  14) +	 3) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	24153,	((LBPR * 2 *  30) +	 3) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	24585,	((LBPR * 2 *  16) +	 2) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   33,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11626,	((LBPR * 2 *   0) + 24) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	13282,	((LBPR * 2 *  19) + 22) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	17170,	((LBPR * 2 *  23) + 15) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	18970,	((LBPR * 2 *  43) + 12) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   34,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5218,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5938,	((LBPR * 2 *  23) + 34) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6802,	((LBPR * 2 *   6) + 33) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 8314,	((LBPR * 2 * 100) + 30) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	11555,	((LBPR * 2 *   3) + 25) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	11843,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12563,	((LBPR * 2 *   3) + 23) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	17387,	((LBPR * 2 *  96) + 14) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  179,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	18539,	((LBPR * 2 *  36) + 12) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	23363,	((LBPR * 2 *  27) +	 4) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	23867,	((LBPR * 2 *  24) +	 3) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   35,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1116,	((LBPR * 2 *   4) + 43) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	21132,	((LBPR * 2 *  26) +	 8) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	22140,	((LBPR * 2 *  47) +	 6) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2988,	((LBPR * 2 *  24) + 39) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3564,	((LBPR * 2 * 106) + 38) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   36,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6516,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  756,	((LBPR * 2 *  13) + 43) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  828,	((LBPR * 2 *   1) + 43) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	11629,	((LBPR * 2 *   1) + 24) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	15013,	((LBPR * 2 *   5) + 19) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	17245,	((LBPR * 2 *  19) + 15) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19837,	((LBPR * 2 * 103) + 10) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	24157,	((LBPR * 2 *  17) +	 3) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   37,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4285,	((LBPR * 2 *  65) + 37) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 7309,	((LBPR * 2 *  24) + 32) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7453,	((LBPR * 2 *  16) + 32) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	13862,	((LBPR * 2 *  35) + 21) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	18254,	((LBPR * 2 *  11) + 13) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	19190,	((LBPR * 2 *  34) + 11) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	19982,	((LBPR * 2 *  12) + 10) & ~3,  LBPR *  38,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	19982,	((LBPR * 2 *  44) + 10) & ~3,  LBPR *  38,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	23006,	((LBPR * 2 *   9) +	 5) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	23366,	((LBPR * 2 *  25) +	 4) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   38,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4934,	((LBPR * 2 *  74) + 36) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	16455,	((LBPR * 2 *  20) + 16) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	20775,	((LBPR * 2 *  42) +	 9) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	21855,	((LBPR * 2 *  20) +	 7) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2415,	((LBPR * 2 *  86) + 40) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3999,	((LBPR * 2 *  30) + 38) & ~3,  LBPR *  39,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   39,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7455,	((LBPR * 2 *  15) + 32) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8607,	((LBPR * 2 *  22) + 30) & ~3,  LBPR *  39,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8895,	((LBPR * 2 *  29) + 29) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1120,	((LBPR * 2 *  15) + 43) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12136,	((LBPR * 2 * 104) + 24) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15376,	((LBPR * 2 *  20) + 18) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1552,	((LBPR * 2 *  25) + 42) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	21784,	((LBPR * 2 *  58) +	 7) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	25528,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   40,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7096,	((LBPR * 2 *  26) + 32) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7744,	((LBPR * 2 *  11) + 31) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	11129,	((LBPR * 2 *  49) + 25) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	13505,	((LBPR * 2 *  93) + 21) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	16529,	((LBPR * 2 *   4) + 16) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	19265,	((LBPR * 2 *  25) + 11) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	24593,	((LBPR * 2 *  25) +	 2) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	24953,	((LBPR * 2 *  34) +	 1) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 2921,	((LBPR * 2 *   9) + 40) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   41,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5225,	((LBPR * 2 *  30) + 36) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11346,	((LBPR * 2 *   2) + 25) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13362,	((LBPR * 2 *  40) + 21) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1770,	((LBPR * 2 *  10) + 42) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	20778,	((LBPR * 2 *  31) +	 9) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	23586,	((LBPR * 2 *  22) +	 4) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	24306,	((LBPR * 2 *  81) +	 2) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2922,	((LBPR * 2 *   0) + 40) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   42,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9978,	((LBPR * 2 *  29) + 27) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11275,	((LBPR * 2 *  34) + 25) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1195,	((LBPR * 2 *  12) + 43) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	13075,	((LBPR * 2 *  24) + 22) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14155,	((LBPR * 2 *   4) + 20) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	14443,	((LBPR * 2 *  88) + 20) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	19627,	((LBPR * 2 *  69) + 11) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2347,	((LBPR * 2 *  34) + 41) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   43,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8107,	((LBPR * 2 *  18) + 31) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12500,	((LBPR * 2 *  12) + 23) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	14012,	((LBPR * 2 *  82) + 20) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	14372,	((LBPR * 2 *  20) + 20) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	19700,	((LBPR * 2 *  26) + 10) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	21500,	((LBPR * 2 *   8) +	 7) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	25244,	((LBPR * 2 *  15) +	 1) & ~3,  LBPR *  44,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4004,	((LBPR * 2 *   8) + 38) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   44,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9548,	((LBPR * 2 *  64) + 28) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	19413,	((LBPR * 2 *  55) + 11) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	22437,	((LBPR * 2 *  30) +	 6) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	24741,	((LBPR * 2 *  18) +	 2) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2925,	((LBPR * 2 * 106) + 40) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3069,	((LBPR * 2 *   2) + 39) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   45,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5661,	((LBPR * 2 *   9) + 35) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7749,	((LBPR * 2 *  30) + 31) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8541,	((LBPR * 2 *  33) + 30) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	13150,	((LBPR * 2 *  24) + 22) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	17542,	((LBPR * 2 *  65) + 14) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2206,	((LBPR * 2 *   8) + 41) & ~3,  LBPR *  46,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	23950,	((LBPR * 2 *  24) +	 3) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	24814,	((LBPR * 2 *   8) +	 2) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   46,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6454,	((LBPR * 2 *  33) + 33) & ~3,  LBPR *  46,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7174,	((LBPR * 2 *  34) + 32) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 7534,	((LBPR * 2 *  77) + 32) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	18839,	((LBPR * 2 *  26) + 12) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	19775,	((LBPR * 2 *  54) + 10) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	23375,	((LBPR * 2 *  21) +	 4) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2855,	((LBPR * 2 *  35) + 40) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3647,	((LBPR * 2 *  13) + 38) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4079,	((LBPR * 2 *  91) + 38) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   47,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5663,	((LBPR * 2 *  26) + 35) & ~3,  LBPR *  47,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 9047,	((LBPR * 2 *   7) + 29) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	12936,	((LBPR * 2 *  21) + 22) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	13944,	((LBPR * 2 *  72) + 20) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	17328,	((LBPR * 2 *  71) + 15) & ~3,  LBPR *  48,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	18912,	((LBPR * 2 *  12) + 12) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	21000,	((LBPR * 2 *   4) +	 8) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	22368,	((LBPR * 2 *  27) +	 6) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	22944,	((LBPR * 2 *  13) +	 5) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	25536,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   48,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12937,	((LBPR * 2 *  13) + 22) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1777,	((LBPR * 2 *  20) + 42) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	17833,	((LBPR * 2 *  23) + 14) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	19777,	((LBPR * 2 *   9) + 10) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	22225,	((LBPR * 2 *   3) +	 6) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	22513,	((LBPR * 2 *  73) +	 6) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3649,	((LBPR * 2 *  56) + 38) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4081,	((LBPR * 2 *  28) + 38) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   49,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16826,	((LBPR * 2 *   7) + 15) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	18194,	((LBPR * 2 *  20) + 13) & ~3,  LBPR *  50,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	23594,	((LBPR * 2 *  29) +	 4) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3002,	((LBPR * 2 *  37) + 39) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3434,	((LBPR * 2 * 107) + 39) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   50,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  842,	((LBPR * 2 *  14) + 43) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9482,	((LBPR * 2 *   5) + 28) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9914,	((LBPR * 2 *  32) + 27) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	13371,	((LBPR * 2 *  57) + 21) & ~3,  LBPR *  51,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	15531,	((LBPR * 2 *  84) + 18) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	19059,	((LBPR * 2 *  33) + 12) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20067,	((LBPR * 2 *  12) + 10) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	22515,	((LBPR * 2 *   1) +	 6) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	24819,	((LBPR * 2 *  34) +	 2) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5019,	((LBPR * 2 *  14) + 36) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   51,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5451,	((LBPR * 2 *  23) + 35) & ~3,  LBPR *  51,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	10492,	((LBPR * 2 *  33) + 26) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	16108,	((LBPR * 2 *  23) + 17) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	24964,	((LBPR * 2 *  87) +	 1) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4084,	((LBPR * 2 *  21) + 38) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   52,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5524,	((LBPR * 2 *   7) + 35) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 7828,	((LBPR * 2 *  39) + 31) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8476,	((LBPR * 2 *  21) + 30) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8836,	((LBPR * 2 *  14) + 29) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	12797,	((LBPR * 2 *  78) + 22) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	19997,	((LBPR * 2 *   0) + 10) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	22517,	((LBPR * 2 *   9) +	 6) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	23813,	((LBPR * 2 *   7) +	 3) & ~3,  LBPR *  53,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2429,	((LBPR * 2 *   9) + 40) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3725,	((LBPR * 2 *  61) + 38) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4949,	((LBPR * 2 *  28) + 36) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   53,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8261,	((LBPR * 2 *  13) + 30) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	14670,	((LBPR * 2 *  16) + 19) & ~3,  LBPR *  54,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	16542,	((LBPR * 2 *  16) + 16) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	23238,	((LBPR * 2 *  68) +	 4) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	25326,	((LBPR * 2 *  19) +	 1) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2574,	((LBPR * 2 *  32) + 40) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 3726,	((LBPR * 2 *  17) + 38) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   54,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7758,	((LBPR * 2 * 105) + 31) & ~3,  LBPR *  54,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9270,	((LBPR * 2 *  16) + 29) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	11863,	((LBPR * 2 *  31) + 24) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	13231,	((LBPR * 2 *  29) + 22) & ~3,  LBPR *  55,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	16615,	((LBPR * 2 *  18) + 16) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	20071,	((LBPR * 2 * 101) + 10) & ~3,  LBPR *  55,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	21007,	((LBPR * 2 *  12) +	 8) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   55,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5743,	((LBPR * 2 *  63) + 35) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 6463,	((LBPR * 2 *   1) + 33) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 8047,	((LBPR * 2 *  27) + 31) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11648,	((LBPR * 2 *  68) + 24) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  128,	((LBPR * 2 *  22) + 44) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1856,	((LBPR * 2 *  22) + 41) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	22808,	((LBPR * 2 * 105) +	 5) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	24896,	((LBPR * 2 *  18) +	 1) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	25904,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3656,	((LBPR * 2 *  16) + 38) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4736,	((LBPR * 2 *  15) + 36) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   56,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15825,	((LBPR * 2 *  16) + 17) & ~3,  LBPR *  57,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	17265,	((LBPR * 2 *   2) + 15) & ~3,  LBPR *  57,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19065,	((LBPR * 2 *   9) + 12) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3729,	((LBPR * 2 *  19) + 38) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   57,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6177,	((LBPR * 2 *  12) + 34) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6393,	((LBPR * 2 *  61) + 34) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7257,	((LBPR * 2 *  34) + 32) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9417,	((LBPR * 2 *  85) + 28) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	10282,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1066,	((LBPR * 2 *   5) + 43) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1570,	((LBPR * 2 *  95) + 42) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	17626,	((LBPR * 2 *  25) + 14) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1786,	((LBPR * 2 *  67) + 42) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2938,	((LBPR * 2 *  34) + 40) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   58,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7258,	((LBPR * 2 *  28) + 32) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 7978,	((LBPR * 2 *  31) + 31) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10715,	((LBPR * 2 *   4) + 26) & ~3,  LBPR *  59,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12299,	((LBPR * 2 *  39) + 23) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	12587,	((LBPR * 2 *  74) + 23) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	14243,	((LBPR * 2 *   5) + 20) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	23747,	((LBPR * 2 *  16) +	 3) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	23963,	((LBPR * 2 *  12) +	 3) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	25403,	((LBPR * 2 *   3) +	 1) & ~3,  LBPR *  59,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 5099,	((LBPR * 2 *  19) + 36) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   59,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1140,	((LBPR * 2 *  80) + 43) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11436,	((LBPR * 2 *  33) + 25) & ~3,  LBPR *  60,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	13740,	((LBPR * 2 *  71) + 21) & ~3,  LBPR *  60,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14388,	((LBPR * 2 *   2) + 20) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	15036,	((LBPR * 2 *  35) + 19) & ~3,  LBPR *  60,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	18060,	((LBPR * 2 *  25) + 13) & ~3,  LBPR *  60,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	22236,	((LBPR * 2 *   6) +	 6) & ~3,  LBPR *  60,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   60,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7044,	((LBPR * 2 *  28) + 32) & ~3,  LBPR *  60,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	12517,	((LBPR * 2 *  20) + 23) & ~3,  LBPR *  61,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1357,	((LBPR * 2 * 100) + 42) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	13813,	((LBPR * 2 *  50) + 21) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	16693,	((LBPR * 2 *   5) + 16) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	19717,	((LBPR * 2 *   3) + 10) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	20365,	((LBPR * 2 *  18) +	 9) & ~3,  LBPR *  61,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	22309,	((LBPR * 2 *  21) +	 6) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	24325,	((LBPR * 2 *  14) +	 2) & ~3,  LBPR *  61,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   61,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *  61,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10502,	((LBPR * 2 *  37) + 26) & ~3,  LBPR *  62,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	11294,	((LBPR * 2 *  32) + 25) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13310,	((LBPR * 2 *  30) + 22) & ~3,  LBPR *  62,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	16406,	((LBPR * 2 *  33) + 16) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	21374,	((LBPR * 2 *  29) +	 8) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4382,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4670,	((LBPR * 2 *  84) + 37) & ~3,  LBPR *  62,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   62,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *  62,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8270,	((LBPR * 2 *   0) + 30) & ~3,  LBPR *  62,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	22599,	((LBPR * 2 *   1) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	22599,	((LBPR * 2 *  66) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	22815,	((LBPR * 2 *  32) +	 5) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	24471,	((LBPR * 2 *  28) +	 2) & ~3,  LBPR *  63,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	25119,	((LBPR * 2 *  22) +	 1) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	25767,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5679,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *  63,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   63,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *  63,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6687,	((LBPR * 2 *  73) + 33) & ~3,  LBPR *  63,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	11008,	((LBPR * 2 *  10) + 26) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11296,	((LBPR * 2 *  45) + 25) & ~3,  LBPR *  64,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	16264,	((LBPR * 2 *  34) + 16) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	16552,	((LBPR * 2 *   8) + 16) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	21160,	((LBPR * 2 *  23) +	 8) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	23176,	((LBPR * 2 *  35) +	 4) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	24400,	((LBPR * 2 *  78) +	 2) & ~3,  LBPR *  64,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   64,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  64,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6904,	((LBPR * 2 *   6) + 33) & ~3,  LBPR *  64,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11081,	((LBPR * 2 *  14) + 25) & ~3,  LBPR *  65,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	13601,	((LBPR * 2 *  70) + 21) & ~3,  LBPR *  65,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14033,	((LBPR * 2 *  26) + 20) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	16985,	((LBPR * 2 *  17) + 15) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	17057,	((LBPR * 2 *  31) + 15) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	19721,	((LBPR * 2 *   7) + 10) & ~3,  LBPR *  65,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 5969,	((LBPR * 2 *  35) + 34) & ~3,  LBPR *  65,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   65,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  65,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7769,	((LBPR * 2 * 107) + 31) & ~3,  LBPR *  65,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	13458,	((LBPR * 2 *  70) + 21) & ~3,  LBPR *  66,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	14178,	((LBPR * 2 *  29) + 20) & ~3,  LBPR *  66,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1434,	((LBPR * 2 *   5) + 42) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	17490,	((LBPR * 2 *  20) + 14) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	24546,	((LBPR * 2 *  24) +	 2) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	24618,	((LBPR * 2 *  19) +	 2) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	24690,	((LBPR * 2 *  87) +	 2) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 6402,	((LBPR * 2 *  21) + 34) & ~3,  LBPR *  66,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   66,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  66,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10651,	((LBPR * 2 *  28) + 26) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	12667,	((LBPR * 2 *  34) + 23) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1291,	((LBPR * 2 *  89) + 42) & ~3,  LBPR *  67,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	15691,	((LBPR * 2 *   6) + 17) & ~3,  LBPR *  67,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	20659,	((LBPR * 2 *  46) +	 9) & ~3,  LBPR *  67,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	21595,	((LBPR * 2 *   6) +	 7) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2731,	((LBPR * 2 *  10) + 40) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5755,	((LBPR * 2 *  33) + 35) & ~3,  LBPR *  67,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   67,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  67,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12524,	((LBPR * 2 *  26) + 23) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	15620,	((LBPR * 2 *   4) + 18) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	22748,	((LBPR * 2 *  17) +	 5) & ~3,  LBPR *  68,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	  500,	((LBPR * 2 *   6) + 44) & ~3,  LBPR *  68,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5828,	((LBPR * 2 *  53) + 35) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6044,	((LBPR * 2 *  95) + 34) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   68,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  68,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8060,	((LBPR * 2 *  14) + 31) & ~3,  LBPR *  68,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 8636,	((LBPR * 2 *   5) + 30) & ~3,  LBPR *  68,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	13461,	((LBPR * 2 *  18) + 21) & ~3,  LBPR *  69,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	14325,	((LBPR * 2 *  28) + 20) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	20517,	((LBPR * 2 *  19) +	 9) & ~3,  LBPR *  69,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	22029,	((LBPR * 2 *  48) +	 6) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	24837,	((LBPR * 2 *  12) +	 2) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	25485,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  573,	((LBPR * 2 *  35) + 44) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6117,	((LBPR * 2 *  93) + 34) & ~3,  LBPR *  69,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   69,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  69,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1078,	((LBPR * 2 *  28) + 43) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	11158,	((LBPR * 2 *  13) + 25) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	15046,	((LBPR * 2 *  46) + 19) & ~3,  LBPR *  70,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	19798,	((LBPR * 2 *  24) + 10) & ~3,  LBPR *  70,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	20806,	((LBPR * 2 *  90) +	 9) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	22462,	((LBPR * 2 *  16) +	 6) & ~3,  LBPR *  70,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 4318,	((LBPR * 2 *  28) + 37) & ~3,  LBPR *  70,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   70,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9862,	((LBPR * 2 *  19) + 28) & ~3,  LBPR *  70,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14183,	((LBPR * 2 *  19) + 20) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	20591,	((LBPR * 2 *  98) +	 9) & ~3,  LBPR *  71,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	20879,	((LBPR * 2 *  21) +	 8) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	24623,	((LBPR * 2 *  31) +	 2) & ~3,  LBPR *  71,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4247,	((LBPR * 2 *  54) + 37) & ~3,  LBPR *  71,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5543,	((LBPR * 2 *  15) + 35) & ~3,  LBPR *  71,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	   71,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  71,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  791,	((LBPR * 2 *  10) + 43) & ~3,  LBPR *  71,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 8135,	((LBPR * 2 *  21) + 31) & ~3,  LBPR *  71,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n23_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13800,	((LBPR * 2 *  12) + 16) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13920,	((LBPR * 2 *  79) + 16) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14160,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	17040,	((LBPR * 2 *  39) +	 9) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  240,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9900,	((LBPR * 2 *  79) + 24) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11341,	((LBPR * 2 *   3) + 21) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13501,	((LBPR * 2 *  17) + 16) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	14161,	((LBPR * 2 *  12) + 15) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	18121,	((LBPR * 2 * 112) +	 7) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	18661,	((LBPR * 2 *   7) +	 6) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3661,	((LBPR * 2 * 111) + 37) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	19082,	((LBPR * 2 *  39) +	 5) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	21062,	((LBPR * 2 *  47) +	 1) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4322,	((LBPR * 2 *  11) + 36) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4322,	((LBPR * 2 *  85) + 36) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6722,	((LBPR * 2 * 117) + 31) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 9062,	((LBPR * 2 *   8) + 26) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 1143,	((LBPR * 2 *  16) + 42) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	13743,	((LBPR * 2 *   6) + 16) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	16023,	((LBPR * 2 * 106) + 11) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	18003,	((LBPR * 2 * 114) +	 7) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	18483,	((LBPR * 2 *   1) +	 6) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6183,	((LBPR * 2 *   3) + 32) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	12064,	((LBPR * 2 *   2) + 19) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15964,	((LBPR * 2 *  72) + 11) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1864,	((LBPR * 2 *  58) + 41) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	20344,	((LBPR * 2 *  30) +	 2) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2044,	((LBPR * 2 *  78) + 40) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5824,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	11585,	((LBPR * 2 *  66) + 20) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	18725,	((LBPR * 2 *   5) +	 6) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3065,	((LBPR * 2 *  62) + 38) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5525,	((LBPR * 2 *   7) + 33) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9485,	((LBPR * 2 *   9) + 25) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 9845,	((LBPR * 2 *  57) + 24) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1206,	((LBPR * 2 *  69) + 42) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12786,	((LBPR * 2 *   8) + 18) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  486,	((LBPR * 2 *   6) + 44) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5766,	((LBPR * 2 *  35) + 33) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8226,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 9726,	((LBPR * 2 *  83) + 24) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	13447,	((LBPR * 2 *   1) + 17) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	16027,	((LBPR * 2 *  14) + 11) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	17167,	((LBPR * 2 *  99) +	 9) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	20647,	((LBPR * 2 *   7) +	 2) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2767,	((LBPR * 2 *   0) + 39) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7387,	((LBPR * 2 *  88) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word		7,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12608,	((LBPR * 2 *  11) + 18) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	14588,	((LBPR * 2 *  31) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	16148,	((LBPR * 2 * 110) + 11) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2948,	((LBPR * 2 *  13) + 38) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  368,	((LBPR * 2 *  10) + 44) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5048,	((LBPR * 2 * 107) + 34) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word		8,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10569,	((LBPR * 2 *   7) + 23) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12369,	((LBPR * 2 *   5) + 19) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1569,	((LBPR * 2 *  94) + 41) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	18429,	((LBPR * 2 * 103) +	 6) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	19689,	((LBPR * 2 *   4) +	 4) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6249,	((LBPR * 2 *  42) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12430,	((LBPR * 2 *   6) + 19) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19030,	((LBPR * 2 *  42) +	 5) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4090,	((LBPR * 2 *  38) + 36) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 7510,	((LBPR * 2 *  94) + 29) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7990,	((LBPR * 2 *  85) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8110,	((LBPR * 2 *   7) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  191,	((LBPR * 2 *  97) + 44) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	19451,	((LBPR * 2 *  33) +	 4) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3791,	((LBPR * 2 *   8) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 5591,	((LBPR * 2 *   6) + 33) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6131,	((LBPR * 2 *  82) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 7151,	((LBPR * 2 *   2) + 30) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	11772,	((LBPR * 2 *  44) + 20) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	18252,	((LBPR * 2 *  63) +	 7) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	20232,	((LBPR * 2 *   9) +	 2) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2412,	((LBPR * 2 *  56) + 40) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8472,	((LBPR * 2 * 103) + 27) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 9972,	((LBPR * 2 *   3) + 24) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10153,	((LBPR * 2 *  65) + 23) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	18673,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	20233,	((LBPR * 2 *  40) +	 2) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  253,	((LBPR * 2 *  76) + 44) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4033,	((LBPR * 2 *  11) + 36) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6433,	((LBPR * 2 *   1) + 31) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	12614,	((LBPR * 2 *  23) + 18) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1274,	((LBPR * 2 *  77) + 42) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	12794,	((LBPR * 2 *   2) + 18) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	16394,	((LBPR * 2 *  27) + 10) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	17894,	((LBPR * 2 *   4) +	 7) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5414,	((LBPR * 2 *  82) + 33) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	17295,	((LBPR * 2 *  56) +	 9) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	17595,	((LBPR * 2 * 107) +	 8) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	17595,	((LBPR * 2 *  25) +	 8) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4455,	((LBPR * 2 *   2) + 35) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  915,	((LBPR * 2 *  10) + 43) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9375,	((LBPR * 2 *  71) + 25) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13576,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	14536,	((LBPR * 2 *   3) + 14) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	15616,	((LBPR * 2 *  86) + 12) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	21556,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  496,	((LBPR * 2 *  34) + 44) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5056,	((LBPR * 2 * 102) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	11537,	((LBPR * 2 *   6) + 21) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	14777,	((LBPR * 2 *  78) + 14) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	17957,	((LBPR * 2 *   2) +	 7) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1997,	((LBPR * 2 *   5) + 40) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4217,	((LBPR * 2 *  34) + 36) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4817,	((LBPR * 2 * 108) + 35) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	15198,	((LBPR * 2 *   5) + 13) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	16518,	((LBPR * 2 *   9) + 10) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   18,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20718,	((LBPR * 2 *  88) +	 1) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5838,	((LBPR * 2 *  38) + 32) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6678,	((LBPR * 2 *  29) + 31) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9078,	((LBPR * 2 *  66) + 26) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	10579,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	11779,	((LBPR * 2 *  47) + 20) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	19999,	((LBPR * 2 *   9) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   19,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3319,	((LBPR * 2 *  50) + 38) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5359,	((LBPR * 2 *  67) + 33) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5479,	((LBPR * 2 *  84) + 33) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1700,	((LBPR * 2 *   5) + 41) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	19760,	((LBPR * 2 *  44) +	 3) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   20,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2600,	((LBPR * 2 *  90) + 39) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5120,	((LBPR * 2 *   1) + 34) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9020,	((LBPR * 2 *  16) + 26) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9380,	((LBPR * 2 *  61) + 25) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	10521,	((LBPR * 2 *  36) + 23) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12141,	((LBPR * 2 *   7) + 19) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	15561,	((LBPR * 2 *  87) + 12) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	18441,	((LBPR * 2 *   7) +	 6) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   21,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6981,	((LBPR * 2 *  28) + 30) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 9921,	((LBPR * 2 *  81) + 24) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1102,	((LBPR * 2 *  70) + 42) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   22,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5182,	((LBPR * 2 *  55) + 34) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 8002,	((LBPR * 2 *  74) + 28) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8182,	((LBPR * 2 *   3) + 28) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9682,	((LBPR * 2 *  48) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 9682,	((LBPR * 2 *   8) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	10223,	((LBPR * 2 *  11) + 23) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	16043,	((LBPR * 2 *   0) + 11) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   23,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3083,	((LBPR * 2 * 115) + 38) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5303,	((LBPR * 2 * 115) + 34) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5963,	((LBPR * 2 *  53) + 32) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6143,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	15264,	((LBPR * 2 *   8) + 13) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	18804,	((LBPR * 2 *  89) +	 5) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	19644,	((LBPR * 2 *  45) +	 4) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	21504,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   24,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6024,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9024,	((LBPR * 2 *  68) + 26) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11905,	((LBPR * 2 *  37) + 20) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13825,	((LBPR * 2 *   1) + 16) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	16345,	((LBPR * 2 * 105) + 11) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	18685,	((LBPR * 2 *  98) +	 6) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	19525,	((LBPR * 2 *   9) +	 4) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   25,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8065,	((LBPR * 2 *   0) + 28) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	11726,	((LBPR * 2 *  54) + 20) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	18206,	((LBPR * 2 *  81) +	 7) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19286,	((LBPR * 2 *  77) +	 4) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   26,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  506,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5306,	((LBPR * 2 *   4) + 34) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7346,	((LBPR * 2 *  54) + 29) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	12987,	((LBPR * 2 *  30) + 18) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	16707,	((LBPR * 2 *   4) + 10) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	17187,	((LBPR * 2 *   1) +	 9) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   27,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6027,	((LBPR * 2 *  72) + 32) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 6687,	((LBPR * 2 *  58) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9147,	((LBPR * 2 *  96) + 26) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10048,	((LBPR * 2 *  22) + 24) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	12748,	((LBPR * 2 * 105) + 18) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	18628,	((LBPR * 2 *   2) +	 6) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   28,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3508,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4588,	((LBPR * 2 *  10) + 35) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8968,	((LBPR * 2 * 113) + 26) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14789,	((LBPR * 2 *  73) + 14) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	17909,	((LBPR * 2 *  91) +	 7) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   29,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5609,	((LBPR * 2 *  55) + 33) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7409,	((LBPR * 2 *  28) + 29) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 8249,	((LBPR * 2 *  11) + 27) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 9209,	((LBPR * 2 *   9) + 25) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	16650,	((LBPR * 2 *  97) + 10) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	16890,	((LBPR * 2 *   5) +	 9) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2190,	((LBPR * 2 *  18) + 40) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   30,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5550,	((LBPR * 2 *  86) + 33) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 6690,	((LBPR * 2 *   9) + 31) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7290,	((LBPR * 2 *  35) + 29) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	14311,	((LBPR * 2 *   7) + 15) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	17431,	((LBPR * 2 *   6) +	 8) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   31,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3391,	((LBPR * 2 * 100) + 38) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4651,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 4771,	((LBPR * 2 * 117) + 35) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	  631,	((LBPR * 2 *  11) + 43) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	12812,	((LBPR * 2 *   1) + 18) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14072,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2552,	((LBPR * 2 *   5) + 39) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   32,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  452,	((LBPR * 2 *  80) + 44) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6452,	((LBPR * 2 *  73) + 31) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8192,	((LBPR * 2 *   7) + 28) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11073,	((LBPR * 2 *  10) + 22) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11793,	((LBPR * 2 * 113) + 20) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12093,	((LBPR * 2 * 104) + 19) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   33,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5913,	((LBPR * 2 *  26) + 32) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7353,	((LBPR * 2 *   9) + 29) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8313,	((LBPR * 2 *   1) + 27) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	10714,	((LBPR * 2 *  65) + 22) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	11734,	((LBPR * 2 *   7) + 20) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	16354,	((LBPR * 2 *  69) + 11) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	17434,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	20494,	((LBPR * 2 *  57) +	 2) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   34,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7894,	((LBPR * 2 *  52) + 28) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	12395,	((LBPR * 2 *  11) + 19) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	18995,	((LBPR * 2 * 108) +	 5) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   35,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  515,	((LBPR * 2 *  23) + 44) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5915,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8495,	((LBPR * 2 *  26) + 27) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 9515,	((LBPR * 2 *  68) + 25) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	12096,	((LBPR * 2 *   5) + 19) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	12216,	((LBPR * 2 *  19) + 19) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	20796,	((LBPR * 2 *  71) +	 1) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   36,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   36,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4356,	((LBPR * 2 *  51) + 36) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5556,	((LBPR * 2 *   3) + 33) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 6516,	((LBPR * 2 *  91) + 31) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	15577,	((LBPR * 2 *  98) + 12) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	19777,	((LBPR * 2 *   3) +	 3) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	19897,	((LBPR * 2 *  20) +	 3) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	20437,	((LBPR * 2 *   2) +	 2) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	20917,	((LBPR * 2 *  99) +	 1) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   37,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   37,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7777,	((LBPR * 2 *   9) + 28) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	14618,	((LBPR * 2 *   4) + 14) & ~3,  LBPR *  38,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	17918,	((LBPR * 2 *  32) +	 7) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   38,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   38,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7958,	((LBPR * 2 *  21) + 28) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 8378,	((LBPR * 2 *   9) + 27) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9218,	((LBPR * 2 * 102) + 25) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   98,	((LBPR * 2 *  92) + 44) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	15939,	((LBPR * 2 *  29) + 11) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	19959,	((LBPR * 2 *  11) +	 3) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	20379,	((LBPR * 2 *  37) +	 2) & ~3,  LBPR *  39,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	20559,	((LBPR * 2 *  93) +	 2) & ~3,  LBPR *  39,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 3039,	((LBPR * 2 * 111) + 38) & ~3,  LBPR *  39,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   39,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   39,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9279,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	15940,	((LBPR * 2 *  22) + 11) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	16000,	((LBPR * 2 *  95) + 11) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   40,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   40,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4180,	((LBPR * 2 *   7) + 36) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4360,	((LBPR * 2 *  53) + 36) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7960,	((LBPR * 2 * 118) + 28) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9940,	((LBPR * 2 *   1) + 24) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10661,	((LBPR * 2 *  87) + 22) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	15761,	((LBPR * 2 *   7) + 12) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3521,	((LBPR * 2 *  46) + 37) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   41,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   41,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8501,	((LBPR * 2 *  24) + 27) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8681,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 9161,	((LBPR * 2 *  64) + 26) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11082,	((LBPR * 2 *  15) + 22) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	13062,	((LBPR * 2 *  48) + 17) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	14742,	((LBPR * 2 *  75) + 14) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	15642,	((LBPR * 2 *  64) + 12) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	15882,	((LBPR * 2 *   5) + 12) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	20202,	((LBPR * 2 *  10) +	 3) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   42,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   42,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10303,	((LBPR * 2 *  96) + 23) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	10423,	((LBPR * 2 *  27) + 23) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1483,	((LBPR * 2 *   6) + 42) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	16483,	((LBPR * 2 * 109) + 10) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3163,	((LBPR * 2 *   9) + 38) & ~3,  LBPR *  43,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   43,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   43,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6703,	((LBPR * 2 *  33) + 31) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	16784,	((LBPR * 2 *  25) + 10) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	20564,	((LBPR * 2 *  59) +	 2) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	20684,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3704,	((LBPR * 2 *  93) + 37) & ~3,  LBPR *  44,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   44,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   44,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6224,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8984,	((LBPR * 2 *  90) + 26) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	10905,	((LBPR * 2 *  10) + 22) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	12045,	((LBPR * 2 *  84) + 20) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14145,	((LBPR * 2 *   6) + 15) & ~3,  LBPR *  45,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	19365,	((LBPR * 2 *  41) +	 4) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 3045,	((LBPR * 2 *  76) + 38) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   45,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   45,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *  45,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8925,	((LBPR * 2 *  36) + 26) & ~3,  LBPR *  45,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12826,	((LBPR * 2 *   0) + 18) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	18226,	((LBPR * 2 *  60) +	 7) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	19246,	((LBPR * 2 *   8) +	 5) & ~3,  LBPR *  46,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	19546,	((LBPR * 2 *  41) +	 4) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	20506,	((LBPR * 2 *  15) +	 2) & ~3,  LBPR *  46,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   46,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   46,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  46,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8266,	((LBPR * 2 *  61) + 27) & ~3,  LBPR *  46,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	11087,	((LBPR * 2 *  50) + 22) & ~3,  LBPR *  47,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	13427,	((LBPR * 2 * 114) + 17) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15227,	((LBPR * 2 *   6) + 13) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	17207,	((LBPR * 2 *  60) +	 9) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 3887,	((LBPR * 2 *   6) + 37) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   47,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   47,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  47,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9647,	((LBPR * 2 *  13) + 25) & ~3,  LBPR *  47,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	11148,	((LBPR * 2 *  92) + 21) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1548,	((LBPR * 2 *  18) + 41) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1608,	((LBPR * 2 *   4) + 41) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	16668,	((LBPR * 2 * 116) + 10) & ~3,  LBPR *  48,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	20928,	((LBPR * 2 *   0) +	 1) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   48,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   48,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  48,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7428,	((LBPR * 2 *  45) + 29) & ~3,  LBPR *  48,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	14089,	((LBPR * 2 *  75) + 15) & ~3,  LBPR *  49,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	17749,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3109,	((LBPR * 2 *   5) + 38) & ~3,  LBPR *  49,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3589,	((LBPR * 2 * 119) + 37) & ~3,  LBPR *  49,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4189,	((LBPR * 2 *  21) + 36) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   49,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   49,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  49,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6709,	((LBPR * 2 *  10) + 31) & ~3,  LBPR *  49,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	10010,	((LBPR * 2 *   8) + 24) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10970,	((LBPR * 2 *   2) + 22) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	14630,	((LBPR * 2 * 119) + 14) & ~3,  LBPR *  50,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	19010,	((LBPR * 2 * 112) +	 5) & ~3,  LBPR *  50,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 2510,	((LBPR * 2 *  31) + 39) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   50,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   50,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  50,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8450,	((LBPR * 2 *  24) + 27) & ~3,  LBPR *  50,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	10491,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  51,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	18591,	((LBPR * 2 *  74) +	 6) & ~3,  LBPR *  51,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	21171,	((LBPR * 2 *  10) +	 1) & ~3,  LBPR *  51,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4851,	((LBPR * 2 *   5) + 35) & ~3,  LBPR *  51,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   51,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   51,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  531,	((LBPR * 2 * 116) + 44) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6111,	((LBPR * 2 *   6) + 32) & ~3,  LBPR *  51,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10132,	((LBPR * 2 *   8) + 24) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11692,	((LBPR * 2 *  95) + 20) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	12352,	((LBPR * 2 *  40) + 19) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	18532,	((LBPR * 2 *   3) +	 6) & ~3,  LBPR *  52,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	18892,	((LBPR * 2 *  51) +	 5) & ~3,  LBPR *  52,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	20092,	((LBPR * 2 * 101) +	 3) & ~3,  LBPR *  52,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	   52,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   52,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  52,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	14693,	((LBPR * 2 *  14) + 14) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	16433,	((LBPR * 2 *  10) + 10) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	19193,	((LBPR * 2 *  43) +	 5) & ~3,  LBPR *  53,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	20753,	((LBPR * 2 * 104) +	 1) & ~3,  LBPR *  53,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   53,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   53,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  53,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7073,	((LBPR * 2 *  62) + 30) & ~3,  LBPR *  53,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7433,	((LBPR * 2 *   6) + 29) & ~3,  LBPR *  53,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	14994,	((LBPR * 2 *  70) + 13) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	19494,	((LBPR * 2 *  11) +	 4) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4014,	((LBPR * 2 *  17) + 36) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5454,	((LBPR * 2 *   8) + 33) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   54,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   54,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  54,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7374,	((LBPR * 2 *  80) + 29) & ~3,  LBPR *  54,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8934,	((LBPR * 2 *  49) + 26) & ~3,  LBPR *  54,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	10675,	((LBPR * 2 *   8) + 22) & ~3,  LBPR *  55,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	11095,	((LBPR * 2 * 106) + 22) & ~3,  LBPR *  55,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	14335,	((LBPR * 2 *   4) + 15) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2095,	((LBPR * 2 *  20) + 40) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   55,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   55,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  55,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5695,	((LBPR * 2 * 118) + 33) & ~3,  LBPR *  55,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6655,	((LBPR * 2 *  32) + 31) & ~3,  LBPR *  55,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	14576,	((LBPR * 2 *   2) + 14) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	16076,	((LBPR * 2 *  46) + 11) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3536,	((LBPR * 2 * 109) + 37) & ~3,  LBPR *  56,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4256,	((LBPR * 2 * 100) + 36) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5216,	((LBPR * 2 *  59) + 34) & ~3,  LBPR *  56,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   56,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   56,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  56,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  716,	((LBPR * 2 *   9) + 43) & ~3,  LBPR *  56,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	10077,	((LBPR * 2 *  83) + 24) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	11037,	((LBPR * 2 *  43) + 22) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	13437,	((LBPR * 2 *  63) + 17) & ~3,  LBPR *  57,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15477,	((LBPR * 2 *   3) + 12) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4317,	((LBPR * 2 *  10) + 36) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5217,	((LBPR * 2 *  49) + 34) & ~3,  LBPR *  57,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   57,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   57,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  57,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	19918,	((LBPR * 2 *   8) +	 3) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2518,	((LBPR * 2 *  89) + 39) & ~3,  LBPR *  58,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3058,	((LBPR * 2 *   4) + 38) & ~3,  LBPR *  58,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3898,	((LBPR * 2 *  52) + 37) & ~3,  LBPR *  58,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   58,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   58,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9418,	((LBPR * 2 *  67) + 25) & ~3,  LBPR *  58,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9778,	((LBPR * 2 *   5) + 24) & ~3,  LBPR *  58,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1439,	((LBPR * 2 * 110) + 42) & ~3,  LBPR *  59,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	14759,	((LBPR * 2 *   8) + 14) & ~3,  LBPR *  59,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	17219,	((LBPR * 2 * 101) +	 9) & ~3,  LBPR *  59,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	17819,	((LBPR * 2 *   1) +	 8) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4379,	((LBPR * 2 *   3) + 36) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   59,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   59,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  59,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  659,	((LBPR * 2 *   4) + 43) & ~3,  LBPR *  59,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n34_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12690,	((LBPR * 2 * 126) +	 9) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	13860,	((LBPR * 2 *   2) +	 6) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 2655,	((LBPR * 2 *  69) + 37) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4365,	((LBPR * 2 *  31) + 32) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 6975,	((LBPR * 2 *   3) + 25) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 7785,	((LBPR * 2 *  94) + 23) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8415,	((LBPR * 2 *  59) + 21) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 8820,	((LBPR * 2 *  10) + 20) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9675,	((LBPR * 2 *   6) + 18) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	12061,	((LBPR * 2 *  62) + 11) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	14311,	((LBPR * 2 *  39) +	 5) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14896,	((LBPR * 2 * 113) +	 3) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2071,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3646,	((LBPR * 2 *   3) + 34) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  406,	((LBPR * 2 *   7) + 43) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 8101,	((LBPR * 2 * 129) + 22) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 8146,	((LBPR * 2 *  40) + 22) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9406,	((LBPR * 2 *  82) + 18) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	12197,	((LBPR * 2 *   2) + 11) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	14717,	((LBPR * 2 *  85) +	 4) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14942,	((LBPR * 2 * 114) +	 3) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	15212,	((LBPR * 2 *   7) +	 2) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	15617,	((LBPR * 2 *  40) +	 1) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3152,	((LBPR * 2 *  30) + 36) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 6752,	((LBPR * 2 *   1) + 26) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 7067,	((LBPR * 2 *  90) + 25) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7922,	((LBPR * 2 *  51) + 23) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	11793,	((LBPR * 2 *  48) + 12) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13098,	((LBPR * 2 *  17) +	 8) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	13908,	((LBPR * 2 *   8) +	 6) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2883,	((LBPR * 2 * 134) + 37) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3963,	((LBPR * 2 *   7) + 34) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  543,	((LBPR * 2 *   8) + 43) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6303,	((LBPR * 2 *   5) + 27) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6978,	((LBPR * 2 *  50) + 25) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 7428,	((LBPR * 2 * 123) + 24) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	12604,	((LBPR * 2 *  46) + 10) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1264,	((LBPR * 2 *  45) + 41) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14449,	((LBPR * 2 *   2) +	 4) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	15619,	((LBPR * 2 *  11) +	 1) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1849,	((LBPR * 2 *  36) + 39) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7069,	((LBPR * 2 *  10) + 25) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8509,	((LBPR * 2 * 107) + 21) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8599,	((LBPR * 2 *  29) + 21) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	  904,	((LBPR * 2 * 100) + 42) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12110,	((LBPR * 2 *  77) + 11) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	12515,	((LBPR * 2 *   5) + 10) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	13730,	((LBPR * 2 *  32) +	 6) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 1400,	((LBPR * 2 *   5) + 41) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1400,	((LBPR * 2 *  94) + 41) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	15125,	((LBPR * 2 * 131) +	 3) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	16025,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3470,	((LBPR * 2 *  30) + 35) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word		5,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7250,	((LBPR * 2 *   9) + 24) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	13416,	((LBPR * 2 *  16) +	 7) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	14181,	((LBPR * 2 *   5) +	 5) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2751,	((LBPR * 2 * 106) + 37) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3156,	((LBPR * 2 *  48) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4821,	((LBPR * 2 *  98) + 31) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  546,	((LBPR * 2 *   9) + 43) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6216,	((LBPR * 2 *  89) + 27) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word		6,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8736,	((LBPR * 2 *  12) + 20) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 9186,	((LBPR * 2 *   8) + 19) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	12652,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	13462,	((LBPR * 2 * 123) +	 7) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	14182,	((LBPR * 2 *  33) +	 5) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2707,	((LBPR * 2 *  47) + 37) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3922,	((LBPR * 2 *  66) + 34) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 6757,	((LBPR * 2 *  13) + 26) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 7207,	((LBPR * 2 *  19) + 25) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8152,	((LBPR * 2 *  14) + 22) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8917,	((LBPR * 2 * 108) + 20) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10088,	((LBPR * 2 *  10) + 17) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	14768,	((LBPR * 2 *  12) +	 4) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1628,	((LBPR * 2 *   4) + 40) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1763,	((LBPR * 2 *  55) + 40) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3563,	((LBPR * 2 *   8) + 35) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 4418,	((LBPR * 2 *  21) + 32) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6578,	((LBPR * 2 * 116) + 26) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7703,	((LBPR * 2 *  89) + 23) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 7703,	((LBPR * 2 *  96) + 23) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		8,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10809,	((LBPR * 2 *   4) + 15) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1179,	((LBPR * 2 *  87) + 41) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	12204,	((LBPR * 2 * 108) + 11) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	12834,	((LBPR * 2 *  29) +	 9) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13824,	((LBPR * 2 *   1) +	 6) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4014,	((LBPR * 2 * 111) + 33) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 4059,	((LBPR * 2 *   6) + 33) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  549,	((LBPR * 2 *  57) + 43) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6399,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word		9,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11935,	((LBPR * 2 *  99) + 11) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	15310,	((LBPR * 2 *   1) +	 2) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	15490,	((LBPR * 2 *  78) +	 2) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1810,	((LBPR * 2 * 100) + 40) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3655,	((LBPR * 2 *  12) + 34) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 4870,	((LBPR * 2 *   4) + 31) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	  505,	((LBPR * 2 *  13) + 43) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6625,	((LBPR * 2 *   9) + 26) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8065,	((LBPR * 2 *  63) + 22) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	11981,	((LBPR * 2 *  15) + 11) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   11,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12251,	((LBPR * 2 * 122) + 11) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12431,	((LBPR * 2 *  57) + 10) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1721,	((LBPR * 2 *  56) + 40) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2576,	((LBPR * 2 *  97) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5411,	((LBPR * 2 *   5) + 30) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5771,	((LBPR * 2 *   8) + 29) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 7571,	((LBPR * 2 *  23) + 24) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  821,	((LBPR * 2 *   0) + 42) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   12,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	13917,	((LBPR * 2 *  31) +	 6) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	15087,	((LBPR * 2 *  52) +	 3) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2622,	((LBPR * 2 *  13) + 37) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3252,	((LBPR * 2 *   0) + 36) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3477,	((LBPR * 2 *  90) + 35) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 4917,	((LBPR * 2 *  12) + 31) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7842,	((LBPR * 2 * 104) + 23) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7977,	((LBPR * 2 *   2) + 22) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 9597,	((LBPR * 2 *  76) + 18) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	11218,	((LBPR * 2 *  41) + 13) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	12613,	((LBPR * 2 * 110) + 10) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1768,	((LBPR * 2 *  68) + 40) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1903,	((LBPR * 2 *  11) + 39) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4648,	((LBPR * 2 * 107) + 32) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5053,	((LBPR * 2 *  53) + 31) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 8923,	((LBPR * 2 *  13) + 20) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 9238,	((LBPR * 2 *  10) + 19) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 9283,	((LBPR * 2 *   4) + 19) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	11804,	((LBPR * 2 *   3) + 12) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	13244,	((LBPR * 2 *  13) +	 8) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1409,	((LBPR * 2 *  62) + 41) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	   14,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15944,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	16079,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2669,	((LBPR * 2 *  22) + 37) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6089,	((LBPR * 2 * 105) + 28) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8564,	((LBPR * 2 * 116) + 21) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 9689,	((LBPR * 2 *   4) + 18) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	12030,	((LBPR * 2 *   7) + 11) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1230,	((LBPR * 2 *   4) + 41) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	14460,	((LBPR * 2 *  18) +	 4) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	15360,	((LBPR * 2 *  86) +	 2) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   15,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2535,	((LBPR * 2 * 125) + 38) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3570,	((LBPR * 2 * 102) + 35) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 5865,	((LBPR * 2 *  68) + 28) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6135,	((LBPR * 2 *  26) + 28) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6585,	((LBPR * 2 *  10) + 26) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   16,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3931,	((LBPR * 2 *  91) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 4651,	((LBPR * 2 *   6) + 32) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5281,	((LBPR * 2 *  35) + 30) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7126,	((LBPR * 2 * 114) + 25) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7306,	((LBPR * 2 *   3) + 24) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8476,	((LBPR * 2 *  85) + 21) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8521,	((LBPR * 2 *  84) + 21) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8836,	((LBPR * 2 *   6) + 20) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9781,	((LBPR * 2 *   9) + 17) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	10187,	((LBPR * 2 * 129) + 16) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	11312,	((LBPR * 2 * 102) + 13) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13292,	((LBPR * 2 *   3) +	 8) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	14327,	((LBPR * 2 *   3) +	 5) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	14957,	((LBPR * 2 *  69) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	15137,	((LBPR * 2 *   2) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2357,	((LBPR * 2 *  88) + 38) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7667,	((LBPR * 2 *  39) + 23) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 8657,	((LBPR * 2 *  28) + 21) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10278,	((LBPR * 2 *   6) + 16) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	10368,	((LBPR * 2 *   6) + 16) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10818,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	11493,	((LBPR * 2 * 121) + 13) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	13878,	((LBPR * 2 * 119) +	 6) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	14058,	((LBPR * 2 *  50) +	 6) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	14463,	((LBPR * 2 *  14) +	 4) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   18,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9153,	((LBPR * 2 *   7) + 19) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9783,	((LBPR * 2 *  60) + 17) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	11359,	((LBPR * 2 *   1) + 13) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	14599,	((LBPR * 2 *   4) +	 4) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	15049,	((LBPR * 2 *  35) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	15409,	((LBPR * 2 *  77) +	 2) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	15589,	((LBPR * 2 *  13) +	 1) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   19,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2134,	((LBPR * 2 *  12) + 39) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2494,	((LBPR * 2 *  96) + 38) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7939,	((LBPR * 2 *  87) + 23) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 9334,	((LBPR * 2 * 127) + 19) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11090,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	13925,	((LBPR * 2 *   5) +	 6) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14465,	((LBPR * 2 * 132) +	 4) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1730,	((LBPR * 2 * 113) + 40) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   20,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4655,	((LBPR * 2 *  74) + 32) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6095,	((LBPR * 2 *  38) + 28) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7490,	((LBPR * 2 *  27) + 24) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  875,	((LBPR * 2 *   8) + 42) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 9965,	((LBPR * 2 *  46) + 17) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11046,	((LBPR * 2 *  11) + 14) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	14916,	((LBPR * 2 * 103) +	 3) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2001,	((LBPR * 2 *   1) + 39) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	   21,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4431,	((LBPR * 2 * 110) + 32) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4791,	((LBPR * 2 *  82) + 31) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6321,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6906,	((LBPR * 2 *  16) + 25) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7626,	((LBPR * 2 *   4) + 23) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 8121,	((LBPR * 2 *  56) + 22) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	11407,	((LBPR * 2 *   4) + 13) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11857,	((LBPR * 2 * 120) + 12) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	13612,	((LBPR * 2 *   2) +	 7) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	15682,	((LBPR * 2 *  98) +	 1) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   22,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2722,	((LBPR * 2 *   0) + 37) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 2812,	((LBPR * 2 *  84) + 37) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6007,	((LBPR * 2 *   8) + 28) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7312,	((LBPR * 2 *   9) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8257,	((LBPR * 2 *  81) + 22) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 1103,	((LBPR * 2 *  36) + 42) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12443,	((LBPR * 2 * 109) + 10) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	15458,	((LBPR * 2 *  55) +	 2) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   23,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3938,	((LBPR * 2 * 106) + 34) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5243,	((LBPR * 2 *   0) + 30) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7358,	((LBPR * 2 *   5) + 24) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 7853,	((LBPR * 2 *   6) + 23) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8438,	((LBPR * 2 *  64) + 21) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 9023,	((LBPR * 2 *  23) + 20) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11139,	((LBPR * 2 * 133) + 14) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	13119,	((LBPR * 2 * 124) +	 8) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	13389,	((LBPR * 2 *   0) +	 7) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	14559,	((LBPR * 2 *  27) +	 4) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	14784,	((LBPR * 2 *  11) +	 4) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	15549,	((LBPR * 2 *  80) +	 1) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   24,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3399,	((LBPR * 2 *   9) + 35) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8754,	((LBPR * 2 *  78) + 20) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 9654,	((LBPR * 2 *  38) + 18) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11545,	((LBPR * 2 *  11) + 13) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	12805,	((LBPR * 2 * 118) +	 9) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	13660,	((LBPR * 2 *  42) +	 7) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	13975,	((LBPR * 2 *  22) +	 6) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	15325,	((LBPR * 2 *  79) +	 2) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   25,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2995,	((LBPR * 2 *  81) + 36) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4795,	((LBPR * 2 *   9) + 31) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6235,	((LBPR * 2 *   8) + 27) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 7675,	((LBPR * 2 *  92) + 23) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11186,	((LBPR * 2 * 120) + 14) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12221,	((LBPR * 2 *   7) + 11) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	15371,	((LBPR * 2 * 128) +	 2) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   26,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3041,	((LBPR * 2 *  14) + 36) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 3851,	((LBPR * 2 *  67) + 34) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6551,	((LBPR * 2 *  14) + 26) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 7091,	((LBPR * 2 *  58) + 25) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7271,	((LBPR * 2 *  25) + 24) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 7901,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	13167,	((LBPR * 2 *  34) +	 8) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	14202,	((LBPR * 2 *   8) +	 5) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   27,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  297,	((LBPR * 2 * 118) + 44) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3312,	((LBPR * 2 *  20) + 35) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 4932,	((LBPR * 2 *   9) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7632,	((LBPR * 2 *  73) + 23) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 7902,	((LBPR * 2 *  97) + 23) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7992,	((LBPR * 2 *   6) + 22) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 8217,	((LBPR * 2 *  47) + 22) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	13123,	((LBPR * 2 *  75) +	 8) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	14023,	((LBPR * 2 * 128) +	 6) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	15733,	((LBPR * 2 *  14) +	 1) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   28,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4303,	((LBPR * 2 *  71) + 33) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7138,	((LBPR * 2 *  25) + 25) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7183,	((LBPR * 2 *  10) + 25) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 8488,	((LBPR * 2 * 112) + 21) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8578,	((LBPR * 2 *  43) + 21) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 8758,	((LBPR * 2 *  14) + 20) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  119,	((LBPR * 2 *  11) + 44) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	12899,	((LBPR * 2 *  92) +	 9) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 1469,	((LBPR * 2 *  12) + 41) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1514,	((LBPR * 2 *  49) + 40) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2009,	((LBPR * 2 *  18) + 39) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 2504,	((LBPR * 2 *   0) + 38) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2909,	((LBPR * 2 *  80) + 37) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5699,	((LBPR * 2 *   5) + 29) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7679,	((LBPR * 2 * 104) + 23) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	13845,	((LBPR * 2 *  91) +	 6) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	14115,	((LBPR * 2 *  65) +	 5) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1560,	((LBPR * 2 *   3) + 40) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   30,	((LBPR * 2 * 120) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3405,	((LBPR * 2 *   6) + 35) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3945,	((LBPR * 2 *  20) + 34) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5565,	((LBPR * 2 *  70) + 29) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5970,	((LBPR * 2 *   6) + 28) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 6465,	((LBPR * 2 * 126) + 27) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7455,	((LBPR * 2 *  10) + 24) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10426,	((LBPR * 2 *  99) + 16) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	12631,	((LBPR * 2 *  71) + 10) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1426,	((LBPR * 2 *  59) + 41) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	14521,	((LBPR * 2 * 134) +	 4) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	14611,	((LBPR * 2 *   0) +	 4) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	15241,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2686,	((LBPR * 2 *  44) + 37) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   31,	((LBPR * 2 * 121) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4216,	((LBPR * 2 *  13) + 33) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4441,	((LBPR * 2 *   7) + 32) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1022,	((LBPR * 2 *  45) + 42) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11417,	((LBPR * 2 *   1) + 13) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13352,	((LBPR * 2 *  17) +	 8) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3497,	((LBPR * 2 *   8) + 35) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3812,	((LBPR * 2 *   3) + 34) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6332,	((LBPR * 2 *  70) + 27) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6692,	((LBPR * 2 * 119) + 26) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6872,	((LBPR * 2 * 127) + 26) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7862,	((LBPR * 2 *   2) + 23) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10158,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	11193,	((LBPR * 2 *  14) + 14) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12138,	((LBPR * 2 *  52) + 11) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1293,	((LBPR * 2 *  65) + 41) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	15108,	((LBPR * 2 *  14) +	 3) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2058,	((LBPR * 2 *  37) + 39) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   33,	((LBPR * 2 * 123) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4848,	((LBPR * 2 * 130) + 31) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6243,	((LBPR * 2 *  42) + 27) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9213,	((LBPR * 2 *  95) + 19) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1069,	((LBPR * 2 *  37) + 42) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	11329,	((LBPR * 2 *  61) + 13) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13084,	((LBPR * 2 * 105) +	 8) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	13444,	((LBPR * 2 *   2) +	 7) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	15874,	((LBPR * 2 *  12) +	 1) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2464,	((LBPR * 2 *  34) + 38) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   34,	((LBPR * 2 * 124) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4129,	((LBPR * 2 *  58) + 33) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5749,	((LBPR * 2 * 109) + 29) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7459,	((LBPR * 2 *   7) + 24) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	12860,	((LBPR * 2 *  14) +	 9) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	13670,	((LBPR * 2 *  26) +	 7) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	13850,	((LBPR * 2 * 112) +	 6) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1610,	((LBPR * 2 *   5) + 40) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	16145,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  215,	((LBPR * 2 *  11) + 44) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   35,	((LBPR * 2 * 125) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5795,	((LBPR * 2 *   3) + 29) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6470,	((LBPR * 2 *  53) + 27) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7820,	((LBPR * 2 *  86) + 23) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	13851,	((LBPR * 2 *  66) +	 6) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	14526,	((LBPR * 2 * 124) +	 4) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	15336,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	15876,	((LBPR * 2 *   5) +	 1) & ~3,  LBPR *  36,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2466,	((LBPR * 2 *  28) + 38) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   36,	((LBPR * 2 * 126) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   36,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   36,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  396,	((LBPR * 2 * 117) + 44) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7416,	((LBPR * 2 *  79) + 24) & ~3,  LBPR *  36,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 7866,	((LBPR * 2 *   3) + 23) & ~3,  LBPR *  36,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 8316,	((LBPR * 2 *  13) + 22) & ~3,  LBPR *  36,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	11332,	((LBPR * 2 * 101) + 13) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	12772,	((LBPR * 2 *   1) +	 9) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	13987,	((LBPR * 2 *  76) +	 6) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	14932,	((LBPR * 2 *  54) +	 3) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2692,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  37,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3232,	((LBPR * 2 *   9) + 36) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   37,	((LBPR * 2 * 127) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   37,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   37,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  37,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4852,	((LBPR * 2 *  14) + 31) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5167,	((LBPR * 2 * 133) + 30) & ~3,  LBPR *  37,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7957,	((LBPR * 2 *  13) + 23) & ~3,  LBPR *  37,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	10973,	((LBPR * 2 *  33) + 14) & ~3,  LBPR *  38,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	11243,	((LBPR * 2 * 125) + 13) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	11963,	((LBPR * 2 * 130) + 11) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	12683,	((LBPR * 2 *   7) +	 9) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	13673,	((LBPR * 2 *  14) +	 7) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2918,	((LBPR * 2 *  64) + 37) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   38,	((LBPR * 2 * 128) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   38,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   38,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  38,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  488,	((LBPR * 2 *  10) + 43) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6248,	((LBPR * 2 *  21) + 27) & ~3,  LBPR *  38,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 8678,	((LBPR * 2 *  88) + 21) & ~3,  LBPR *  38,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	13134,	((LBPR * 2 *  10) +	 8) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1344,	((LBPR * 2 * 111) + 41) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2109,	((LBPR * 2 *   7) + 39) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  354,	((LBPR * 2 *  49) + 44) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   39,	((LBPR * 2 * 129) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   39,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   39,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4314,	((LBPR * 2 *  19) + 33) & ~3,  LBPR *  39,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 4854,	((LBPR * 2 *  83) + 31) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6024,	((LBPR * 2 *  32) + 28) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7374,	((LBPR * 2 *   0) + 24) & ~3,  LBPR *  39,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9264,	((LBPR * 2 * 101) + 19) & ~3,  LBPR *  39,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	10615,	((LBPR * 2 *  11) + 15) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	11200,	((LBPR * 2 *   0) + 14) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	14395,	((LBPR * 2 * 121) +	 5) & ~3,  LBPR *  40,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2650,	((LBPR * 2 * 103) + 37) & ~3,  LBPR *  40,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3820,	((LBPR * 2 *  13) + 34) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4000,	((LBPR * 2 *  67) + 34) & ~3,  LBPR *  40,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   40,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   40,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   40,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  40,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6295,	((LBPR * 2 *  61) + 27) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6385,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  40,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7150,	((LBPR * 2 *  12) + 25) & ~3,  LBPR *  40,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	11111,	((LBPR * 2 *  83) + 14) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11741,	((LBPR * 2 *  44) + 12) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	12236,	((LBPR * 2 *  72) + 11) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   41,	((LBPR * 2 * 131) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   41,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   41,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5891,	((LBPR * 2 *  95) + 28) & ~3,  LBPR *  41,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7961,	((LBPR * 2 *  11) + 23) & ~3,  LBPR *  41,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 8051,	((LBPR * 2 * 132) + 22) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	  806,	((LBPR * 2 *  13) + 42) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 8411,	((LBPR * 2 *   8) + 21) & ~3,  LBPR *  41,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9446,	((LBPR * 2 *   5) + 18) & ~3,  LBPR *  41,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	12687,	((LBPR * 2 *  54) +	 9) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	14172,	((LBPR * 2 *  24) +	 5) & ~3,  LBPR *  42,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 2967,	((LBPR * 2 *  24) + 36) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  357,	((LBPR * 2 *   1) + 44) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	   42,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   42,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   42,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4947,	((LBPR * 2 * 117) + 31) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8187,	((LBPR * 2 *  93) + 22) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  852,	((LBPR * 2 *   1) + 42) & ~3,  LBPR *  42,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 8772,	((LBPR * 2 *   3) + 20) & ~3,  LBPR *  42,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 9087,	((LBPR * 2 *  63) + 19) & ~3,  LBPR *  42,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	11653,	((LBPR * 2 *  72) + 12) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	14128,	((LBPR * 2 *  74) +	 5) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	14983,	((LBPR * 2 * 115) +	 3) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1708,	((LBPR * 2 *   2) + 40) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2113,	((LBPR * 2 *   4) + 39) & ~3,  LBPR *  43,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2698,	((LBPR * 2 *   1) + 37) & ~3,  LBPR *  43,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   43,	((LBPR * 2 * 133) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   43,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   43,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4588,	((LBPR * 2 *  41) + 32) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7558,	((LBPR * 2 *  11) + 24) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8863,	((LBPR * 2 * 115) + 20) & ~3,  LBPR *  43,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1754,	((LBPR * 2 *  93) + 40) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3149,	((LBPR * 2 *  15) + 36) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   44,	((LBPR * 2 * 134) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   44,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   44,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5129,	((LBPR * 2 *  12) + 30) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6119,	((LBPR * 2 * 131) + 28) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  629,	((LBPR * 2 *   7) + 43) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7244,	((LBPR * 2 *   1) + 25) & ~3,  LBPR *  44,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 7604,	((LBPR * 2 *  60) + 24) & ~3,  LBPR *  44,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7874,	((LBPR * 2 *  43) + 23) & ~3,  LBPR *  44,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 9584,	((LBPR * 2 *  75) + 18) & ~3,  LBPR *  44,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n45_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11484,	((LBPR * 2 *  15) +	 5) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11700,	((LBPR * 2 *  12) +	 4) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1224,	((LBPR * 2 *  81) + 40) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2196,	((LBPR * 2 *  39) + 37) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2592,	((LBPR * 2 *  49) + 36) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3744,	((LBPR * 2 *   6) + 32) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4356,	((LBPR * 2 *  25) + 29) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6516,	((LBPR * 2 *  15) + 22) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7200,	((LBPR * 2 *  86) + 20) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8316,	((LBPR * 2 * 125) + 16) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8748,	((LBPR * 2 *  17) + 14) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 9288,	((LBPR * 2 * 139) + 12) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	10405,	((LBPR * 2 *  33) +	 8) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	10693,	((LBPR * 2 *  41) +	 7) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	11341,	((LBPR * 2 *  17) +	 5) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	11881,	((LBPR * 2 *  27) +	 3) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	12385,	((LBPR * 2 * 118) +	 2) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	12925,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  253,	((LBPR * 2 *   9) + 44) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3457,	((LBPR * 2 *  14) + 33) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3493,	((LBPR * 2 *  63) + 32) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 7597,	((LBPR * 2 * 121) + 18) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	  829,	((LBPR * 2 *  96) + 42) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8713,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1010,	((LBPR * 2 *  19) + 41) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1118,	((LBPR * 2 *   7) + 41) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11954,	((LBPR * 2 *  48) +	 3) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	11990,	((LBPR * 2 * 118) +	 3) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	12278,	((LBPR * 2 *  21) +	 2) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2090,	((LBPR * 2 *  67) + 37) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word		2,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3422,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 3854,	((LBPR * 2 *  12) + 31) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5618,	((LBPR * 2 *  78) + 25) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 6590,	((LBPR * 2 * 125) + 22) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7850,	((LBPR * 2 *  10) + 17) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8138,	((LBPR * 2 * 106) + 16) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1011,	((LBPR * 2 *   5) + 41) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	10155,	((LBPR * 2 *  18) +	 9) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 2127,	((LBPR * 2 *   5) + 37) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2343,	((LBPR * 2 *   9) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  255,	((LBPR * 2 * 128) + 44) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2739,	((LBPR * 2 *  15) + 35) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word		3,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4935,	((LBPR * 2 *  72) + 27) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5835,	((LBPR * 2 * 129) + 24) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6627,	((LBPR * 2 *  94) + 22) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7527,	((LBPR * 2 *  40) + 18) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 7779,	((LBPR * 2 *  58) + 18) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9147,	((LBPR * 2 *  11) + 13) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	  112,	((LBPR * 2 * 122) + 44) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	11992,	((LBPR * 2 *   4) +	 3) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2236,	((LBPR * 2 *  30) + 37) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 3244,	((LBPR * 2 *  84) + 33) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word		4,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6016,	((LBPR * 2 *  54) + 24) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  616,	((LBPR * 2 * 104) + 42) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6340,	((LBPR * 2 *  31) + 23) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6484,	((LBPR * 2 *   7) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6628,	((LBPR * 2 *  15) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7420,	((LBPR * 2 *  49) + 19) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  940,	((LBPR * 2 *   6) + 41) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9724,	((LBPR * 2 * 134) + 11) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  113,	((LBPR * 2 * 128) + 44) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	11453,	((LBPR * 2 *  13) +	 5) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	  149,	((LBPR * 2 *   0) + 44) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2201,	((LBPR * 2 *  97) + 37) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4073,	((LBPR * 2 *   5) + 30) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 4397,	((LBPR * 2 *  22) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4505,	((LBPR * 2 *   9) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word		5,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6197,	((LBPR * 2 * 129) + 23) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	  689,	((LBPR * 2 *  51) + 42) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8033,	((LBPR * 2 *  44) + 17) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 8249,	((LBPR * 2 *  16) + 16) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 9761,	((LBPR * 2 * 105) + 11) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11526,	((LBPR * 2 * 135) +	 5) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	12318,	((LBPR * 2 *  88) +	 2) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 2202,	((LBPR * 2 *  88) + 37) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2274,	((LBPR * 2 *  11) + 37) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2490,	((LBPR * 2 *  13) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2526,	((LBPR * 2 *  27) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2706,	((LBPR * 2 *  42) + 35) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4002,	((LBPR * 2 *  57) + 31) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 5478,	((LBPR * 2 * 132) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6054,	((LBPR * 2 *  11) + 24) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7854,	((LBPR * 2 *   7) + 17) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8430,	((LBPR * 2 *   8) + 15) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	10483,	((LBPR * 2 *  19) +	 8) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	12067,	((LBPR * 2 *   4) +	 3) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2455,	((LBPR * 2 *  63) + 36) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2815,	((LBPR * 2 *   6) + 35) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3283,	((LBPR * 2 *  86) + 33) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4219,	((LBPR * 2 *  73) + 30) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4435,	((LBPR * 2 *  45) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6307,	((LBPR * 2 *  14) + 23) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 6775,	((LBPR * 2 *  10) + 21) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 7423,	((LBPR * 2 * 116) + 19) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word		7,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8179,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9511,	((LBPR * 2 * 136) + 12) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1304,	((LBPR * 2 *  52) + 40) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1556,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2132,	((LBPR * 2 * 133) + 37) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3464,	((LBPR * 2 * 112) + 33) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3788,	((LBPR * 2 *  14) + 31) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5948,	((LBPR * 2 * 100) + 24) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8108,	((LBPR * 2 *   0) + 16) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 8504,	((LBPR * 2 *  70) + 15) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8900,	((LBPR * 2 *  20) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8936,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8972,	((LBPR * 2 *  77) + 13) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word		8,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9440,	((LBPR * 2 *   8) + 12) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10305,	((LBPR * 2 *   1) +	 9) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	10377,	((LBPR * 2 * 106) +	 9) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10485,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 3969,	((LBPR * 2 *  60) + 31) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5553,	((LBPR * 2 * 143) + 25) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5553,	((LBPR * 2 *   2) + 25) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5841,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7137,	((LBPR * 2 *  26) + 20) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 7965,	((LBPR * 2 * 123) + 17) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8505,	((LBPR * 2 *   0) + 15) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8757,	((LBPR * 2 *  99) + 14) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 9621,	((LBPR * 2 *  36) + 11) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		9,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10162,	((LBPR * 2 * 120) +	 9) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	10306,	((LBPR * 2 *  92) +	 9) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11962,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1450,	((LBPR * 2 * 122) + 40) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2170,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3250,	((LBPR * 2 *   3) + 33) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3970,	((LBPR * 2 *  12) + 31) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6166,	((LBPR * 2 *   4) + 23) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6562,	((LBPR * 2 *  47) + 22) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 6598,	((LBPR * 2 *  65) + 22) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8866,	((LBPR * 2 *  81) + 14) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9514,	((LBPR * 2 *  25) + 12) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11495,	((LBPR * 2 *  65) +	 5) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11675,	((LBPR * 2 *  33) +	 4) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	12107,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	12323,	((LBPR * 2 * 136) +	 2) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	12899,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4115,	((LBPR * 2 *   8) + 30) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4439,	((LBPR * 2 *  56) + 29) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5447,	((LBPR * 2 *  75) + 26) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	  551,	((LBPR * 2 *  15) + 43) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 8579,	((LBPR * 2 *   8) + 15) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 9011,	((LBPR * 2 * 126) + 13) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9587,	((LBPR * 2 *  90) + 11) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	12828,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   12,	((LBPR * 2 * 120) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1380,	((LBPR * 2 * 134) + 40) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1704,	((LBPR * 2 *  10) + 39) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2820,	((LBPR * 2 *   2) + 35) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  408,	((LBPR * 2 *   0) + 43) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4368,	((LBPR * 2 *  61) + 29) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5844,	((LBPR * 2 *  85) + 24) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6960,	((LBPR * 2 * 113) + 20) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 8724,	((LBPR * 2 *  30) + 14) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 8832,	((LBPR * 2 *  11) + 14) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8868,	((LBPR * 2 *  80) + 14) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9228,	((LBPR * 2 *  46) + 13) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10921,	((LBPR * 2 *  29) +	 7) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   13,	((LBPR * 2 * 121) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1813,	((LBPR * 2 *  16) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1849,	((LBPR * 2 *  70) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3217,	((LBPR * 2 *  76) + 33) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3505,	((LBPR * 2 * 131) + 32) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4405,	((LBPR * 2 *  83) + 29) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4549,	((LBPR * 2 *   7) + 29) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5161,	((LBPR * 2 *   4) + 27) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	  517,	((LBPR * 2 *   3) + 43) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5665,	((LBPR * 2 *   9) + 25) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7285,	((LBPR * 2 * 108) + 19) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9625,	((LBPR * 2 *  67) + 11) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	11282,	((LBPR * 2 *  87) +	 5) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	11930,	((LBPR * 2 *  11) +	 3) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1274,	((LBPR * 2 *   7) + 40) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	12902,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   14,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2102,	((LBPR * 2 *  17) + 37) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  266,	((LBPR * 2 *  83) + 44) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3578,	((LBPR * 2 *  69) + 32) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5342,	((LBPR * 2 *  62) + 26) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7070,	((LBPR * 2 *  22) + 20) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 8150,	((LBPR * 2 *  15) + 16) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8582,	((LBPR * 2 *  32) + 15) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 9410,	((LBPR * 2 * 127) + 12) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11751,	((LBPR * 2 *   7) +	 4) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1347,	((LBPR * 2 * 121) + 40) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   15,	((LBPR * 2 * 123) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2139,	((LBPR * 2 *  99) + 37) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4047,	((LBPR * 2 *   7) + 31) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4731,	((LBPR * 2 *   3) + 28) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4731,	((LBPR * 2 *  68) + 28) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5811,	((LBPR * 2 * 107) + 24) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 7107,	((LBPR * 2 *   5) + 20) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7323,	((LBPR * 2 *  12) + 19) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8331,	((LBPR * 2 * 111) + 16) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 9087,	((LBPR * 2 *  11) + 13) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9555,	((LBPR * 2 *  57) + 11) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	10816,	((LBPR * 2 *   6) +	 7) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	11212,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	11716,	((LBPR * 2 *  11) +	 4) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	12004,	((LBPR * 2 * 100) +	 3) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	12472,	((LBPR * 2 *  78) +	 1) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   16,	((LBPR * 2 * 124) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2572,	((LBPR * 2 *  15) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2608,	((LBPR * 2 *  69) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  268,	((LBPR * 2 * 141) + 44) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3724,	((LBPR * 2 *   5) + 32) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 6316,	((LBPR * 2 *  62) + 23) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 6712,	((LBPR * 2 *  17) + 21) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 7108,	((LBPR * 2 * 143) + 20) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	11573,	((LBPR * 2 *   6) +	 4) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1457,	((LBPR * 2 *  79) + 40) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 125) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2321,	((LBPR * 2 *  68) + 37) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3509,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3869,	((LBPR * 2 *   1) + 31) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  413,	((LBPR * 2 *   8) + 43) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4157,	((LBPR * 2 *  46) + 30) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5237,	((LBPR * 2 *   1) + 26) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 5489,	((LBPR * 2 *  17) + 26) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7397,	((LBPR * 2 * 124) + 19) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 8945,	((LBPR * 2 * 124) + 14) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9701,	((LBPR * 2 *  96) + 11) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	10026,	((LBPR * 2 *   0) + 10) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11070,	((LBPR * 2 *  93) +	 6) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	11934,	((LBPR * 2 *  53) +	 3) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	12402,	((LBPR * 2 *   8) +	 2) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1494,	((LBPR * 2 *  59) + 39) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   18,	((LBPR * 2 * 126) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3186,	((LBPR * 2 *  35) + 34) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6174,	((LBPR * 2 * 127) + 23) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6534,	((LBPR * 2 *  16) + 22) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 7146,	((LBPR * 2 * 104) + 20) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 8262,	((LBPR * 2 *  12) + 16) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8478,	((LBPR * 2 * 123) + 15) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9126,	((LBPR * 2 *   9) + 13) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	10243,	((LBPR * 2 *  21) +	 9) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1351,	((LBPR * 2 *   4) + 40) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1819,	((LBPR * 2 *  97) + 38) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   19,	((LBPR * 2 * 127) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4627,	((LBPR * 2 *  16) + 29) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4879,	((LBPR * 2 *  38) + 28) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5455,	((LBPR * 2 *  11) + 26) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5743,	((LBPR * 2 *   5) + 25) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7795,	((LBPR * 2 *   2) + 18) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8371,	((LBPR * 2 *  82) + 16) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9019,	((LBPR * 2 * 110) + 13) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9559,	((LBPR * 2 *  54) + 11) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 9739,	((LBPR * 2 * 119) + 11) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	12116,	((LBPR * 2 *   2) +	 3) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1280,	((LBPR * 2 *  79) + 40) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   20,	((LBPR * 2 * 128) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2936,	((LBPR * 2 *  17) + 34) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2972,	((LBPR * 2 *   2) + 34) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3044,	((LBPR * 2 *  29) + 34) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3080,	((LBPR * 2 * 139) + 34) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  344,	((LBPR * 2 *  39) + 43) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 4304,	((LBPR * 2 *   3) + 30) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7616,	((LBPR * 2 * 107) + 18) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7976,	((LBPR * 2 *  14) + 17) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8120,	((LBPR * 2 * 117) + 16) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  920,	((LBPR * 2 *  52) + 41) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	10281,	((LBPR * 2 *  26) +	 9) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	10677,	((LBPR * 2 *   1) +	 8) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10749,	((LBPR * 2 *  60) +	 7) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11217,	((LBPR * 2 *  13) +	 6) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	12045,	((LBPR * 2 *  92) +	 3) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	12441,	((LBPR * 2 *  17) +	 1) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   21,	((LBPR * 2 * 129) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4197,	((LBPR * 2 *  56) + 30) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4377,	((LBPR * 2 * 131) + 29) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5601,	((LBPR * 2 * 116) + 25) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5997,	((LBPR * 2 *  14) + 24) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  669,	((LBPR * 2 *  77) + 42) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7725,	((LBPR * 2 *  14) + 18) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	11506,	((LBPR * 2 *   6) +	 5) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	11866,	((LBPR * 2 *  16) +	 3) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   22,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3730,	((LBPR * 2 *  16) + 32) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4414,	((LBPR * 2 * 111) + 29) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4846,	((LBPR * 2 *  45) + 28) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  490,	((LBPR * 2 *   1) + 43) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5638,	((LBPR * 2 *  76) + 25) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5998,	((LBPR * 2 *  43) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 6070,	((LBPR * 2 *  16) + 24) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6970,	((LBPR * 2 *  75) + 20) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 9022,	((LBPR * 2 * 138) + 13) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9526,	((LBPR * 2 *   6) + 12) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	11507,	((LBPR * 2 *   7) +	 5) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	12191,	((LBPR * 2 *   4) +	 2) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	12803,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 2039,	((LBPR * 2 * 113) + 38) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2363,	((LBPR * 2 *   4) + 36) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	   23,	((LBPR * 2 * 131) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3191,	((LBPR * 2 * 101) + 34) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3479,	((LBPR * 2 *  61) + 33) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4523,	((LBPR * 2 *  89) + 29) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5207,	((LBPR * 2 *   7) + 27) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6467,	((LBPR * 2 *  34) + 22) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6755,	((LBPR * 2 *  42) + 21) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 8231,	((LBPR * 2 * 137) + 16) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	10968,	((LBPR * 2 *  74) +	 7) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	11040,	((LBPR * 2 *   5) +	 6) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1752,	((LBPR * 2 * 137) + 39) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  312,	((LBPR * 2 *  55) + 44) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4344,	((LBPR * 2 *  11) + 30) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  564,	((LBPR * 2 *   2) + 43) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 6360,	((LBPR * 2 *   0) + 23) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6828,	((LBPR * 2 *   5) + 21) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7116,	((LBPR * 2 * 103) + 20) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7764,	((LBPR * 2 * 109) + 18) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 9636,	((LBPR * 2 *  50) + 11) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9852,	((LBPR * 2 *  15) + 10) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	10105,	((LBPR * 2 *   3) + 10) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10933,	((LBPR * 2 * 102) +	 7) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	11977,	((LBPR * 2 *  17) +	 3) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	12157,	((LBPR * 2 *  64) +	 2) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 1969,	((LBPR * 2 *  28) + 38) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	   25,	((LBPR * 2 * 133) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4453,	((LBPR * 2 * 133) + 29) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4525,	((LBPR * 2 *  14) + 29) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4885,	((LBPR * 2 * 117) + 28) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7405,	((LBPR * 2 *  64) + 19) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7837,	((LBPR * 2 *  17) + 17) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	  817,	((LBPR * 2 *  13) + 42) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9889,	((LBPR * 2 *  95) + 10) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	10034,	((LBPR * 2 * 119) + 10) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	10250,	((LBPR * 2 *  20) +	 9) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1466,	((LBPR * 2 *   6) + 40) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1502,	((LBPR * 2 *  87) + 39) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   26,	((LBPR * 2 * 134) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3734,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4166,	((LBPR * 2 *   9) + 30) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4418,	((LBPR * 2 *  13) + 29) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6650,	((LBPR * 2 *  40) + 22) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  710,	((LBPR * 2 * 115) + 42) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8054,	((LBPR * 2 *  74) + 17) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 8234,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 8810,	((LBPR * 2 *  50) + 14) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	11043,	((LBPR * 2 *  44) +	 6) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	11259,	((LBPR * 2 *   6) +	 6) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1467,	((LBPR * 2 *  13) + 40) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 * 135) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4023,	((LBPR * 2 * 142) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 4023,	((LBPR * 2 *  15) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 4455,	((LBPR * 2 *  66) + 29) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4455,	((LBPR * 2 *   8) + 29) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 4707,	((LBPR * 2 *   9) + 28) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6039,	((LBPR * 2 *  85) + 24) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7011,	((LBPR * 2 *  90) + 20) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7515,	((LBPR * 2 * 140) + 19) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 8883,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	10756,	((LBPR * 2 *   5) +	 7) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	11980,	((LBPR * 2 *  24) +	 3) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1216,	((LBPR * 2 *   6) + 40) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	12232,	((LBPR * 2 *  58) +	 2) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2440,	((LBPR * 2 *  41) + 36) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	   28,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 * 136) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3844,	((LBPR * 2 * 130) + 31) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  424,	((LBPR * 2 * 120) + 43) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5104,	((LBPR * 2 *  93) + 27) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	  712,	((LBPR * 2 *   3) + 42) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7516,	((LBPR * 2 *   3) + 19) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 7660,	((LBPR * 2 *  17) + 18) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 8704,	((LBPR * 2 * 101) + 14) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	11477,	((LBPR * 2 *  28) +	 5) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	12341,	((LBPR * 2 * 142) +	 2) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 1253,	((LBPR * 2 *  53) + 40) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1541,	((LBPR * 2 *  14) + 39) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   29,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 * 137) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  497,	((LBPR * 2 * 138) + 43) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	  533,	((LBPR * 2 *  13) + 43) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6689,	((LBPR * 2 *  98) + 21) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7085,	((LBPR * 2 *   2) + 20) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 7589,	((LBPR * 2 *  55) + 18) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7913,	((LBPR * 2 *  16) + 17) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 9497,	((LBPR * 2 *  12) + 12) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  965,	((LBPR * 2 *  89) + 41) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	12198,	((LBPR * 2 *  35) +	 2) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	12270,	((LBPR * 2 *  47) +	 2) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12306,	((LBPR * 2 *  16) +	 2) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2262,	((LBPR * 2 *   8) + 37) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 2982,	((LBPR * 2 *  14) + 34) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   30,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 * 138) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   30,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *  30,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4998,	((LBPR * 2 *   1) + 27) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5142,	((LBPR * 2 * 105) + 27) & ~3,  LBPR *  30,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5430,	((LBPR * 2 *  51) + 26) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	  642,	((LBPR * 2 * 112) + 42) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6906,	((LBPR * 2 *  94) + 21) & ~3,  LBPR *  30,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	  786,	((LBPR * 2 * 114) + 42) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8742,	((LBPR * 2 *   2) + 14) & ~3,  LBPR *  30,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	10867,	((LBPR * 2 * 109) +	 7) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	12271,	((LBPR * 2 *  23) +	 2) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	12343,	((LBPR * 2 * 110) +	 2) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	12559,	((LBPR * 2 *   0) +	 1) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	12775,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   31,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 * 139) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   31,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *  31,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3883,	((LBPR * 2 *  80) + 31) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4027,	((LBPR * 2 *  71) + 31) & ~3,  LBPR *  31,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 5251,	((LBPR * 2 *  13) + 26) & ~3,  LBPR *  31,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 5575,	((LBPR * 2 *   0) + 25) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5611,	((LBPR * 2 *  37) + 25) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5647,	((LBPR * 2 *  72) + 25) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 7915,	((LBPR * 2 *   8) + 17) & ~3,  LBPR *  31,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	11264,	((LBPR * 2 *  11) +	 6) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2552,	((LBPR * 2 *  91) + 36) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2696,	((LBPR * 2 * 141) + 35) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3092,	((LBPR * 2 *   1) + 34) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   32,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 * 140) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   32,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5144,	((LBPR * 2 *  43) + 27) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5972,	((LBPR * 2 *  82) + 24) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 6836,	((LBPR * 2 *  24) + 21) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7052,	((LBPR * 2 *   8) + 20) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 7592,	((LBPR * 2 *  48) + 18) & ~3,  LBPR *  32,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 8672,	((LBPR * 2 * 132) + 15) & ~3,  LBPR *  32,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 9104,	((LBPR * 2 *  31) + 13) & ~3,  LBPR *  32,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9536,	((LBPR * 2 *  14) + 12) & ~3,  LBPR *  32,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	10329,	((LBPR * 2 *  12) +	 9) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	11445,	((LBPR * 2 *  36) +	 5) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	11805,	((LBPR * 2 *  66) +	 4) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1761,	((LBPR * 2 *  16) + 39) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2121,	((LBPR * 2 *  95) + 37) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 2157,	((LBPR * 2 *   2) + 37) & ~3,  LBPR *  33,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2481,	((LBPR * 2 * 140) + 36) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2841,	((LBPR * 2 *   3) + 35) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3021,	((LBPR * 2 * 114) + 34) & ~3,  LBPR *  33,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	   33,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 * 141) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   33,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *  33,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3885,	((LBPR * 2 *   9) + 31) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  537,	((LBPR * 2 *   4) + 43) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6297,	((LBPR * 2 * 103) + 23) & ~3,  LBPR *  33,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1870,	((LBPR * 2 *  73) + 38) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2086,	((LBPR * 2 * 115) + 37) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   34,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 * 142) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   34,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3706,	((LBPR * 2 *  84) + 32) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3742,	((LBPR * 2 *   9) + 32) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4210,	((LBPR * 2 *  18) + 30) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4246,	((LBPR * 2 *   4) + 30) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6838,	((LBPR * 2 * 126) + 21) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7342,	((LBPR * 2 *  32) + 19) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 7486,	((LBPR * 2 *  37) + 19) & ~3,  LBPR *  34,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 7954,	((LBPR * 2 *  10) + 17) & ~3,  LBPR *  34,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8350,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  34,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8782,	((LBPR * 2 *  59) + 14) & ~3,  LBPR *  34,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	11267,	((LBPR * 2 *   4) +	 6) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1151,	((LBPR * 2 *  71) + 41) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	12131,	((LBPR * 2 * 135) +	 3) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2051,	((LBPR * 2 *  91) + 38) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2087,	((LBPR * 2 *  12) + 37) & ~3,  LBPR *  35,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2699,	((LBPR * 2 *   3) + 35) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   35,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 * 143) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   35,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3887,	((LBPR * 2 *  23) + 31) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4319,	((LBPR * 2 *  38) + 30) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7703,	((LBPR * 2 *   1) + 18) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8171,	((LBPR * 2 * 102) + 16) & ~3,  LBPR *  35,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 8639,	((LBPR * 2 *  10) + 15) & ~3,  LBPR *  35,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9863,	((LBPR * 2 * 108) + 10) & ~3,  LBPR *  35,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n56_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 120) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2580,	((LBPR * 2 *   8) + 34) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 2640,	((LBPR * 2 *  40) + 34) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3240,	((LBPR * 2 *  97) + 31) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 3330,	((LBPR * 2 * 136) + 31) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3600,	((LBPR * 2 *  14) + 30) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3840,	((LBPR * 2 *   9) + 29) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4260,	((LBPR * 2 *  13) + 27) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4530,	((LBPR * 2 * 140) + 26) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 4830,	((LBPR * 2 * 118) + 24) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  570,	((LBPR * 2 *  14) + 42) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	  630,	((LBPR * 2 *  78) + 42) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 8400,	((LBPR * 2 *  54) + 10) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8400,	((LBPR * 2 *  72) + 10) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9360,	((LBPR * 2 *   3) +	 6) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 9960,	((LBPR * 2 *   6) +	 3) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1291,	((LBPR * 2 * 131) + 39) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 121) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2131,	((LBPR * 2 * 148) + 36) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2641,	((LBPR * 2 *  31) + 34) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3091,	((LBPR * 2 *   2) + 32) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5131,	((LBPR * 2 *  67) + 23) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5671,	((LBPR * 2 *   2) + 21) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5731,	((LBPR * 2 * 100) + 21) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 6031,	((LBPR * 2 *   1) + 19) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 6121,	((LBPR * 2 * 101) + 19) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6331,	((LBPR * 2 *  69) + 18) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6691,	((LBPR * 2 *  13) + 17) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7621,	((LBPR * 2 *  15) + 13) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7891,	((LBPR * 2 *   7) + 12) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8191,	((LBPR * 2 *  46) + 10) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 8521,	((LBPR * 2 *  19) +	 9) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	10592,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2912,	((LBPR * 2 *   0) + 32) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word		2,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3542,	((LBPR * 2 *  28) + 30) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 3602,	((LBPR * 2 *  91) + 30) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  362,	((LBPR * 2 * 116) + 43) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4052,	((LBPR * 2 *   5) + 28) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4652,	((LBPR * 2 *  65) + 25) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5042,	((LBPR * 2 *  56) + 24) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5072,	((LBPR * 2 *  27) + 23) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5582,	((LBPR * 2 *  42) + 21) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6122,	((LBPR * 2 * 130) + 19) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6572,	((LBPR * 2 *   9) + 17) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6662,	((LBPR * 2 *  70) + 17) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7352,	((LBPR * 2 *  12) + 14) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9542,	((LBPR * 2 *  12) +	 5) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	10563,	((LBPR * 2 * 137) +	 1) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	10593,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	10623,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2883,	((LBPR * 2 *   8) + 33) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3153,	((LBPR * 2 *  90) + 31) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  363,	((LBPR * 2 *  79) + 43) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 3693,	((LBPR * 2 *   5) + 29) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word		3,	((LBPR * 2 * 123) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4683,	((LBPR * 2 * 148) + 25) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 6513,	((LBPR * 2 *  64) + 17) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6723,	((LBPR * 2 *   0) + 17) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 7203,	((LBPR * 2 *  58) + 15) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 7293,	((LBPR * 2 *  17) + 14) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7503,	((LBPR * 2 *  34) + 13) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  753,	((LBPR * 2 * 111) + 41) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 9843,	((LBPR * 2 *   4) +	 4) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1024,	((LBPR * 2 *   8) + 40) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2074,	((LBPR * 2 *   9) + 36) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2614,	((LBPR * 2 * 113) + 34) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2854,	((LBPR * 2 *  77) + 33) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 3094,	((LBPR * 2 *   9) + 32) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  394,	((LBPR * 2 *  11) + 43) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	  394,	((LBPR * 2 *  55) + 43) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3964,	((LBPR * 2 *  39) + 28) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4264,	((LBPR * 2 * 137) + 27) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word		4,	((LBPR * 2 * 124) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6064,	((LBPR * 2 *  87) + 19) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6304,	((LBPR * 2 *  15) + 18) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6424,	((LBPR * 2 * 146) + 18) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 7144,	((LBPR * 2 *   5) + 15) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7834,	((LBPR * 2 *   4) + 12) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 9064,	((LBPR * 2 * 109) +	 7) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10175,	((LBPR * 2 *   2) +	 2) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	10595,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2075,	((LBPR * 2 * 115) + 36) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2195,	((LBPR * 2 *   8) + 35) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2885,	((LBPR * 2 *  89) + 33) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3305,	((LBPR * 2 *  48) + 31) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3755,	((LBPR * 2 *  13) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3755,	((LBPR * 2 * 147) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4055,	((LBPR * 2 *  91) + 28) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4745,	((LBPR * 2 *   7) + 25) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4835,	((LBPR * 2 *   4) + 24) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4985,	((LBPR * 2 *   2) + 24) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word		5,	((LBPR * 2 * 125) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  725,	((LBPR * 2 *  12) + 42) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8255,	((LBPR * 2 *  55) + 10) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8945,	((LBPR * 2 * 132) +	 7) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2106,	((LBPR * 2 * 143) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3216,	((LBPR * 2 *   0) + 31) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3636,	((LBPR * 2 *  11) + 29) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3786,	((LBPR * 2 *   9) + 29) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4176,	((LBPR * 2 *   7) + 27) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4506,	((LBPR * 2 *  45) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4536,	((LBPR * 2 *  86) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 6786,	((LBPR * 2 *  17) + 16) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word		6,	((LBPR * 2 * 126) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 7326,	((LBPR * 2 * 111) + 14) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 8016,	((LBPR * 2 * 107) + 11) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8316,	((LBPR * 2 *   6) + 10) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9156,	((LBPR * 2 *  73) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 9276,	((LBPR * 2 *  37) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9666,	((LBPR * 2 * 129) +	 4) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 9996,	((LBPR * 2 *   3) +	 3) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1057,	((LBPR * 2 *  27) + 40) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1117,	((LBPR * 2 *  52) + 40) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1567,	((LBPR * 2 *   7) + 38) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1717,	((LBPR * 2 *   7) + 37) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1717,	((LBPR * 2 *  92) + 37) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3667,	((LBPR * 2 * 123) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 4297,	((LBPR * 2 *   3) + 27) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 4687,	((LBPR * 2 * 116) + 25) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5767,	((LBPR * 2 *  83) + 21) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6157,	((LBPR * 2 *  47) + 19) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 6397,	((LBPR * 2 *   1) + 18) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   67,	((LBPR * 2 *  62) + 44) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7267,	((LBPR * 2 *   2) + 14) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7837,	((LBPR * 2 * 120) + 12) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word		7,	((LBPR * 2 * 127) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9517,	((LBPR * 2 *  22) +	 5) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	10058,	((LBPR * 2 *   3) +	 3) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	10238,	((LBPR * 2 *  71) +	 2) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	10268,	((LBPR * 2 *  22) +	 2) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	  338,	((LBPR * 2 *  39) + 43) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5138,	((LBPR * 2 *   3) + 23) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6338,	((LBPR * 2 *  56) + 18) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6818,	((LBPR * 2 * 141) + 16) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 7088,	((LBPR * 2 * 130) + 15) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 7238,	((LBPR * 2 *  62) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 7568,	((LBPR * 2 *  12) + 13) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 7868,	((LBPR * 2 * 100) + 12) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 7898,	((LBPR * 2 *  94) + 12) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 7928,	((LBPR * 2 *  28) + 12) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8798,	((LBPR * 2 *  13) +	 8) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8978,	((LBPR * 2 *   1) +	 7) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		8,	((LBPR * 2 * 128) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1689,	((LBPR * 2 * 121) + 38) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1689,	((LBPR * 2 *   8) + 38) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1989,	((LBPR * 2 *  58) + 36) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2379,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3009,	((LBPR * 2 * 105) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3609,	((LBPR * 2 * 133) + 30) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4449,	((LBPR * 2 *   8) + 26) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5199,	((LBPR * 2 *   6) + 23) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5619,	((LBPR * 2 *  53) + 21) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	  699,	((LBPR * 2 *   6) + 42) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 7419,	((LBPR * 2 *  13) + 14) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 8469,	((LBPR * 2 *  77) +	 9) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9009,	((LBPR * 2 *   2) +	 7) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 9069,	((LBPR * 2 *  82) +	 7) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 9489,	((LBPR * 2 *  98) +	 5) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word		9,	((LBPR * 2 * 129) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1450,	((LBPR * 2 *   9) + 39) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1540,	((LBPR * 2 *  49) + 38) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1690,	((LBPR * 2 *  76) + 38) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2560,	((LBPR * 2 *   0) + 34) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3070,	((LBPR * 2 *   4) + 32) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3310,	((LBPR * 2 * 128) + 31) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3370,	((LBPR * 2 *   3) + 31) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4060,	((LBPR * 2 *  83) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5560,	((LBPR * 2 *  24) + 21) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	  580,	((LBPR * 2 * 103) + 42) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5950,	((LBPR * 2 *  18) + 20) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 6520,	((LBPR * 2 *  14) + 17) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7120,	((LBPR * 2 * 133) + 15) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 9400,	((LBPR * 2 *  34) +	 5) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 9940,	((LBPR * 2 * 117) +	 3) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	10331,	((LBPR * 2 *   6) +	 2) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	10691,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   11,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 131) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1781,	((LBPR * 2 *  59) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1991,	((LBPR * 2 *   6) + 36) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2051,	((LBPR * 2 *  89) + 36) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2171,	((LBPR * 2 * 145) + 36) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2531,	((LBPR * 2 *  12) + 34) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3011,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3491,	((LBPR * 2 *  45) + 30) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	  611,	((LBPR * 2 * 115) + 42) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6881,	((LBPR * 2 * 144) + 16) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7151,	((LBPR * 2 *  13) + 15) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7871,	((LBPR * 2 *   5) + 12) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 8561,	((LBPR * 2 *  11) +	 9) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 8831,	((LBPR * 2 *  63) +	 8) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	10752,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   12,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1512,	((LBPR * 2 *   9) + 38) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1692,	((LBPR * 2 *  37) + 38) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3762,	((LBPR * 2 *  29) + 29) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3882,	((LBPR * 2 *  11) + 28) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4062,	((LBPR * 2 * 146) + 28) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4092,	((LBPR * 2 *   2) + 28) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4182,	((LBPR * 2 *  46) + 27) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4362,	((LBPR * 2 *   0) + 26) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6672,	((LBPR * 2 *  98) + 17) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6702,	((LBPR * 2 *  81) + 17) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 8052,	((LBPR * 2 * 135) + 11) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8892,	((LBPR * 2 *  86) +	 8) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9132,	((LBPR * 2 * 102) +	 7) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 9462,	((LBPR * 2 *  10) +	 5) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1363,	((LBPR * 2 * 119) + 39) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   13,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 133) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1633,	((LBPR * 2 *  12) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 3403,	((LBPR * 2 * 142) + 30) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3883,	((LBPR * 2 * 144) + 28) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4843,	((LBPR * 2 * 102) + 24) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5683,	((LBPR * 2 *  42) + 21) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5893,	((LBPR * 2 *  88) + 20) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 6883,	((LBPR * 2 *   7) + 16) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8263,	((LBPR * 2 *  13) + 10) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8353,	((LBPR * 2 *   4) + 10) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	  853,	((LBPR * 2 *  87) + 41) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8593,	((LBPR * 2 *   0) +	 9) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 8593,	((LBPR * 2 *   9) +	 9) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 9313,	((LBPR * 2 *   1) +	 6) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 9523,	((LBPR * 2 *  43) +	 5) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1304,	((LBPR * 2 *   6) + 39) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	   14,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 134) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2084,	((LBPR * 2 *   5) + 36) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2774,	((LBPR * 2 *  32) + 33) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3944,	((LBPR * 2 * 127) + 28) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4214,	((LBPR * 2 *  61) + 27) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4244,	((LBPR * 2 * 125) + 27) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	  434,	((LBPR * 2 *   3) + 43) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5174,	((LBPR * 2 *  59) + 23) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5444,	((LBPR * 2 *   9) + 22) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   74,	((LBPR * 2 *  12) + 44) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 7844,	((LBPR * 2 * 113) + 12) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 8204,	((LBPR * 2 *  11) + 10) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 8684,	((LBPR * 2 * 117) +	 8) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 9614,	((LBPR * 2 *  71) +	 5) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 9764,	((LBPR * 2 *   7) +	 4) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10245,	((LBPR * 2 * 126) +	 2) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   15,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 135) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  195,	((LBPR * 2 * 106) + 44) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1995,	((LBPR * 2 *  14) + 36) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2895,	((LBPR * 2 * 136) + 33) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3435,	((LBPR * 2 *   5) + 30) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4125,	((LBPR * 2 *  80) + 27) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  555,	((LBPR * 2 *  25) + 42) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6405,	((LBPR * 2 *   0) + 18) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6585,	((LBPR * 2 *   5) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6675,	((LBPR * 2 *  51) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7935,	((LBPR * 2 *  11) + 12) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 8025,	((LBPR * 2 *  72) + 11) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 9195,	((LBPR * 2 * 108) +	 6) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9645,	((LBPR * 2 *  31) +	 4) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 9975,	((LBPR * 2 *  10) +	 3) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	10456,	((LBPR * 2 *  36) +	 1) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1516,	((LBPR * 2 * 108) + 38) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	   16,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 136) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1786,	((LBPR * 2 *   1) + 37) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1876,	((LBPR * 2 *   5) + 37) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 3226,	((LBPR * 2 *  29) + 31) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3376,	((LBPR * 2 *  61) + 31) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4156,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5446,	((LBPR * 2 *  14) + 22) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6346,	((LBPR * 2 * 129) + 18) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	  646,	((LBPR * 2 * 114) + 42) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6496,	((LBPR * 2 * 138) + 18) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6496,	((LBPR * 2 *   8) + 18) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8716,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  916,	((LBPR * 2 *  43) + 41) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 9226,	((LBPR * 2 *  82) +	 6) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	10037,	((LBPR * 2 *  38) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	10217,	((LBPR * 2 *   1) +	 2) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   17,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 137) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2327,	((LBPR * 2 *   4) + 35) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2777,	((LBPR * 2 *   2) + 33) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 2957,	((LBPR * 2 *   1) + 32) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 3827,	((LBPR * 2 *  26) + 29) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 3917,	((LBPR * 2 *   6) + 28) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5057,	((LBPR * 2 *   9) + 24) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5087,	((LBPR * 2 *  40) + 23) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5507,	((LBPR * 2 *  69) + 22) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	  617,	((LBPR * 2 *  95) + 42) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7067,	((LBPR * 2 *  74) + 15) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 7457,	((LBPR * 2 *  99) + 14) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 8027,	((LBPR * 2 * 149) + 11) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 8807,	((LBPR * 2 * 139) +	 8) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1128,	((LBPR * 2 *   3) + 40) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1848,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	   18,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 * 138) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2268,	((LBPR * 2 * 105) + 35) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  348,	((LBPR * 2 *   5) + 43) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3888,	((LBPR * 2 *   7) + 28) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4038,	((LBPR * 2 *  38) + 28) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 6498,	((LBPR * 2 *  16) + 18) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7008,	((LBPR * 2 *  80) + 15) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 7038,	((LBPR * 2 * 119) + 15) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  768,	((LBPR * 2 *  14) + 41) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 7878,	((LBPR * 2 *  67) + 12) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  858,	((LBPR * 2 *  41) + 41) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 9168,	((LBPR * 2 * 134) +	 6) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 9918,	((LBPR * 2 * 123) +	 3) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9978,	((LBPR * 2 *  11) +	 3) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	10009,	((LBPR * 2 *   7) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1429,	((LBPR * 2 *  66) + 39) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1939,	((LBPR * 2 *  94) + 37) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1999,	((LBPR * 2 * 140) + 36) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   19,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 * 139) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2359,	((LBPR * 2 * 122) + 35) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2419,	((LBPR * 2 * 106) + 35) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2479,	((LBPR * 2 *   1) + 34) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3559,	((LBPR * 2 *  60) + 30) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4069,	((LBPR * 2 *  51) + 28) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4339,	((LBPR * 2 *   1) + 27) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4969,	((LBPR * 2 *   0) + 24) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5119,	((LBPR * 2 *  57) + 23) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6379,	((LBPR * 2 *  10) + 18) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 9349,	((LBPR * 2 *  23) +	 6) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 9889,	((LBPR * 2 *   2) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	10070,	((LBPR * 2 * 122) +	 3) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	10340,	((LBPR * 2 *   5) +	 2) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1190,	((LBPR * 2 *  21) + 40) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1850,	((LBPR * 2 *  35) + 37) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	  200,	((LBPR * 2 *  14) + 44) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	   20,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 * 140) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   20,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2420,	((LBPR * 2 *  30) + 35) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2780,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3170,	((LBPR * 2 *  99) + 31) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5300,	((LBPR * 2 *  65) + 23) & ~3,  LBPR *  20,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 5420,	((LBPR * 2 *   8) + 22) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5630,	((LBPR * 2 *  73) + 21) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 5870,	((LBPR * 2 *   5) + 20) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6920,	((LBPR * 2 * 124) + 16) & ~3,  LBPR *  20,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 8600,	((LBPR * 2 *  26) +	 9) & ~3,  LBPR *  20,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 9290,	((LBPR * 2 * 104) +	 6) & ~3,  LBPR *  20,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  111,	((LBPR * 2 *   8) + 44) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1221,	((LBPR * 2 *  64) + 40) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1611,	((LBPR * 2 *   6) + 38) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2031,	((LBPR * 2 *  33) + 36) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 2181,	((LBPR * 2 *  23) + 36) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 * 141) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   21,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3111,	((LBPR * 2 *   6) + 32) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 3321,	((LBPR * 2 *   9) + 31) & ~3,  LBPR *  21,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3801,	((LBPR * 2 * 121) + 29) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4941,	((LBPR * 2 *  70) + 24) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 5331,	((LBPR * 2 *  33) + 22) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6291,	((LBPR * 2 * 112) + 18) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6771,	((LBPR * 2 *  14) + 16) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 7311,	((LBPR * 2 *   4) + 14) & ~3,  LBPR *  21,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 7821,	((LBPR * 2 * 126) + 12) & ~3,  LBPR *  21,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9591,	((LBPR * 2 * 103) +	 5) & ~3,  LBPR *  21,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	10192,	((LBPR * 2 *  47) +	 2) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	10372,	((LBPR * 2 *  10) +	 1) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	10732,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1612,	((LBPR * 2 *  81) + 38) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2092,	((LBPR * 2 *  13) + 36) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   22,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 * 142) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   22,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2452,	((LBPR * 2 *  32) + 34) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2482,	((LBPR * 2 *  13) + 34) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3112,	((LBPR * 2 *   0) + 32) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5572,	((LBPR * 2 *  85) + 21) & ~3,  LBPR *  22,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 8062,	((LBPR * 2 * 109) + 11) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8902,	((LBPR * 2 *  14) +	 8) & ~3,  LBPR *  22,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9052,	((LBPR * 2 *   3) +	 7) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 9112,	((LBPR * 2 * 134) +	 7) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 9202,	((LBPR * 2 * 141) +	 6) & ~3,  LBPR *  22,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9892,	((LBPR * 2 *   9) +	 3) & ~3,  LBPR *  22,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 1103,	((LBPR * 2 *  14) + 40) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1793,	((LBPR * 2 *  19) + 37) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2303,	((LBPR * 2 * 114) + 35) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	   23,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 * 143) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   23,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3473,	((LBPR * 2 *  41) + 30) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3743,	((LBPR * 2 *  84) + 29) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3833,	((LBPR * 2 * 112) + 29) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 5003,	((LBPR * 2 *  13) + 24) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5453,	((LBPR * 2 *  79) + 22) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6023,	((LBPR * 2 *   8) + 20) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6203,	((LBPR * 2 * 135) + 19) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7313,	((LBPR * 2 *  10) + 14) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 8483,	((LBPR * 2 *  54) +	 9) & ~3,  LBPR *  23,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 9023,	((LBPR * 2 * 143) +	 7) & ~3,  LBPR *  23,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 9203,	((LBPR * 2 *  13) +	 6) & ~3,  LBPR *  23,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9773,	((LBPR * 2 *  21) +	 4) & ~3,  LBPR *  23,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10284,	((LBPR * 2 *  68) +	 2) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 1374,	((LBPR * 2 *  96) + 39) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 1464,	((LBPR * 2 *  60) + 39) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1734,	((LBPR * 2 * 142) + 37) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 1914,	((LBPR * 2 * 124) + 37) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	   24,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 * 144) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   24,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3924,	((LBPR * 2 *   3) + 28) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4614,	((LBPR * 2 *   7) + 25) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5484,	((LBPR * 2 *   1) + 22) & ~3,  LBPR *  24,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 6174,	((LBPR * 2 *  20) + 19) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 6174,	((LBPR * 2 *  57) + 19) & ~3,  LBPR *  24,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 7854,	((LBPR * 2 *  20) + 12) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	  804,	((LBPR * 2 *   4) + 41) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 8544,	((LBPR * 2 *  96) +	 9) & ~3,  LBPR *  24,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8874,	((LBPR * 2 *   2) +	 8) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 9774,	((LBPR * 2 *  36) +	 4) & ~3,  LBPR *  24,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	10105,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	10165,	((LBPR * 2 *   3) +	 2) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2065,	((LBPR * 2 * 118) + 36) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 2095,	((LBPR * 2 * 110) + 36) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2395,	((LBPR * 2 *  11) + 35) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   25,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 * 145) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   25,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3085,	((LBPR * 2 *  53) + 32) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3415,	((LBPR * 2 *  75) + 30) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3895,	((LBPR * 2 * 145) + 28) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4435,	((LBPR * 2 *  68) + 26) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4585,	((LBPR * 2 *  10) + 26) & ~3,  LBPR *  25,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4795,	((LBPR * 2 *   3) + 25) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 7045,	((LBPR * 2 *  30) + 15) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 7645,	((LBPR * 2 * 139) + 13) & ~3,  LBPR *  25,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 7795,	((LBPR * 2 *  12) + 12) & ~3,  LBPR *  25,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 9115,	((LBPR * 2 *  12) +	 7) & ~3,  LBPR *  25,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1016,	((LBPR * 2 *  52) + 40) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	10556,	((LBPR * 2 * 138) +	 1) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	10676,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1556,	((LBPR * 2 *  25) + 38) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1766,	((LBPR * 2 *  10) + 37) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  206,	((LBPR * 2 *  95) + 44) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2456,	((LBPR * 2 *  10) + 34) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   26,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 * 146) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   26,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  26,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3476,	((LBPR * 2 *   6) + 30) & ~3,  LBPR *  26,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3866,	((LBPR * 2 *  76) + 29) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	  416,	((LBPR * 2 *   0) + 43) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 4766,	((LBPR * 2 *  50) + 25) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5606,	((LBPR * 2 *  10) + 21) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6206,	((LBPR * 2 *  78) + 19) & ~3,  LBPR *  26,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 6536,	((LBPR * 2 *  10) + 17) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 9536,	((LBPR * 2 * 147) +	 5) & ~3,  LBPR *  26,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	10587,	((LBPR * 2 *   8) +	 1) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1557,	((LBPR * 2 * 107) + 38) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2697,	((LBPR * 2 *  50) + 33) & ~3,  LBPR *  27,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	   27,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 * 147) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   27,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3237,	((LBPR * 2 *   7) + 31) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4107,	((LBPR * 2 *  44) + 28) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4527,	((LBPR * 2 *  14) + 26) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 6267,	((LBPR * 2 * 104) + 19) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6417,	((LBPR * 2 *  12) + 18) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6867,	((LBPR * 2 *  12) + 16) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 7167,	((LBPR * 2 *   4) + 15) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7347,	((LBPR * 2 * 149) + 14) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 7827,	((LBPR * 2 * 131) + 12) & ~3,  LBPR *  27,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 9027,	((LBPR * 2 *  75) +	 7) & ~3,  LBPR *  27,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 9237,	((LBPR * 2 *  84) +	 6) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 9267,	((LBPR * 2 *  11) +	 6) & ~3,  LBPR *  27,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1528,	((LBPR * 2 *   4) + 38) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1708,	((LBPR * 2 *  18) + 38) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2338,	((LBPR * 2 *  35) + 35) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	   28,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 * 148) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   28,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2968,	((LBPR * 2 *   8) + 32) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  328,	((LBPR * 2 *  92) + 43) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5488,	((LBPR * 2 * 128) + 22) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 5668,	((LBPR * 2 *  48) + 21) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5968,	((LBPR * 2 *  11) + 20) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 7018,	((LBPR * 2 *  85) + 15) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 7288,	((LBPR * 2 *   1) + 14) & ~3,  LBPR *  28,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 7648,	((LBPR * 2 * 127) + 13) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 8548,	((LBPR * 2 *  10) +	 9) & ~3,  LBPR *  28,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 8878,	((LBPR * 2 *  74) +	 8) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 8968,	((LBPR * 2 * 110) +	 7) & ~3,  LBPR *  28,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 9718,	((LBPR * 2 *  14) +	 4) & ~3,  LBPR *  28,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1559,	((LBPR * 2 *  44) + 38) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1769,	((LBPR * 2 * 120) + 37) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 1949,	((LBPR * 2 *  24) + 37) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2189,	((LBPR * 2 *   2) + 36) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2219,	((LBPR * 2 *  93) + 35) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	   29,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 * 149) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   29,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  329,	((LBPR * 2 *   4) + 43) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3449,	((LBPR * 2 *  49) + 30) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5669,	((LBPR * 2 * 125) + 21) & ~3,  LBPR *  29,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5939,	((LBPR * 2 *   6) + 20) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 7289,	((LBPR * 2 *  11) + 14) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 8069,	((LBPR * 2 *  88) + 11) & ~3,  LBPR *  29,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 8909,	((LBPR * 2 *   0) +	 8) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 9209,	((LBPR * 2 *  16) +	 6) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 9299,	((LBPR * 2 *  93) +	 6) & ~3,  LBPR *  29,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 9749,	((LBPR * 2 *  66) +	 4) & ~3,  LBPR *  29,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n89_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 120) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 140) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1260,	((LBPR * 2 *  79) + 37) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1600,	((LBPR * 2 * 152) + 35) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2420,	((LBPR * 2 *  34) + 29) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3920,	((LBPR * 2 *  15) + 20) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4120,	((LBPR * 2 * 109) + 19) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4280,	((LBPR * 2 * 109) + 18) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4320,	((LBPR * 2 * 136) + 18) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  440,	((LBPR * 2 *  83) + 42) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4620,	((LBPR * 2 *  17) + 16) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4760,	((LBPR * 2 *  57) + 15) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 5800,	((LBPR * 2 *   1) +	 8) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  600,	((LBPR * 2 *  77) + 41) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6240,	((LBPR * 2 *  25) +	 6) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6720,	((LBPR * 2 *  91) +	 3) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  680,	((LBPR * 2 * 153) + 40) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 6960,	((LBPR * 2 * 121) +	 1) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  740,	((LBPR * 2 *  50) + 40) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1061,	((LBPR * 2 *  63) + 38) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1481,	((LBPR * 2 *  86) + 35) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1601,	((LBPR * 2 *  43) + 35) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1681,	((LBPR * 2 * 156) + 34) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1801,	((LBPR * 2 * 154) + 33) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word		1,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 121) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 141) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2241,	((LBPR * 2 * 108) + 31) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2381,	((LBPR * 2 *  17) + 30) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 3761,	((LBPR * 2 *   8) + 21) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3961,	((LBPR * 2 * 137) + 20) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4521,	((LBPR * 2 *  92) + 16) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5821,	((LBPR * 2 *  66) +	 8) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 6121,	((LBPR * 2 * 136) +	 6) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6141,	((LBPR * 2 *  59) +	 6) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6561,	((LBPR * 2 *  30) +	 4) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6601,	((LBPR * 2 * 115) +	 3) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6961,	((LBPR * 2 *   3) +	 1) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  981,	((LBPR * 2 *  35) + 38) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 1482,	((LBPR * 2 *  17) + 35) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1762,	((LBPR * 2 *  98) + 34) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2062,	((LBPR * 2 * 101) + 32) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2362,	((LBPR * 2 * 105) + 30) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 2462,	((LBPR * 2 * 128) + 29) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word		2,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 * 142) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3222,	((LBPR * 2 *   0) + 24) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3622,	((LBPR * 2 *  91) + 22) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3802,	((LBPR * 2 *  38) + 21) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4702,	((LBPR * 2 *  55) + 15) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4722,	((LBPR * 2 * 149) + 15) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 4842,	((LBPR * 2 *  76) + 14) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5202,	((LBPR * 2 * 148) + 12) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 5222,	((LBPR * 2 *  29) + 12) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5622,	((LBPR * 2 *  43) +	 9) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6342,	((LBPR * 2 *   7) +	 5) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6982,	((LBPR * 2 *  72) +	 1) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 7062,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1343,	((LBPR * 2 *  13) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1403,	((LBPR * 2 * 114) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2243,	((LBPR * 2 *  53) + 31) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2343,	((LBPR * 2 *  26) + 30) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2463,	((LBPR * 2 * 156) + 29) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3463,	((LBPR * 2 * 134) + 23) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3463,	((LBPR * 2 *  63) + 23) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3683,	((LBPR * 2 *   5) + 22) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 * 123) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 * 143) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4003,	((LBPR * 2 *  90) + 20) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4043,	((LBPR * 2 * 145) + 19) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4163,	((LBPR * 2 *  36) + 19) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4903,	((LBPR * 2 *  79) + 14) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 5183,	((LBPR * 2 * 115) + 12) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5783,	((LBPR * 2 *  45) +	 8) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  583,	((LBPR * 2 *  82) + 41) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5923,	((LBPR * 2 *  13) +	 8) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6243,	((LBPR * 2 * 131) +	 6) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1164,	((LBPR * 2 *  93) + 37) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 1504,	((LBPR * 2 *  21) + 35) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1644,	((LBPR * 2 *  16) + 34) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1904,	((LBPR * 2 *  22) + 33) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2644,	((LBPR * 2 * 132) + 28) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	  264,	((LBPR * 2 *   9) + 43) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2944,	((LBPR * 2 *  51) + 26) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3024,	((LBPR * 2 * 149) + 26) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 3224,	((LBPR * 2 *  81) + 24) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3584,	((LBPR * 2 *  71) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3604,	((LBPR * 2 * 123) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4284,	((LBPR * 2 * 158) + 18) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4964,	((LBPR * 2 *  74) + 14) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 * 124) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 * 144) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  524,	((LBPR * 2 *  44) + 41) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6184,	((LBPR * 2 * 118) +	 6) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6264,	((LBPR * 2 *   4) +	 5) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 6764,	((LBPR * 2 * 119) +	 2) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1125,	((LBPR * 2 * 137) + 38) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  145,	((LBPR * 2 *  61) + 44) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1965,	((LBPR * 2 *  94) + 32) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2065,	((LBPR * 2 *  89) + 32) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2285,	((LBPR * 2 *  56) + 30) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2425,	((LBPR * 2 *   5) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2505,	((LBPR * 2 * 127) + 29) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	  325,	((LBPR * 2 * 114) + 43) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3885,	((LBPR * 2 * 144) + 20) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4765,	((LBPR * 2 *  31) + 15) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4865,	((LBPR * 2 *  12) + 14) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4925,	((LBPR * 2 *  76) + 14) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 5445,	((LBPR * 2 * 150) + 11) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 5465,	((LBPR * 2 *  27) + 10) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 5825,	((LBPR * 2 * 110) +	 8) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word		5,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 * 125) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 * 145) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6005,	((LBPR * 2 *  12) +	 7) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6005,	((LBPR * 2 *  44) +	 7) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1226,	((LBPR * 2 * 106) + 37) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1306,	((LBPR * 2 *  61) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1446,	((LBPR * 2 * 144) + 36) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2566,	((LBPR * 2 *  49) + 29) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2906,	((LBPR * 2 *   9) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3286,	((LBPR * 2 *  12) + 24) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3786,	((LBPR * 2 *  19) + 21) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4806,	((LBPR * 2 * 128) + 15) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4846,	((LBPR * 2 * 117) + 14) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5066,	((LBPR * 2 *  60) + 13) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5306,	((LBPR * 2 * 135) + 11) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5966,	((LBPR * 2 *  32) +	 7) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6126,	((LBPR * 2 *  40) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 6166,	((LBPR * 2 *  20) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6226,	((LBPR * 2 * 143) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 6226,	((LBPR * 2 *  84) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	   66,	((LBPR * 2 *  95) + 44) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word		6,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 * 126) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 * 146) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1007,	((LBPR * 2 *  70) + 38) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1927,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2107,	((LBPR * 2 *  88) + 31) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3187,	((LBPR * 2 *  23) + 25) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 3407,	((LBPR * 2 * 127) + 23) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3527,	((LBPR * 2 *  59) + 23) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3907,	((LBPR * 2 * 145) + 20) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5707,	((LBPR * 2 * 113) +	 9) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5927,	((LBPR * 2 *   9) +	 8) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6027,	((LBPR * 2 *  23) +	 7) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 6587,	((LBPR * 2 * 141) +	 3) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 6627,	((LBPR * 2 * 131) +	 3) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6647,	((LBPR * 2 *  64) +	 3) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6847,	((LBPR * 2 *  86) +	 2) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 7127,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word		7,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 * 127) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 * 147) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  867,	((LBPR * 2 *  54) + 39) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  927,	((LBPR * 2 *   2) + 39) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1228,	((LBPR * 2 * 103) + 37) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1588,	((LBPR * 2 *  29) + 35) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1828,	((LBPR * 2 * 151) + 33) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1948,	((LBPR * 2 *  51) + 32) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2148,	((LBPR * 2 *  60) + 31) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2428,	((LBPR * 2 *   8) + 29) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2848,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3028,	((LBPR * 2 *  82) + 26) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 3948,	((LBPR * 2 *  39) + 20) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4548,	((LBPR * 2 * 107) + 16) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4928,	((LBPR * 2 *  70) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 5088,	((LBPR * 2 * 133) + 13) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5348,	((LBPR * 2 *   1) + 11) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5348,	((LBPR * 2 * 130) + 11) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5728,	((LBPR * 2 * 158) +	 9) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6388,	((LBPR * 2 *  90) +	 5) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 6528,	((LBPR * 2 *  52) +	 4) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word		8,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 * 128) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 * 148) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1249,	((LBPR * 2 *  50) + 37) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 1649,	((LBPR * 2 *  88) + 34) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1909,	((LBPR * 2 *  41) + 33) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1969,	((LBPR * 2 *  33) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2669,	((LBPR * 2 * 155) + 28) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2869,	((LBPR * 2 *  72) + 27) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3329,	((LBPR * 2 * 126) + 24) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3369,	((LBPR * 2 *  80) + 24) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3529,	((LBPR * 2 *  13) + 23) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3869,	((LBPR * 2 *  33) + 20) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3889,	((LBPR * 2 * 134) + 20) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4269,	((LBPR * 2 * 148) + 18) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4569,	((LBPR * 2 * 116) + 16) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4589,	((LBPR * 2 *  14) + 16) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 6309,	((LBPR * 2 *   6) +	 5) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6369,	((LBPR * 2 * 116) +	 5) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6509,	((LBPR * 2 *  78) +	 4) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word		9,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 * 129) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 * 149) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 150) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  110,	((LBPR * 2 * 125) + 44) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	  130,	((LBPR * 2 *  22) + 44) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1950,	((LBPR * 2 *  10) + 32) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2710,	((LBPR * 2 * 122) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2870,	((LBPR * 2 *  25) + 27) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 2970,	((LBPR * 2 *  96) + 26) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3070,	((LBPR * 2 *   7) + 25) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3430,	((LBPR * 2 *  49) + 23) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	  370,	((LBPR * 2 * 151) + 42) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3930,	((LBPR * 2 *  68) + 20) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4410,	((LBPR * 2 *  75) + 17) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4870,	((LBPR * 2 * 102) + 14) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6690,	((LBPR * 2 * 154) +	 3) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 7050,	((LBPR * 2 *  93) +	 1) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	  850,	((LBPR * 2 *  42) + 39) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   90,	((LBPR * 2 *   2) + 44) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	  970,	((LBPR * 2 * 100) + 39) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1111,	((LBPR * 2 * 142) + 38) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 1191,	((LBPR * 2 *  16) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 131) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 151) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1291,	((LBPR * 2 *  48) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1311,	((LBPR * 2 *  26) + 36) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1951,	((LBPR * 2 * 120) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  211,	((LBPR * 2 *  69) + 43) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3031,	((LBPR * 2 *  80) + 26) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 3491,	((LBPR * 2 *  11) + 23) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3571,	((LBPR * 2 *  34) + 22) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4331,	((LBPR * 2 *  95) + 18) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5171,	((LBPR * 2 * 157) + 12) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5251,	((LBPR * 2 *  45) + 12) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5471,	((LBPR * 2 * 112) + 10) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 6511,	((LBPR * 2 * 139) +	 4) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 6791,	((LBPR * 2 *  18) +	 2) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6911,	((LBPR * 2 * 107) +	 1) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	  871,	((LBPR * 2 *  62) + 39) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1172,	((LBPR * 2 *   4) + 37) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   12,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 152) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1612,	((LBPR * 2 *  73) + 35) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  172,	((LBPR * 2 *  46) + 44) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1932,	((LBPR * 2 *  87) + 33) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2032,	((LBPR * 2 *  46) + 32) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2132,	((LBPR * 2 *  14) + 31) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2572,	((LBPR * 2 * 100) + 29) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3492,	((LBPR * 2 *   1) + 23) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4212,	((LBPR * 2 * 133) + 18) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4632,	((LBPR * 2 *  35) + 16) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4652,	((LBPR * 2 *  97) + 16) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4932,	((LBPR * 2 *  66) + 14) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 5972,	((LBPR * 2 * 157) +	 7) & ~3,  LBPR *  12,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6372,	((LBPR * 2 * 150) +	 5) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6892,	((LBPR * 2 *  32) +	 2) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 7092,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  792,	((LBPR * 2 * 139) + 40) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1013,	((LBPR * 2 *  73) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1133,	((LBPR * 2 * 123) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 133) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 153) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1733,	((LBPR * 2 * 147) + 34) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 2513,	((LBPR * 2 *  28) + 29) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2873,	((LBPR * 2 * 146) + 27) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3613,	((LBPR * 2 *  94) + 22) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3733,	((LBPR * 2 *  54) + 21) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3793,	((LBPR * 2 * 112) + 21) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4273,	((LBPR * 2 *  10) + 18) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4433,	((LBPR * 2 *  87) + 17) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 4613,	((LBPR * 2 *  11) + 16) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5073,	((LBPR * 2 * 132) + 13) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	  573,	((LBPR * 2 *  41) + 41) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  613,	((LBPR * 2 *   8) + 41) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6913,	((LBPR * 2 * 103) +	 1) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	  953,	((LBPR * 2 *  74) + 39) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	  973,	((LBPR * 2 *  37) + 39) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1094,	((LBPR * 2 *  85) + 38) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 1374,	((LBPR * 2 *  55) + 36) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   14,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 134) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 154) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2054,	((LBPR * 2 *  31) + 32) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2074,	((LBPR * 2 * 153) + 32) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  214,	((LBPR * 2 * 129) + 43) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2154,	((LBPR * 2 * 111) + 31) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3094,	((LBPR * 2 *  69) + 25) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3694,	((LBPR * 2 * 124) + 22) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3694,	((LBPR * 2 *  92) + 22) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3714,	((LBPR * 2 *   6) + 21) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3794,	((LBPR * 2 *  39) + 21) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3934,	((LBPR * 2 * 140) + 20) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 4034,	((LBPR * 2 *  42) + 19) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  474,	((LBPR * 2 * 110) + 42) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5554,	((LBPR * 2 *  64) + 10) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6014,	((LBPR * 2 *  18) +	 7) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 7154,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1195,	((LBPR * 2 * 138) + 37) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1235,	((LBPR * 2 *  71) + 37) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1355,	((LBPR * 2 * 125) + 36) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1595,	((LBPR * 2 * 113) + 35) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   15,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 135) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 155) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1875,	((LBPR * 2 *  47) + 33) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2475,	((LBPR * 2 *  47) + 29) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2495,	((LBPR * 2 *   6) + 29) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3215,	((LBPR * 2 *  36) + 25) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	  395,	((LBPR * 2 * 106) + 42) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4035,	((LBPR * 2 *  14) + 19) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 4555,	((LBPR * 2 *  75) + 16) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4695,	((LBPR * 2 * 152) + 15) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4895,	((LBPR * 2 *  85) + 14) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	  535,	((LBPR * 2 *  30) + 41) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5615,	((LBPR * 2 * 147) + 10) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6235,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 6655,	((LBPR * 2 *  84) +	 3) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1696,	((LBPR * 2 * 159) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	   16,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 136) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 156) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1716,	((LBPR * 2 *  10) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1796,	((LBPR * 2 *  96) + 33) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2916,	((LBPR * 2 * 105) + 26) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3196,	((LBPR * 2 *  40) + 25) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 3616,	((LBPR * 2 *  53) + 22) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4216,	((LBPR * 2 * 129) + 18) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4356,	((LBPR * 2 *  21) + 17) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 4516,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4756,	((LBPR * 2 *  67) + 15) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5156,	((LBPR * 2 *  20) + 12) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5736,	((LBPR * 2 *  99) +	 9) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6356,	((LBPR * 2 *  67) +	 5) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6596,	((LBPR * 2 * 142) +	 3) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 6596,	((LBPR * 2 *  18) +	 3) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 6736,	((LBPR * 2 * 126) +	 3) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  896,	((LBPR * 2 * 117) + 39) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 1037,	((LBPR * 2 * 104) + 38) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1377,	((LBPR * 2 * 155) + 36) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1457,	((LBPR * 2 * 143) + 36) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 137) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 157) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2417,	((LBPR * 2 *  78) + 30) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2757,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3117,	((LBPR * 2 * 121) + 25) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3117,	((LBPR * 2 *  37) + 25) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3237,	((LBPR * 2 *   4) + 24) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3557,	((LBPR * 2 *  81) + 22) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3917,	((LBPR * 2 *  57) + 20) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4597,	((LBPR * 2 * 102) + 16) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4777,	((LBPR * 2 *  98) + 15) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  497,	((LBPR * 2 *  48) + 42) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5837,	((LBPR * 2 *  65) +	 8) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	  657,	((LBPR * 2 * 124) + 41) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6617,	((LBPR * 2 *  28) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6737,	((LBPR * 2 *  15) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 * 138) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 * 158) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   18,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2738,	((LBPR * 2 *  19) + 28) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2778,	((LBPR * 2 * 140) + 27) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3218,	((LBPR * 2 *  97) + 25) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 3238,	((LBPR * 2 * 141) + 24) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3258,	((LBPR * 2 *  83) + 24) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4058,	((LBPR * 2 *  58) + 19) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  418,	((LBPR * 2 *  68) + 42) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 4618,	((LBPR * 2 * 108) + 16) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4698,	((LBPR * 2 *  56) + 15) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  478,	((LBPR * 2 * 135) + 42) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5558,	((LBPR * 2 * 111) + 10) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 5778,	((LBPR * 2 *  77) +	 9) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 5918,	((LBPR * 2 *  19) +	 8) & ~3,  LBPR *  18,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 5998,	((LBPR * 2 *  16) +	 7) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 6198,	((LBPR * 2 *  38) +	 6) & ~3,  LBPR *  18,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6358,	((LBPR * 2 * 120) +	 5) & ~3,  LBPR *  18,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6718,	((LBPR * 2 *  24) +	 3) & ~3,  LBPR *  18,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1039,	((LBPR * 2 *  27) + 38) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1399,	((LBPR * 2 *  99) + 36) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1459,	((LBPR * 2 * 159) + 36) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1579,	((LBPR * 2 *  15) + 35) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1859,	((LBPR * 2 *  58) + 33) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	   19,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 * 139) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 * 159) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   19,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2119,	((LBPR * 2 *  89) + 31) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2319,	((LBPR * 2 *  62) + 30) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 2899,	((LBPR * 2 *  52) + 27) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  339,	((LBPR * 2 *  65) + 43) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 4159,	((LBPR * 2 * 104) + 19) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 4739,	((LBPR * 2 *   3) + 15) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5619,	((LBPR * 2 * 130) + 10) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5699,	((LBPR * 2 * 138) +	 9) & ~3,  LBPR *  19,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 6179,	((LBPR * 2 *  11) +	 6) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 6599,	((LBPR * 2 * 101) +	 3) & ~3,  LBPR *  19,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 6839,	((LBPR * 2 * 146) +	 2) & ~3,  LBPR *  19,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  759,	((LBPR * 2 *  24) + 40) & ~3,  LBPR *  19,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1


	.align	 8
ldpc_parameters_n910_neon4:
	.word		0,	((LBPR * 2 *   0) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 108) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 126) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 * 144) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  18) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  36) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  54) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  72) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		0,	((LBPR * 2 *  90) +	 0) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1044,	((LBPR * 2 * 131) + 37) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 1152,	((LBPR * 2 * 154) + 37) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 1170,	((LBPR * 2 * 153) + 36) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1332,	((LBPR * 2 *  84) + 35) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  144,	((LBPR * 2 *  91) + 44) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1692,	((LBPR * 2 * 126) + 33) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 1854,	((LBPR * 2 *  86) + 32) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 2052,	((LBPR * 2 *  57) + 30) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2178,	((LBPR * 2 *  35) + 29) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2268,	((LBPR * 2 *  53) + 29) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 3528,	((LBPR * 2 *  13) + 20) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3744,	((LBPR * 2 *  37) + 19) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3888,	((LBPR * 2 * 124) + 18) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4266,	((LBPR * 2 *  97) + 15) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5220,	((LBPR * 2 *   1) +	 8) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5238,	((LBPR * 2 *  64) +	 8) & ~3,  LBPR *	0,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 5400,	((LBPR * 2 *  11) +	 7) & ~3,  LBPR *	0,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5616,	((LBPR * 2 *  26) +	 6) & ~3,  LBPR *	0,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 6264,	((LBPR * 2 * 112) +	 1) & ~3,  LBPR *	0,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1441,	((LBPR * 2 *  44) + 35) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1855,	((LBPR * 2 *  94) + 32) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word		1,	((LBPR * 2 *   1) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 109) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 127) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 * 145) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  19) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  37) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  55) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  73) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		1,	((LBPR * 2 *  91) +	 0) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3115,	((LBPR * 2 *  62) + 23) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3385,	((LBPR * 2 *   7) + 21) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3601,	((LBPR * 2 *  87) + 20) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3853,	((LBPR * 2 * 100) + 18) & ~3,  LBPR *	1,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4213,	((LBPR * 2 * 143) + 15) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4231,	((LBPR * 2 *  56) + 15) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4699,	((LBPR * 2 *  30) + 12) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5059,	((LBPR * 2 *  44) +	 9) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5329,	((LBPR * 2 * 118) +	 8) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5329,	((LBPR * 2 *  12) +	 8) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5401,	((LBPR * 2 * 158) +	 7) & ~3,  LBPR *	1,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	  541,	((LBPR * 2 *  75) + 41) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5779,	((LBPR * 2 * 144) +	 4) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5905,	((LBPR * 2 *  31) +	 4) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6265,	((LBPR * 2 *   3) +	 1) & ~3,  LBPR *	1,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  649,	((LBPR * 2 * 119) + 40) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	  649,	((LBPR * 2 * 140) + 40) & ~3,  LBPR *	1,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1334,	((LBPR * 2 *  16) + 35) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1442,	((LBPR * 2 * 143) + 35) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1514,	((LBPR * 2 * 146) + 34) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 2018,	((LBPR * 2 *  98) + 31) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2108,	((LBPR * 2 *  27) + 30) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  236,	((LBPR * 2 *   8) + 43) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2900,	((LBPR * 2 *   0) + 24) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word		2,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 * 128) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 * 146) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  20) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *   2) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  38) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  56) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  74) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		2,	((LBPR * 2 *  92) +	 0) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 3404,	((LBPR * 2 *  40) + 21) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3476,	((LBPR * 2 *  34) + 20) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3710,	((LBPR * 2 * 100) + 19) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4124,	((LBPR * 2 *  79) + 16) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 4286,	((LBPR * 2 *  58) + 15) & ~3,  LBPR *	2,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4376,	((LBPR * 2 *  82) + 14) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4682,	((LBPR * 2 * 137) + 12) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 5078,	((LBPR * 2 * 159) +	 9) & ~3,  LBPR *	2,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5204,	((LBPR * 2 * 109) +	 8) & ~3,  LBPR *	2,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5510,	((LBPR * 2 * 124) +	 6) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	  884,	((LBPR * 2 *  36) + 38) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	  956,	((LBPR * 2 *  62) + 38) & ~3,  LBPR *	2,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1083,	((LBPR * 2 *  79) + 37) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1209,	((LBPR * 2 *  12) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1263,	((LBPR * 2 * 105) + 36) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1353,	((LBPR * 2 * 152) + 35) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1713,	((LBPR * 2 *  23) + 33) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2145,	((LBPR * 2 *  16) + 30) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2217,	((LBPR * 2 * 146) + 29) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3045,	((LBPR * 2 * 138) + 23) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 3171,	((LBPR * 2 * 108) + 23) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3225,	((LBPR * 2 *  69) + 22) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 3315,	((LBPR * 2 *   5) + 22) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3405,	((LBPR * 2 *  20) + 21) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 3423,	((LBPR * 2 *  39) + 21) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 3639,	((LBPR * 2 * 135) + 19) & ~3,  LBPR *	3,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word		3,	((LBPR * 2 * 111) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 * 129) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 * 147) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  21) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *   3) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  39) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  57) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  75) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		3,	((LBPR * 2 *  93) +	 0) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 4665,	((LBPR * 2 * 106) + 12) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	  525,	((LBPR * 2 *  78) + 41) & ~3,  LBPR *	3,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5565,	((LBPR * 2 * 110) +	 6) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  669,	((LBPR * 2 *  52) + 40) & ~3,  LBPR *	3,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	  903,	((LBPR * 2 *  71) + 38) & ~3,  LBPR *	3,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1174,	((LBPR * 2 *  61) + 36) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1354,	((LBPR * 2 *  22) + 35) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 1480,	((LBPR * 2 *  14) + 34) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1768,	((LBPR * 2 *  90) + 32) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 2182,	((LBPR * 2 *   5) + 29) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2308,	((LBPR * 2 *  51) + 29) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2326,	((LBPR * 2 *  80) + 28) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 2866,	((LBPR * 2 *  24) + 25) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2902,	((LBPR * 2 *  77) + 24) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3244,	((LBPR * 2 * 114) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3244,	((LBPR * 2 *  90) + 22) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3496,	((LBPR * 2 * 134) + 20) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4018,	((LBPR * 2 * 115) + 17) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 4432,	((LBPR * 2 *  68) + 14) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4990,	((LBPR * 2 * 152) + 10) & ~3,  LBPR *	4,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word		4,	((LBPR * 2 * 112) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 * 130) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 * 148) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  22) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  40) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *   4) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  58) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  76) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		4,	((LBPR * 2 *  94) +	 0) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5368,	((LBPR * 2 * 155) +	 7) & ~3,  LBPR *	4,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5638,	((LBPR * 2 *   4) +	 5) & ~3,  LBPR *	4,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5836,	((LBPR * 2 * 126) +	 4) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	  598,	((LBPR * 2 *  45) + 40) & ~3,  LBPR *	4,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  131,	((LBPR * 2 *  61) + 44) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 1517,	((LBPR * 2 * 149) + 34) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 1589,	((LBPR * 2 *  92) + 34) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 2615,	((LBPR * 2 *   8) + 26) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2687,	((LBPR * 2 * 159) + 26) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	  293,	((LBPR * 2 * 105) + 43) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 2957,	((LBPR * 2 *  11) + 24) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3119,	((LBPR * 2 * 122) + 23) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3803,	((LBPR * 2 * 121) + 18) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4163,	((LBPR * 2 *  16) + 16) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4289,	((LBPR * 2 *  32) + 15) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4361,	((LBPR * 2 *  74) + 14) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4433,	((LBPR * 2 *  74) + 14) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	  473,	((LBPR * 2 *  46) + 41) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 5405,	((LBPR * 2 *  18) +	 7) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5405,	((LBPR * 2 *  46) +	 7) & ~3,  LBPR *	5,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 5531,	((LBPR * 2 *  59) +	 6) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5603,	((LBPR * 2 * 133) +	 6) & ~3,  LBPR *	5,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word		5,	((LBPR * 2 * 113) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 * 131) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 * 149) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  23) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  41) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *   5) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  59) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  77) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		5,	((LBPR * 2 *  95) +	 0) & ~3,  LBPR *	5,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 6323,	((LBPR * 2 * 132) +	 1) & ~3,  LBPR *	5,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1122,	((LBPR * 2 *  52) + 37) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 1734,	((LBPR * 2 *   5) + 33) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2616,	((LBPR * 2 * 113) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2616,	((LBPR * 2 * 139) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 2706,	((LBPR * 2 *  95) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 2724,	((LBPR * 2 *  78) + 26) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2994,	((LBPR * 2 *  19) + 24) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 3516,	((LBPR * 2 * 135) + 20) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 3552,	((LBPR * 2 *  40) + 20) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 3858,	((LBPR * 2 * 148) + 18) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4560,	((LBPR * 2 *  60) + 13) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5028,	((LBPR * 2 * 121) + 10) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5154,	((LBPR * 2 *  93) +	 9) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5280,	((LBPR * 2 * 151) +	 8) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5334,	((LBPR * 2 *   8) +	 8) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 5550,	((LBPR * 2 *  21) +	 6) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5748,	((LBPR * 2 *  87) +	 5) & ~3,  LBPR *	6,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word		6,	((LBPR * 2 * 114) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 * 132) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 * 150) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  24) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  42) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  60) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *   6) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  78) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		6,	((LBPR * 2 *  96) +	 0) & ~3,  LBPR *	6,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  834,	((LBPR * 2 *   2) + 39) & ~3,  LBPR *	6,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  906,	((LBPR * 2 *  68) + 38) & ~3,  LBPR *	6,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 1231,	((LBPR * 2 *  56) + 36) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 1303,	((LBPR * 2 * 134) + 36) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1411,	((LBPR * 2 * 156) + 35) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2149,	((LBPR * 2 *  91) + 30) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 2185,	((LBPR * 2 *   7) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 2257,	((LBPR * 2 * 116) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2293,	((LBPR * 2 * 136) + 29) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2563,	((LBPR * 2 *   0) + 27) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3067,	((LBPR * 2 * 116) + 23) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3517,	((LBPR * 2 *  58) + 20) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4165,	((LBPR * 2 *  36) + 16) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	 4291,	((LBPR * 2 *  92) + 15) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 4813,	((LBPR * 2 *   1) + 11) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 4921,	((LBPR * 2 *  28) + 10) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 5155,	((LBPR * 2 * 148) +	 9) & ~3,  LBPR *	7,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5425,	((LBPR * 2 *  24) +	 7) & ~3,  LBPR *	7,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 5515,	((LBPR * 2 *  41) +	 6) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 5605,	((LBPR * 2 *  81) +	 6) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 6163,	((LBPR * 2 *  84) +	 2) & ~3,  LBPR *	7,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word		7,	((LBPR * 2 * 115) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 * 133) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 * 151) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  25) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  43) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  61) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *   7) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  79) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		7,	((LBPR * 2 *  97) +	 0) & ~3,  LBPR *	7,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1088,	((LBPR * 2 *  63) + 37) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1196,	((LBPR * 2 * 118) + 36) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1430,	((LBPR * 2 *  30) + 35) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 1484,	((LBPR * 2 * 131) + 34) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2114,	((LBPR * 2 * 109) + 30) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 2582,	((LBPR * 2 *  26) + 27) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	  260,	((LBPR * 2 *  17) + 43) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3158,	((LBPR * 2 * 150) + 23) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3266,	((LBPR * 2 *  88) + 22) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3392,	((LBPR * 2 * 161) + 21) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4382,	((LBPR * 2 *  11) + 14) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 4724,	((LBPR * 2 *  47) + 12) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 5210,	((LBPR * 2 *  47) +	 8) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 5678,	((LBPR * 2 *   6) +	 5) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 6056,	((LBPR * 2 *  88) +	 3) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 6146,	((LBPR * 2 * 102) +	 2) & ~3,  LBPR *	8,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 6236,	((LBPR * 2 * 141) +	 1) & ~3,  LBPR *	8,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 6380,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  782,	((LBPR * 2 *  55) + 39) & ~3,  LBPR *	8,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word		8,	((LBPR * 2 * 116) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 * 134) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 * 152) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  26) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  44) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  62) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  80) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *   8) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		8,	((LBPR * 2 *  98) +	 0) & ~3,  LBPR *	8,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1179,	((LBPR * 2 *  27) + 36) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	  117,	((LBPR * 2 *  23) + 44) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 1719,	((LBPR * 2 *  42) + 33) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1755,	((LBPR * 2 * 160) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1755,	((LBPR * 2 *   9) + 32) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1935,	((LBPR * 2 *  60) + 31) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 2403,	((LBPR * 2 * 145) + 28) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2583,	((LBPR * 2 *  70) + 27) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	 3267,	((LBPR * 2 * 140) + 22) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3843,	((LBPR * 2 *  15) + 18) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4581,	((LBPR * 2 * 120) + 13) & ~3,  LBPR *	9,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 4779,	((LBPR * 2 * 123) + 11) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5949,	((LBPR * 2 * 106) +	 3) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 6003,	((LBPR * 2 *  80) +	 3) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 6165,	((LBPR * 2 * 128) +	 2) & ~3,  LBPR *	9,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	  693,	((LBPR * 2 *  97) + 40) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  765,	((LBPR * 2 *  43) + 39) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	   81,	((LBPR * 2 *   2) + 44) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	  855,	((LBPR * 2 *  72) + 39) & ~3,  LBPR *	9,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word		9,	((LBPR * 2 * 117) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 * 135) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 * 153) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  27) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  45) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  63) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  81) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *   9) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word		9,	((LBPR * 2 *  99) +	 0) & ~3,  LBPR *	9,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1018,	((LBPR * 2 * 114) + 38) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 1072,	((LBPR * 2 *  14) + 37) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	   10,	((LBPR * 2 * 100) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  10) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 118) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 136) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 * 154) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  28) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  46) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  64) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   10,	((LBPR * 2 *  82) +	 0) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1252,	((LBPR * 2 *  93) + 36) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 1846,	((LBPR * 2 *  32) + 32) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 2368,	((LBPR * 2 *  17) + 28) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 2782,	((LBPR * 2 *  67) + 25) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 2818,	((LBPR * 2 * 139) + 25) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 3088,	((LBPR * 2 *  51) + 23) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3142,	((LBPR * 2 *  10) + 23) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	  316,	((LBPR * 2 * 160) + 42) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 3322,	((LBPR * 2 *  89) + 22) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3970,	((LBPR * 2 *  73) + 17) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4042,	((LBPR * 2 * 132) + 17) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 4366,	((LBPR * 2 * 154) + 14) & ~3,  LBPR *  10,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4690,	((LBPR * 2 * 108) + 12) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 5140,	((LBPR * 2 * 104) +	 9) & ~3,  LBPR *  10,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5374,	((LBPR * 2 *  33) +	 7) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 5878,	((LBPR * 2 *  54) +	 4) & ~3,  LBPR *  10,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	  874,	((LBPR * 2 *  38) + 39) & ~3,  LBPR *  10,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1055,	((LBPR * 2 *   4) + 37) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	   11,	((LBPR * 2 * 101) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  11) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 119) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 137) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 * 155) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  29) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  47) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  65) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   11,	((LBPR * 2 *  83) +	 0) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	  155,	((LBPR * 2 *  48) + 44) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1757,	((LBPR * 2 * 111) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 1775,	((LBPR * 2 *  34) + 32) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  191,	((LBPR * 2 *  67) + 43) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 1991,	((LBPR * 2 * 161) + 31) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 2225,	((LBPR * 2 * 130) + 29) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2261,	((LBPR * 2 *  29) + 29) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2801,	((LBPR * 2 *  38) + 25) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3143,	((LBPR * 2 *   1) + 23) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 3179,	((LBPR * 2 *  12) + 23) & ~3,  LBPR *  11,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3323,	((LBPR * 2 * 102) + 22) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3359,	((LBPR * 2 *  55) + 21) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3791,	((LBPR * 2 * 120) + 18) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3845,	((LBPR * 2 * 137) + 18) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 4097,	((LBPR * 2 *  73) + 16) & ~3,  LBPR *  11,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 4475,	((LBPR * 2 *  72) + 14) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5123,	((LBPR * 2 * 101) +	 9) & ~3,  LBPR *  11,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5609,	((LBPR * 2 * 147) +	 6) & ~3,  LBPR *  11,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 1146,	((LBPR * 2 *  76) + 37) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 1164,	((LBPR * 2 *  50) + 37) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 102) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 120) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  12) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 138) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 * 156) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  30) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  48) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  66) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   12,	((LBPR * 2 *  84) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1542,	((LBPR * 2 * 158) + 34) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 1596,	((LBPR * 2 * 144) + 34) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 3216,	((LBPR * 2 *  35) + 22) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 3342,	((LBPR * 2 *   6) + 21) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3360,	((LBPR * 2 *  96) + 21) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	 3540,	((LBPR * 2 * 129) + 20) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3540,	((LBPR * 2 *  66) + 20) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	 3846,	((LBPR * 2 *   9) + 18) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 3918,	((LBPR * 2 * 119) + 17) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 4440,	((LBPR * 2 *  64) + 14) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 4548,	((LBPR * 2 * 107) + 13) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  480,	((LBPR * 2 *  31) + 41) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_6,  0,  0,  0
	.word	  516,	((LBPR * 2 *  42) + 41) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	  552,	((LBPR * 2 *   7) + 41) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 6348,	((LBPR * 2 * 130) +	 1) & ~3,  LBPR *  12,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6384,	((LBPR * 2 * 110) +	 0) & ~3,  LBPR *  12,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	  984,	((LBPR * 2 *  83) + 38) & ~3,  LBPR *  12,	loadshift_2,  ldpcbits_2,  0,  0,  0
	.word	 1111,	((LBPR * 2 *  69) + 37) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 1237,	((LBPR * 2 * 145) + 36) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_4,  0,  0,  0
	.word	   13,	((LBPR * 2 * 103) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 121) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  13) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 139) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 * 157) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  31) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  49) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  67) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   13,	((LBPR * 2 *  85) +	 0) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1579,	((LBPR * 2 *  82) + 34) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 1669,	((LBPR * 2 *  20) + 33) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 1777,	((LBPR * 2 *  15) + 32) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 1939,	((LBPR * 2 * 103) + 31) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 3073,	((LBPR * 2 * 117) + 23) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 3631,	((LBPR * 2 *  43) + 19) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 4225,	((LBPR * 2 *  57) + 15) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 4369,	((LBPR * 2 *  15) + 14) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4387,	((LBPR * 2 * 125) + 14) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 5161,	((LBPR * 2 * 136) +	 9) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_2,  0,  0,  0
	.word	 5359,	((LBPR * 2 *  85) +	 7) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 5611,	((LBPR * 2 *   0) +	 6) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	 5629,	((LBPR * 2 *  45) +	 6) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5647,	((LBPR * 2 * 157) +	 5) & ~3,  LBPR *  13,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5953,	((LBPR * 2 *  29) +	 3) & ~3,  LBPR *  13,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	  643,	((LBPR * 2 * 138) + 40) & ~3,  LBPR *  13,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	  931,	((LBPR * 2 * 101) + 38) & ~3,  LBPR *  13,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1202,	((LBPR * 2 * 113) + 36) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	   14,	((LBPR * 2 * 104) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 122) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 140) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  14) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 * 158) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  32) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  50) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  68) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   14,	((LBPR * 2 *  86) +	 0) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1832,	((LBPR * 2 *  48) + 32) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 2246,	((LBPR * 2 *   6) + 29) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 2876,	((LBPR * 2 *  41) + 25) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 2948,	((LBPR * 2 * 142) + 24) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 3506,	((LBPR * 2 * 122) + 20) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4064,	((LBPR * 2 *   3) + 16) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4154,	((LBPR * 2 *  10) + 16) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4280,	((LBPR * 2 *  65) + 15) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 4370,	((LBPR * 2 *  19) + 14) & ~3,  LBPR *  14,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 4640,	((LBPR * 2 *  21) + 12) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 4820,	((LBPR * 2 *  95) + 11) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5126,	((LBPR * 2 * 127) +	 9) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 5198,	((LBPR * 2 *  75) +	 9) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 5648,	((LBPR * 2 * 153) +	 5) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 5990,	((LBPR * 2 *  81) +	 3) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	 6296,	((LBPR * 2 *  70) +	 1) & ~3,  LBPR *  14,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	  716,	((LBPR * 2 * 147) + 40) & ~3,  LBPR *  14,	loadshift_0,  ldpcbits_1,  0,  0,  0
	.word	  752,	((LBPR * 2 *  99) + 39) & ~3,  LBPR *  14,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 1437,	((LBPR * 2 * 104) + 35) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	   15,	((LBPR * 2 * 105) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 123) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 141) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  15) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 * 159) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  33) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  51) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  69) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   15,	((LBPR * 2 *  87) +	 0) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1689,	((LBPR * 2 *  49) + 33) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 2103,	((LBPR * 2 *  99) + 30) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 2229,	((LBPR * 2 *  49) + 29) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 2481,	((LBPR * 2 *   2) + 27) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2499,	((LBPR * 2 * 129) + 27) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_6,  0,  0,  0
	.word	 2643,	((LBPR * 2 * 151) + 26) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_6,  0,  0,  0
	.word	 2805,	((LBPR * 2 * 112) + 25) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 3129,	((LBPR * 2 *  63) + 23) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 3561,	((LBPR * 2 * 155) + 20) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	  375,	((LBPR * 2 *  66) + 42) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 3921,	((LBPR * 2 *  22) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_7,  0,  0,  0
	.word	 3975,	((LBPR * 2 *  85) + 17) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_4,  0,  0,  0
	.word	 4407,	((LBPR * 2 *  83) + 14) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5055,	((LBPR * 2 *  17) + 10) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 5289,	((LBPR * 2 * 115) +	 8) & ~3,  LBPR *  15,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	 5721,	((LBPR * 2 * 128) +	 5) & ~3,  LBPR *  15,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 6063,	((LBPR * 2 *  13) +	 3) & ~3,  LBPR *  15,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	  933,	((LBPR * 2 *  28) + 38) & ~3,  LBPR *  15,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 1078,	((LBPR * 2 * 127) + 37) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_5,  0,  0,  0
	.word	 1312,	((LBPR * 2 * 149) + 36) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1546,	((LBPR * 2 *   9) + 34) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	   16,	((LBPR * 2 * 106) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 124) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 142) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 * 160) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  16) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  34) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  52) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  70) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   16,	((LBPR * 2 *  88) +	 0) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 2554,	((LBPR * 2 * 150) + 27) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_3,  0,  0,  0
	.word	 2896,	((LBPR * 2 *  37) + 25) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 2914,	((LBPR * 2 *   4) + 24) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_7,  0,  0,  0
	.word	 3184,	((LBPR * 2 *  59) + 23) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3202,	((LBPR * 2 *  77) + 22) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	 4084,	((LBPR * 2 * 125) + 16) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4156,	((LBPR * 2 *  98) + 16) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4426,	((LBPR * 2 *  76) + 14) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 5002,	((LBPR * 2 * 103) + 10) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 5398,	((LBPR * 2 *  14) +	 7) & ~3,  LBPR *  16,	loadshift_3,  ldpcbits_5,  0,  0,  0
	.word	 5722,	((LBPR * 2 * 111) +	 5) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5722,	((LBPR * 2 *  65) +	 5) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_3,  0,  0,  0
	.word	 5758,	((LBPR * 2 *  53) +	 5) & ~3,  LBPR *  16,	loadshift_1,  ldpcbits_1,  0,  0,  0
	.word	 6118,	((LBPR * 2 *  18) +	 2) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_5,  0,  0,  0
	.word	 6208,	((LBPR * 2 *  33) +	 2) & ~3,  LBPR *  16,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	  646,	((LBPR * 2 * 142) + 40) & ~3,  LBPR *  16,	loadshift_0,  ldpcbits_5,  0,  0,  0
	.word	 1313,	((LBPR * 2 * 133) + 36) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1421,	((LBPR * 2 *  13) + 35) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_2,  0,  0,  0
	.word	 1457,	((LBPR * 2 *  71) + 35) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 1475,	((LBPR * 2 *  96) + 34) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_7,  0,  0,  0
	.word	   17,	((LBPR * 2 * 107) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 125) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 143) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 * 161) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  17) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  35) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  53) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  71) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	   17,	((LBPR * 2 *  89) +	 0) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_0,  0,  0,  0
	.word	 1907,	((LBPR * 2 *  86) + 31) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2483,	((LBPR * 2 * 117) + 27) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	 2609,	((LBPR * 2 *  54) + 27) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_0,  0,  0,  0
	.word	 3581,	((LBPR * 2 * 156) + 20) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_2,  0,  0,  0
	.word	 4085,	((LBPR * 2 *  89) + 16) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 4265,	((LBPR * 2 *   3) + 15) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_4,  0,  0,  0
	.word	  431,	((LBPR * 2 * 123) + 42) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_1,  0,  0,  0
	.word	  449,	((LBPR * 2 *  50) + 42) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_0,  0,  0,  0
	.word	 4661,	((LBPR * 2 * 157) + 12) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_6,  0,  0,  0
	.word	 5561,	((LBPR * 2 *  10) +	 6) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_4,  0,  0,  0
	.word	 5579,	((LBPR * 2 *  39) +	 6) & ~3,  LBPR *  17,	loadshift_2,  ldpcbits_3,  0,  0,  0
	.word	 5939,	((LBPR * 2 *  94) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_7,  0,  0,  0
	.word	  593,	((LBPR * 2 * 141) + 41) & ~3,  LBPR *  17,	loadshift_1,  ldpcbits_0,  0,  0,  0
	.word	 6047,	((LBPR * 2 *  25) +	 3) & ~3,  LBPR *  17,	loadshift_3,  ldpcbits_1,  0,  0,  0
	.word	  683,	((LBPR * 2 *  25) + 40) & ~3,  LBPR *  17,	loadshift_0,  ldpcbits_3,  0,  0,  0
	.word	   -1,							  -1,		  999,			 -1,		  -1, -1, -1, -1

    .align   8
ldpc_parameters_s14_neon4:
    .word     144,  ((LBPR * 2 *   0) + 44) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    3708,  ((LBPR * 2 *   3) + 32) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3385,  ((LBPR * 2 *   5) + 33) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    6805,  ((LBPR * 2 *   3) + 21) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word   11090,  ((LBPR * 2 *   1) +  6) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    3494,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    2343,  ((LBPR * 2 *   7) + 36) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    7239,  ((LBPR * 2 *   2) + 19) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1660,  ((LBPR * 2 *   0) + 39) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4936,  ((LBPR * 2 *   0) + 27) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    5981,  ((LBPR * 2 *   3) + 24) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    8069,  ((LBPR * 2 *   1) + 17) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    8718,  ((LBPR * 2 *   3) + 14) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word   11203,  ((LBPR * 2 *   0) +  6) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    3859,  ((LBPR * 2 *   1) + 31) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    4292,  ((LBPR * 2 *   2) + 30) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    7676,  ((LBPR * 2 *   2) + 18) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word   10773,  ((LBPR * 2 *   4) +  7) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    4977,  ((LBPR * 2 *   8) + 27) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word   10774,  ((LBPR * 2 *   2) +  7) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2674,  ((LBPR * 2 *   2) + 35) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    3071,  ((LBPR * 2 *   1) + 34) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    6347,  ((LBPR * 2 *   0) + 23) & ~3,  LBPR *  11,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    4908,  ((LBPR * 2 *   3) + 28) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    9840,  ((LBPR * 2 *   8) + 10) & ~3,  LBPR *  12,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    3613,  ((LBPR * 2 *   2) + 32) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    9626,  ((LBPR * 2 *   0) + 11) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    4839,  ((LBPR * 2 *   0) + 28) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word     304,  ((LBPR * 2 *   0) + 44) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    8296,  ((LBPR * 2 *   1) + 16) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word   10313,  ((LBPR * 2 *   1) +  9) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word   11177,  ((LBPR * 2 *   2) +  6) & ~3,  LBPR *  17,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word   10854,  ((LBPR * 2 *   5) +  7) & ~3,  LBPR *  18,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word   12726,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *  18,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    3079,  ((LBPR * 2 *   4) + 34) & ~3,  LBPR *  19,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    7687,  ((LBPR * 2 *   1) + 18) & ~3,  LBPR *  19,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    4988,  ((LBPR * 2 *   1) + 27) & ~3,  LBPR *  20,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word   10461,  ((LBPR * 2 *   3) +  8) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    3549,  ((LBPR * 2 *   2) + 32) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word   12010,  ((LBPR * 2 *   6) +  3) & ~3,  LBPR *  22,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    3334,  ((LBPR * 2 *   3) + 33) & ~3,  LBPR *  22,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    5567,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    5747,  ((LBPR * 2 *   5) + 25) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    5208,  ((LBPR * 2 *   2) + 27) & ~3,  LBPR *  24,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    5964,  ((LBPR * 2 *   1) + 24) & ~3,  LBPR *  24,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word   11869,  ((LBPR * 2 *   3) +  3) & ~3,  LBPR *  25,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word   12265,  ((LBPR * 2 *   2) +  2) & ~3,  LBPR *  25,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    3734,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *  26,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    7695,  ((LBPR * 2 *   0) + 18) & ~3,  LBPR *  27,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1360,  ((LBPR * 2 *   6) + 40) & ~3,  LBPR *  28,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word   12557,  ((LBPR * 2 *   0) +  1) & ~3,  LBPR *  29,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    4241,  ((LBPR * 2 *   7) + 30) & ~3,  LBPR *  29,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word   10650,  ((LBPR * 2 *   3) +  8) & ~3,  LBPR *  30,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    6295,  ((LBPR * 2 *   0) + 23) & ~3,  LBPR *  31,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    6583,  ((LBPR * 2 *   2) + 22) & ~3,  LBPR *  31,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word   11120,  ((LBPR * 2 *   3) +  6) & ~3,  LBPR *  32,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    7844,  ((LBPR * 2 *   4) + 17) & ~3,  LBPR *  32,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    6189,  ((LBPR * 2 *   7) + 23) & ~3,  LBPR *  33,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    9285,  ((LBPR * 2 *   3) + 12) & ~3,  LBPR *  33,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word   12202,  ((LBPR * 2 *   6) +  2) & ~3,  LBPR *  34,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    8746,  ((LBPR * 2 *   2) + 14) & ~3,  LBPR *  34,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word   10691,  ((LBPR * 2 *   1) +  8) & ~3,  LBPR *  35,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2627,  ((LBPR * 2 *   3) + 36) & ~3,  LBPR *  35,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s13_neon4:
    .word    3840,  ((LBPR * 2 *   3) + 29) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    4290,  ((LBPR * 2 *   2) + 27) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    9930,  ((LBPR * 2 *  10) +  3) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1831,  ((LBPR * 2 *   4) + 37) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    6031,  ((LBPR * 2 *   1) + 19) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    8551,  ((LBPR * 2 *   4) +  9) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word   10472,  ((LBPR * 2 *   4) +  1) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    2912,  ((LBPR * 2 *   0) + 32) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    7172,  ((LBPR * 2 *   6) + 15) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    3693,  ((LBPR * 2 *   3) + 29) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    6723,  ((LBPR * 2 *   0) + 17) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    7563,  ((LBPR * 2 *   9) + 13) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1114,  ((LBPR * 2 *   2) + 40) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    1714,  ((LBPR * 2 *  12) + 37) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    3334,  ((LBPR * 2 *  14) + 31) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    1505,  ((LBPR * 2 *   5) + 38) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    3575,  ((LBPR * 2 *   1) + 30) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    6215,  ((LBPR * 2 *   3) + 19) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2226,  ((LBPR * 2 *   1) + 35) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    3216,  ((LBPR * 2 *   0) + 31) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    6396,  ((LBPR * 2 *   1) + 18) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word   10147,  ((LBPR * 2 *   2) +  2) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    2707,  ((LBPR * 2 *  11) + 33) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2797,  ((LBPR * 2 *   3) + 33) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3878,  ((LBPR * 2 *  13) + 28) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    7778,  ((LBPR * 2 *   5) + 12) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    8978,  ((LBPR * 2 *   1) +  7) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word   10059,  ((LBPR * 2 *   2) +  3) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    5139,  ((LBPR * 2 *   2) + 23) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    9609,  ((LBPR * 2 *  11) +  5) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word   10270,  ((LBPR * 2 *   8) +  2) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    2560,  ((LBPR * 2 *   0) + 34) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    5140,  ((LBPR * 2 *   3) + 23) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2291,  ((LBPR * 2 *   2) + 35) & ~3,  LBPR *  11,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    3011,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    3941,  ((LBPR * 2 *   7) + 28) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    5682,  ((LBPR * 2 *   5) + 21) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    6912,  ((LBPR * 2 *   0) + 16) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    9312,  ((LBPR * 2 *   1) +  6) & ~3,  LBPR *  12,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    5383,  ((LBPR * 2 *   4) + 22) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    6883,  ((LBPR * 2 *  12) + 16) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    8593,  ((LBPR * 2 *   0) +  9) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     434,  ((LBPR * 2 *   2) + 43) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4844,  ((LBPR * 2 *  11) + 24) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     914,  ((LBPR * 2 *   8) + 41) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1515,  ((LBPR * 2 *   4) + 38) & ~3,  LBPR *  15,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    1965,  ((LBPR * 2 *   2) + 36) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    6405,  ((LBPR * 2 *   0) + 18) & ~3,  LBPR *  15,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    4156,  ((LBPR * 2 *   0) + 27) & ~3,  LBPR *  16,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    4306,  ((LBPR * 2 *   4) + 27) & ~3,  LBPR *  16,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    8716,  ((LBPR * 2 *   3) +  8) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word   10127,  ((LBPR * 2 *  14) +  2) & ~3,  LBPR *  17,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    2957,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    8267,  ((LBPR * 2 *  14) + 10) & ~3,  LBPR *  17,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word   10008,  ((LBPR * 2 *   2) +  3) & ~3,  LBPR *  18,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word   10218,  ((LBPR * 2 *   1) +  2) & ~3,  LBPR *  18,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    5058,  ((LBPR * 2 *  10) + 24) & ~3,  LBPR *  18,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4339,  ((LBPR * 2 *   1) + 27) & ~3,  LBPR *  19,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    4879,  ((LBPR * 2 *   4) + 24) & ~3,  LBPR *  19,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    4969,  ((LBPR * 2 *   0) + 24) & ~3,  LBPR *  19,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    5420,  ((LBPR * 2 *   3) + 22) & ~3,  LBPR *  20,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    6110,  ((LBPR * 2 *   4) + 19) & ~3,  LBPR *  20,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    6830,  ((LBPR * 2 *   6) + 16) & ~3,  LBPR *  20,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    1941,  ((LBPR * 2 *   3) + 37) & ~3,  LBPR *  21,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    3441,  ((LBPR * 2 *   4) + 30) & ~3,  LBPR *  21,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    7281,  ((LBPR * 2 *   7) + 14) & ~3,  LBPR *  21,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    3112,  ((LBPR * 2 *   0) + 32) & ~3,  LBPR *  22,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3622,  ((LBPR * 2 *   9) + 30) & ~3,  LBPR *  22,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    4582,  ((LBPR * 2 *   3) + 26) & ~3,  LBPR *  22,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    3383,  ((LBPR * 2 *   2) + 31) & ~3,  LBPR *  23,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    6623,  ((LBPR * 2 *   6) + 17) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word     743,  ((LBPR * 2 *   3) + 42) & ~3,  LBPR *  23,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    4554,  ((LBPR * 2 *  10) + 26) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    7404,  ((LBPR * 2 *   4) + 14) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    9384,  ((LBPR * 2 *   2) +  6) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    3505,  ((LBPR * 2 *   7) + 30) & ~3,  LBPR *  25,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    5485,  ((LBPR * 2 *   1) + 22) & ~3,  LBPR *  25,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    7615,  ((LBPR * 2 *   3) + 13) & ~3,  LBPR *  25,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3536,  ((LBPR * 2 *   2) + 30) & ~3,  LBPR *  26,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word     416,  ((LBPR * 2 *   0) + 43) & ~3,  LBPR *  26,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    4946,  ((LBPR * 2 *   4) + 24) & ~3,  LBPR *  26,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word   10017,  ((LBPR * 2 *  13) +  3) & ~3,  LBPR *  27,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    3237,  ((LBPR * 2 *  12) + 31) & ~3,  LBPR *  27,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    7077,  ((LBPR * 2 *   3) + 15) & ~3,  LBPR *  27,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    4768,  ((LBPR * 2 *  13) + 25) & ~3,  LBPR *  28,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    7288,  ((LBPR * 2 *   1) + 14) & ~3,  LBPR *  28,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    9388,  ((LBPR * 2 *   9) +  6) & ~3,  LBPR *  28,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    8669,  ((LBPR * 2 *   8) +  9) & ~3,  LBPR *  29,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    8909,  ((LBPR * 2 *   0) +  8) & ~3,  LBPR *  29,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    9569,  ((LBPR * 2 *   4) +  5) & ~3,  LBPR *  29,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s25_neon4:
    .word     324,  ((LBPR * 2 *   4) + 43) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    4428,  ((LBPR * 2 *   3) + 24) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    8910,  ((LBPR * 2 *  17) +  3) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    9693,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3781,  ((LBPR * 2 *   3) + 27) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    4645,  ((LBPR * 2 *   8) + 23) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    5023,  ((LBPR * 2 *   1) + 21) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    6724,  ((LBPR * 2 *  14) + 13) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1811,  ((LBPR * 2 *   5) + 36) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    3134,  ((LBPR * 2 *   5) + 30) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    5348,  ((LBPR * 2 *  13) + 20) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    8750,  ((LBPR * 2 *   0) +  4) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    1866,  ((LBPR * 2 *   2) + 36) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    2190,  ((LBPR * 2 *   2) + 34) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    5646,  ((LBPR * 2 *  14) + 18) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    6915,  ((LBPR * 2 *   1) + 13) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1435,  ((LBPR * 2 *   6) + 38) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    4108,  ((LBPR * 2 *   3) + 26) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    5107,  ((LBPR * 2 *  16) + 21) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    8509,  ((LBPR * 2 *   8) +  5) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1652,  ((LBPR * 2 *   6) + 37) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    4946,  ((LBPR * 2 *  12) + 22) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    5864,  ((LBPR * 2 *   4) + 17) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    7889,  ((LBPR * 2 *   4) +  8) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    6405,  ((LBPR * 2 *   4) + 15) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    6810,  ((LBPR * 2 *   3) + 13) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    8970,  ((LBPR * 2 *   2) +  3) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    9186,  ((LBPR * 2 *  13) +  2) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    4030,  ((LBPR * 2 *   5) + 26) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    5650,  ((LBPR * 2 *   0) + 18) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    7378,  ((LBPR * 2 *  12) + 10) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    9322,  ((LBPR * 2 *   3) +  1) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    4247,  ((LBPR * 2 *   4) + 25) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    5867,  ((LBPR * 2 *   3) + 17) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    6137,  ((LBPR * 2 *   2) + 16) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    8972,  ((LBPR * 2 *   9) +  3) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    2520,  ((LBPR * 2 *   5) + 33) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    6543,  ((LBPR * 2 *   7) + 14) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    6597,  ((LBPR * 2 *  10) + 14) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     738,  ((LBPR * 2 *   0) + 41) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1387,  ((LBPR * 2 *  17) + 38) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word     415,  ((LBPR * 2 *   1) + 43) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    5140,  ((LBPR * 2 *   5) + 21) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    6922,  ((LBPR * 2 *   0) + 13) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1685,  ((LBPR * 2 *   1) + 37) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1928,  ((LBPR * 2 *   5) + 36) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word     227,  ((LBPR * 2 *   4) + 44) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4439,  ((LBPR * 2 *  15) + 24) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    1767,  ((LBPR * 2 *   0) + 36) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    4143,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    5790,  ((LBPR * 2 *   9) + 18) & ~3,  LBPR *  12,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    8841,  ((LBPR * 2 *   2) +  4) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    2227,  ((LBPR * 2 *   5) + 34) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    2254,  ((LBPR * 2 *   3) + 34) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    2605,  ((LBPR * 2 *   1) + 33) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    3847,  ((LBPR * 2 *  11) + 27) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1931,  ((LBPR * 2 *   2) + 36) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    2660,  ((LBPR * 2 *  17) + 32) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     500,  ((LBPR * 2 *   5) + 42) & ~3,  LBPR *  14,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word     635,  ((LBPR * 2 *   0) + 42) & ~3,  LBPR *  14,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    1770,  ((LBPR * 2 *   1) + 36) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     771,  ((LBPR * 2 *   2) + 41) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    9276,  ((LBPR * 2 *  11) +  2) & ~3,  LBPR *  15,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    9330,  ((LBPR * 2 *   5) +  1) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     583,  ((LBPR * 2 *   0) + 42) & ~3,  LBPR *  16,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    6658,  ((LBPR * 2 *   0) + 14) & ~3,  LBPR *  16,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    7792,  ((LBPR * 2 *   2) +  9) & ~3,  LBPR *  16,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    8683,  ((LBPR * 2 *  12) +  4) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    1799,  ((LBPR * 2 *  10) + 36) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    7577,  ((LBPR * 2 *   3) + 10) & ~3,  LBPR *  17,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    7766,  ((LBPR * 2 *   3) +  9) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    8171,  ((LBPR * 2 *   6) +  7) & ~3,  LBPR *  17,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    3366,  ((LBPR * 2 *   7) + 29) & ~3,  LBPR *  18,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    4041,  ((LBPR * 2 *  11) + 26) & ~3,  LBPR *  18,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    4824,  ((LBPR * 2 *   5) + 22) & ~3,  LBPR *  18,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    8226,  ((LBPR * 2 *   3) +  7) & ~3,  LBPR *  18,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    3745,  ((LBPR * 2 *   7) + 27) & ~3,  LBPR *  19,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    5608,  ((LBPR * 2 *   1) + 19) & ~3,  LBPR *  19,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    8821,  ((LBPR * 2 *   4) +  4) & ~3,  LBPR *  19,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    9442,  ((LBPR * 2 *  16) +  1) & ~3,  LBPR *  19,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    1802,  ((LBPR * 2 *   2) + 36) & ~3,  LBPR *  20,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    4367,  ((LBPR * 2 *   4) + 24) & ~3,  LBPR *  20,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    4502,  ((LBPR * 2 *  15) + 24) & ~3,  LBPR *  20,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word     857,  ((LBPR * 2 *   1) + 41) & ~3,  LBPR *  20,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    1344,  ((LBPR * 2 *   0) + 38) & ~3,  LBPR *  21,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    3207,  ((LBPR * 2 *   1) + 30) & ~3,  LBPR *  21,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    4422,  ((LBPR * 2 *  10) + 24) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    9660,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    1993,  ((LBPR * 2 *  13) + 35) & ~3,  LBPR *  22,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    4774,  ((LBPR * 2 *   4) + 23) & ~3,  LBPR *  22,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    7258,  ((LBPR * 2 *   2) + 11) & ~3,  LBPR *  22,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word     886,  ((LBPR * 2 *   2) + 41) & ~3,  LBPR *  22,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    3992,  ((LBPR * 2 *   2) + 26) & ~3,  LBPR *  23,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    5396,  ((LBPR * 2 *   3) + 20) & ~3,  LBPR *  23,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word     806,  ((LBPR * 2 *   5) + 41) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    8474,  ((LBPR * 2 *  15) +  5) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    6720,  ((LBPR * 2 *   0) + 14) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    8016,  ((LBPR * 2 *   1) +  8) & ~3,  LBPR *  24,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     888,  ((LBPR * 2 *   4) + 41) & ~3,  LBPR *  24,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    9015,  ((LBPR * 2 *  14) +  3) & ~3,  LBPR *  24,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    7342,  ((LBPR * 2 *  16) + 11) & ~3,  LBPR *  25,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    8071,  ((LBPR * 2 *   0) +  7) & ~3,  LBPR *  25,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    8827,  ((LBPR * 2 *   3) +  4) & ~3,  LBPR *  25,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    9286,  ((LBPR * 2 *   8) +  2) & ~3,  LBPR *  25,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    5696,  ((LBPR * 2 *   1) + 18) & ~3,  LBPR *  26,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    7019,  ((LBPR * 2 *   1) + 12) & ~3,  LBPR *  26,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    7397,  ((LBPR * 2 *   9) + 10) & ~3,  LBPR *  26,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    8963,  ((LBPR * 2 *   4) +  3) & ~3,  LBPR *  26,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s12_neon4:
    .word       0,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3450,  ((LBPR * 2 *  19) + 27) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    3850,  ((LBPR * 2 *   9) + 25) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word       1,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    5701,  ((LBPR * 2 *   2) + 16) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    5876,  ((LBPR * 2 *   1) + 15) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     926,  ((LBPR * 2 *   2) + 40) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    2802,  ((LBPR * 2 *   3) + 31) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3577,  ((LBPR * 2 *   3) + 27) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    6202,  ((LBPR * 2 *   4) + 14) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    7877,  ((LBPR * 2 *  14) +  5) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    2003,  ((LBPR * 2 *   4) + 35) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    3028,  ((LBPR * 2 *  17) + 29) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word       3,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    6328,  ((LBPR * 2 *   1) + 13) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word       4,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    6354,  ((LBPR * 2 *   0) + 13) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    2855,  ((LBPR * 2 *   6) + 30) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    3080,  ((LBPR * 2 *  13) + 29) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word       5,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4606,  ((LBPR * 2 *  13) + 22) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1057,  ((LBPR * 2 *  18) + 39) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    3507,  ((LBPR * 2 *   2) + 27) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word       7,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1158,  ((LBPR * 2 *   8) + 39) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4633,  ((LBPR * 2 *  14) + 21) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    5158,  ((LBPR * 2 *   0) + 19) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word       8,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3884,  ((LBPR * 2 *  15) + 25) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    6934,  ((LBPR * 2 *   5) + 10) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word       9,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1185,  ((LBPR * 2 *   4) + 39) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    8935,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word      11,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2386,  ((LBPR * 2 *   0) + 33) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    4061,  ((LBPR * 2 *   0) + 24) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    7411,  ((LBPR * 2 *  19) +  8) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1062,  ((LBPR * 2 *   0) + 39) & ~3,  LBPR *  12,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word      12,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     212,  ((LBPR * 2 *   7) + 44) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     712,  ((LBPR * 2 *   0) + 41) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1263,  ((LBPR * 2 *   4) + 38) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word      13,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2438,  ((LBPR * 2 *   2) + 32) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    5988,  ((LBPR * 2 *  18) + 15) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word      14,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3089,  ((LBPR * 2 *   1) + 29) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    3439,  ((LBPR * 2 *   8) + 27) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word     764,  ((LBPR * 2 *  17) + 41) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     290,  ((LBPR * 2 *  10) + 43) & ~3,  LBPR *  15,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    3190,  ((LBPR * 2 *   2) + 29) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    5140,  ((LBPR * 2 *   4) + 19) & ~3,  LBPR *  15,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    1091,  ((LBPR * 2 *   3) + 39) & ~3,  LBPR *  16,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word      66,  ((LBPR * 2 *   6) + 44) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1467,  ((LBPR * 2 *  11) + 37) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2242,  ((LBPR * 2 *  12) + 33) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    4667,  ((LBPR * 2 *   3) + 21) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    4742,  ((LBPR * 2 *   4) + 21) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    2543,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *  18,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    3693,  ((LBPR * 2 *   2) + 26) & ~3,  LBPR *  18,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    6868,  ((LBPR * 2 *  15) + 10) & ~3,  LBPR *  18,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word     269,  ((LBPR * 2 *   2) + 43) & ~3,  LBPR *  19,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    6694,  ((LBPR * 2 *   7) + 11) & ~3,  LBPR *  19,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word      20,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *  20,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4520,  ((LBPR * 2 *   3) + 22) & ~3,  LBPR *  20,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    5045,  ((LBPR * 2 *   0) + 19) & ~3,  LBPR *  20,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    7820,  ((LBPR * 2 *  12) +  6) & ~3,  LBPR *  20,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word      21,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4046,  ((LBPR * 2 *   5) + 24) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    4996,  ((LBPR * 2 *  16) + 20) & ~3,  LBPR *  21,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word      22,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *  22,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4422,  ((LBPR * 2 *   9) + 23) & ~3,  LBPR *  22,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    4822,  ((LBPR * 2 *   1) + 21) & ~3,  LBPR *  22,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    6497,  ((LBPR * 2 *   4) + 12) & ~3,  LBPR *  22,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    2348,  ((LBPR * 2 *   1) + 33) & ~3,  LBPR *  23,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word      23,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *  23,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    5748,  ((LBPR * 2 *   1) + 16) & ~3,  LBPR *  23,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word      24,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *  24,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4049,  ((LBPR * 2 *  11) + 24) & ~3,  LBPR *  24,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    4449,  ((LBPR * 2 *   3) + 22) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    5324,  ((LBPR * 2 *   3) + 18) & ~3,  LBPR *  24,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    5924,  ((LBPR * 2 *  10) + 15) & ~3,  LBPR *  24,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s35_neon4:
    .word       0,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2142,  ((LBPR * 2 *   8) + 30) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    2502,  ((LBPR * 2 *  11) + 27) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    3096,  ((LBPR * 2 *   2) + 23) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    3816,  ((LBPR * 2 *   6) + 18) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     396,  ((LBPR * 2 *   8) + 42) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    4284,  ((LBPR * 2 *   3) + 15) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4878,  ((LBPR * 2 *  18) + 11) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    6426,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    1513,  ((LBPR * 2 *   4) + 34) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1999,  ((LBPR * 2 *   5) + 31) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word       1,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2161,  ((LBPR * 2 *   9) + 30) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    4069,  ((LBPR * 2 *   8) + 16) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    4177,  ((LBPR * 2 *  26) + 16) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4951,  ((LBPR * 2 *   1) + 10) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    5797,  ((LBPR * 2 *   6) +  4) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    6463,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    1622,  ((LBPR * 2 *   6) + 33) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word       2,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     398,  ((LBPR * 2 *   1) + 42) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    4016,  ((LBPR * 2 *   2) + 17) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    4556,  ((LBPR * 2 *  25) + 13) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    5654,  ((LBPR * 2 *   8) +  5) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    6320,  ((LBPR * 2 *   2) +  1) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word     884,  ((LBPR * 2 *   8) + 38) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word     956,  ((LBPR * 2 *  16) + 38) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1119,  ((LBPR * 2 *   2) + 37) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1461,  ((LBPR * 2 *  10) + 34) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    3081,  ((LBPR * 2 *   5) + 23) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word       3,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4215,  ((LBPR * 2 *  22) + 15) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    5601,  ((LBPR * 2 *   1) +  6) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    5889,  ((LBPR * 2 *   5) +  4) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    6195,  ((LBPR * 2 *   4) +  2) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     723,  ((LBPR * 2 *   1) + 40) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1246,  ((LBPR * 2 *   1) + 36) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    1786,  ((LBPR * 2 *   8) + 32) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    2182,  ((LBPR * 2 *   0) + 29) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2830,  ((LBPR * 2 *   8) + 25) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3388,  ((LBPR * 2 *  24) + 21) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    4738,  ((LBPR * 2 *   8) + 12) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word       4,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     544,  ((LBPR * 2 *   0) + 41) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    5692,  ((LBPR * 2 *  17) +  5) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1121,  ((LBPR * 2 *   7) + 37) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1733,  ((LBPR * 2 *  14) + 33) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    2615,  ((LBPR * 2 *   1) + 26) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    2903,  ((LBPR * 2 *  21) + 24) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    4757,  ((LBPR * 2 *   3) + 12) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    4811,  ((LBPR * 2 *   0) + 11) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     563,  ((LBPR * 2 *   3) + 41) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word      59,  ((LBPR * 2 *   4) + 44) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word       5,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1356,  ((LBPR * 2 *   8) + 35) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1374,  ((LBPR * 2 *   0) + 35) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    2184,  ((LBPR * 2 *   7) + 29) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2670,  ((LBPR * 2 *   5) + 26) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    3786,  ((LBPR * 2 *  15) + 18) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    4362,  ((LBPR * 2 *   5) + 14) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    5208,  ((LBPR * 2 *  23) +  8) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    5298,  ((LBPR * 2 *   2) +  8) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word       6,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2311,  ((LBPR * 2 *   6) + 29) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    2653,  ((LBPR * 2 *   9) + 26) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    3157,  ((LBPR * 2 *   3) + 23) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    3247,  ((LBPR * 2 *  19) + 22) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    4201,  ((LBPR * 2 *   4) + 15) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    4939,  ((LBPR * 2 *   2) + 10) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    5713,  ((LBPR * 2 *   0) +  5) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word       7,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     817,  ((LBPR * 2 *   6) + 39) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    2906,  ((LBPR * 2 *   6) + 24) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    3590,  ((LBPR * 2 *  21) + 20) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3806,  ((LBPR * 2 *   5) + 18) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    4292,  ((LBPR * 2 *  16) + 15) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4310,  ((LBPR * 2 *   0) + 15) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    4886,  ((LBPR * 2 *   7) + 11) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    5516,  ((LBPR * 2 *   6) +  6) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    5642,  ((LBPR * 2 *   7) +  5) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word       8,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2997,  ((LBPR * 2 *   4) + 24) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    3285,  ((LBPR * 2 *   6) + 22) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    3807,  ((LBPR * 2 *   4) + 18) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    4167,  ((LBPR * 2 *   3) + 16) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    4707,  ((LBPR * 2 *  23) + 12) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    5139,  ((LBPR * 2 *   5) +  9) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    5409,  ((LBPR * 2 *   5) +  7) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    5985,  ((LBPR * 2 *  13) +  3) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word       9,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1936,  ((LBPR * 2 *  15) + 31) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2566,  ((LBPR * 2 *  22) + 27) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    3394,  ((LBPR * 2 *   0) + 21) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    3412,  ((LBPR * 2 *   3) + 21) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3736,  ((LBPR * 2 *   5) + 19) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    4474,  ((LBPR * 2 *   4) + 14) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    6022,  ((LBPR * 2 *   7) +  3) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    6238,  ((LBPR * 2 *   2) +  1) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word      11,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1721,  ((LBPR * 2 *   4) + 33) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    2063,  ((LBPR * 2 *   3) + 30) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    2333,  ((LBPR * 2 *   7) + 28) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    2441,  ((LBPR * 2 *   3) + 28) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    2765,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    3971,  ((LBPR * 2 *  12) + 17) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    4763,  ((LBPR * 2 *  20) + 12) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     875,  ((LBPR * 2 *   6) + 39) & ~3,  LBPR *  11,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word      12,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1380,  ((LBPR * 2 *  10) + 35) & ~3,  LBPR *  12,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    1848,  ((LBPR * 2 *   7) + 32) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word     210,  ((LBPR * 2 *   2) + 43) & ~3,  LBPR *  12,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2208,  ((LBPR * 2 *   1) + 29) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2928,  ((LBPR * 2 *   1) + 24) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    4908,  ((LBPR * 2 *  26) + 11) & ~3,  LBPR *  12,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    5664,  ((LBPR * 2 *   3) +  5) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    6384,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1057,  ((LBPR * 2 *  12) + 37) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word      13,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1705,  ((LBPR * 2 *   7) + 33) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     211,  ((LBPR * 2 *   1) + 43) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     265,  ((LBPR * 2 *   1) + 43) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    3595,  ((LBPR * 2 *   7) + 20) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3919,  ((LBPR * 2 *   8) + 17) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    3937,  ((LBPR * 2 *  20) + 17) & ~3,  LBPR *  13,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    5809,  ((LBPR * 2 *   5) +  4) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word      14,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     266,  ((LBPR * 2 *  18) + 43) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2840,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3596,  ((LBPR * 2 *   0) + 20) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    3956,  ((LBPR * 2 *   3) + 17) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    4244,  ((LBPR * 2 *   7) + 15) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     428,  ((LBPR * 2 *   4) + 42) & ~3,  LBPR *  14,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    4730,  ((LBPR * 2 *   2) + 12) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    6062,  ((LBPR * 2 *  13) +  3) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    1257,  ((LBPR * 2 *   6) + 36) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word      15,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3417,  ((LBPR * 2 *  17) + 21) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3543,  ((LBPR * 2 *   6) + 20) & ~3,  LBPR *  15,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    5109,  ((LBPR * 2 *  25) +  9) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    5415,  ((LBPR * 2 *   7) +  7) & ~3,  LBPR *  15,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    5739,  ((LBPR * 2 *   1) +  5) & ~3,  LBPR *  15,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    6045,  ((LBPR * 2 *   3) +  3) & ~3,  LBPR *  15,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word     771,  ((LBPR * 2 *   0) + 39) & ~3,  LBPR *  15,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word      16,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2428,  ((LBPR * 2 *   4) + 28) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    3940,  ((LBPR * 2 *  24) + 17) & ~3,  LBPR *  16,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    4282,  ((LBPR * 2 *   2) + 15) & ~3,  LBPR *  16,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    4534,  ((LBPR * 2 *   5) + 13) & ~3,  LBPR *  16,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    4732,  ((LBPR * 2 *   4) + 12) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    6028,  ((LBPR * 2 *  14) +  3) & ~3,  LBPR *  16,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    6334,  ((LBPR * 2 *   3) +  1) & ~3,  LBPR *  16,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word     736,  ((LBPR * 2 *   4) + 40) & ~3,  LBPR *  16,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1205,  ((LBPR * 2 *   6) + 36) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1295,  ((LBPR * 2 *   8) + 36) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word      17,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     287,  ((LBPR * 2 *   7) + 43) & ~3,  LBPR *  17,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2951,  ((LBPR * 2 *   8) + 24) & ~3,  LBPR *  17,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    3707,  ((LBPR * 2 *  11) + 19) & ~3,  LBPR *  17,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    4913,  ((LBPR * 2 *  19) + 11) & ~3,  LBPR *  17,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    5777,  ((LBPR * 2 *   2) +  5) & ~3,  LBPR *  17,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    5993,  ((LBPR * 2 *   1) +  3) & ~3,  LBPR *  17,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s23_neon4:
    .word       0,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1005,  ((LBPR * 2 *  18) + 36) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    1560,  ((LBPR * 2 *  23) + 32) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2835,  ((LBPR * 2 *  11) + 21) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    2880,  ((LBPR * 2 *   1) + 21) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    4620,  ((LBPR * 2 *   0) +  6) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     705,  ((LBPR * 2 *  11) + 39) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    1516,  ((LBPR * 2 *   1) + 32) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word       1,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     226,  ((LBPR * 2 *  22) + 43) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2536,  ((LBPR * 2 *  15) + 23) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    3196,  ((LBPR * 2 *   0) + 18) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    3451,  ((LBPR * 2 *   0) + 16) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    4606,  ((LBPR * 2 *  10) +  6) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word     107,  ((LBPR * 2 *   2) + 44) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word     122,  ((LBPR * 2 *   1) + 44) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1847,  ((LBPR * 2 *   1) + 29) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    2147,  ((LBPR * 2 *   4) + 27) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word       2,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     347,  ((LBPR * 2 *  21) + 42) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    5117,  ((LBPR * 2 *  19) +  2) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1548,  ((LBPR * 2 *   0) + 32) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    1743,  ((LBPR * 2 *  14) + 30) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     243,  ((LBPR * 2 *   7) + 43) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    2583,  ((LBPR * 2 *  16) + 23) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    2928,  ((LBPR * 2 *  25) + 20) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    3108,  ((LBPR * 2 *   1) + 19) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word       3,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1129,  ((LBPR * 2 *  29) + 35) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1684,  ((LBPR * 2 *  28) + 31) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word     259,  ((LBPR * 2 *   2) + 42) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    3529,  ((LBPR * 2 *   1) + 15) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    3529,  ((LBPR * 2 *   3) + 15) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    3799,  ((LBPR * 2 *   1) + 13) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word       4,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1460,  ((LBPR * 2 *   0) + 32) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    1640,  ((LBPR * 2 *  24) + 31) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    1880,  ((LBPR * 2 *   5) + 29) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3125,  ((LBPR * 2 *   2) + 19) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    4910,  ((LBPR * 2 *   6) +  4) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word       5,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     635,  ((LBPR * 2 *  27) + 39) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     231,  ((LBPR * 2 *  28) + 43) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2481,  ((LBPR * 2 *   0) + 24) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    3426,  ((LBPR * 2 *  12) + 16) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    3996,  ((LBPR * 2 *   2) + 11) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    4296,  ((LBPR * 2 *  22) +  9) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    4836,  ((LBPR * 2 *   5) +  4) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word       6,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2167,  ((LBPR * 2 *   9) + 27) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    2512,  ((LBPR * 2 *   9) + 24) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    4297,  ((LBPR * 2 *   0) +  9) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     487,  ((LBPR * 2 *  23) + 41) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    5212,  ((LBPR * 2 *  19) +  1) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    5287,  ((LBPR * 2 *   2) +  1) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1613,  ((LBPR * 2 *   0) + 31) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    3833,  ((LBPR * 2 *   2) + 13) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    3848,  ((LBPR * 2 *  13) + 13) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    4358,  ((LBPR * 2 *   1) +  8) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    4418,  ((LBPR * 2 *  18) +  8) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word     563,  ((LBPR * 2 *  26) + 40) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word       8,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2364,  ((LBPR * 2 *  26) + 25) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    3369,  ((LBPR * 2 *   0) + 17) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    3399,  ((LBPR * 2 *   2) + 16) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    3864,  ((LBPR * 2 *   6) + 12) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    3894,  ((LBPR * 2 *  29) + 12) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word     864,  ((LBPR * 2 *   2) + 37) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word       9,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1180,  ((LBPR * 2 *  16) + 35) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1360,  ((LBPR * 2 *  14) + 33) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2155,  ((LBPR * 2 *  20) + 27) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2350,  ((LBPR * 2 *   2) + 25) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    2365,  ((LBPR * 2 *  12) + 25) & ~3,  LBPR *  10,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    2650,  ((LBPR * 2 *   2) + 23) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word      11,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      11,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1286,  ((LBPR * 2 *   0) + 34) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1436,  ((LBPR * 2 *   8) + 33) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    2696,  ((LBPR * 2 *  21) + 22) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    3011,  ((LBPR * 2 *   8) + 20) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3926,  ((LBPR * 2 *  24) + 12) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     971,  ((LBPR * 2 *   1) + 37) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word      12,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      12,  ((LBPR * 2 *  27) +  0) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1407,  ((LBPR * 2 *   1) + 33) & ~3,  LBPR *  12,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    1542,  ((LBPR * 2 *  17) + 32) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    1542,  ((LBPR * 2 *   7) + 32) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    2622,  ((LBPR * 2 *   0) + 23) & ~3,  LBPR *  12,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2922,  ((LBPR * 2 *  20) + 20) & ~3,  LBPR *  12,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     342,  ((LBPR * 2 *   3) + 42) & ~3,  LBPR *  12,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    1003,  ((LBPR * 2 *  10) + 36) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word      13,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      13,  ((LBPR * 2 *  28) +  0) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     163,  ((LBPR * 2 *  15) + 43) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    3448,  ((LBPR * 2 *   1) + 16) & ~3,  LBPR *  13,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     373,  ((LBPR * 2 *   1) + 42) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    4198,  ((LBPR * 2 *   4) + 10) & ~3,  LBPR *  13,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word     688,  ((LBPR * 2 *  27) + 39) & ~3,  LBPR *  13,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word     149,  ((LBPR * 2 *  25) + 43) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word      14,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      14,  ((LBPR * 2 *  29) +  0) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     164,  ((LBPR * 2 *   2) + 43) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    2084,  ((LBPR * 2 *   0) + 27) & ~3,  LBPR *  14,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    2474,  ((LBPR * 2 *  13) + 24) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word     509,  ((LBPR * 2 *  17) + 40) & ~3,  LBPR *  14,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     929,  ((LBPR * 2 *   2) + 37) & ~3,  LBPR *  14,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s34_neon4:
    .word       0,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     132,  ((LBPR * 2 *  12) + 43) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1716,  ((LBPR * 2 *  11) + 27) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2532,  ((LBPR * 2 *  27) + 18) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    2616,  ((LBPR * 2 *   0) + 17) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2808,  ((LBPR * 2 *  32) + 15) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     984,  ((LBPR * 2 *   8) + 34) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    1009,  ((LBPR * 2 *   0) + 34) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1801,  ((LBPR * 2 *   0) + 26) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    1945,  ((LBPR * 2 *  17) + 24) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word       1,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3361,  ((LBPR * 2 *  25) + 10) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    3373,  ((LBPR * 2 *   3) +  9) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    4129,  ((LBPR * 2 *   5) +  2) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    4141,  ((LBPR * 2 *  20) +  1) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     997,  ((LBPR * 2 *  24) + 34) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    1070,  ((LBPR * 2 *   7) + 33) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1298,  ((LBPR * 2 *  29) + 31) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word       2,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3830,  ((LBPR * 2 *   4) +  5) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word     542,  ((LBPR * 2 *  16) + 39) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word     554,  ((LBPR * 2 *   0) + 39) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word     638,  ((LBPR * 2 *  13) + 38) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word     986,  ((LBPR * 2 *  26) + 34) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    3003,  ((LBPR * 2 *  10) + 13) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    3447,  ((LBPR * 2 *  14) +  9) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    3903,  ((LBPR * 2 *  24) +  4) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word       3,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     615,  ((LBPR * 2 *  30) + 38) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    1648,  ((LBPR * 2 *  31) + 27) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1924,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1948,  ((LBPR * 2 *  18) + 24) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    3112,  ((LBPR * 2 *  31) + 12) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word     412,  ((LBPR * 2 *  18) + 40) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word       4,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1481,  ((LBPR * 2 *   0) + 29) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1817,  ((LBPR * 2 *  13) + 26) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    2405,  ((LBPR * 2 *  28) + 20) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2681,  ((LBPR * 2 *   1) + 17) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    3437,  ((LBPR * 2 *   0) +  9) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    3449,  ((LBPR * 2 *   4) +  9) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    3725,  ((LBPR * 2 *  12) +  6) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word       5,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     713,  ((LBPR * 2 *  23) + 37) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1110,  ((LBPR * 2 *  26) + 33) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1458,  ((LBPR * 2 *   9) + 29) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     174,  ((LBPR * 2 *  30) + 43) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2238,  ((LBPR * 2 *  19) + 21) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2742,  ((LBPR * 2 *   6) + 16) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word    3198,  ((LBPR * 2 *   0) + 11) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word       6,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  27) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1015,  ((LBPR * 2 *  17) + 34) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    2239,  ((LBPR * 2 *   8) + 21) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2323,  ((LBPR * 2 *  25) + 20) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    3031,  ((LBPR * 2 *   9) + 13) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    3079,  ((LBPR * 2 *  21) + 13) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    4027,  ((LBPR * 2 *   2) +  3) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    4207,  ((LBPR * 2 *   0) +  1) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word       7,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  28) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1088,  ((LBPR * 2 *  22) + 33) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    1328,  ((LBPR * 2 *  10) + 31) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2060,  ((LBPR * 2 *   5) + 23) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2480,  ((LBPR * 2 *  21) + 19) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    3632,  ((LBPR * 2 *  15) +  7) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    4184,  ((LBPR * 2 *   6) +  1) & ~3,  LBPR *   8,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word       8,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *  29) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1137,  ((LBPR * 2 *  11) + 33) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1257,  ((LBPR * 2 *  15) + 32) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1881,  ((LBPR * 2 *  29) + 25) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    2637,  ((LBPR * 2 *   3) + 17) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    3021,  ((LBPR * 2 *  22) + 13) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word       9,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *  30) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *  31) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      10,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     142,  ((LBPR * 2 *  27) + 43) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1690,  ((LBPR * 2 *  28) + 27) & ~3,  LBPR *  10,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    1774,  ((LBPR * 2 *  14) + 26) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    3694,  ((LBPR * 2 *  16) +  6) & ~3,  LBPR *  10,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    3946,  ((LBPR * 2 *   7) +  4) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     478,  ((LBPR * 2 *   0) + 40) & ~3,  LBPR *  10,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word      11,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      11,  ((LBPR * 2 *  32) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      11,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1379,  ((LBPR * 2 *  23) + 30) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    1415,  ((LBPR * 2 *  32) + 30) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1907,  ((LBPR * 2 *  20) + 25) & ~3,  LBPR *  11,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    2135,  ((LBPR * 2 *   1) + 22) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    3107,  ((LBPR * 2 *   2) + 12) & ~3,  LBPR *  11,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     683,  ((LBPR * 2 *   0) + 38) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     995,  ((LBPR * 2 *  19) + 34) & ~3,  LBPR *  11,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s45_neon4:
    .word       0,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1610,  ((LBPR * 2 *  27) + 24) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    1800,  ((LBPR * 2 *  16) + 22) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    2110,  ((LBPR * 2 *  10) + 18) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word     230,  ((LBPR * 2 *   6) + 42) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    3210,  ((LBPR * 2 *   2) +  4) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    3280,  ((LBPR * 2 *  16) +  4) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3460,  ((LBPR * 2 *  31) +  1) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word     121,  ((LBPR * 2 *  22) + 43) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    1421,  ((LBPR * 2 *  14) + 27) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1881,  ((LBPR * 2 *  26) + 21) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word       1,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2701,  ((LBPR * 2 *  27) + 11) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word     331,  ((LBPR * 2 *  17) + 40) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     951,  ((LBPR * 2 *  12) + 33) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    1732,  ((LBPR * 2 *  28) + 23) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word     212,  ((LBPR * 2 *   2) + 42) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    2272,  ((LBPR * 2 *  15) + 16) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word    2552,  ((LBPR * 2 *  18) + 13) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word       2,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  27) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    3542,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     612,  ((LBPR * 2 *   4) + 37) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word     722,  ((LBPR * 2 *  25) + 36) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     862,  ((LBPR * 2 *   9) + 34) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    1383,  ((LBPR * 2 *  20) + 27) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     243,  ((LBPR * 2 *  30) + 42) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    2493,  ((LBPR * 2 *   1) + 13) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2663,  ((LBPR * 2 *   5) + 11) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     283,  ((LBPR * 2 *   8) + 41) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    3283,  ((LBPR * 2 *  28) +  4) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     343,  ((LBPR * 2 *  20) + 40) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word       3,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  28) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1584,  ((LBPR * 2 *  25) + 25) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     184,  ((LBPR * 2 *   1) + 42) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    2034,  ((LBPR * 2 *  11) + 19) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2774,  ((LBPR * 2 *  23) + 10) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    2794,  ((LBPR * 2 *   7) + 10) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    3074,  ((LBPR * 2 *  30) +  6) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word       4,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  29) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      94,  ((LBPR * 2 *  21) + 43) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1565,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1855,  ((LBPR * 2 *  24) + 21) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2025,  ((LBPR * 2 *   7) + 19) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    2695,  ((LBPR * 2 *   6) + 11) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    3545,  ((LBPR * 2 *  34) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     465,  ((LBPR * 2 *  18) + 39) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word       5,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  30) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     945,  ((LBPR * 2 *  31) + 33) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1746,  ((LBPR * 2 *  32) + 23) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2116,  ((LBPR * 2 *  24) + 18) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    2286,  ((LBPR * 2 *  11) + 16) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word     236,  ((LBPR * 2 *  21) + 42) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word     376,  ((LBPR * 2 *  10) + 40) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     566,  ((LBPR * 2 *  33) + 38) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  31) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     896,  ((LBPR * 2 *   0) + 33) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1197,  ((LBPR * 2 *  15) + 30) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    1427,  ((LBPR * 2 *  33) + 27) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1497,  ((LBPR * 2 *  23) + 26) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1947,  ((LBPR * 2 *   5) + 20) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    2767,  ((LBPR * 2 *  26) + 10) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     307,  ((LBPR * 2 *  14) + 41) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     727,  ((LBPR * 2 *   3) + 36) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  32) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1038,  ((LBPR * 2 *  19) + 32) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    1168,  ((LBPR * 2 *  34) + 30) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     168,  ((LBPR * 2 *  29) + 43) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    2068,  ((LBPR * 2 *  12) + 19) & ~3,  LBPR *   8,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    2308,  ((LBPR * 2 *  17) + 16) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    3108,  ((LBPR * 2 *  13) +  6) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word    3428,  ((LBPR * 2 *   4) +  2) & ~3,  LBPR *   8,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word       8,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       8,  ((LBPR * 2 *  33) +  0) & ~3,  LBPR *   8,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1099,  ((LBPR * 2 *  29) + 31) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    1339,  ((LBPR * 2 *   3) + 28) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    2049,  ((LBPR * 2 *  32) + 19) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    2479,  ((LBPR * 2 *  19) + 14) & ~3,  LBPR *   9,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    2619,  ((LBPR * 2 *  22) + 12) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    2889,  ((LBPR * 2 *   9) +  9) & ~3,  LBPR *   9,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    3039,  ((LBPR * 2 *   8) +  7) & ~3,  LBPR *   9,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word       9,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *  34) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       9,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *   9,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s56_neon4:
    .word       0,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  29) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1104,  ((LBPR * 2 *  15) + 27) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    1224,  ((LBPR * 2 *   2) + 25) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1264,  ((LBPR * 2 *   8) + 25) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1696,  ((LBPR * 2 *  15) + 18) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1704,  ((LBPR * 2 *  36) + 18) & ~3,  LBPR *   0,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    2112,  ((LBPR * 2 *   5) + 12) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2264,  ((LBPR * 2 *   0) +  9) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    2320,  ((LBPR * 2 *  26) +  8) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    2392,  ((LBPR * 2 *  34) +  7) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     256,  ((LBPR * 2 *  21) + 41) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1225,  ((LBPR * 2 *  24) + 25) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1257,  ((LBPR * 2 *  23) + 25) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    1481,  ((LBPR * 2 *   0) + 21) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     169,  ((LBPR * 2 *  14) + 42) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word       1,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  30) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2369,  ((LBPR * 2 *  29) +  8) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2409,  ((LBPR * 2 *   0) +  7) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word     497,  ((LBPR * 2 *  19) + 37) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     545,  ((LBPR * 2 *   7) + 36) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word      57,  ((LBPR * 2 *  30) + 44) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word      81,  ((LBPR * 2 *  12) + 43) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    1050,  ((LBPR * 2 *  31) + 28) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word     114,  ((LBPR * 2 *  11) + 43) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1450,  ((LBPR * 2 *  17) + 22) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word    1658,  ((LBPR * 2 *  23) + 19) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    1738,  ((LBPR * 2 *  33) + 17) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1914,  ((LBPR * 2 *  16) + 15) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    2114,  ((LBPR * 2 *   3) + 12) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    2258,  ((LBPR * 2 *   9) +  9) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2482,  ((LBPR * 2 *  21) +  6) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word       2,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  31) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     842,  ((LBPR * 2 *   3) + 31) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1579,  ((LBPR * 2 *  20) + 20) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     163,  ((LBPR * 2 *  35) + 42) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    2243,  ((LBPR * 2 *  12) + 10) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    2675,  ((LBPR * 2 *  26) +  3) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word       3,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  32) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     435,  ((LBPR * 2 *  27) + 38) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word     483,  ((LBPR * 2 *  30) + 37) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word     499,  ((LBPR * 2 *   0) + 37) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     819,  ((LBPR * 2 *   7) + 32) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word      91,  ((LBPR * 2 *  18) + 43) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     212,  ((LBPR * 2 *   4) + 41) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    2228,  ((LBPR * 2 *  19) + 10) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word     228,  ((LBPR * 2 *  28) + 41) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    2348,  ((LBPR * 2 *   6) +  8) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    2508,  ((LBPR * 2 *   0) +  5) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2644,  ((LBPR * 2 *  36) +  3) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word       4,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  33) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     532,  ((LBPR * 2 *  17) + 36) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word      68,  ((LBPR * 2 *  33) + 44) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     716,  ((LBPR * 2 *   0) + 33) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     908,  ((LBPR * 2 *   0) + 30) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word     964,  ((LBPR * 2 *  10) + 30) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     980,  ((LBPR * 2 *  25) + 29) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word    1117,  ((LBPR * 2 *  22) + 27) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1245,  ((LBPR * 2 *  13) + 25) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1261,  ((LBPR * 2 *  22) + 25) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    1581,  ((LBPR * 2 *  13) + 20) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word    1701,  ((LBPR * 2 *   9) + 18) & ~3,  LBPR *   5,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1885,  ((LBPR * 2 *  29) + 15) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    2413,  ((LBPR * 2 *  11) +  7) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word    2805,  ((LBPR * 2 *   0) +  1) & ~3,  LBPR *   5,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     333,  ((LBPR * 2 *   0) + 39) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word     573,  ((LBPR * 2 *   4) + 36) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word       5,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       5,  ((LBPR * 2 *  34) +  0) & ~3,  LBPR *   5,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     645,  ((LBPR * 2 *  35) + 35) & ~3,  LBPR *   5,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    1270,  ((LBPR * 2 *   0) + 25) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1278,  ((LBPR * 2 *  27) + 25) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word    1478,  ((LBPR * 2 *  24) + 22) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     166,  ((LBPR * 2 *  10) + 42) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1702,  ((LBPR * 2 *   0) + 18) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1926,  ((LBPR * 2 *   1) + 15) & ~3,  LBPR *   6,  loadshift_3,  ldpcbits_0,  0,  0,  0
    .word    1990,  ((LBPR * 2 *  32) + 14) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    2286,  ((LBPR * 2 *   6) +  9) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    2326,  ((LBPR * 2 *  20) +  8) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word     414,  ((LBPR * 2 *   2) + 38) & ~3,  LBPR *   6,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word       6,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  27) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       6,  ((LBPR * 2 *  35) +  0) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     838,  ((LBPR * 2 *  31) + 32) & ~3,  LBPR *   6,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     974,  ((LBPR * 2 *  18) + 29) & ~3,  LBPR *   6,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1231,  ((LBPR * 2 *  32) + 25) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     143,  ((LBPR * 2 *   8) + 42) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    2383,  ((LBPR * 2 *   5) +  7) & ~3,  LBPR *   7,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    2447,  ((LBPR * 2 *   1) +  6) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    2511,  ((LBPR * 2 *  25) +  5) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    2831,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     503,  ((LBPR * 2 *  28) + 37) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     559,  ((LBPR * 2 *   0) + 36) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     775,  ((LBPR * 2 *  14) + 33) & ~3,  LBPR *   7,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  28) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *  36) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       7,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *   7,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     951,  ((LBPR * 2 *  34) + 30) & ~3,  LBPR *   7,  loadshift_2,  ldpcbits_2,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1


    .align   8
ldpc_parameters_s89_neon4:
    .word       0,  ((LBPR * 2 *   0) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  10) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  15) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  20) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  25) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  30) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *  35) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       0,  ((LBPR * 2 *   5) +  0) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1000,  ((LBPR * 2 *  35) + 20) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1015,  ((LBPR * 2 *  26) + 19) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1155,  ((LBPR * 2 *  16) + 16) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    1155,  ((LBPR * 2 *  34) + 16) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word    1190,  ((LBPR * 2 *  28) + 15) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word    1195,  ((LBPR * 2 *   8) + 15) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    1450,  ((LBPR * 2 *   1) +  8) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1495,  ((LBPR * 2 *  19) +  7) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1500,  ((LBPR * 2 *  13) +  7) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    1515,  ((LBPR * 2 *  38) +  7) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word     210,  ((LBPR * 2 *   8) + 39) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     385,  ((LBPR * 2 *  20) + 35) & ~3,  LBPR *   0,  loadshift_3,  ldpcbits_3,  0,  0,  0
    .word     605,  ((LBPR * 2 *   4) + 29) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     630,  ((LBPR * 2 *  30) + 29) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     805,  ((LBPR * 2 *   0) + 24) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     835,  ((LBPR * 2 *  13) + 24) & ~3,  LBPR *   0,  loadshift_0,  ldpcbits_1,  0,  0,  0
    .word     960,  ((LBPR * 2 *  23) + 21) & ~3,  LBPR *   0,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1006,  ((LBPR * 2 *  15) + 19) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1246,  ((LBPR * 2 *  29) + 13) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1261,  ((LBPR * 2 *  27) + 13) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1366,  ((LBPR * 2 *  12) + 10) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    1451,  ((LBPR * 2 *  24) +  8) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1496,  ((LBPR * 2 *  14) +  7) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word     151,  ((LBPR * 2 *  21) + 41) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     151,  ((LBPR * 2 *   7) + 41) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word    1566,  ((LBPR * 2 *   3) +  5) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1701,  ((LBPR * 2 *  15) +  2) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word    1741,  ((LBPR * 2 *   2) +  1) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word       1,  ((LBPR * 2 *   1) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  11) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  16) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  21) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  26) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  31) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *  36) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       1,  ((LBPR * 2 *   6) +  0) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     421,  ((LBPR * 2 *  31) + 34) & ~3,  LBPR *   1,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     506,  ((LBPR * 2 *  38) + 32) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     556,  ((LBPR * 2 *  34) + 31) & ~3,  LBPR *   1,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word     631,  ((LBPR * 2 *  35) + 29) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_2,  0,  0,  0
    .word     806,  ((LBPR * 2 *   3) + 24) & ~3,  LBPR *   1,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     926,  ((LBPR * 2 *   5) + 21) & ~3,  LBPR *   1,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word    1172,  ((LBPR * 2 *  39) + 15) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word    1337,  ((LBPR * 2 *   1) + 11) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_5,  0,  0,  0
    .word    1472,  ((LBPR * 2 *  29) +  8) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_2,  0,  0,  0
    .word    1722,  ((LBPR * 2 *  25) +  2) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     202,  ((LBPR * 2 *  22) + 40) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  12) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  17) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   2) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  22) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  27) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  32) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *  37) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       2,  ((LBPR * 2 *   7) +  0) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     367,  ((LBPR * 2 *  21) + 35) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word     392,  ((LBPR * 2 *  33) + 35) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word     427,  ((LBPR * 2 *  10) + 34) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word     482,  ((LBPR * 2 *   4) + 33) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word     502,  ((LBPR * 2 *  14) + 32) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_4,  0,  0,  0
    .word     577,  ((LBPR * 2 *  33) + 30) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word     657,  ((LBPR * 2 *  17) + 28) & ~3,  LBPR *   2,  loadshift_0,  ldpcbits_5,  0,  0,  0
    .word     692,  ((LBPR * 2 *   9) + 27) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_6,  0,  0,  0
    .word     712,  ((LBPR * 2 *   0) + 27) & ~3,  LBPR *   2,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word     732,  ((LBPR * 2 *  36) + 26) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word     777,  ((LBPR * 2 *   6) + 25) & ~3,  LBPR *   2,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word      97,  ((LBPR * 2 *  16) + 42) & ~3,  LBPR *   2,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word    1098,  ((LBPR * 2 *  25) + 17) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word    1323,  ((LBPR * 2 *  22) + 12) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1328,  ((LBPR * 2 *  37) + 11) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_7,  0,  0,  0
    .word    1368,  ((LBPR * 2 *  36) + 10) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_7,  0,  0,  0
    .word    1403,  ((LBPR * 2 *  17) + 10) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    1428,  ((LBPR * 2 *  26) +  9) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_3,  0,  0,  0
    .word    1453,  ((LBPR * 2 *  18) +  8) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_6,  0,  0,  0
    .word    1558,  ((LBPR * 2 *   0) +  6) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_1,  0,  0,  0
    .word    1578,  ((LBPR * 2 *   5) +  5) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_5,  0,  0,  0
    .word     318,  ((LBPR * 2 *  23) + 37) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_1,  0,  0,  0
    .word       3,  ((LBPR * 2 *  13) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  18) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  23) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  28) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *   3) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  33) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *  38) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       3,  ((LBPR * 2 *   8) +  0) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     488,  ((LBPR * 2 *  10) + 32) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     508,  ((LBPR * 2 *  30) + 32) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     608,  ((LBPR * 2 *   7) + 29) & ~3,  LBPR *   3,  loadshift_1,  ldpcbits_7,  0,  0,  0
    .word     828,  ((LBPR * 2 *  11) + 24) & ~3,  LBPR *   3,  loadshift_0,  ldpcbits_3,  0,  0,  0
    .word     873,  ((LBPR * 2 *   1) + 23) & ~3,  LBPR *   3,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word     898,  ((LBPR * 2 *  32) + 22) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_5,  0,  0,  0
    .word     923,  ((LBPR * 2 *   4) + 22) & ~3,  LBPR *   3,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    1039,  ((LBPR * 2 *  24) + 19) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_1,  0,  0,  0
    .word    1104,  ((LBPR * 2 *  39) + 17) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word    1124,  ((LBPR * 2 *  11) + 17) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_0,  0,  0,  0
    .word    1129,  ((LBPR * 2 *   2) + 16) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word    1184,  ((LBPR * 2 *   2) + 15) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word    1374,  ((LBPR * 2 *   6) + 10) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_6,  0,  0,  0
    .word    1484,  ((LBPR * 2 *   9) +  8) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word    1564,  ((LBPR * 2 *  27) +  6) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word    1704,  ((LBPR * 2 *  31) +  2) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_4,  0,  0,  0
    .word     284,  ((LBPR * 2 *  32) + 38) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_0,  0,  0,  0
    .word     294,  ((LBPR * 2 *   3) + 37) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_6,  0,  0,  0
    .word     329,  ((LBPR * 2 *  37) + 36) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     429,  ((LBPR * 2 *  19) + 34) & ~3,  LBPR *   4,  loadshift_2,  ldpcbits_3,  0,  0,  0
    .word       4,  ((LBPR * 2 *  14) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  19) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  24) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  29) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  34) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *  39) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *   4) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word       4,  ((LBPR * 2 *   9) +  0) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_0,  0,  0,  0
    .word     544,  ((LBPR * 2 *  28) + 31) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_4,  0,  0,  0
    .word     624,  ((LBPR * 2 *  18) + 29) & ~3,  LBPR *   4,  loadshift_1,  ldpcbits_4,  0,  0,  0
    .word     809,  ((LBPR * 2 *  20) + 24) & ~3,  LBPR *   4,  loadshift_0,  ldpcbits_7,  0,  0,  0
    .word     874,  ((LBPR * 2 *  12) + 23) & ~3,  LBPR *   4,  loadshift_3,  ldpcbits_2,  0,  0,  0
    .word      -1,                            -1,         999,           -1,          -1, -1, -1, -1
		

// dummy frames : MODCOD = 0 : PL scrambling has been applied

dummy_frames:	.word	dummy_frame_qpsk, dummy_frame_8psk, dummy_frame_16apsk, dummy_frame_32apsk

	.align		7

dummy_frame_32apsk:
	.byte	0,0
    .byte   25,10,31,12,25,12,31,10,25,10,25,12,31,12,31,10,31,12,31,12,25,12,25,12,31,12,25,10,31,10
    .byte   25,12,25,10,31,12,25,10,31,10,25,10,31,12,25,12,25,12,31,10,31,10,25,12,31,12,25,10,25,10
    .byte   25,10,25,12,31,10,25,10,25,12,25,12,31,12,25,12,31,12,31,10,25,10,31,10,31,10,31,12,31,12
    .byte   12,12,12,10,12,10,12,10,12,10,12,10,10,10,10,10,12,10,25,31,31,25,31,31,25,25,12,10,10,31
    .byte   25,10,12,10,31,31,12,12,12,12,31,31,10,10,25,12,10,25,12,12,31,10,12,31,10,31,31,10,12,10
    .byte   10,31,12,25,25,12,25,10,25,31,25,25,31,12,25,12,25,12,12,31,31,12,31,31,12,25,12,25,31,25
    .byte   10,25,31,12,31,31,12,31,12,31,25,31,10,10,12,31,25,12,10,31,12,10,10,10,25,12,10,12,31,31
    .byte   10,31,25,12,10,10,10,10,31,25,25,10,10,12,10,12,31,31,10,25,25,31,10,12,10,12,12,12,10,25
    .byte   31,10,31,10,25,10,25,31,31,10,25,10,25,31,12,12,12,10,10,31,10,10,12,31,25,25,31,12,12,31
    .byte   25,25,25,10,31,10,25,31,31,25,31,25,25,10,12,12,10,25,10,31,31,25,10,25,25,10,10,25,12,25
    .byte   12,31,10,10,25,10,12,12,25,25,25,10,31,31,10,31,12,12,10,25,25,12,25,10,12,12,10,31,10,25
    .byte   10,31,10,10,25,31,31,31,25,10,12,25,10,10,25,10,31,12,31,25,12,12,10,10,10,25,31,12,31,12
    .byte   12,10,31,12,31,25,10,25,12,31,12,12,10,10,10,12,31,31,25,25,10,31,31,10,10,31,10,10,12,12
    .byte   10,10,31,31,25,25,25,12,12,10,31,10,12,10,31,25,31,31,25,12,12,31,31,10,31,25,31,31,12,10
    .byte   25,12,10,10,12,25,31,31,10,25,25,12,12,10,31,31,12,25,31,12,25,10,31,10,12,12,25,31,31,12
    .byte   31,31,12,12,12,12,31,12,12,10,25,31,10,10,12,10,10,12,31,10,25,10,12,12,25,31,10,31,31,25
    .byte   25,25,12,25,31,31,10,25,25,31,31,10,31,12,25,12,25,10,25,25,12,10,10,10,12,12,25,31,12,25
    .byte   31,10,31,31,25,10,10,12,25,12,10,31,31,31,31,12,25,31,10,31,25,10,12,10,10,10,25,12,25,31
    .byte   10,31,25,10,25,12,10,10,12,12,31,10,10,12,31,31,10,25,10,10,12,12,25,31,31,31,12,10,12,31
    .byte   25,12,31,12,12,12,31,31,25,25,10,31,25,12,10,31,12,12,25,12,25,10,25,25,25,25,10,10,25,25
    .byte   25,12,12,31,12,31,25,31,10,12,31,31,25,10,25,12,10,25,31,25,31,25,31,12,31,31,10,31,12,10
    .byte   31,31,31,10,12,31,25,31,25,25,12,12,31,25,31,10,25,31,10,10,31,31,31,31,12,25,25,12,31,25
    .byte   12,10,31,10,25,25,10,31,31,10,12,31,31,10,10,12,10,25,31,25,12,10,31,31,12,10,31,10,12,25
    .byte   25,31,12,12,25,25,31,10,12,31,25,31,10,31,10,12,12,25,10,10,10,31,10,31,10,10,12,10,31,31
    .byte   10,25,12,31,25,10,25,10,25,12,10,12,12,31,10,12,10,10,25,12,31,10,10,25,25,31,10,25,10,12
    .byte   25,25,12,31,10,25,12,10,25,10,10,12,31,10,25,12,12,25,25,25,10,31,12,25,31,12,31,31,12,31
    .byte   10,25,25,31,12,12,25,31,10,12,12,25,12,10,25,12,12,31,12,10,31,10,25,25,31,12,25,10,25,10
    .byte   25,25,31,31,31,10,25,31,25,10,31,31,10,25,31,12,12,31,10,31,25,25,12,10,10,12,31,31,12,25
    .byte   31,25,10,12,25,31,25,10,12,10,25,12,10,31,10,31,10,10,10,25,25,31,12,10,25,25,31,10,12,10
    .byte   12,31,12,10,25,12,12,12,31,10,25,25,12,12,31,10,12,12,12,12,31,25,12,10,12,10,12,12,25,25
    .byte   25,12,31,10,10,25,12,12,25,25,31,25,10,12,31,12,10,31,10,25,25,25,12,25,10,31,10,12,12,25
    .byte   25,31,12,31,25,12,25,25,10,25,12,10,12,31,10,25,12,25,25,31,25,31,25,12,25,31,12,25,12,25
    .byte   10,10,10,31,10,25,31,10,12,12,10,12,25,31,31,10,31,25,10,12,12,31,12,25,10,12,10,25,12,31
    .byte   25,25,31,31,10,31,10,10,25,25,12,10,31,12,31,31,12,31,25,25,10,31,31,10,25,12,10,10,31,25
    .byte   31,12,25,31,10,10,25,10,10,31,12,12,31,25,25,10,25,12,10,10,10,25,25,10,12,25,10,12,25,31
    .byte   25,10,31,25,25,12,25,10,31,25,12,10,25,10,25,25,10,31,10,31,12,25,10,25,10,12,31,12,31,10
    .byte   10,12,12,10,12,10,25,25,31,12,25,31,25,25,25,12,25,10,25,12,25,12,31,31,31,10,10,25,31,10
    .byte   25,31,31,25,25,10,10,10,10,31,10,25,10,31,31,12,31,31,10,31,25,31,25,31,10,25,10,25,25,10
    .byte   10,10,12,12,12,12,12,12,10,31,31,25,31,10,25,12,10,12,12,12,25,10,10,25,12,31,25,25,31,12
    .byte   12,31,10,25,25,10,12,12,10,10,12,10,31,10,10,31,31,10,31,10,10,12,10,31,10,10,25,12,10,31
    .byte   12,25,31,12,12,31,25,31,25,31,31,12,25,31,12,25,25,12,10,12,31,12,10,25,10,31,12,31,12,10
    .byte   10,10,31,10,25,10,25,25,12,31,25,12,10,25,12,25,25,12,25,10,10,31,31,25,12,10,12,25,31,10
    .byte   10,10,12,31,10,31,12,25,10,31,25,10,31,10,12,31,12,10,12,31,12,31,10,31,25,25,10,25,25,12
    .byte   25,12,12,25,31,25,10,25,12,25,10,31,31,12,12,10,12,25,10,12,10,10,12,31,12,10,25,12,10,10
    .byte   31,10,31,31,25,12,12,10,10,10,12,12,12,31,25,25,10,12,12,25,10,31,31,12,12,10,25,25,10,12
    .byte   31,12,10,31,25,31,25,25,31,25,25,31,12,25,10,10,12,12,25,12,31,25,12,25,10,10,12,10,25,10
    .byte   25,31,12,10,25,25,10,25,31,10,25,10,31,31,10,31,12,10,25,25,25,10,10,25,10,31,31,12,12,12
    .byte   31,31,10,10,25,31,10,25,12,31,25,25,25,12,25,31,12,25,25,25,12,10,31,25,10,25,31,10,10,31
    .byte   31,25,25,12,25,31,10,10,25,31,10,25,12,25,25,25,25,10,25,10,25,31,31,25,10,12,25,12,25,31
    .byte   10,25,31,10,31,10,12,31,10,31,10,25,10,10,31,10,10,10,12,31,12,25,31,25,12,25,31,12,31,31
    .byte   25,10,12,25,12,12,10,10,25,10,25,31,12,25,31,31,10,10,31,31,25,25,31,31,31,10,25,25,12,10
    .byte   31,25,31,10,12,10,31,10,12,12,10,31,25,25,12,25,25,12,12,12,25,12,10,25,25,10,25,12,31,31
    .byte   10,12,12,25,12,10,25,10,12,31,12,12,31,31,12,31,25,12,31,12,31,31,10,31,10,12,10,31,25,12
    .byte   12,25,12,31,10,10,12,25,25,12,12,12,12,31,25,25,12,31,10,25,12,12,10,10,10,10,12,25,31,31
    .byte   25,10,31,12,31,31,12,25,31,12,10,25,25,10,31,25,10,25,12,25,10,10,12,12,12,31,25,25,25,12
    .byte   12,25,25,25,12,25,31,25,25,10,25,25,12,10,31,12,25,12,12,31,31,10,25,25,12,31,10,10,31,31
    .byte   31,25,31,12,25,10,12,31,12,31,10,12,10,12,10,10,12,12,25,12,12,31,25,25,25,10,10,12,25,31
    .byte   10,25,25,12,25,25,10,25,25,12,10,31,31,25,12,12,12,25,25,12,10,31,31,25,25,10,12,25,12,12
    .byte   12,10,31,10,31,31,31,12,12,12,12,10,25,31,10,12,12,25,10,10,31,12,10,31,31,31,12,25,31,25
    .byte   25,12,10,31,10,12,12,25,25,10,25,31,25,25,10,25,12,12,12,31,25,31,12,12,31,31,12,10,12,25
    .byte   31,25,12,10,10,12,10,12,10,31,10,12,12,25,12,25,25,31,12,12,10,10,12,10,31,10,31,31,31,10
    .byte   10,12,12,12,31,10,10,31,12,31,12,10,31,31,12,10,12,25,10,25,10,10,31,10,10,12,10,31,12,31
    .byte   25,12,12,10,31,10,25,31,25,25,10,12,31,10,12,10,12,25,31,25,12,10,31,12,10,12,31,25,12,12
    .byte   25,12,12,12,12,12,10,25,25,12,31,12,31,12,12,25,12,31,10,10,31,31,25,12,31,12,31,31,31,12
    .byte   10,12,31,10,25,31,12,31,31,10,12,10,31,31,12,31,12,10,31,12,12,31,12,10,12,31,25,31,12,31
    .byte   12,31,10,25,25,12,31,31,25,12,31,10,12,12,25,10,25,12,25,10,12,10,31,12,25,31,31,31,12,25
    .byte   12,12,25,31,25,12,31,12,25,12,25,10,12,31,10,10,31,10,12,25,12,25,12,10,12,25,25,25,12,25
    .byte   10,12,31,10,12,10,10,12,31,25,10,31,12,31,12,31,10,31,31,31,31,25,31,10,25,10,25,25,12,10
    .byte   10,12,10,12,25,25,10,12,31,25,31,25,31,10,10,31,31,25,25,25,25,31,10,31,31,25,10,12,25,25
    .byte   12,12,10,12,12,25,31,12,25,25,12,31,31,31,12,31,12,10,12,12,25,31,31,12,10,12,12,12,25,25
    .byte   31,31,12,12,10,10,12,10,31,12,31,31,31,12,10,25,25,10,25,10,12,25,10,10,31,12,10,12,25,31
    .byte   12,10,31,10,25,10,31,25,25,25,31,12,10,12,12,10,25,25,25,25,12,25,25,12,31,31,31,12,25,12
    .byte   10,12,10,25,10,10,10,12,12,10,10,31,12,12,25,25,31,31,31,12,25,10,31,12,31,31,31,25,12,12
    .byte   25,31,25,25,31,31,25,25,31,31,10,25,10,25,25,31,12,12,12,25,12,12,25,25,12,31,12,10,12,12
    .byte   31,25,25,12,12,10,31,12,31,12,31,31,12,10,31,10,12,10,31,31,12,31,25,10,31,12,25,25,10,10
    .byte   25,10,25,10,25,12,10,10,25,31,10,10,31,25,10,10,12,31,12,10,10,25,31,10,12,25,31,10,12,10
    .byte   12,12,12,31,25,31,10,10,12,31,10,12,10,31,31,12,25,31,10,31,10,31,12,10,25,25,12,31,10,25
    .byte   31,12,31,10,25,12,10,10,10,12,12,12,12,12,25,10,31,31,12,25,12,25,25,31,12,25,25,10,12,31
    .byte   10,10,12,31,25,25,31,10,12,31,25,31,25,31,10,12,31,31,25,31,25,12,10,12,25,31,31,12,10,12
    .byte   10,10,25,25,25,25,25,12,25,10,10,12,31,12,12,25,10,31,12,31,25,31,10,12,10,25,25,10,12,12
    .byte   12,12,31,10,25,12,12,25,31,31,10,31,10,31,10,12,12,31,10,25,10,25,10,25,25,31,31,25,10,25
    .byte   31,31,10,10,10,12,31,31,10,10,25,31,12,31,12,31,31,31,12,12,10,31,10,31,25,25,31,12,10,10
    .byte   12,31,31,31,25,25,25,25,10,12,10,31,12,10,31,10,31,31,31,10,31,12,12,12,10,12,12,31,25,10
    .byte   12,31,10,12,10,31,31,31,25,31,10,12,12,12,25,25,10,25,31,12,31,10,25,25,12,10,10,25,12,10
    .byte   25,12,10,12,10,12,25,25,12,25,25,25,25,12,10,25,25,25,12,25,10,12,25,12,12,10,12,10,10,25
    .byte   25,31,10,25,12,31,25,25,10,12,25,31,31,31,10,12,31,25,31,10,25,12,12,12,31,12,31,10,12,10
    .byte   25,12,10,12,25,25,10,25,31,10,31,12,25,31,12,25,31,10,31,12,25,10,10,31,31,31,31,12,12,31
    .byte   12,31,12,12,12,10,10,10,31,31,12,10,10,12,31,31,12,31,25,25,10,10,31,10,25,25,12,12,31,12
    .byte   10,12,12,10,25,12,12,25,12,12,10,12,25,10,31,25,12,12,12,25,25,31,31,31,31,10,10,31,31,10
    .byte   10,25,31,12,31,10,31,31,31,10,12,31,10,12,25,25,31,25,10,31,25,10,10,12,10,12,25,10,12,25
    .byte   31,10,31,31,25,10,31,12,25,12,31,25,25,31,10,25,25,10,31,12,31,31,31,12,25,12,25,10,10,25
    .byte   25,10,25,12,10,31,12,12,25,31,12,10,25,10,10,12,25,25,31,12,10,10,12,31,12,31,25,25,10,31
    .byte   25,25,25,12,12,25,12,31,12,25,10,25,31,31,25,10,10,31,12,25,25,12,12,31,25,31,12,10,31,10
    .byte   12,12,12,25,12,25,10,31,25,10,25,12,10,31,10,12,31,31,10,10,10,31,25,31,31,25,25,12,25,31
    .byte   31,25,25,31,31,12,12,10,25,31,10,31,31,10,10,25,10,10,10,10,10,31,12,25,10,12,25,12,10,25
    .byte   10,10,12,10,12,25,12,25,25,31,12,10,12,10,12,12,25,31,31,12,31,12,12,12,12,31,25,31,25,25
    .byte   10,31,25,25,25,25,12,25,12,10,10,31,10,12,10,31,12,31,25,25,25,10,31,31,10,31,31,12,10,25
    .byte   10,10,10,31,31,31,10,12,25,12,25,25,31,25,25,12,10,25,25,25,12,31,10,12,25,10,12,31,25,12
    .byte   12,25,31,25,12,12,31,25,12,10,31,25,25,12,10,12,25,12,31,10,12,31,12,31,10,31,10,10,10,25
    .byte   10,25,12,10,10,25,12,10,10,31,10,12,25,25,12,31,10,25,10,10,25,10,12,12,10,31,31,10,12,31
    .byte   31,31,31,12,10,12,12,25,10,31,31,10,25,10,25,31,31,31,12,10,25,10,31,12,10,31,10,10,31,10
    .byte   10,10,10,31,10,25,25,25,31,12,12,31,25,31,31,10,31,12,31,10,31,10,31,31,31,10,12,31,12,12
    .byte   25,25,25,25,31,10,31,12,10,10,12,10,12,25,10,12,12,31,10,31,10,31,12,31,25,12,12,10,12,10
    .byte   25,31,10,31,25,25,12,25,12,25,31,12,12,31,25,25,31,31,31,10,31,10,12,10,25,10,12,12,31,31
    .byte   12,12,25,25,10,31,25,25,12,12,31,25,25,25,25,31,12,25,12,25,12,10,31,31,12,25,31,25,12,10
    .byte   31,31,31,12,31,10,31,25,10,31,10,25,31,10,10,25,25,12,31,10,31,31,10,31,12,25,31,31,25,25
    .byte   10,12,10,12,31,12,25,25,10,12,31,25,31,12,31,10,10,10,25,31,25,12,12,31,31,10,12,31,31,31
    .byte   31,10,10,12,12,31,10,10,10,12,31,10,31,25,25,10,31,12,12,25,10,25,10,12,31,25,12,10,10,25
    .byte   25,10,31,10,31,10,10,10,25,12,31,12,10,12,31,25,10,25,31,12,10,25,25,31,25,31,10,12,12,25
    .byte   31,31,10,12,31,12,10,31,31,25,31,25,25,31,10,31,10,12,10,10,12,10,12,12,31,25,12,10,25,10
    .byte   10,12,12,31,25,12,31,10,12,10,25,25,25,10,25,12,31,31,12,31,12,25,10,25,10,12,31,10,31,10

	.align	7
 
dummy_frame_8psk:
	.byte	0,0
    .byte   0,5,3,6,0,6,3,5,0,5,0,6,3,6,3,5,3,6,3,6,0,6,0,6,3,6,0,5,3,5
    .byte   0,6,0,5,3,6,0,5,3,5,0,5,3,6,0,6,0,6,3,5,3,5,0,6,3,6,0,5,0,5
    .byte   0,5,0,6,3,5,0,5,0,6,0,6,3,6,0,6,3,6,3,5,0,5,3,5,3,5,3,6,3,6
    .byte   6,6,6,5,6,5,6,5,6,5,6,5,5,5,5,5,6,5,0,3,3,0,3,3,0,0,6,5,5,3
    .byte   0,5,6,5,3,3,6,6,6,6,3,3,5,5,0,6,5,0,6,6,3,5,6,3,5,3,3,5,6,5
    .byte   5,3,6,0,0,6,0,5,0,3,0,0,3,6,0,6,0,6,6,3,3,6,3,3,6,0,6,0,3,0
    .byte   5,0,3,6,3,3,6,3,6,3,0,3,5,5,6,3,0,6,5,3,6,5,5,5,0,6,5,6,3,3
    .byte   5,3,0,6,5,5,5,5,3,0,0,5,5,6,5,6,3,3,5,0,0,3,5,6,5,6,6,6,5,0
    .byte   3,5,3,5,0,5,0,3,3,5,0,5,0,3,6,6,6,5,5,3,5,5,6,3,0,0,3,6,6,3
    .byte   0,0,0,5,3,5,0,3,3,0,3,0,0,5,6,6,5,0,5,3,3,0,5,0,0,5,5,0,6,0
    .byte   6,3,5,5,0,5,6,6,0,0,0,5,3,3,5,3,6,6,5,0,0,6,0,5,6,6,5,3,5,0
    .byte   5,3,5,5,0,3,3,3,0,5,6,0,5,5,0,5,3,6,3,0,6,6,5,5,5,0,3,6,3,6
    .byte   6,5,3,6,3,0,5,0,6,3,6,6,5,5,5,6,3,3,0,0,5,3,3,5,5,3,5,5,6,6
    .byte   5,5,3,3,0,0,0,6,6,5,3,5,6,5,3,0,3,3,0,6,6,3,3,5,3,0,3,3,6,5
    .byte   0,6,5,5,6,0,3,3,5,0,0,6,6,5,3,3,6,0,3,6,0,5,3,5,6,6,0,3,3,6
    .byte   3,3,6,6,6,6,3,6,6,5,0,3,5,5,6,5,5,6,3,5,0,5,6,6,0,3,5,3,3,0
    .byte   0,0,6,0,3,3,5,0,0,3,3,5,3,6,0,6,0,5,0,0,6,5,5,5,6,6,0,3,6,0
    .byte   3,5,3,3,0,5,5,6,0,6,5,3,3,3,3,6,0,3,5,3,0,5,6,5,5,5,0,6,0,3
    .byte   5,3,0,5,0,6,5,5,6,6,3,5,5,6,3,3,5,0,5,5,6,6,0,3,3,3,6,5,6,3
    .byte   0,6,3,6,6,6,3,3,0,0,5,3,0,6,5,3,6,6,0,6,0,5,0,0,0,0,5,5,0,0
    .byte   0,6,6,3,6,3,0,3,5,6,3,3,0,5,0,6,5,0,3,0,3,0,3,6,3,3,5,3,6,5
    .byte   3,3,3,5,6,3,0,3,0,0,6,6,3,0,3,5,0,3,5,5,3,3,3,3,6,0,0,6,3,0
    .byte   6,5,3,5,0,0,5,3,3,5,6,3,3,5,5,6,5,0,3,0,6,5,3,3,6,5,3,5,6,0
    .byte   0,3,6,6,0,0,3,5,6,3,0,3,5,3,5,6,6,0,5,5,5,3,5,3,5,5,6,5,3,3
    .byte   5,0,6,3,0,5,0,5,0,6,5,6,6,3,5,6,5,5,0,6,3,5,5,0,0,3,5,0,5,6
    .byte   0,0,6,3,5,0,6,5,0,5,5,6,3,5,0,6,6,0,0,0,5,3,6,0,3,6,3,3,6,3
    .byte   5,0,0,3,6,6,0,3,5,6,6,0,6,5,0,6,6,3,6,5,3,5,0,0,3,6,0,5,0,5
    .byte   0,0,3,3,3,5,0,3,0,5,3,3,5,0,3,6,6,3,5,3,0,0,6,5,5,6,3,3,6,0
    .byte   3,0,5,6,0,3,0,5,6,5,0,6,5,3,5,3,5,5,5,0,0,3,6,5,0,0,3,5,6,5
    .byte   6,3,6,5,0,6,6,6,3,5,0,0,6,6,3,5,6,6,6,6,3,0,6,5,6,5,6,6,0,0
    .byte   0,6,3,5,5,0,6,6,0,0,3,0,5,6,3,6,5,3,5,0,0,0,6,0,5,3,5,6,6,0
    .byte   0,3,6,3,0,6,0,0,5,0,6,5,6,3,5,0,6,0,0,3,0,3,0,6,0,3,6,0,6,0
    .byte   5,5,5,3,5,0,3,5,6,6,5,6,0,3,3,5,3,0,5,6,6,3,6,0,5,6,5,0,6,3
    .byte   0,0,3,3,5,3,5,5,0,0,6,5,3,6,3,3,6,3,0,0,5,3,3,5,0,6,5,5,3,0
    .byte   3,6,0,3,5,5,0,5,5,3,6,6,3,0,0,5,0,6,5,5,5,0,0,5,6,0,5,6,0,3
    .byte   0,5,3,0,0,6,0,5,3,0,6,5,0,5,0,0,5,3,5,3,6,0,5,0,5,6,3,6,3,5
    .byte   5,6,6,5,6,5,0,0,3,6,0,3,0,0,0,6,0,5,0,6,0,6,3,3,3,5,5,0,3,5
    .byte   0,3,3,0,0,5,5,5,5,3,5,0,5,3,3,6,3,3,5,3,0,3,0,3,5,0,5,0,0,5
    .byte   5,5,6,6,6,6,6,6,5,3,3,0,3,5,0,6,5,6,6,6,0,5,5,0,6,3,0,0,3,6
    .byte   6,3,5,0,0,5,6,6,5,5,6,5,3,5,5,3,3,5,3,5,5,6,5,3,5,5,0,6,5,3
    .byte   6,0,3,6,6,3,0,3,0,3,3,6,0,3,6,0,0,6,5,6,3,6,5,0,5,3,6,3,6,5
    .byte   5,5,3,5,0,5,0,0,6,3,0,6,5,0,6,0,0,6,0,5,5,3,3,0,6,5,6,0,3,5
    .byte   5,5,6,3,5,3,6,0,5,3,0,5,3,5,6,3,6,5,6,3,6,3,5,3,0,0,5,0,0,6
    .byte   0,6,6,0,3,0,5,0,6,0,5,3,3,6,6,5,6,0,5,6,5,5,6,3,6,5,0,6,5,5
    .byte   3,5,3,3,0,6,6,5,5,5,6,6,6,3,0,0,5,6,6,0,5,3,3,6,6,5,0,0,5,6
    .byte   3,6,5,3,0,3,0,0,3,0,0,3,6,0,5,5,6,6,0,6,3,0,6,0,5,5,6,5,0,5
    .byte   0,3,6,5,0,0,5,0,3,5,0,5,3,3,5,3,6,5,0,0,0,5,5,0,5,3,3,6,6,6
    .byte   3,3,5,5,0,3,5,0,6,3,0,0,0,6,0,3,6,0,0,0,6,5,3,0,5,0,3,5,5,3
    .byte   3,0,0,6,0,3,5,5,0,3,5,0,6,0,0,0,0,5,0,5,0,3,3,0,5,6,0,6,0,3
    .byte   5,0,3,5,3,5,6,3,5,3,5,0,5,5,3,5,5,5,6,3,6,0,3,0,6,0,3,6,3,3
    .byte   0,5,6,0,6,6,5,5,0,5,0,3,6,0,3,3,5,5,3,3,0,0,3,3,3,5,0,0,6,5
    .byte   3,0,3,5,6,5,3,5,6,6,5,3,0,0,6,0,0,6,6,6,0,6,5,0,0,5,0,6,3,3
    .byte   5,6,6,0,6,5,0,5,6,3,6,6,3,3,6,3,0,6,3,6,3,3,5,3,5,6,5,3,0,6
    .byte   6,0,6,3,5,5,6,0,0,6,6,6,6,3,0,0,6,3,5,0,6,6,5,5,5,5,6,0,3,3
    .byte   0,5,3,6,3,3,6,0,3,6,5,0,0,5,3,0,5,0,6,0,5,5,6,6,6,3,0,0,0,6
    .byte   6,0,0,0,6,0,3,0,0,5,0,0,6,5,3,6,0,6,6,3,3,5,0,0,6,3,5,5,3,3
    .byte   3,0,3,6,0,5,6,3,6,3,5,6,5,6,5,5,6,6,0,6,6,3,0,0,0,5,5,6,0,3
    .byte   5,0,0,6,0,0,5,0,0,6,5,3,3,0,6,6,6,0,0,6,5,3,3,0,0,5,6,0,6,6
    .byte   6,5,3,5,3,3,3,6,6,6,6,5,0,3,5,6,6,0,5,5,3,6,5,3,3,3,6,0,3,0
    .byte   0,6,5,3,5,6,6,0,0,5,0,3,0,0,5,0,6,6,6,3,0,3,6,6,3,3,6,5,6,0
    .byte   3,0,6,5,5,6,5,6,5,3,5,6,6,0,6,0,0,3,6,6,5,5,6,5,3,5,3,3,3,5
    .byte   5,6,6,6,3,5,5,3,6,3,6,5,3,3,6,5,6,0,5,0,5,5,3,5,5,6,5,3,6,3
    .byte   0,6,6,5,3,5,0,3,0,0,5,6,3,5,6,5,6,0,3,0,6,5,3,6,5,6,3,0,6,6
    .byte   0,6,6,6,6,6,5,0,0,6,3,6,3,6,6,0,6,3,5,5,3,3,0,6,3,6,3,3,3,6
    .byte   5,6,3,5,0,3,6,3,3,5,6,5,3,3,6,3,6,5,3,6,6,3,6,5,6,3,0,3,6,3
    .byte   6,3,5,0,0,6,3,3,0,6,3,5,6,6,0,5,0,6,0,5,6,5,3,6,0,3,3,3,6,0
    .byte   6,6,0,3,0,6,3,6,0,6,0,5,6,3,5,5,3,5,6,0,6,0,6,5,6,0,0,0,6,0
    .byte   5,6,3,5,6,5,5,6,3,0,5,3,6,3,6,3,5,3,3,3,3,0,3,5,0,5,0,0,6,5
    .byte   5,6,5,6,0,0,5,6,3,0,3,0,3,5,5,3,3,0,0,0,0,3,5,3,3,0,5,6,0,0
    .byte   6,6,5,6,6,0,3,6,0,0,6,3,3,3,6,3,6,5,6,6,0,3,3,6,5,6,6,6,0,0
    .byte   3,3,6,6,5,5,6,5,3,6,3,3,3,6,5,0,0,5,0,5,6,0,5,5,3,6,5,6,0,3
    .byte   6,5,3,5,0,5,3,0,0,0,3,6,5,6,6,5,0,0,0,0,6,0,0,6,3,3,3,6,0,6
    .byte   5,6,5,0,5,5,5,6,6,5,5,3,6,6,0,0,3,3,3,6,0,5,3,6,3,3,3,0,6,6
    .byte   0,3,0,0,3,3,0,0,3,3,5,0,5,0,0,3,6,6,6,0,6,6,0,0,6,3,6,5,6,6
    .byte   3,0,0,6,6,5,3,6,3,6,3,3,6,5,3,5,6,5,3,3,6,3,0,5,3,6,0,0,5,5
    .byte   0,5,0,5,0,6,5,5,0,3,5,5,3,0,5,5,6,3,6,5,5,0,3,5,6,0,3,5,6,5
    .byte   6,6,6,3,0,3,5,5,6,3,5,6,5,3,3,6,0,3,5,3,5,3,6,5,0,0,6,3,5,0
    .byte   3,6,3,5,0,6,5,5,5,6,6,6,6,6,0,5,3,3,6,0,6,0,0,3,6,0,0,5,6,3
    .byte   5,5,6,3,0,0,3,5,6,3,0,3,0,3,5,6,3,3,0,3,0,6,5,6,0,3,3,6,5,6
    .byte   5,5,0,0,0,0,0,6,0,5,5,6,3,6,6,0,5,3,6,3,0,3,5,6,5,0,0,5,6,6
    .byte   6,6,3,5,0,6,6,0,3,3,5,3,5,3,5,6,6,3,5,0,5,0,5,0,0,3,3,0,5,0
    .byte   3,3,5,5,5,6,3,3,5,5,0,3,6,3,6,3,3,3,6,6,5,3,5,3,0,0,3,6,5,5
    .byte   6,3,3,3,0,0,0,0,5,6,5,3,6,5,3,5,3,3,3,5,3,6,6,6,5,6,6,3,0,5
    .byte   6,3,5,6,5,3,3,3,0,3,5,6,6,6,0,0,5,0,3,6,3,5,0,0,6,5,5,0,6,5
    .byte   0,6,5,6,5,6,0,0,6,0,0,0,0,6,5,0,0,0,6,0,5,6,0,6,6,5,6,5,5,0
    .byte   0,3,5,0,6,3,0,0,5,6,0,3,3,3,5,6,3,0,3,5,0,6,6,6,3,6,3,5,6,5
    .byte   0,6,5,6,0,0,5,0,3,5,3,6,0,3,6,0,3,5,3,6,0,5,5,3,3,3,3,6,6,3
    .byte   6,3,6,6,6,5,5,5,3,3,6,5,5,6,3,3,6,3,0,0,5,5,3,5,0,0,6,6,3,6
    .byte   5,6,6,5,0,6,6,0,6,6,5,6,0,5,3,0,6,6,6,0,0,3,3,3,3,5,5,3,3,5
    .byte   5,0,3,6,3,5,3,3,3,5,6,3,5,6,0,0,3,0,5,3,0,5,5,6,5,6,0,5,6,0
    .byte   3,5,3,3,0,5,3,6,0,6,3,0,0,3,5,0,0,5,3,6,3,3,3,6,0,6,0,5,5,0
    .byte   0,5,0,6,5,3,6,6,0,3,6,5,0,5,5,6,0,0,3,6,5,5,6,3,6,3,0,0,5,3
    .byte   0,0,0,6,6,0,6,3,6,0,5,0,3,3,0,5,5,3,6,0,0,6,6,3,0,3,6,5,3,5
    .byte   6,6,6,0,6,0,5,3,0,5,0,6,5,3,5,6,3,3,5,5,5,3,0,3,3,0,0,6,0,3
    .byte   3,0,0,3,3,6,6,5,0,3,5,3,3,5,5,0,5,5,5,5,5,3,6,0,5,6,0,6,5,0
    .byte   5,5,6,5,6,0,6,0,0,3,6,5,6,5,6,6,0,3,3,6,3,6,6,6,6,3,0,3,0,0
    .byte   5,3,0,0,0,0,6,0,6,5,5,3,5,6,5,3,6,3,0,0,0,5,3,3,5,3,3,6,5,0
    .byte   5,5,5,3,3,3,5,6,0,6,0,0,3,0,0,6,5,0,0,0,6,3,5,6,0,5,6,3,0,6
    .byte   6,0,3,0,6,6,3,0,6,5,3,0,0,6,5,6,0,6,3,5,6,3,6,3,5,3,5,5,5,0
    .byte   5,0,6,5,5,0,6,5,5,3,5,6,0,0,6,3,5,0,5,5,0,5,6,6,5,3,3,5,6,3
    .byte   3,3,3,6,5,6,6,0,5,3,3,5,0,5,0,3,3,3,6,5,0,5,3,6,5,3,5,5,3,5
    .byte   5,5,5,3,5,0,0,0,3,6,6,3,0,3,3,5,3,6,3,5,3,5,3,3,3,5,6,3,6,6
    .byte   0,0,0,0,3,5,3,6,5,5,6,5,6,0,5,6,6,3,5,3,5,3,6,3,0,6,6,5,6,5
    .byte   0,3,5,3,0,0,6,0,6,0,3,6,6,3,0,0,3,3,3,5,3,5,6,5,0,5,6,6,3,3
    .byte   6,6,0,0,5,3,0,0,6,6,3,0,0,0,0,3,6,0,6,0,6,5,3,3,6,0,3,0,6,5
    .byte   3,3,3,6,3,5,3,0,5,3,5,0,3,5,5,0,0,6,3,5,3,3,5,3,6,0,3,3,0,0
    .byte   5,6,5,6,3,6,0,0,5,6,3,0,3,6,3,5,5,5,0,3,0,6,6,3,3,5,6,3,3,3
    .byte   3,5,5,6,6,3,5,5,5,6,3,5,3,0,0,5,3,6,6,0,5,0,5,6,3,0,6,5,5,0
    .byte   0,5,3,5,3,5,5,5,0,6,3,6,5,6,3,0,5,0,3,6,5,0,0,3,0,3,5,6,6,0
    .byte   3,3,5,6,3,6,5,3,3,0,3,0,0,3,5,3,5,6,5,5,6,5,6,6,3,0,6,5,0,5
    .byte   5,6,6,3,0,6,3,5,6,5,0,0,0,5,0,6,3,3,6,3,6,0,5,0,5,6,3,5,3,5

	.align	7
 
dummy_frame_qpsk:	
dummy_frame_16apsk:
	.byte	0,0
    .byte   0,1,3,2,0,2,3,1,0,1,0,2,3,2,3,1,3,2,3,2,0,2,0,2,3,2,0,1,3,1
    .byte   0,2,0,1,3,2,0,1,3,1,0,1,3,2,0,2,0,2,3,1,3,1,0,2,3,2,0,1,0,1
    .byte   0,1,0,2,3,1,0,1,0,2,0,2,3,2,0,2,3,2,3,1,0,1,3,1,3,1,3,2,3,2
    .byte   2,2,2,1,2,1,2,1,2,1,2,1,1,1,1,1,2,1,0,3,3,0,3,3,0,0,2,1,1,3
    .byte   0,1,2,1,3,3,2,2,2,2,3,3,1,1,0,2,1,0,2,2,3,1,2,3,1,3,3,1,2,1
    .byte   1,3,2,0,0,2,0,1,0,3,0,0,3,2,0,2,0,2,2,3,3,2,3,3,2,0,2,0,3,0
    .byte   1,0,3,2,3,3,2,3,2,3,0,3,1,1,2,3,0,2,1,3,2,1,1,1,0,2,1,2,3,3
    .byte   1,3,0,2,1,1,1,1,3,0,0,1,1,2,1,2,3,3,1,0,0,3,1,2,1,2,2,2,1,0
    .byte   3,1,3,1,0,1,0,3,3,1,0,1,0,3,2,2,2,1,1,3,1,1,2,3,0,0,3,2,2,3
    .byte   0,0,0,1,3,1,0,3,3,0,3,0,0,1,2,2,1,0,1,3,3,0,1,0,0,1,1,0,2,0
    .byte   2,3,1,1,0,1,2,2,0,0,0,1,3,3,1,3,2,2,1,0,0,2,0,1,2,2,1,3,1,0
    .byte   1,3,1,1,0,3,3,3,0,1,2,0,1,1,0,1,3,2,3,0,2,2,1,1,1,0,3,2,3,2
    .byte   2,1,3,2,3,0,1,0,2,3,2,2,1,1,1,2,3,3,0,0,1,3,3,1,1,3,1,1,2,2
    .byte   1,1,3,3,0,0,0,2,2,1,3,1,2,1,3,0,3,3,0,2,2,3,3,1,3,0,3,3,2,1
    .byte   0,2,1,1,2,0,3,3,1,0,0,2,2,1,3,3,2,0,3,2,0,1,3,1,2,2,0,3,3,2
    .byte   3,3,2,2,2,2,3,2,2,1,0,3,1,1,2,1,1,2,3,1,0,1,2,2,0,3,1,3,3,0
    .byte   0,0,2,0,3,3,1,0,0,3,3,1,3,2,0,2,0,1,0,0,2,1,1,1,2,2,0,3,2,0
    .byte   3,1,3,3,0,1,1,2,0,2,1,3,3,3,3,2,0,3,1,3,0,1,2,1,1,1,0,2,0,3
    .byte   1,3,0,1,0,2,1,1,2,2,3,1,1,2,3,3,1,0,1,1,2,2,0,3,3,3,2,1,2,3
    .byte   0,2,3,2,2,2,3,3,0,0,1,3,0,2,1,3,2,2,0,2,0,1,0,0,0,0,1,1,0,0
    .byte   0,2,2,3,2,3,0,3,1,2,3,3,0,1,0,2,1,0,3,0,3,0,3,2,3,3,1,3,2,1
    .byte   3,3,3,1,2,3,0,3,0,0,2,2,3,0,3,1,0,3,1,1,3,3,3,3,2,0,0,2,3,0
    .byte   2,1,3,1,0,0,1,3,3,1,2,3,3,1,1,2,1,0,3,0,2,1,3,3,2,1,3,1,2,0
    .byte   0,3,2,2,0,0,3,1,2,3,0,3,1,3,1,2,2,0,1,1,1,3,1,3,1,1,2,1,3,3
    .byte   1,0,2,3,0,1,0,1,0,2,1,2,2,3,1,2,1,1,0,2,3,1,1,0,0,3,1,0,1,2
    .byte   0,0,2,3,1,0,2,1,0,1,1,2,3,1,0,2,2,0,0,0,1,3,2,0,3,2,3,3,2,3
    .byte   1,0,0,3,2,2,0,3,1,2,2,0,2,1,0,2,2,3,2,1,3,1,0,0,3,2,0,1,0,1
    .byte   0,0,3,3,3,1,0,3,0,1,3,3,1,0,3,2,2,3,1,3,0,0,2,1,1,2,3,3,2,0
    .byte   3,0,1,2,0,3,0,1,2,1,0,2,1,3,1,3,1,1,1,0,0,3,2,1,0,0,3,1,2,1
    .byte   2,3,2,1,0,2,2,2,3,1,0,0,2,2,3,1,2,2,2,2,3,0,2,1,2,1,2,2,0,0
    .byte   0,2,3,1,1,0,2,2,0,0,3,0,1,2,3,2,1,3,1,0,0,0,2,0,1,3,1,2,2,0
    .byte   0,3,2,3,0,2,0,0,1,0,2,1,2,3,1,0,2,0,0,3,0,3,0,2,0,3,2,0,2,0
    .byte   1,1,1,3,1,0,3,1,2,2,1,2,0,3,3,1,3,0,1,2,2,3,2,0,1,2,1,0,2,3
    .byte   0,0,3,3,1,3,1,1,0,0,2,1,3,2,3,3,2,3,0,0,1,3,3,1,0,2,1,1,3,0
    .byte   3,2,0,3,1,1,0,1,1,3,2,2,3,0,0,1,0,2,1,1,1,0,0,1,2,0,1,2,0,3
    .byte   0,1,3,0,0,2,0,1,3,0,2,1,0,1,0,0,1,3,1,3,2,0,1,0,1,2,3,2,3,1
    .byte   1,2,2,1,2,1,0,0,3,2,0,3,0,0,0,2,0,1,0,2,0,2,3,3,3,1,1,0,3,1
    .byte   0,3,3,0,0,1,1,1,1,3,1,0,1,3,3,2,3,3,1,3,0,3,0,3,1,0,1,0,0,1
    .byte   1,1,2,2,2,2,2,2,1,3,3,0,3,1,0,2,1,2,2,2,0,1,1,0,2,3,0,0,3,2
    .byte   2,3,1,0,0,1,2,2,1,1,2,1,3,1,1,3,3,1,3,1,1,2,1,3,1,1,0,2,1,3
    .byte   2,0,3,2,2,3,0,3,0,3,3,2,0,3,2,0,0,2,1,2,3,2,1,0,1,3,2,3,2,1
    .byte   1,1,3,1,0,1,0,0,2,3,0,2,1,0,2,0,0,2,0,1,1,3,3,0,2,1,2,0,3,1
    .byte   1,1,2,3,1,3,2,0,1,3,0,1,3,1,2,3,2,1,2,3,2,3,1,3,0,0,1,0,0,2
    .byte   0,2,2,0,3,0,1,0,2,0,1,3,3,2,2,1,2,0,1,2,1,1,2,3,2,1,0,2,1,1
    .byte   3,1,3,3,0,2,2,1,1,1,2,2,2,3,0,0,1,2,2,0,1,3,3,2,2,1,0,0,1,2
    .byte   3,2,1,3,0,3,0,0,3,0,0,3,2,0,1,1,2,2,0,2,3,0,2,0,1,1,2,1,0,1
    .byte   0,3,2,1,0,0,1,0,3,1,0,1,3,3,1,3,2,1,0,0,0,1,1,0,1,3,3,2,2,2
    .byte   3,3,1,1,0,3,1,0,2,3,0,0,0,2,0,3,2,0,0,0,2,1,3,0,1,0,3,1,1,3
    .byte   3,0,0,2,0,3,1,1,0,3,1,0,2,0,0,0,0,1,0,1,0,3,3,0,1,2,0,2,0,3
    .byte   1,0,3,1,3,1,2,3,1,3,1,0,1,1,3,1,1,1,2,3,2,0,3,0,2,0,3,2,3,3
    .byte   0,1,2,0,2,2,1,1,0,1,0,3,2,0,3,3,1,1,3,3,0,0,3,3,3,1,0,0,2,1
    .byte   3,0,3,1,2,1,3,1,2,2,1,3,0,0,2,0,0,2,2,2,0,2,1,0,0,1,0,2,3,3
    .byte   1,2,2,0,2,1,0,1,2,3,2,2,3,3,2,3,0,2,3,2,3,3,1,3,1,2,1,3,0,2
    .byte   2,0,2,3,1,1,2,0,0,2,2,2,2,3,0,0,2,3,1,0,2,2,1,1,1,1,2,0,3,3
    .byte   0,1,3,2,3,3,2,0,3,2,1,0,0,1,3,0,1,0,2,0,1,1,2,2,2,3,0,0,0,2
    .byte   2,0,0,0,2,0,3,0,0,1,0,0,2,1,3,2,0,2,2,3,3,1,0,0,2,3,1,1,3,3
    .byte   3,0,3,2,0,1,2,3,2,3,1,2,1,2,1,1,2,2,0,2,2,3,0,0,0,1,1,2,0,3
    .byte   1,0,0,2,0,0,1,0,0,2,1,3,3,0,2,2,2,0,0,2,1,3,3,0,0,1,2,0,2,2
    .byte   2,1,3,1,3,3,3,2,2,2,2,1,0,3,1,2,2,0,1,1,3,2,1,3,3,3,2,0,3,0
    .byte   0,2,1,3,1,2,2,0,0,1,0,3,0,0,1,0,2,2,2,3,0,3,2,2,3,3,2,1,2,0
    .byte   3,0,2,1,1,2,1,2,1,3,1,2,2,0,2,0,0,3,2,2,1,1,2,1,3,1,3,3,3,1
    .byte   1,2,2,2,3,1,1,3,2,3,2,1,3,3,2,1,2,0,1,0,1,1,3,1,1,2,1,3,2,3
    .byte   0,2,2,1,3,1,0,3,0,0,1,2,3,1,2,1,2,0,3,0,2,1,3,2,1,2,3,0,2,2
    .byte   0,2,2,2,2,2,1,0,0,2,3,2,3,2,2,0,2,3,1,1,3,3,0,2,3,2,3,3,3,2
    .byte   1,2,3,1,0,3,2,3,3,1,2,1,3,3,2,3,2,1,3,2,2,3,2,1,2,3,0,3,2,3
    .byte   2,3,1,0,0,2,3,3,0,2,3,1,2,2,0,1,0,2,0,1,2,1,3,2,0,3,3,3,2,0
    .byte   2,2,0,3,0,2,3,2,0,2,0,1,2,3,1,1,3,1,2,0,2,0,2,1,2,0,0,0,2,0
    .byte   1,2,3,1,2,1,1,2,3,0,1,3,2,3,2,3,1,3,3,3,3,0,3,1,0,1,0,0,2,1
    .byte   1,2,1,2,0,0,1,2,3,0,3,0,3,1,1,3,3,0,0,0,0,3,1,3,3,0,1,2,0,0
    .byte   2,2,1,2,2,0,3,2,0,0,2,3,3,3,2,3,2,1,2,2,0,3,3,2,1,2,2,2,0,0
    .byte   3,3,2,2,1,1,2,1,3,2,3,3,3,2,1,0,0,1,0,1,2,0,1,1,3,2,1,2,0,3
    .byte   2,1,3,1,0,1,3,0,0,0,3,2,1,2,2,1,0,0,0,0,2,0,0,2,3,3,3,2,0,2
    .byte   1,2,1,0,1,1,1,2,2,1,1,3,2,2,0,0,3,3,3,2,0,1,3,2,3,3,3,0,2,2
    .byte   0,3,0,0,3,3,0,0,3,3,1,0,1,0,0,3,2,2,2,0,2,2,0,0,2,3,2,1,2,2
    .byte   3,0,0,2,2,1,3,2,3,2,3,3,2,1,3,1,2,1,3,3,2,3,0,1,3,2,0,0,1,1
    .byte   0,1,0,1,0,2,1,1,0,3,1,1,3,0,1,1,2,3,2,1,1,0,3,1,2,0,3,1,2,1
    .byte   2,2,2,3,0,3,1,1,2,3,1,2,1,3,3,2,0,3,1,3,1,3,2,1,0,0,2,3,1,0
    .byte   3,2,3,1,0,2,1,1,1,2,2,2,2,2,0,1,3,3,2,0,2,0,0,3,2,0,0,1,2,3
    .byte   1,1,2,3,0,0,3,1,2,3,0,3,0,3,1,2,3,3,0,3,0,2,1,2,0,3,3,2,1,2
    .byte   1,1,0,0,0,0,0,2,0,1,1,2,3,2,2,0,1,3,2,3,0,3,1,2,1,0,0,1,2,2
    .byte   2,2,3,1,0,2,2,0,3,3,1,3,1,3,1,2,2,3,1,0,1,0,1,0,0,3,3,0,1,0
    .byte   3,3,1,1,1,2,3,3,1,1,0,3,2,3,2,3,3,3,2,2,1,3,1,3,0,0,3,2,1,1
    .byte   2,3,3,3,0,0,0,0,1,2,1,3,2,1,3,1,3,3,3,1,3,2,2,2,1,2,2,3,0,1
    .byte   2,3,1,2,1,3,3,3,0,3,1,2,2,2,0,0,1,0,3,2,3,1,0,0,2,1,1,0,2,1
    .byte   0,2,1,2,1,2,0,0,2,0,0,0,0,2,1,0,0,0,2,0,1,2,0,2,2,1,2,1,1,0
    .byte   0,3,1,0,2,3,0,0,1,2,0,3,3,3,1,2,3,0,3,1,0,2,2,2,3,2,3,1,2,1
    .byte   0,2,1,2,0,0,1,0,3,1,3,2,0,3,2,0,3,1,3,2,0,1,1,3,3,3,3,2,2,3
    .byte   2,3,2,2,2,1,1,1,3,3,2,1,1,2,3,3,2,3,0,0,1,1,3,1,0,0,2,2,3,2
    .byte   1,2,2,1,0,2,2,0,2,2,1,2,0,1,3,0,2,2,2,0,0,3,3,3,3,1,1,3,3,1
    .byte   1,0,3,2,3,1,3,3,3,1,2,3,1,2,0,0,3,0,1,3,0,1,1,2,1,2,0,1,2,0
    .byte   3,1,3,3,0,1,3,2,0,2,3,0,0,3,1,0,0,1,3,2,3,3,3,2,0,2,0,1,1,0
    .byte   0,1,0,2,1,3,2,2,0,3,2,1,0,1,1,2,0,0,3,2,1,1,2,3,2,3,0,0,1,3
    .byte   0,0,0,2,2,0,2,3,2,0,1,0,3,3,0,1,1,3,2,0,0,2,2,3,0,3,2,1,3,1
    .byte   2,2,2,0,2,0,1,3,0,1,0,2,1,3,1,2,3,3,1,1,1,3,0,3,3,0,0,2,0,3
    .byte   3,0,0,3,3,2,2,1,0,3,1,3,3,1,1,0,1,1,1,1,1,3,2,0,1,2,0,2,1,0
    .byte   1,1,2,1,2,0,2,0,0,3,2,1,2,1,2,2,0,3,3,2,3,2,2,2,2,3,0,3,0,0
    .byte   1,3,0,0,0,0,2,0,2,1,1,3,1,2,1,3,2,3,0,0,0,1,3,3,1,3,3,2,1,0
    .byte   1,1,1,3,3,3,1,2,0,2,0,0,3,0,0,2,1,0,0,0,2,3,1,2,0,1,2,3,0,2
    .byte   2,0,3,0,2,2,3,0,2,1,3,0,0,2,1,2,0,2,3,1,2,3,2,3,1,3,1,1,1,0
    .byte   1,0,2,1,1,0,2,1,1,3,1,2,0,0,2,3,1,0,1,1,0,1,2,2,1,3,3,1,2,3
    .byte   3,3,3,2,1,2,2,0,1,3,3,1,0,1,0,3,3,3,2,1,0,1,3,2,1,3,1,1,3,1
    .byte   1,1,1,3,1,0,0,0,3,2,2,3,0,3,3,1,3,2,3,1,3,1,3,3,3,1,2,3,2,2
    .byte   0,0,0,0,3,1,3,2,1,1,2,1,2,0,1,2,2,3,1,3,1,3,2,3,0,2,2,1,2,1
    .byte   0,3,1,3,0,0,2,0,2,0,3,2,2,3,0,0,3,3,3,1,3,1,2,1,0,1,2,2,3,3
    .byte   2,2,0,0,1,3,0,0,2,2,3,0,0,0,0,3,2,0,2,0,2,1,3,3,2,0,3,0,2,1
    .byte   3,3,3,2,3,1,3,0,1,3,1,0,3,1,1,0,0,2,3,1,3,3,1,3,2,0,3,3,0,0
    .byte   1,2,1,2,3,2,0,0,1,2,3,0,3,2,3,1,1,1,0,3,0,2,2,3,3,1,2,3,3,3
    .byte   3,1,1,2,2,3,1,1,1,2,3,1,3,0,0,1,3,2,2,0,1,0,1,2,3,0,2,1,1,0
    .byte   0,1,3,1,3,1,1,1,0,2,3,2,1,2,3,0,1,0,3,2,1,0,0,3,0,3,1,2,2,0
    .byte   3,3,1,2,3,2,1,3,3,0,3,0,0,3,1,3,1,2,1,1,2,1,2,2,3,0,2,1,0,1
    .byte   1,2,2,3,0,2,3,1,2,1,0,0,0,1,0,2,3,3,2,3,2,0,1,0,1,2,3,1,3,1
dummy_frame_qpsk_end:

	.align	2	
	
	.end


